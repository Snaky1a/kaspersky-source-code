enum Id {
	Eof                = 0,

	ScanerError        =  lx_ScanerError,

	And                =  lx_And,
	As                 =  lx_As,
	BitAnd             =  lx_BitAnd,
	BitInv             =  lx_BitInv,
	BitOr              =  lx_BitOr,
	BitXor             =  lx_BitXor,
	Character          =  lx_Character,
	Comma              =  lx_Comma,
	Component          =  lx_Component,
	Const              =  lx_Const,
	Div                =  lx_Div,
	Dot                =  lx_Dot,
	Enum               =  lx_Enum,
	Eq                 =  lx_Eq,
	Float              =  lx_Float,
	Ge                 =  lx_Ge,
	Gt                 =  lx_Gt,
	In                 =  lx_In,
	Interface          =  lx_Interface,
	InterfaceId        =  lx_InterfaceId,
	ImportEnd          =  lx_ImportEnd,
	ImportStart        =  lx_ImportStart,
	Le                 =  lx_Le,
	LeftBrace          =  lx_lBr,
	LeftParenthes      =  lx_lPt,
	Let                =  lx_Let,
	Lt                 =  lx_Lt,
	Method             =  lx_Method,
	Minus              =  lx_Minus,
	Mul                =  lx_Mul,
	Name               =  lx_Name,
	Namespace          =  lx_Namespace,
	Ne                 =  lx_Ne,
	Neg                =  lx_Neg,
	Not                =  lx_Not,
	NumberFloat        =  lx_NumberFloat,
	NumberInt          =  lx_NumberInt,
	Or                 =  lx_Or,
	Out                =  lx_Out,
	Plus               =  lx_Plus,
	Requires           =  lx_Requires,
	RightBrace         =  lx_rBr,
	RightParenthes     =  lx_rPt,
	S16                =  lx_S16,
	S32                =  lx_S32,
	S64                =  lx_S64,
	S8                 =  lx_S8,
	Semicolon          =  lx_Semicolon,
	//Sequence           =  lx_Sequence,
	ShiftLeft          =  lx_ShiftLeft,
	ShiftRight         =  lx_ShiftRight,
	String             =  lx_String,
	Struct             =  lx_Struct,
	TripleDot          =  lx_TripleDot,
	Typedef            =  lx_Typedef,
	Forward            =  lx_Forward,
	U16                =  lx_U16,
	U32                =  lx_U32,
	U64                =  lx_U64,
	U8                 =  lx_U8,
	Vendor             =  lx_Vendor,
	Version            =  lx_Version,
	//While              =  lx_While,
	//Else               =  lx_Else,

	C_Type_Name        =  lx_C_Type_Name,
	Cpp_Type_Name      =  lx_Cpp_Type_Name,
	Access             =  lx_Access,
	Getter             =  lx_Getter,
	Setter             =  lx_Setter,
	Member_Ref         =  lx_Member_Ref,
	LeftSquareBracket  =  lx_lsBr,
	RightSquareBracket =  lx_rsBr,

	Read               =  lx_Read,
	Write              =  lx_Write,
	Write_On_Init      =  lx_Write_On_Init,

	Add                =  lx_Add,
	Prop               =  lx_Prop,

	Message            =  lx_Message,
	Message_Cls        =  lx_Message_Cls,

	Error              =  lx_Error,
	Implementation     =  lx_Implementation,
	SysMethod          =  lx_SysMethod,
	Colon              =  lx_Colon,
	Shared             =  lx_Shared,

	Data               =  lx_Data,

	Extend             =  lx_Extend,

	Void               =  lx_Void,

	Comment            =  lx_Comment,
	Comment_Ex         =  lx_Comment_Ex,
	Warning            =  lx_Warning,
	Mnemonic           =  lx_Mnemonic,
	Autostart          =  lx_Autostart,
	Output_Header_File =  lx_Output_Header_File,
	Output_Source_File =  lx_Output_Source_File,
	Include_Files      =  lx_Include_Files,

	Codepage           =  lx_Codepage,

	QuotedString       =  lx_QuotedString,
	True               =  lx_True,
	False              =  lx_False,

	Import             =  lx_Import,
	From               =  lx_From,

	UnknownPropGetter  =  lx_UnknownPropGetter,
	UnknownPropSetter  =  lx_UnknownPropSetter,
	Optional           =  lx_Optional,
	BackSlash          =  lx_BackSlash
};
