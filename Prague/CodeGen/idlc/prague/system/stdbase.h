#ifndef idl_stdbase_h
#define idl_stdbase_h

#include <prague.h>
#include <pr_vtbl.h>
#include <pr_idl.h>
#include "types.h"
#if !defined(__cplusplus) || defined(_USE_VTBL)
//	interface StdBase definition
	#define MACRO_STDBASE_ID 0x5e9a
	static const InterfaceId IID_StdBase = MACRO_STDBASE_ID;
	#define MACRO_STDBASE_PGNATIVE_ERR mPROPERTY_MAKE_GLOBAL(pTYPE_DWORD, 0x20)
	static const PropertyId StdBase_pgNATIVE_ERR = MACRO_STDBASE_PGNATIVE_ERR;
	#define MACRO_STDBASE_PGOBJECT_NAME mPROPERTY_MAKE_GLOBAL(pTYPE_STRING, 0x40)
	static const PropertyId StdBase_pgOBJECT_NAME = MACRO_STDBASE_PGOBJECT_NAME;
	#define MACRO_STDBASE_PGOBJECT_NAME_CP mPROPERTY_MAKE_GLOBAL(pTYPE_BINARY, 0x40)
	static const PropertyId StdBase_pgOBJECT_NAME_CP = MACRO_STDBASE_PGOBJECT_NAME_CP;
	#define MACRO_STDBASE_PGOBJECT_FULL_NAME mPROPERTY_MAKE_GLOBAL(pTYPE_STRING, 0x41)
	static const PropertyId StdBase_pgOBJECT_FULL_NAME = MACRO_STDBASE_PGOBJECT_FULL_NAME;
	#define MACRO_STDBASE_PGOBJECT_FULL_NAME_CP mPROPERTY_MAKE_GLOBAL(pTYPE_BINARY, 0x41)
	static const PropertyId StdBase_pgOBJECT_FULL_NAME_CP = MACRO_STDBASE_PGOBJECT_FULL_NAME_CP;
	#define MACRO_STDBASE_PGOBJECT_COMPLETE_NAME mPROPERTY_MAKE_GLOBAL(pTYPE_STRING, 0x42)
	static const PropertyId StdBase_pgOBJECT_COMPLETE_NAME = MACRO_STDBASE_PGOBJECT_COMPLETE_NAME;
	#define MACRO_STDBASE_PGOBJECT_COMPLETE_NAME_CP mPROPERTY_MAKE_GLOBAL(pTYPE_BINARY, 0x42)
	static const PropertyId StdBase_pgOBJECT_COMPLETE_NAME_CP = MACRO_STDBASE_PGOBJECT_COMPLETE_NAME_CP;
	#define MACRO_STDBASE_PGOBJECT_ALT_NAME mPROPERTY_MAKE_GLOBAL(pTYPE_STRING, 0x43)
	static const PropertyId StdBase_pgOBJECT_ALT_NAME = MACRO_STDBASE_PGOBJECT_ALT_NAME;
	#define MACRO_STDBASE_PGOBJECT_ALT_NAME_CP mPROPERTY_MAKE_GLOBAL(pTYPE_BINARY, 0x43)
	static const PropertyId StdBase_pgOBJECT_ALT_NAME_CP = MACRO_STDBASE_PGOBJECT_ALT_NAME_CP;
	#define MACRO_STDBASE_PGOBJECT_PATH mPROPERTY_MAKE_GLOBAL(pTYPE_STRING, 0x44)
	static const PropertyId StdBase_pgOBJECT_PATH = MACRO_STDBASE_PGOBJECT_PATH;
	#define MACRO_STDBASE_PGOBJECT_PATH_CP mPROPERTY_MAKE_GLOBAL(pTYPE_BINARY, 0x44)
	static const PropertyId StdBase_pgOBJECT_PATH_CP = MACRO_STDBASE_PGOBJECT_PATH_CP;
	#define MACRO_STDBASE_PGOBJECT_SIZE mPROPERTY_MAKE_GLOBAL(pTYPE_DWORD, 0x45)
	static const PropertyId StdBase_pgOBJECT_SIZE = MACRO_STDBASE_PGOBJECT_SIZE;
	#define MACRO_STDBASE_PGOBJECT_SIZE_Q mPROPERTY_MAKE_GLOBAL(pTYPE_QWORD, 0x45)
	static const PropertyId StdBase_pgOBJECT_SIZE_Q = MACRO_STDBASE_PGOBJECT_SIZE_Q;
	#define MACRO_STDBASE_PGOBJECT_SIGNATURE mPROPERTY_MAKE_GLOBAL(pTYPE_BINARY, 0x46)
	static const PropertyId StdBase_pgOBJECT_SIGNATURE = MACRO_STDBASE_PGOBJECT_SIGNATURE;
	#define MACRO_STDBASE_PGOBJECT_SUPPORTED mPROPERTY_MAKE_GLOBAL(pTYPE_INT, 0x47)
	static const PropertyId StdBase_pgOBJECT_SUPPORTED = MACRO_STDBASE_PGOBJECT_SUPPORTED;
	#define MACRO_STDBASE_PGOBJECT_ORIGIN mPROPERTY_MAKE_GLOBAL(pTYPE_INT, 0x48)
	static const PropertyId StdBase_pgOBJECT_ORIGIN = MACRO_STDBASE_PGOBJECT_ORIGIN;
	#define MACRO_STDBASE_PGOBJECT_OS_TYPE mPROPERTY_MAKE_GLOBAL(pTYPE_BINARY, 0x49)
	static const PropertyId StdBase_pgOBJECT_OS_TYPE = MACRO_STDBASE_PGOBJECT_OS_TYPE;
	#define MACRO_STDBASE_PGOBJECT_OPEN_MODE mPROPERTY_MAKE_GLOBAL(pTYPE_DWORD, 0x4a)
	static const PropertyId StdBase_pgOBJECT_OPEN_MODE = MACRO_STDBASE_PGOBJECT_OPEN_MODE;
	#define MACRO_STDBASE_PGOBJECT_NEW mPROPERTY_MAKE_GLOBAL(pTYPE_INT, 0x4b)
	static const PropertyId StdBase_pgOBJECT_NEW = MACRO_STDBASE_PGOBJECT_NEW;
	#define MACRO_STDBASE_PGOBJECT_CODEPAGE mPROPERTY_MAKE_GLOBAL(pTYPE_BINARY, 0x4c)
	static const PropertyId StdBase_pgOBJECT_CODEPAGE = MACRO_STDBASE_PGOBJECT_CODEPAGE;
	#define MACRO_STDBASE_PGOBJECT_LCID mPROPERTY_MAKE_GLOBAL(pTYPE_DWORD, 0x4d)
	static const PropertyId StdBase_pgOBJECT_LCID = MACRO_STDBASE_PGOBJECT_LCID;
	#define MACRO_STDBASE_PGOBJECT_ACCESS_MODE mPROPERTY_MAKE_GLOBAL(pTYPE_DWORD, 0x4e)
	static const PropertyId StdBase_pgOBJECT_ACCESS_MODE = MACRO_STDBASE_PGOBJECT_ACCESS_MODE;
	#define MACRO_STDBASE_PGOBJECT_USAGE_COUNT mPROPERTY_MAKE_GLOBAL(pTYPE_DWORD, 0x4f)
	static const PropertyId StdBase_pgOBJECT_USAGE_COUNT = MACRO_STDBASE_PGOBJECT_USAGE_COUNT;
	#define MACRO_STDBASE_PGOBJECT_COMPRESSED_SIZE mPROPERTY_MAKE_GLOBAL(pTYPE_DWORD, 0x50)
	static const PropertyId StdBase_pgOBJECT_COMPRESSED_SIZE = MACRO_STDBASE_PGOBJECT_COMPRESSED_SIZE;
	#define MACRO_STDBASE_PGOBJECT_HEAP mPROPERTY_MAKE_GLOBAL(pTYPE_PTR, 0x51)
	static const PropertyId StdBase_pgOBJECT_HEAP = MACRO_STDBASE_PGOBJECT_HEAP;
	#define MACRO_STDBASE_PGOBJECT_AVAILABILITY mPROPERTY_MAKE_GLOBAL(pTYPE_DWORD, 0x52)
	static const PropertyId StdBase_pgOBJECT_AVAILABILITY = MACRO_STDBASE_PGOBJECT_AVAILABILITY;
	#define MACRO_STDBASE_PGOBJECT_BASED_ON mPROPERTY_MAKE_GLOBAL(pTYPE_PTR, 0x53)
	static const PropertyId StdBase_pgOBJECT_BASED_ON = MACRO_STDBASE_PGOBJECT_BASED_ON;
	#define MACRO_STDBASE_PGOBJECT_ATTRIBUTES mPROPERTY_MAKE_GLOBAL(pTYPE_DWORD, 0x54)
	static const PropertyId StdBase_pgOBJECT_ATTRIBUTES = MACRO_STDBASE_PGOBJECT_ATTRIBUTES;
	#define MACRO_STDBASE_PGOBJECT_HASH mPROPERTY_MAKE_GLOBAL(pTYPE_QWORD, 0x55)
	static const PropertyId StdBase_pgOBJECT_HASH = MACRO_STDBASE_PGOBJECT_HASH;
	#define MACRO_STDBASE_PGOBJECT_REOPEN_DATA mPROPERTY_MAKE_GLOBAL(pTYPE_BINARY, 0x56)
	static const PropertyId StdBase_pgOBJECT_REOPEN_DATA = MACRO_STDBASE_PGOBJECT_REOPEN_DATA;
	#define MACRO_STDBASE_PGOBJECT_INHERITABLE_HEAP mPROPERTY_MAKE_GLOBAL(pTYPE_PTR, 0x57)
	static const PropertyId StdBase_pgOBJECT_INHERITABLE_HEAP = MACRO_STDBASE_PGOBJECT_INHERITABLE_HEAP;
	#define MACRO_STDBASE_PGOBJECT_NATIVE_IO mPROPERTY_MAKE_GLOBAL(pTYPE_PTR, 0x58)
	static const PropertyId StdBase_pgOBJECT_NATIVE_IO = MACRO_STDBASE_PGOBJECT_NATIVE_IO;
	#define MACRO_STDBASE_PGOBJECT_PROP_SYNCHRONIZED mPROPERTY_MAKE_GLOBAL(pTYPE_INT, 0x59)
	static const PropertyId StdBase_pgOBJECT_PROP_SYNCHRONIZED = MACRO_STDBASE_PGOBJECT_PROP_SYNCHRONIZED;
	#define MACRO_STDBASE_PGOBJECT_MEM_SYNCHRONIZED mPROPERTY_MAKE_GLOBAL(pTYPE_INT, 0x5a)
	static const PropertyId StdBase_pgOBJECT_MEM_SYNCHRONIZED = MACRO_STDBASE_PGOBJECT_MEM_SYNCHRONIZED;
	#define MACRO_STDBASE_PGOBJECT_NATIVE_PATH mPROPERTY_MAKE_GLOBAL(pTYPE_STRING, 0x60)
	static const PropertyId StdBase_pgOBJECT_NATIVE_PATH = MACRO_STDBASE_PGOBJECT_NATIVE_PATH;
	#define MACRO_STDBASE_PGINTERFACE_ID mPROPERTY_MAKE_GLOBAL(pTYPE_DWORD, 0x80)
	static const PropertyId StdBase_pgINTERFACE_ID = MACRO_STDBASE_PGINTERFACE_ID;
	#define MACRO_STDBASE_PGINTERFACE_SUBTYPE mPROPERTY_MAKE_GLOBAL(pTYPE_DWORD, 0x81)
	static const PropertyId StdBase_pgINTERFACE_SUBTYPE = MACRO_STDBASE_PGINTERFACE_SUBTYPE;
	#define MACRO_STDBASE_PGINTERFACE_VERSION mPROPERTY_MAKE_GLOBAL(pTYPE_BINARY, 0x82)
	static const PropertyId StdBase_pgINTERFACE_VERSION = MACRO_STDBASE_PGINTERFACE_VERSION;
	#define MACRO_STDBASE_PGINTERFACE_REVISION mPROPERTY_MAKE_GLOBAL(pTYPE_DWORD, 0x85)
	static const PropertyId StdBase_pgINTERFACE_REVISION = MACRO_STDBASE_PGINTERFACE_REVISION;
	#define MACRO_STDBASE_PGINTERFACE_COMMENT mPROPERTY_MAKE_GLOBAL(pTYPE_STRING, 0x83)
	static const PropertyId StdBase_pgINTERFACE_COMMENT = MACRO_STDBASE_PGINTERFACE_COMMENT;
	#define MACRO_STDBASE_PGINTERFACE_COMMENT_CP mPROPERTY_MAKE_GLOBAL(pTYPE_BINARY, 0x83)
	static const PropertyId StdBase_pgINTERFACE_COMMENT_CP = MACRO_STDBASE_PGINTERFACE_COMMENT_CP;
	#define MACRO_STDBASE_PGINTERFACE_SUPPORTED mPROPERTY_MAKE_GLOBAL(pTYPE_DWORD, 0x84)
	static const PropertyId StdBase_pgINTERFACE_SUPPORTED = MACRO_STDBASE_PGINTERFACE_SUPPORTED;
	#define MACRO_STDBASE_PGINTERFACE_FLAGS mPROPERTY_MAKE_GLOBAL(pTYPE_DWORD, 0x86)
	static const PropertyId StdBase_pgINTERFACE_FLAGS = MACRO_STDBASE_PGINTERFACE_FLAGS;
	#define MACRO_STDBASE_PGINTERFACE_COMPATIBILITY mPROPERTY_MAKE_GLOBAL(pTYPE_DWORD, 0x87)
	static const PropertyId StdBase_pgINTERFACE_COMPATIBILITY = MACRO_STDBASE_PGINTERFACE_COMPATIBILITY;
	#define MACRO_STDBASE_PGINTERFACE_CODEPAGE mPROPERTY_MAKE_GLOBAL(pTYPE_BINARY, 0x88)
	static const PropertyId StdBase_pgINTERFACE_CODEPAGE = MACRO_STDBASE_PGINTERFACE_CODEPAGE;
	#define MACRO_STDBASE_PSINTERFACE_COMPATIBILITY_BASE mPROPERTY_MAKE_GLOBAL(pTYPE_DWORD, 0x89)
	static const PropertyId StdBase_psINTERFACE_COMPATIBILITY_BASE = MACRO_STDBASE_PSINTERFACE_COMPATIBILITY_BASE;
	#define MACRO_STDBASE_PGVENDOR_ID mPROPERTY_MAKE_GLOBAL(pTYPE_DWORD, 0xa1)
	static const PropertyId StdBase_pgVENDOR_ID = MACRO_STDBASE_PGVENDOR_ID;
	#define MACRO_STDBASE_PGVENDOR_NAME mPROPERTY_MAKE_GLOBAL(pTYPE_STRING, 0xa2)
	static const PropertyId StdBase_pgVENDOR_NAME = MACRO_STDBASE_PGVENDOR_NAME;
	#define MACRO_STDBASE_PGVENDOR_NAME_CP mPROPERTY_MAKE_GLOBAL(pTYPE_BINARY, 0xa2)
	static const PropertyId StdBase_pgVENDOR_NAME_CP = MACRO_STDBASE_PGVENDOR_NAME_CP;
	#define MACRO_STDBASE_PGVENDOR_COMMENT mPROPERTY_MAKE_GLOBAL(pTYPE_STRING, 0xa3)
	static const PropertyId StdBase_pgVENDOR_COMMENT = MACRO_STDBASE_PGVENDOR_COMMENT;
	#define MACRO_STDBASE_PGVENDOR_COMMENT_CP mPROPERTY_MAKE_GLOBAL(pTYPE_BINARY, 0xa3)
	static const PropertyId StdBase_pgVENDOR_COMMENT_CP = MACRO_STDBASE_PGVENDOR_COMMENT_CP;
	#define MACRO_STDBASE_PGPLUGIN_ID mPROPERTY_MAKE_GLOBAL(pTYPE_DWORD, 0xc0)
	static const PropertyId StdBase_pgPLUGIN_ID = MACRO_STDBASE_PGPLUGIN_ID;
	#define MACRO_STDBASE_PGPLUGIN_VERSION mPROPERTY_MAKE_GLOBAL(pTYPE_BINARY, 0xc1)
	static const PropertyId StdBase_pgPLUGIN_VERSION = MACRO_STDBASE_PGPLUGIN_VERSION;
	#define MACRO_STDBASE_PGPLUGIN_NAME mPROPERTY_MAKE_GLOBAL(pTYPE_STRING, 0xc2)
	static const PropertyId StdBase_pgPLUGIN_NAME = MACRO_STDBASE_PGPLUGIN_NAME;
	#define MACRO_STDBASE_PGPLUGIN_NAME_CP mPROPERTY_MAKE_GLOBAL(pTYPE_BINARY, 0xc2)
	static const PropertyId StdBase_pgPLUGIN_NAME_CP = MACRO_STDBASE_PGPLUGIN_NAME_CP;
	#define MACRO_STDBASE_PGPLUGIN_COMMENT mPROPERTY_MAKE_GLOBAL(pTYPE_STRING, 0xc3)
	static const PropertyId StdBase_pgPLUGIN_COMMENT = MACRO_STDBASE_PGPLUGIN_COMMENT;
	#define MACRO_STDBASE_PGPLUGIN_COMMENT_CP mPROPERTY_MAKE_GLOBAL(pTYPE_BINARY, 0xc3)
	static const PropertyId StdBase_pgPLUGIN_COMMENT_CP = MACRO_STDBASE_PGPLUGIN_COMMENT_CP;
	#define MACRO_STDBASE_PGPLUGIN_HANDLE mPROPERTY_MAKE_GLOBAL(pTYPE_PTR, 0xc4)
	static const PropertyId StdBase_pgPLUGIN_HANDLE = MACRO_STDBASE_PGPLUGIN_HANDLE;
	#define MACRO_STDBASE_PGPLUGIN_CODEPAGE mPROPERTY_MAKE_GLOBAL(pTYPE_BINARY, 0xc5)
	static const PropertyId StdBase_pgPLUGIN_CODEPAGE = MACRO_STDBASE_PGPLUGIN_CODEPAGE;
	#define MACRO_STDBASE_PGPLUGIN_EXPORT_COUNT mPROPERTY_MAKE_GLOBAL(pTYPE_DWORD, 0xc6)
	static const PropertyId StdBase_pgPLUGIN_EXPORT_COUNT = MACRO_STDBASE_PGPLUGIN_EXPORT_COUNT;
	#define MACRO_STDBASE_PGTRACE_LEVEL mPROPERTY_MAKE_GLOBAL(pTYPE_DWORD, 0xe3)
	static const PropertyId StdBase_pgTRACE_LEVEL = MACRO_STDBASE_PGTRACE_LEVEL;
	#define MACRO_STDBASE_PGTRACE_LEVEL_MIN mPROPERTY_MAKE_GLOBAL(pTYPE_DWORD, 0xe4)
	static const PropertyId StdBase_pgTRACE_LEVEL_MIN = MACRO_STDBASE_PGTRACE_LEVEL_MIN;
	#define MACRO_STDBASE_PGTRACE_OBJ mPROPERTY_MAKE_GLOBAL(pTYPE_PTR, 0xe5)
	static const PropertyId StdBase_pgTRACE_OBJ = MACRO_STDBASE_PGTRACE_OBJ;
	struct iStdBaseVtbl;																			
	typedef struct iStdBaseVtbl iStdBaseVtbl;                                                        	
	                                                                                           
	typedef struct tag_hStdBase {                                                                  
		 const iStdBaseVtbl* vtbl;                                                                   
		 const iSYSTEMVtbl* sys;                                                                 
	} *hStdBase;                                                                                   
	struct iStdBaseVtbl {
		void (*empty_struct_workaround)();
	};
//	end of interface StdBase definition

#else
//	interface StdBase definition
struct pr_abstract StdBase  {
	static const InterfaceId IID = 0x5e9a;
	static const PropertyId pgNATIVE_ERR = mPROPERTY_MAKE_GLOBAL(pTYPE_DWORD, 0x20);
	static const PropertyId pgOBJECT_NAME = mPROPERTY_MAKE_GLOBAL(pTYPE_STRING, 0x40);
	static const PropertyId pgOBJECT_NAME_CP = mPROPERTY_MAKE_GLOBAL(pTYPE_BINARY, 0x40);
	static const PropertyId pgOBJECT_FULL_NAME = mPROPERTY_MAKE_GLOBAL(pTYPE_STRING, 0x41);
	static const PropertyId pgOBJECT_FULL_NAME_CP = mPROPERTY_MAKE_GLOBAL(pTYPE_BINARY, 0x41);
	static const PropertyId pgOBJECT_COMPLETE_NAME = mPROPERTY_MAKE_GLOBAL(pTYPE_STRING, 0x42);
	static const PropertyId pgOBJECT_COMPLETE_NAME_CP = mPROPERTY_MAKE_GLOBAL(pTYPE_BINARY, 0x42);
	static const PropertyId pgOBJECT_ALT_NAME = mPROPERTY_MAKE_GLOBAL(pTYPE_STRING, 0x43);
	static const PropertyId pgOBJECT_ALT_NAME_CP = mPROPERTY_MAKE_GLOBAL(pTYPE_BINARY, 0x43);
	static const PropertyId pgOBJECT_PATH = mPROPERTY_MAKE_GLOBAL(pTYPE_STRING, 0x44);
	static const PropertyId pgOBJECT_PATH_CP = mPROPERTY_MAKE_GLOBAL(pTYPE_BINARY, 0x44);
	static const PropertyId pgOBJECT_SIZE = mPROPERTY_MAKE_GLOBAL(pTYPE_DWORD, 0x45);
	static const PropertyId pgOBJECT_SIZE_Q = mPROPERTY_MAKE_GLOBAL(pTYPE_QWORD, 0x45);
	static const PropertyId pgOBJECT_SIGNATURE = mPROPERTY_MAKE_GLOBAL(pTYPE_BINARY, 0x46);
	static const PropertyId pgOBJECT_SUPPORTED = mPROPERTY_MAKE_GLOBAL(pTYPE_INT, 0x47);
	static const PropertyId pgOBJECT_ORIGIN = mPROPERTY_MAKE_GLOBAL(pTYPE_INT, 0x48);
	static const PropertyId pgOBJECT_OS_TYPE = mPROPERTY_MAKE_GLOBAL(pTYPE_BINARY, 0x49);
	static const PropertyId pgOBJECT_OPEN_MODE = mPROPERTY_MAKE_GLOBAL(pTYPE_DWORD, 0x4a);
	static const PropertyId pgOBJECT_NEW = mPROPERTY_MAKE_GLOBAL(pTYPE_INT, 0x4b);
	static const PropertyId pgOBJECT_CODEPAGE = mPROPERTY_MAKE_GLOBAL(pTYPE_BINARY, 0x4c);
	static const PropertyId pgOBJECT_LCID = mPROPERTY_MAKE_GLOBAL(pTYPE_DWORD, 0x4d);
	static const PropertyId pgOBJECT_ACCESS_MODE = mPROPERTY_MAKE_GLOBAL(pTYPE_DWORD, 0x4e);
	static const PropertyId pgOBJECT_USAGE_COUNT = mPROPERTY_MAKE_GLOBAL(pTYPE_DWORD, 0x4f);
	static const PropertyId pgOBJECT_COMPRESSED_SIZE = mPROPERTY_MAKE_GLOBAL(pTYPE_DWORD, 0x50);
	static const PropertyId pgOBJECT_HEAP = mPROPERTY_MAKE_GLOBAL(pTYPE_PTR, 0x51);
	static const PropertyId pgOBJECT_AVAILABILITY = mPROPERTY_MAKE_GLOBAL(pTYPE_DWORD, 0x52);
	static const PropertyId pgOBJECT_BASED_ON = mPROPERTY_MAKE_GLOBAL(pTYPE_PTR, 0x53);
	static const PropertyId pgOBJECT_ATTRIBUTES = mPROPERTY_MAKE_GLOBAL(pTYPE_DWORD, 0x54);
	static const PropertyId pgOBJECT_HASH = mPROPERTY_MAKE_GLOBAL(pTYPE_QWORD, 0x55);
	static const PropertyId pgOBJECT_REOPEN_DATA = mPROPERTY_MAKE_GLOBAL(pTYPE_BINARY, 0x56);
	static const PropertyId pgOBJECT_INHERITABLE_HEAP = mPROPERTY_MAKE_GLOBAL(pTYPE_PTR, 0x57);
	static const PropertyId pgOBJECT_NATIVE_IO = mPROPERTY_MAKE_GLOBAL(pTYPE_PTR, 0x58);
	static const PropertyId pgOBJECT_PROP_SYNCHRONIZED = mPROPERTY_MAKE_GLOBAL(pTYPE_INT, 0x59);
	static const PropertyId pgOBJECT_MEM_SYNCHRONIZED = mPROPERTY_MAKE_GLOBAL(pTYPE_INT, 0x5a);
	static const PropertyId pgOBJECT_NATIVE_PATH = mPROPERTY_MAKE_GLOBAL(pTYPE_STRING, 0x60);
	static const PropertyId pgINTERFACE_ID = mPROPERTY_MAKE_GLOBAL(pTYPE_DWORD, 0x80);
	static const PropertyId pgINTERFACE_SUBTYPE = mPROPERTY_MAKE_GLOBAL(pTYPE_DWORD, 0x81);
	static const PropertyId pgINTERFACE_VERSION = mPROPERTY_MAKE_GLOBAL(pTYPE_BINARY, 0x82);
	static const PropertyId pgINTERFACE_REVISION = mPROPERTY_MAKE_GLOBAL(pTYPE_DWORD, 0x85);
	static const PropertyId pgINTERFACE_COMMENT = mPROPERTY_MAKE_GLOBAL(pTYPE_STRING, 0x83);
	static const PropertyId pgINTERFACE_COMMENT_CP = mPROPERTY_MAKE_GLOBAL(pTYPE_BINARY, 0x83);
	static const PropertyId pgINTERFACE_SUPPORTED = mPROPERTY_MAKE_GLOBAL(pTYPE_DWORD, 0x84);
	static const PropertyId pgINTERFACE_FLAGS = mPROPERTY_MAKE_GLOBAL(pTYPE_DWORD, 0x86);
	static const PropertyId pgINTERFACE_COMPATIBILITY = mPROPERTY_MAKE_GLOBAL(pTYPE_DWORD, 0x87);
	static const PropertyId pgINTERFACE_CODEPAGE = mPROPERTY_MAKE_GLOBAL(pTYPE_BINARY, 0x88);
	static const PropertyId psINTERFACE_COMPATIBILITY_BASE = mPROPERTY_MAKE_GLOBAL(pTYPE_DWORD, 0x89);
	static const PropertyId pgVENDOR_ID = mPROPERTY_MAKE_GLOBAL(pTYPE_DWORD, 0xa1);
	static const PropertyId pgVENDOR_NAME = mPROPERTY_MAKE_GLOBAL(pTYPE_STRING, 0xa2);
	static const PropertyId pgVENDOR_NAME_CP = mPROPERTY_MAKE_GLOBAL(pTYPE_BINARY, 0xa2);
	static const PropertyId pgVENDOR_COMMENT = mPROPERTY_MAKE_GLOBAL(pTYPE_STRING, 0xa3);
	static const PropertyId pgVENDOR_COMMENT_CP = mPROPERTY_MAKE_GLOBAL(pTYPE_BINARY, 0xa3);
	static const PropertyId pgPLUGIN_ID = mPROPERTY_MAKE_GLOBAL(pTYPE_DWORD, 0xc0);
	static const PropertyId pgPLUGIN_VERSION = mPROPERTY_MAKE_GLOBAL(pTYPE_BINARY, 0xc1);
	static const PropertyId pgPLUGIN_NAME = mPROPERTY_MAKE_GLOBAL(pTYPE_STRING, 0xc2);
	static const PropertyId pgPLUGIN_NAME_CP = mPROPERTY_MAKE_GLOBAL(pTYPE_BINARY, 0xc2);
	static const PropertyId pgPLUGIN_COMMENT = mPROPERTY_MAKE_GLOBAL(pTYPE_STRING, 0xc3);
	static const PropertyId pgPLUGIN_COMMENT_CP = mPROPERTY_MAKE_GLOBAL(pTYPE_BINARY, 0xc3);
	static const PropertyId pgPLUGIN_HANDLE = mPROPERTY_MAKE_GLOBAL(pTYPE_PTR, 0xc4);
	static const PropertyId pgPLUGIN_CODEPAGE = mPROPERTY_MAKE_GLOBAL(pTYPE_BINARY, 0xc5);
	static const PropertyId pgPLUGIN_EXPORT_COUNT = mPROPERTY_MAKE_GLOBAL(pTYPE_DWORD, 0xc6);
	static const PropertyId pgTRACE_LEVEL = mPROPERTY_MAKE_GLOBAL(pTYPE_DWORD, 0xe3);
	static const PropertyId pgTRACE_LEVEL_MIN = mPROPERTY_MAKE_GLOBAL(pTYPE_DWORD, 0xe4);
	static const PropertyId pgTRACE_OBJ = mPROPERTY_MAKE_GLOBAL(pTYPE_PTR, 0xe5);
};

struct pr_abstract cStdBase : public StdBase, public iObj {
	OBJ_IMPL( cStdBase );
};

//	end of interface StdBase definition

#endif

#endif //idl_stdbase_h

