/*-----------------02.05.99 12:57-------------------
 * Project Prague                                 *
 * Subproject Kernel                              *
 * Author Andrew Andy Petrovitch                  *
 * Copyright (c) Kaspersky Lab                    *
 * Purpose Prague API                             *
 * revision 2                                     *
--------------------------------------------------*/
// generic handle definition

import "prague.h";
import "pr_sys.h";
import "i_heap.h";

typedef rpcOBJECT	rpcHEAP;
typedef rpcOBJECT	rpcTRACER;
typedef rpcOBJECT	rpcLOADER;

[ uuid (02F29FD6-810E-40f7-8DD0-071CB2B4AB91),
  version(1.0),
  pointer_default(unique)
]
interface rpc_system {
  
  // -----------------------------------------
  // obj management
  tERROR  SYS_ObjectCreate        ( rpcOBJECT obj, [mout] rpcOBJECT* new_obj, tIID iid, tPID pid, tDWORD subtype );
  tERROR  SYS_ObjectCreateDone    ( rpcOBJECT obj );
  tERROR  SYS_ObjectCreateQuick   ( rpcOBJECT obj, [mout] rpcOBJECT* new_obj, tIID iid, tPID pid, tDWORD subtype );
  tERROR  SYS_ObjectClose         ( rpcOBJECT obj );

  // -----------------------------------------
  // property management
  tERROR  SYS_PropertyGet         ( rpcOBJECT obj, [mout] tDWORD* out_size, tPROPID prop_id, [mout,size_is(size)]tCHAR* buffer, tDWORD size );
  tERROR  SYS_PropertyGetStr      ( rpcOBJECT obj, [mout] tDWORD* out_size, tPROPID prop_id, [mout, size_is(size)] tCHAR* buffer, tDWORD size, tCODEPAGE receive_cp );
  tERROR  SYS_PropertyGetStrCP    ( rpcOBJECT obj, [mout] tCODEPAGE* cp, tPROPID prop_id );

  tERROR  SYS_PropertySet         ( rpcOBJECT obj, [mout] tDWORD* out_size, tPROPID prop_id, [in, size_is(size)] const tCHAR* buffer, tDWORD size );
  tERROR  SYS_PropertySetStr      ( rpcOBJECT obj, [mout] tDWORD* out_size, tPROPID prop_id, [in, size_is(size)] const tCHAR* pStrz, tDWORD size, tCODEPAGE src_cp );
  tERROR  SYS_PropertySetHeap     ( rpcOBJECT obj, tDWORD heap_pid );

  tERROR  SYS_PropertyIsPresent   ( rpcOBJECT obj, tPROPID prop_id );
  tERROR  SYS_PropertyDelete      ( rpcOBJECT obj, tPROPID prop_id );
  tDWORD  SYS_PropertySize        ( rpcOBJECT obj, tPROPID prop_id );
  tERROR  SYS_PropertyEnumId      ( rpcOBJECT obj, [mout] tPROPID* prop_id_result, [mout] tDWORD* cookie );

  // -----------------------------------------
  // message management

  tERROR  SYS_RegisterMsgHandlerList  ( rpcOBJECT obj, tDWORD handler_count, [in,size_is(handler_count)] rpcOBJECT *handlers, [in,size_is(handler_count)] const tMsgHandlerDescr* handler_list );
  tERROR  SYS_UnregisterMsgHandlerList( rpcOBJECT obj, tDWORD handler_count, [in,size_is(handler_count)] rpcOBJECT *handlers, [in,size_is(handler_count)] const tMsgHandlerDescr* handler_list );

  // -----------------------------------------
  // user data management
  tERROR  SYS_UserDataGet         ( rpcOBJECT obj, [mout] tDWORD* data );
  tERROR  SYS_UserDataSet         ( rpcOBJECT obj, tDWORD  data );

  // -----------------------------------------
  // recognize methods
  tERROR  SYS_Recognize           ( rpcOBJECT obj, tIID by_iid, tPID by_pid, tDWORD type ); 
}

