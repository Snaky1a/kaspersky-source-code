[MainWindow.Update]
@           = $TaskTab ext(1) at(enum)
WorkArea    = [MainWindow.Update_WorkArea]
Home        = [TaskPageBtn] a(lt)
Events      = [TaskPageBtn] a(at)
Statistics  = [TaskPageBtn] a(at)

[MainWindow.Update_WorkArea]
@           = $TaskWorkArea
Home        = [MainWindow.Update_WorkArea_Home]
Statistics  = [MainWindow.Update_WorkArea_Statistics]
Events      = [Product_Events] $TaskPanel subst(Report(group(runtask,ExtraInfoSub1) prm(#dbUpdate)) Application(use(0)) Task(use(0)) Descr(use(0)) DetectType(use(0)) DetectName(use(0)) DetectDanger(use(0)) Exact(use(0)) Action(use(0)) Size(use(1)) Reason(use(0)) views([MainWindow.Update_Filters]))

[MainWindow.Update_Filters]
@
AllItems    = v("1204010002df0000000000000021;Ti1010000099;Ve1000000088;Ob10000001be;Ty100000003c;Pa200000008d;Na2000000094;Si0000000061;") at(default)

[MainWindow.Update_WorkArea_Home]
@       = $TaskPanel a(lt)
Updater = [ProfileGroup] subst(Scheduler(onclick(dialog("SchedulerDlg"))) Body(mg(17,17) xy(0,0,0,0) [MainWindow.Update_Updater]))
Speed   = [Group] sz(p,p) ns(Updater) alias(taskview) xy(0,0,0,0) subst(Header() Body([MainWindow.Update_Updater.SpeedChart]))

;-- AB -- Temporary placcement ----

[MainWindow.Update_WorkArea_Statistics]
@ = $TaskView a(lt)

[MainWindow.Update_Updater]
@               = sz(p,a) ext(1) xy(40,17) onchanging(checkPassword(#pwdc_SaveSettings))
BasesDate       = [Value] sz(250,a) rs(0) subst(Name() Val(xy(130) text(datetime(AVService.BasesDate)) a(lt)))
RecordsCount    = [Value] a(la) xy(,5) sz(250,a) rs(0) subst(Name() Val(xy(130) text(AVService.NumRecords) a(lt)))
Status          = [Value] a(la) xy(,5) sz(250,a) rs(0) subst(Name() Val(xy(130) text($BasesStatus) a(lt)))
Settings        = [Value] a(la) xy(,5) sz(250,a) rs(0) subst(Name() Val($Link xy(130) onclick(menu("SettingsLevelMenu_Updater")) a(lt) text(level == #SETTINGS_LEVEL_DEFAULT ? $LevelSettStd : $LevelSettCustom)))
Scheduler       = [Value] a(la) xy(,5) subst(Name() Val($Link a(lt) xy(130) text($SchedulerDescription) onclick(dialog("SchedulerDlg"))))
RollbackDescr   = sz(283,a) a(la) xy(,20) rs(0,0) f("Normal_Grey")
DoUpdate        = [MainWindow.Update_Updater_DoUpdate]
DoRollback      = [MainWindow.Update_Updater_DoRollback]

[MainWindow.Update_Updater_DoUpdate]
@       = sz(a,a) a(rt)
Start   = [ActionButton] sz(130,30) a(lt) onclick(setstate(#TASK_REQUEST_RUN)) visible(!(state & #StateFlagOperational)) subst(Name())
Stop    = [ActionButton] sz(130,30) a(lt) onclick(setstate(#TASK_REQUEST_STOP)) visible(state & #StateFlagOperational) subst(Name())

[MainWindow.Update_Updater_DoRollback]
@       = sz(a,a) a(rb) enable(bRollbackAllowed)
Start   = [ActionButton] sz(130,30) a(lt) onclick(setstate(#TASK_REQUEST_RUN, "Rollback")) visible(!(Rollback.state & #StateFlagOperational)) subst(Name())
Stop    = [ActionButton] sz(130,30) a(lt) onclick(setstate(#TASK_REQUEST_STOP, "Rollback")) visible(Rollback.state & #StateFlagOperational) subst(Name())

[MainWindow.Update_Updater.SpeedChart]
@       = ext(1) sz(p,p) mg(7,7)
Chart   = [MainWindow.Update_Updater.SpeedChart_Chart]

[MainWindow.Update_Updater.SpeedChart_Chart]
@       = t(chart) cprops("line","abs",60,name) refresh(100) at(noborder) sz(p,p) xy(,0) bp(ctl.process(state & #StateFlagOperational))
line1   = v(Speed) color(green)

[UpdaterSettings]
@   = $DlgAttr sz(344,364) alias(taskedit) at(resizable) onok(checkPassword(#pwdc_SaveSettings))
Tab = [UpdaterSettings_Tab]

[UpdaterSettings_Tab]
@           = $Tab
Source      = [UpdaterSettings_Tab_Source]
Additional  = [UpdaterSettings_Tab_Additional]
Account     = [UpdaterSettings_Tab_Account]

[UpdaterSettings_Tab_Source]
@       = sz(p,p)
List    = [UpdaterSettings_Tab_Source_List]
Proxy   = $Button_Large a(ra) xy(,10) onclick(window("OptionsWindow"))
Region  = [UpdaterSettings_Tab_Source_Region]

[UpdaterSettings_Tab_Source_List]
@       = $List sz(p,110) at(noheader) alias(vector.UpdaterSource) v(Sources) unique(Path == newItem.Path) onok(if(!Sources.size("Enable"), balloon("NoUpdateSourcesSelected")))
Name    = at(checked) sz(a) text(Type == #UPDSRC_AK ? $UpdateSourceAK : Type == #UPDSRC_KL ? $UpdateSourceKL : Path) v(Enable)
footer  = [Grid.Footer.Template] subst(Add(onclick(dialog("", "List"))))
rowedit = [Grid.Editor.Template] subst(Delete(enable(!(Type == #UPDSRC_AK || Type == #UPDSRC_KL))) Edit(enable(!(Type == #UPDSRC_AK || Type == #UPDSRC_KL))))

[UpdaterSettings_Tab_Source_Region]
@               = $SettingsGroup v(UseRegion) xy(0,10)
RegionAuto      = t(radio) sz(a,a) v(0)
RegionManual    = t(radio) sz(a,a) a(la) xy(,7) v(1)
RegionCombo     = t(combo) sz(p,a) a(la) xy(17,7) at(sorted) enable(UseRegion) v(Region) alias(regions)

[UpdaterSettings_Tab_Additional]
@               = sz(p,p)
DuringUpdate    = [UpdaterSettings_Tab_Additional_DuringUpdate]
AfterUpdate     = [UpdaterSettings_Tab_Additional_AfterUpdate]

[UpdaterSettings_Tab_Additional_DuringUpdate]
@               = $SettingsGroup xy(0,,,7) v(UpdateExecutables)
SignAndModules  = t(radio) sz(a,a) v(1)
SignOnly        = t(radio) sz(a,a) a(la) xy(,7) v(0)

[UpdaterSettings_Tab_Additional_AfterUpdate]
@           = $SettingsGroup xy(0,,,7)
Quarantine  = t(check) sz(a,a) v(RescanQuarantineAfterUpdate)
UseRetr     = t(check) sz(a,a) a(la) xy(,7) v(UseRetr2)
RetrBrowse  = t(button) sz(75,21) a(rs) enable(UseRetr2) xy(,22) text($Browse) onclick(browseobject(RetrPath, "BrowseForFolder", #SHELL_OBJTYPE_FOLDER))
RetrFolder  = t(edit) sz(p,a) a(ps) enable(UseRetr2) xy(7,,17) v(RetrPath)

[UpdaterSettings_Tab_Account]
@       = sz(p,p)
RunAs   = [RunAsGroup]

[ProxyAuthDialog]
@       = $Dlg at(ontop,bottom,nohelp) sz(300,a)
Login   = [Value] a(la) subst(Name(a(lc)) Val(t(edit) a(l) xy(120) sz(p,a) v(settings.ProxyLogin)))
Pswd    = [Value] a(la) xy(,7) subst(Name(a(lc)) Val(t(edit) at(password) a(l) xy(120) sz(p,a) v(bicrypt(settings.ProxyPassword))))
Save    = $Check xy(,7,,$DialogPanelSizeY) v(Save)

[UpdaterProgressWindow]
@       = t(dialog) at(a_close,minimizable,customfooter) sz(474,a) alias(taskview) text(if(f_IsStateActive(state), Completion + "% - ") + $ProfileName) bg("ColorWindow") onclose(if(f_IsStateActive(state), msg("UpdateStopConfirm", #m_yesno) ? (setstate(#TASK_REQUEST_STOP), 1) : 0))
Body    = [UpdaterProgressWindow_Body]
Footer  = [WizardTpl_WizardPanel] a(la) subst(Cancel() Back(use(0)))

[UpdaterProgressWindow_Body]
@       = sz(p,a) mg(7,7)
Icon    = sz(a,a) a(la) bg("b_updater")
TopInfo = [UpdaterProgressWindow_Body_TopInfo]
All     = [UpdaterProgressWindow_Body_All]

[UpdaterProgressWindow_Body_TopInfo]
@           = sz(p,57) xy(97,10,17)
Active      = [UpdaterProgressWindow_Body_TopInfo_Active]
Inactive    = [UpdaterProgressWindow_Body_TopInfo_Inactive]

[UpdaterProgressWindow_Body_TopInfo_Active]
@           = sz(p,p) visible(f_IsStateActive(state))
Downloading = [Value] subst(Name() Val(text(FileName)))
Location    = [Value] a(la) xy(,7) subst(Name() Val(text(HostPath)))
Progress    = t(progress) a(la) sz(p,14) v(Completion) xy(,10) visible(state & #StateFlagOperational)

[UpdaterProgressWindow_Body_TopInfo_Inactive]
@       = sz(p,p) visible(!f_IsStateActive(state))
Status  = sz(a,a) text($ProfileState) f("ScanStatus") a(lc)

[UpdaterProgressWindow_Body_All]
@       = sz(p,a) a(la) xy(97,10,17,10)
Info    = [UpdaterProgressWindow_Body_All_Info]

[UpdaterProgressWindow_Body_All_Info]
@               = sz(a,a) a(la) rs(100) use(type == "updater")
UpdateSize      = [Value] sz(a,a) subst(Name() Val(text(f_ObjSize(DownloadedBytesCount)) a(lt) xy(150)))
TransferRate    = [Value] a(la) xy(,7) sz(a,a) subst(Name() Val(a(lt) xy(150)))

[SettingsLevelMenu_Updater]
@           = t(menu) at(enum)
Medium      = text($LevelSettStd) at(radiolike) bp(ctl.selected = level == #SETTINGS_LEVEL_DEFAULT) onclick(if(checkPassword(#pwdc_SaveSettings), (level = #SETTINGS_LEVEL_DEFAULT; setlevel(level))))
Customize   = text($Customize)    at(radiolike) bp(ctl.selected = level == #SETTINGS_LEVEL_CUSTOM)  onclick(dialog("UpdaterSettings"))
