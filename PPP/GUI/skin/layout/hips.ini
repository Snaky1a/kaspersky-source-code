[MainWindow.Hips]
@           = $TaskTab ext(1)
WorkArea    = [MainWindow.Hips_WorkArea]
Home        = [TaskPageBtn] a(lt)
Events      = [TaskPageBtn] a(at)
Rules       = [TaskPageBtn] a(at) v("Statistics")

[MainWindow.Hips_WorkArea]
@       = $TaskWorkArea
Home    = [ProfileHome] $TaskPanel alias(taskview) ns(SystemWatch) subst(Tasks(subst(Body([MainWindow.Hips_WorkArea.Tasks.Body]))) Group1(subst(Control(xy(-9,7) [TaskCheck]) Body([MainWindow.SystemWatch_WorkArea_Home_Body]))) Group2(subst(Header() Body([MainWindow.SystemWatch.Chart]))))
Events  = [Product_Events] $TaskPanel subst(Report(filter(TaskGroup == #eTASK_GROUP_HIPS) prm(#dbRTP)) views([MainWindow.Hips_Filters]))
Rules   = [MainWindow.Hips_WorkArea_Rules]

[MainWindow.Hips_WorkArea_Rules]
@           = $TaskView ns(Hips)
Selector    = [MainWindow.Hips_WorkArea_Rules_Selector]
Resources   = [MainWindow.Hips_WorkArea_Rules_Resources]
Rules       = [MainWindow.Hips_WorkArea_Rules_Rules]
Packets     = [MainWindow.Hips_WorkArea_Rules_Packets]
Devices     = [MainWindow.Hips_WorkArea_Rules_Devices]
Networks    = [MainWindow.Hips_WorkArea_Rules_Networks]

[MainWindow.Hips_WorkArea_Rules_Selector]
@           = t(combo) sz(200) at(rememberdata)
RulesCb     = at(default)
ResourcesCb
DevicesCb
NetworksCb
PacketsCb

[MainWindow.Hips_WorkArea_Rules_Resources]
@       = t(splitter) sz(p,p) xy(,25) at(vertical,rememberdata) visible(ctl.parent.Selector.value == "ResourcesCb")
GrpList = [MainWindow.Hips_WorkArea_Rules_Resources_GrpList]
ResList = [MainWindow.Hips_WorkArea_Rules_Resources_ResList]

[MainWindow.Hips_WorkArea_Rules_Resources_GrpList]
@       = $List at(noheader) alias(tree.ResGroup) v(Resource) childs(Childs) filter(!Data && !(Flags & #rfResourceView))
Group   = sz(a) text(s_ResGroupName(Name))
footer  = [Grid.Footer.Template] subst(Add(onclick(dialog("Hips_GroupNameEdit"))))
rowedit = [Grid.Editor.Template] subst(Delete(enable(Id & #HIPS_RESID_FLAG_USER)) Edit(enable(Id & #HIPS_RESID_FLAG_USER)))

[MainWindow.Hips_WorkArea_Rules_Resources_ResList]
@           = $List at(noheader) alias(vector.HipsResources) filter(Data)
Resource    = sz(a) at(checked) i(s_ResourceDescriptionIcon(serid(Data))) text(s_ResourceDescription(serid(Data))) v(bmask(Flags,#rfEnabled))
footer      = [Grid.Footer.Template] subst(Add(onclick(menu("Hips_ResListAddMenu"))))
rowedit     = [Grid.Editor.Template] subst(Delete(enable(Id & #HIPS_RESID_FLAG_USER)) Edit(onclick(s_ResourceDialog(serid(Data)))))

[MainWindow.Hips_WorkArea_Rules_Rules]
@       = $List xy(,25) alias(tree.AppGroups) v(AppGroups) childs(Childs) visible(ctl.parent.Selector.value == "RulesCb")
Name    = sz(200) at(dragable) text(app ? app.AppName : s_AppGroupName(GroupName)) i(app ? getIconAsync(app.AppName, "unkobj") : "regicons,1")
footer  = [Grid.Footer2.Template] subst(Add(onclick(browsefileopen(app.AppName, $BrowseForExecutable, "exe"))) Edit(onclick(dialog("AppRulesEdit", p_image(app ? app.AppName : GroupName), p_appID(app ? app.AppId : AppGrpID), p_isAppGroup(!app)))))

[MainWindow.Hips_WorkArea_Rules_Packets]
@       = $List xy(,25) alias(vector) v(PacketRules) group(Severity,Severity,default) visible(ctl.parent.Selector.value == "PacketsCb")
Service = sz(150) at(checked) text(c_ws(ResIdEx, Resource.treeFind("Childs", "Id == ResIdEx").Name)) v(bmask(RuleState, 1))
Action  = sz(80) ia(c) at(clickable) text(f_AppRule(AccessFlag)) onrclick(menu("HipsPacketRuleMenu"))
Area    = sz(150) ta(c) text(c_ip(ResIdEx2, Resource.treeFind("Childs", "Id == ResIdEx2").Name))
footer  = [Grid.Footer2.Template] subst(Add(onclick(dialog("PacketRuleEdit"))) MoveUp(use(1)) MoveDown(use(1)))

[MainWindow.Hips_WorkArea_Rules_Devices]
@       = $List xy(,25) alias(tree.ResRule) v(Resource) childs(Childs) root(Name == "KLDevices") visible(ctl.parent.Selector.value == "DevicesCb")
Name    = sz(200) text(s_ResGroupName(Name))
Action  = sz(40) at(clickable) text("") ia(c) i(s_AppRuleIcon(Rule.AccessFlag & 0xb)) onrclick(menu("HipsDevRuleMenu"))

[MainWindow.Hips_WorkArea_Rules_Networks]
@           = $List xy(,25) alias(vector.Networks) v(NetWatch.Zones) group(AdapterID,AdapterID,default) visible(ctl.parent.Selector.value == "NetworksCb")
Name        = sz(300) text(FrendlyName) i(s_NetZoneTypeIcon(Severity)) enable(State & #znConnected)
Status      = sz(100) text(f_NetConnected(State & #znConnected))
Severity    = sz(100) text(s_NetSeverity(Severity) + if(Settings & #znStealth, ", stealthed") )
row         = at(clickable) onrclick(menu("NetworkSeverityMenu"))
rowedit     = [Grid.Editor.Template] subst(Delete(use(0)) Edit(onclick(isNode ? (g_AdapterID = val, dialog("AdapterEdit")) : dialog("NetworkEdit", "Networks"))))

[MainWindow.Hips_Filters]
@
AllItems    = v("1200010003b2;Ti14100000a40000000000000000;Ap00000000d4;Pa0000000033;Na0000000037;PI0000000035;Co0000000035;Ta1002000050;Ac10000000a0;Ob1000000104;Ty100000003c;Pa2000000064;Na2000000064;Ve1000000096;De000000001e;De100000001e;De100000001e;De100000001e;Ex100000001e;Re2002000050;")
ByApp       = v("120001000322;Ti10100000a4;Ap04020000d4;Pa0000000033;Na0000000037;PI0000000035;Co0000000035;Ta1002000050;Ac10000000a0;Ob1000000148;Ty100000003c;Pa200000008c;Na2000000080;Ve1000000096;De000000001e;De100000001e;De100000001e;De100000001e;Ex100000001e;Re2002000050;") at(default)

[HipsDevRuleMenu]
@ = [HipsAppRuleMenu] v(mask(Rule.AccessFlag, 0xb)) subst(Ask(use(0)) Log(use(0)))

[HipsPacketRuleMenu]
@ = [HipsAppRuleMenu] v(mask(AccessFlag, 0xb)) subst(Inherit(use(0)) Ask(use(0)) Log(use(0)) ByApp(use(1)))

[NetworkSeverityMenu]
@           = t(menu) at(enum) v(Severity)
Trusted     = at(radiolike) v(#znTrusted)
Local       = at(radiolike) v(#znNetBIOS)
Untrusted   = at(radiolike) v(#znUntrusted)
Separator
Stealth     = at(chklike) v(bmask(Settings,#znStealth)) use(Severity == #znUntrusted)

[MainWindow.SystemWatch_WorkArea_Home_Body]
@           = sz(p,p) ext(1)
Hips        = [MainWindow.SystemWatch.Hips] xy(,,,7)
pdm         = [MainWindow.SystemWatch.pdm] xy(,,,7)
SysWatch    = [MainWindow.SystemWatch.SysWatch] xy(,,,7)

[MainWindow.SystemWatch.Chart]
@

[MainWindow.SystemWatch.SysWatch]
@       = $TaskSubGroup
Check   = [TaskCheck]
Descr   = sz(a,a) a(la) xy(23,5)

[MainWindow.SystemWatch.Hips]
@           = $TaskSubGroup
Check       = [TaskCheck]
Descr       = sz(a,a) a(la) xy(23,5)
LocRes      = [Value] a(sa) xy(10,5) subst(Name() Val($Link text(s_HipsSubSystemState(FileAndRegState))  onclick(menu("[Hips_ResStateMenu] v(FileAndRegState)"))  a(lt) xy(180)))
Devices     = [Value] a(sa) xy(,5)   subst(Name() Val($Link text(s_HipsSubSystemState(DevicesState))     onclick(menu("[Hips_ResStateMenu] v(DevicesState)"))     a(lt) xy(180)))
NetRes      = [Value] a(sa) xy(,5)   subst(Name() Val($Link text(s_HipsSubSystemState(NetworkState))     onclick(menu("[Hips_ResStateMenu] v(NetworkState)"))     a(lt) xy(180)))
ExecPlace   = [Value] a(sa) xy(,5)   subst(Name() Val($Link text(s_HipsSubSystemState(PermissionsState)) onclick(menu("[Hips_ResStateMenu] v(PermissionsState)")) a(lt) xy(180)))

[Hips_ResStateMenu]
@           = t(menu) at(enum,debug)
Allow       = at(radiolike) v(#ehsssAllow) text(s_HipsSubSystemState(#ehsssAllow))
AsAppCfg    = at(radiolike) v(#ehsssApp)   text(s_HipsSubSystemState(#ehsssApp))
Deny        = at(radiolike) v(#ehsssDeny)  text(s_HipsSubSystemState(#ehsssDeny))

[MainWindow.SystemWatch.pdm]
@       = $TaskSubGroup
Check   = [TaskCheck]
Descr   = sz(a,a) a(la) xy(23,5)

[MainWindow.Hips_WorkArea.Tasks.Body]
@           = sz(p,p) ext(1)
SnifferLog  = $Link sz(p,a) i("TaskPacketSniff") ia(ct) onclick(dialog("SnifferStatistic", "NetDetails")) xy(,10)

;---------- AppRulesEdit ------------

[AppRulesEdit]
@   = $Dlg at(resizable) sz(400,450) alias(appprop)
Hdr = [AppRulesEdit_Hdr]
Tab = [AppRulesEdit_Tab]

[AppRulesEdit_Hdr]
@       = a(la) sz(p,a) rs(100,0) xy(-7,-7,-7) mg(7,7,7,7) bg("ColorWindow")
Ico     = sz(32,32) i(const(IsAppGroup ? "appgroup" : getIcon(sImagePath, "unkapp", 1)))
Name    = a(ac) xy(7) sz(p,a) f("Header1") text(const(IsAppGroup ? s_AppGroupName(sImagePath) : sDescription))

[AppRulesEdit_Tab]
@       = $Tab a(la) xy(,7,,$DialogPanelSizeY) rs(100,100)
Image   = [AppRulesEdit_Tab_Image]
Runtime = [AppRulesEdit_Tab_Runtime]
Rules   = [AppRulesEdit_Tab_Rules]

[AppRulesEdit_Tab_Image]
@           = sz(p,p) use(!IsAppGroup)
File        = [LValue] xy(,7) subst(Name() Val(xy(100) t(edit) at(readonly,singleline,compresspath,noborder) text(sImagePath)))
Vendor      = [LValue] xy(,7) subst(Name() Val(xy(100) text(sVendor)))
Product     = [LValue] xy(,7) subst(Name() Val(xy(100) text(sProduct)))
Version     = [LValue] xy(,7) subst(Name() Val(xy(100) text(sVersion)))
Created     = [LValue] xy(,7) subst(Name() Val(xy(100) text(datetime(tCreation))))
Modified    = [LValue] xy(,7) subst(Name() Val(xy(100) text(datetime(tModify))))

[AppRulesEdit_Tab_Runtime]
@       = sz(p,p) use(!IsAppGroup && Pid)
Pid     = [LValue] xy(,7) subst(Name() Val(xy(100) text(Pid)))
User    = [LValue] xy(,7) subst(Name() Val(xy(100) text("unknown")))

[AppRulesEdit_Tab_Rules]
@       = sz(p,p)
Select  = [AppRulesEdit_Tab_Rules_Select]
Files   = [AppRulesEdit_Tab_Rules_Files]
Permiss = [AppRulesEdit_Tab_Rules_Permiss]

[AppRulesEdit_Tab_Rules_Select]
@       = t(combo) a(la) sz(p,20) at(rememberdata)
Files
Permiss

[AppRulesEdit_Tab_Rules_Files]
$Col    = sz(a)  ia(cc) text("") at(clickable) visible(ctl.parent.Select.value == "Files")
@       = $List xy(,27) alias(tree.ResRule) v(Resource) childs(Childs) filter(!Data && !(Flags & #rfFilesRegistryView)) visible(ctl.parent.Select.value == "Files")
Name    = sz(200) text(s_ResGroupName(Name))
Read    = $Col i(f_AppRuleIcon(Rule.AccessFlag >> 4)) onrclick(menu("HipsAppRuleMenu.1"))
Write   = $Col i(f_AppRuleIcon(Rule.AccessFlag)) onrclick(menu("HipsAppRuleMenu.0"))
Remove  = $Col i(f_AppRuleIcon(Rule.AccessFlag >> 12)) onrclick(menu("HipsAppRuleMenu.3"))
Enum    = $Col i(f_AppRuleIcon(Rule.AccessFlag >> 8)) onrclick(menu("HipsAppRuleMenu.2"))

[AppRulesEdit_Tab_Rules_Permiss]
@       = $List a(lt) xy(,27) alias(tree.ResRule) v(Resource) childs(Childs) root(Name == "KLPrivileges") visible(ctl.parent.Select.value == "Permiss")
Name    = sz(200) text(s_ResGroupName(Name))
Allow   = sz(a) ia(cc) text("") at(clickable) i(f_AppRuleIcon(Rule.AccessFlag & 0xb)) onrclick(menu("HipsAppRuleMenu.0"))

[HipsAppRuleMenu]
$txt        = text(const(s_AppRule(ctl.value)))
@           = t(menu) at(enum) ext(1)
Inherit     = at(radiolike) v(#HIPS_FLAG_INHERIT) extprm(1) $txt
Separator
Allow       = at(radiolike) v(#HIPS_FLAG_ALLOW) extprm(1) $txt
Deny        = at(radiolike) v(#HIPS_FLAG_DENY) extprm(1) $txt
Ask         = at(radiolike) v(#HIPS_FLAG_ASK) extprm(1) $txt
ByApp       = at(radiolike) v(#HIPS_FLAG_BYAPP) extprm(1) use(0) $txt
Separator
Log         = at(chklike) extprm(1) text(const(s_AppRule(#HIPS_FLAG_LOG)))

[HipsAppRuleMenu.0]
@ = [HipsAppRuleMenu] v(mask(Rule.AccessFlag, 0xb)) subst(Log(v(bmask(Rule.AccessFlag, #HIPS_FLAG_LOG))))

[HipsAppRuleMenu.1]
@ = [HipsAppRuleMenu] v(shift(mask(Rule.AccessFlag, 0xb0), 4)) subst(Log(v(bmask(Rule.AccessFlag, #HIPS_FLAG_LOG << 4))))

[HipsAppRuleMenu.2]
@ = [HipsAppRuleMenu] v(shift(mask(Rule.AccessFlag, 0xb00), 8)) subst(Log(v(bmask(Rule.AccessFlag, #HIPS_FLAG_LOG << 8))))

[HipsAppRuleMenu.3]
@ = [HipsAppRuleMenu] v(shift(mask(Rule.AccessFlag, 0xb000), 12)) subst(Log(v(bmask(Rule.AccessFlag, #HIPS_FLAG_LOG << 12))))

[Hips_GroupNameEdit]
@ = [EditSimpleItem] subst(Name() Example(use(0))) ext(1)

[Hips_AppGroupNameEdit]
@ = [EditSimpleItem] subst(Name(v(GroupName)) Example(use(0))) ext(1)

[Hips_ResListAddMenu]
@           = t(menu)
File        = onclick(dialog("BrowseForFile", "ResList"))
Registry    = onclick(dialog("BrowseForRegistry", "ResList"))
WebService  = onclick(dialog("WebServiceEdit"))
IpRange     = onclick(dialog("IpRangeEdit"))

[HipsRuleColumn.Menu]
@           = t(menu) at(enum) v(State)
Inherit     = at(radiolike) v(#HIPS_RULE_STATE_INH)
Separator
Allow       = at(radiolike) v(#HIPS_RULE_STATE_ALLOW)
Ask         = at(radiolike) v(#HIPS_RULE_STATE_ASK)
Deny        = at(radiolike) v(#HIPS_RULE_STATE_DENY)

[Grid.Groups]
HipsRuleColumn  = sz(a) i(s_RuleState(State)) ia(cc) at(clickable) onrclick(menu("HipsRuleColumn.Menu"))
AdapterID       = [Grid.Group.Template] expand(1) bp(g_adapterInfo = NetWatch.Adapters.find("ID == val")) text(g_adapterInfo.FrendlyName) i(f_NetAdapterIcon(g_adapterInfo.TypeOfInterface, -1, g_adapterInfo.State, 0))
Severity        = [Grid.Group.Template] expand(1) text(s_NetSeverityGroup(val))

;---------- WebServiceEdit ------------

[WebServiceEdit]
@           = $Dlg sz(330,180)
Name        = [LValue] subst(Name() Val(t(edit) xy(120) v(Name)))
Direction   = [LValue] xy(,7) subst(Name() Val([WebServiceEdit.Direction] xy(120)))
Protocol    = [LValue] xy(,7) subst(Name(t(check) v(bmask(Data.Flags,#wsProtocol))) Val([WebServiceEdit.Protocol] xy(120)))
IcmpType    = [LValue] xy(,7) visible(ctl.Protocol.Val.value == 1 || ctl.Protocol.Val.value == 58) enable(ctl.Protocol.Name.value) subst(Name(t(check) v(bmask(Data.Flags,#wsIcmpType))) Val([WebServiceEdit.IcmpType] xy(120)))
IcmpCode    = [LValue] xy(,7) visible(ctl.Protocol.Val.value == 1 || ctl.Protocol.Val.value == 58) enable(ctl.Protocol.Name.value && ctl.IcmpType.Name.value) subst(Name(t(check) v(bmask(Data.Flags,#wsIcmpCode))) Val([WebServiceEdit.IcmpCode] xy(120)))
RemotePorts = [LValue] xy(,7) visible(ctl.Protocol.Val.value == 6 || ctl.Protocol.Val.value == 17) enable(ctl.Protocol.Name.value) subst(Name() Val(t(edit) xy(120) oninit(ctl.value = f_formatPorts(Data.RemotePorts)) onok(parsePorts(Data.RemotePorts, ctl.value))))
LocalPorts  = [LValue] xy(,7) visible(ctl.Protocol.Val.value == 6 || ctl.Protocol.Val.value == 17) enable(ctl.Protocol.Name.value) subst(Name() Val(t(edit) xy(120) oninit(ctl.value = f_formatPorts(Data.LocalPorts)) onok(parsePorts(Data.LocalPorts, ctl.value))))

[WebServiceEdit.Direction]
$txt        = text(const(s_NetDirection(ctl.value)))
@           = t(combo) sz(p,20) v(Data.Direction)
In          = $txt v(#wsIn)
InStream    = $txt v(#wsInStream)
InOut       = $txt v(#wsInOut)
Out         = $txt v(#wsOut)
OutStream   = $txt v(#wsOutStream)

[WebServiceEdit.Protocol]
$txt    = text(const(s_Protocols(ctl.value)))
@       = t(combo) sz(p,20) v(Data.Proto) enable(ctl.Name.value)
ICMP    = $txt v(1)
ICMPv6  = $txt v(58)
TCP     = $txt v(6)
UDP     = $txt v(17)

[WebServiceEdit.IcmpType]
$txt    = text(const(s_ICMPTypes(ctl.value)))
@       = t(combo) sz(p,20) v(Data.IcmpType) enable(ctl.Name.value)
0       = $txt v(0)
3       = $txt v(3)
4       = $txt v(4)
5       = $txt v(5)
6       = $txt v(6)
8       = $txt v(8)
9       = $txt v(9)
10      = $txt v(10)
11      = $txt v(11)
12      = $txt v(12)
13      = $txt v(13)
14      = $txt v(14)
15      = $txt v(15)
16      = $txt v(16)
17      = $txt v(17)
18      = $txt v(18)
19      = $txt v(19)
30      = $txt v(30)
31      = $txt v(31)
32      = $txt v(32)
33      = $txt v(33)
34      = $txt v(34)
35      = $txt v(35)
36      = $txt v(36)
37      = $txt v(37)
38      = $txt v(38)
40      = $txt v(40)

[WebServiceEdit.IcmpCode]
$txt    = text(const(s_IcmpCode(ctl.value)))
@       = t(combo) sz(p,20) v(Data.IcmpCode) enable(ctl.Name.value)
0       = $txt v(0)
1       = $txt v(1)
2       = $txt v(2)

;---------- IpRangeEdit ------------

[IpRangeEdit]
@           = $Dlg sz(330,a)
Name        = [Value] a(la) subst(Name(xy(,2)) Val(t(edit) sz(200,a) v(Name)))
RemoteAddrs = [IpRangeEdit_Addrs] subst(List(v(Data.RemoteAddresses)))
LocalAddrs  = [IpRangeEdit_Addrs] xy(,7,,$DialogPanelSizeY) subst(List(v(Data.LocalAddresses)))

[IpRangeEdit_Addrs]
@       = $SettingsGroup xy(,7) sz(p, 100) ext(1)
List    = [IpRangeEdit_Addrs_List]

[IpRangeEdit_Addrs_List]
@       = $List at(noheader) alias(vector) extprm(1)
Addr    = sz(a) text($AddressesFormat)
footer  = [Grid.Footer.Template] subst(Add(onclick(dialog("AddressEdit"))))
rowedit = [Grid.Editor.Template]

;---------- AddressEdit ------------

[AddressEdit]
@ = [EditSimpleItem] alias() subst(Example() Name(v() oninit(ctl.value = Address ? Address : ip(IP)) onok(if(!parseAddr(ser(Address), ctl.value), balloon("ErrResolvingIp"))))) ext(1)

[IpEdit]
@ = [EditSimpleItem] alias() subst(Example() Name(v() oninit(ctl.value = ip(ser(Version))) onok(if(!parseIp(ser(Version), ctl.value), balloon("ErrResolvingIp"))))) ext(1)

[ResolveIp]
@           = $DlgAttrBase at(a_cancel) sz(330,130) at(nohelp)
Text        = sz(250,30)
Progress    = t(progress) a(la) xy(,7) sz(p,15)

;---------- PacketRuleEdit ------------

[PacketRuleEdit]
@       = $DlgAttr sz(350,130)
Group   = [LValue] subst(Name() Val([PacketRuleEdit_Group]))
Service = [LValue] xy(,7) subst(Name() Val(t(combo) xy(100) v(ResIdEx) items(vector(Resource.treeFind("Childs", "Name == \"KLWebServices\"").Childs) text(Name) v(Id))))
Address = [LValue] xy(,7) subst(Name() Val([PacketRuleEdit_Address]))

[PacketRuleEdit_Group]
$GroupText  = const(s_NetSeverity(ctl.value))
@           = t(combo) xy(100) v(Severity)
All         = v(#znAll) text($GroupText)
Untrusted   = v(#znUntrusted) text($GroupText)
NetBIOS     = v(#znNetBIOS) text($GroupText)
Trusted     = v(#znTrusted) text($GroupText)

[PacketRuleEdit_Address]
@   = t(combo) xy(100) v(ResIdEx2) items(vector(Resource.treeFind("Childs", "Name == \"KLIpAddresses\"").Childs) text(Name) v(Id))
Any = v(0)

;---------- AdapterEdit ------------

[AdapterEdit]
@   = $Dlg sz(350,400) alias(taskedit) ns(NetWatch)
Tab = [AdapterEdit_Tab]

[AdapterEdit_Tab]
@       = $Tab
General = [AdapterEdit_Tab_General]

[AdapterEdit_Tab_General]
@           = sz(p,p) ns(Adapters.find("ID == g_AdapterID"))
Info        = [AdapterEdit_Tab_General_Info]
NewNetwork  = [AdapterEdit_Tab_General_NewNetwork]

[AdapterEdit_Tab_General_Info]
@       = sz(p,a)
Icon    = sz(32,32) xy(,7) i(f_NetAdapterIcon(TypeOfInterface, -1, State, 1))
Name    = a(as) xy(17) sz(p,a) f("Normal_Bold") text(FrendlyName)
Type    = [LValue] a(sa) xy(,7) subst(Name() Val(xy(70) text(s_NetType(IfType))))
Status  = [LValue] a(sa) xy(,7) subst(Name() Val(xy(70) text(f_NetConnected(State & #znConnected))))

[AdapterEdit_Tab_General_NewNetwork]
@           = $SettingsGroup xy(,17) v(bmask(Settings,#znAskWhenNewZones))
Legend
Ask         = $Radio xy(,7) v(1)
AssignTo    = $Radio xy(,7) v(0)
Zone        = $Combo xy(20,7) enable(ctl.AssignTo.selected) v(UndefZoneID) items(vector(Zones) text(if(ID == g_AdapterID || !ID, FrendlyName)) v(ID))

;---------- NetworkEdit ------------

[NetworkEdit]
@   = $Dlg sz(350,400) alias(settings)
Tab = [NetworkEdit_Tab]

[NetworkEdit_Tab]
@               = $Tab
General         = [NetworkEdit_Tab_General]
ZoneAddresses   = [NetworkEdit_Tab_ZoneAddresses]

[NetworkEdit_Tab_General]
@           = sz(p,p)
Icon        = sz(32,32) xy(,7) i(f_NetAdapterIcon(TypeOfInterface, -1, State, 1))
Type        = [LValue] a(as) xy(17) subst(Name() Val(xy(70) text(s_NetType(IfType))))
Status      = [LValue] a(sa) xy(,7) subst(Name() Val(xy(70) text(State & #znConnected ? f_NetConnected(1) + if(TimeConnected, " " + datetime(TimeConnected)) : f_NetConnected(0)))))
Created     = [LValue] a(sa) xy(,7) subst(Name() Val(xy(70) text(datetime(TimeCreated))))
Name        = [LValue] xy(,17) subst(Name() Val(t(edit) xy(100) v(FrendlyName)))
Severity    = [LValue] xy(,7) subst(Name() Val([NetworkEdit_Severity_Combo] xy(100) v(Severity)))
Area        = [NetworkEdit_Tab_General_Area]

[NetworkEdit_Severity_Combo]
$txt    = text(const(s_NetSeverity(ctl.value)))
@       = t(combo)
Public  = $txt v(#znUntrusted)
Local   = $txt v(#znNetBIOS)
Trusted = $txt v(#znTrusted)

[NetworkEdit_Tab_General_Area]
@       = $SettingsGroup sz(p,175) x(,17) v(bmask(Settings, #znUptoGateway))
Whole   = $Radio v(0)
Subnets = $Radio xy(,7) v(1)
List    = [NetworkEdit_Tab_General_Area_List]

[NetworkEdit_Tab_General_Area_List]
@       = $List a(la) xy(20,7) at(noheader) alias(vector) v(IPNets) enable(ctl.Subnets.selected)
Subnet  = sz(a) text(ip(ser(Version)))
footer  = [Grid.Footer2.Template] subst(Add(onclick(dialog("IpEdit"))))

[NetworkEdit_Tab_ZoneAddresses]
@       = sz(p,p)
IPList  = [NetworkEdit_Tab_ZoneAddresses_IPList]

[NetworkEdit_Tab_ZoneAddresses_IPList]
@       = $List sz(p,p) at(noheader) alias(vector) v(getNetWatchZoneAddrs(ID).IP)
Name    = sz(a,a) text(ip(ser(Version)))

[NewNetwork]
@ = [AlertDialogT] sz(320,a) subst(Caption(text()) Body([NewNetwork_Body]))

[NewNetwork_Body]
@       = ns(NewZone)
Descr   = [AlertDialogT_InfoArea] subst(Info([NewNetwork_Descr]))
Actions = [NewNetwork_Body_Actions]

[NewNetwork_Descr]
Icon    = sz(32,32) i(f_NetAdapterIcon(TypeOfInterface, -1, State, 1))
Adapter = [LValue] a(as) xy(17) subst(Name() Val(xy(70) text(NetAdapter.FrendlyName)))
Type    = [LValue] a(sa) xy(,7) subst(Name() Val(xy(70) text(s_NetType(IfType))))
Network = [LValue] a(sa) xy(,7) subst(Name() Val(xy(70) text(FrendlyName)))

[NewNetwork_Body_Actions]
@       = $AlertActions at(enum) v(Severity)
Public  = [NewNetwork_ActionButton] v(#znUntrusted) subst(Name() Descr())
Local   = [NewNetwork_ActionButton] v(#znNetBIOS) subst(Name() Descr())
Trusted = [NewNetwork_ActionButton] v(#znTrusted) subst(Name() Descr())

[NewNetwork_ActionButton]
@ = [AlertDialog_ActionButton] enable(1) subst(Name(f(const(Severity == ctl.parent.value ? "AlertBtn_a" : "AlertBtn"))))

;---------- SnifferStatistic ------------

[SnifferStatistic]
@           = t(dialog) mg(7,7) sz(600,500) at(a_close,resizable) alias(task) onclose( state & #StateFlagOperational ? msg("CantCloseActiveNetStat", #m_warning) : 1))
Filter      = [SnifferStatistic_Filter]
Splitter    = [SnifferStatistic_Splitter]
Start       = $Button a(ra) xy(160,10) text($Start) onclick(if(checkPassword(#pwdc_StopTask), setstate(#TASK_REQUEST_RUN))) enable(!(state & #StateFlagOperational))
Stop        = $Button a(rs) xy(80,) text($Stop) onclick(setstate(#TASK_REQUEST_STOP)) enable(state & #StateFlagOperational)
Clear       = $Button a(rs) xy(,) text($Clear) enable(!(state & #StateFlagOperational)) onclick(clear_reportDB(#dbNetworkPackets))

[SnifferStatistic_Filter]
@           = a(la) sz(p,a) xy(,,,7)
TextFSrc    = text($Source) a(ls) xy(5,0) mg(0,4)
FilterIPSrc = t(edit) a(as) xy(5,) sz(100,a)
TextFTgt    = text($Target) a(as) xy(10,) mg(0,4)
FilterIPTgt = t(edit) a(as) xy(5,) sz(100,a)
TextFProt   = text($Protocol) a(as) xy(10,) mg(0,4)
FilterProto = t(edit) a(as) xy(5,) sz(60,a)
RunFilter   = $Button a(rs) xy(,-1) enable(!(state & #StateFlagOperational)) onclick(ctl.Frames.setfilter("wildcard(\"" + ctl.FilterIPSrc.value + "\",ip(IPSource)) && wildcard(\"" + ctl.FilterIPTgt.value + "\",ip(IPTarget)) && wildcard(\"" + ctl.FilterProto.value + "\",s_Protocols(Protocol,HighProtocol))", 1))

[SnifferStatistic_Splitter]
@       = t(splitter) at(vertical,rememberdata) a(la) xy(0,0) sz(p, 375)
Frames  = [SnifferStatistic_Splitter_Frames]
Details = [SnifferStatistic_Splitter_Details]
;Details = [SnifferStatistic_HexViewer]


[SnifferStatistic_Splitter_Frames]
@           = $List sz(0,0) rs(0,0) alias(netdetails) prm(#dbNetworkPackets) refresh(100)
TimeOffset  = sz(120) text(datetime(Timestamp))
Source      = sz(120) text(ip(IPSource))
Target      = sz(120) text(ip(IPTarget))
Etype       = sz(120) text(s_EtherTypes(EType))
Protocol    = sz(120) text(s_Protocols(Protocol,HighProtocol))
;Protocol    = sz(120) text(s_Protocols(Protocol) + " " + s_HiProtocols(HighProtocol))

[SnifferStatistic_Splitter_Details]
@       = t(splitter) at(rememberdata) alias(netframedetail) dataowner(Details.parent.Frames) xy(0,0) rs(0,0) sz(p,p) bg("ColorWindowClassic")
Tree    = [SnifferStatistic_Splitter_Details_Tree]
HexView = [SnifferStatistic_Splitter_Details_HexView]

[SnifferStatistic_Splitter_Details_Tree]
@       = $List sz(0,0) rs(0,0) at(noheader) alias(tree.NetDetailsList) v(FrameDetails) childs(vChild)
Name    = sz(a) text(s_FrameDetails(id, str1, str2, str3))

[SnifferStatistic_Splitter_Details_HexView]
@ = t(hexviewer) sz(0,0) rs(0,0) alias(hexview.Sniffer) v(FrameBin) bg("ColorWindow") f("Normal")
