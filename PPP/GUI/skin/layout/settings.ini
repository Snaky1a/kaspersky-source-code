;------------- Scheduler -----------

[SchedulerView]
$SchedulePage   = a(lt) sz(p,a) mg(7,0) xy(,34) at(hide)
@               = sz(p,160) ext(1)
Type            = [SchedulerView_Type]
Once            = [SchedulerView_Once]
AtStartup       = [SchedulerView_AtStartup]
AfterUpdate     = [SchedulerView_AfterUpdate]
Minutely        = [SchedulerView_Minutely]
Hourly          = [SchedulerView_Hourly]
Daily           = [SchedulerView_Daily]
Weekly          = [SchedulerView_Weekly]
Monthly         = [SchedulerView_Monthly]
Time            = $Check xy(7,20) v(schedule.UseTime) visible(switch(schedule.Type,"Scheduler_Time_Show")) a(lb)
TimeEdit        = t(timeedit) a(as) xy(7,-4) sz(100,22) v(schedule.Time) enable(schedule.UseTime) visible(switch(schedule.Type,"Scheduler_Time_Show"))
RunIfSkipped    = $Check xy(7,) v(schedule.RaiseIfSkipped) visible(switch(schedule.Type,"Scheduler_RunIfSkipped_Show")) a(lb)

[SchedulerView_Type]
@                   = t(combo) sz(p,a) v(schedule.Type)
Minutely            = v(0)
Hours               = v(1)
Days                = v(2)
Weeks               = v(3)
AtSpecTime          = v(4)
Monthly             = v(5)
AtAppStartup        = v(6)
AfterEveryUpdate    = v(7) use(type=="ods")

[SchedulerView_Minutely]
@           = $SchedulePage visible(schedule.Type==0)
MinuteEvery
MinuteEdit  = t(edit) at(number) a(as) sz(50) nl(5,59) xy($Edit_CommentOffsetX,$Edit_CenterOffsetY) v(schedule.MinutesCount)
MinuteLalel = a(as) xy(10,3)

[SchedulerView_Hourly]
@           = $SchedulePage visible(schedule.Type==1)
HourEvery
HourEdit    = t(edit) at(number) a(as) sz(50) nl(1,23) xy($Edit_CommentOffsetX,$Edit_CenterOffsetY) v(schedule.HoursCount)
HourLalel   = a(as) xy(10,3)

[SchedulerView_Daily]
@           = $SchedulePage visible(schedule.Type==2) v(schedule.Every)
DayRadio    = $Radio v(0)
DayEdit     = t(edit) at(number) a(as) sz(50) nl(1,31) xy($Edit_CommentOffsetX,$Edit_CenterOffsetY) v(schedule.DaysCount) enable(!schedule.Every)
DayLalel    = a(as) xy(10, 3)
Weekday     = $Radio a(la) xy(,7) v(1)
Holiday     = $Radio a(la) xy(,7) v(2)

[SchedulerView_Weekly]
@               = $SchedulePage visible(schedule.Type==3)
WeekDay0Text    = a(la) xy(1,15) sz(25)
WeekDay1Text    = a(as) xy(15) sz(25)
WeekDay2Text    = a(as) xy(15) sz(25)
WeekDay3Text    = a(as) xy(15) sz(25)
WeekDay4Text    = a(as) xy(15) sz(25)
WeekDay5Text    = a(as) xy(15) sz(25)
WeekDay6Text    = a(as) xy(15) sz(25)
WeekDay0Check   = $Check a(la) xy(0,2) sz(14,14) v(schedule.WeekDay0)
WeekDay1Check   = $Check a(as) xy(26) sz(14,14) v(schedule.WeekDay1)
WeekDay2Check   = $Check a(as) xy(26) sz(14,14) v(schedule.WeekDay2)
WeekDay3Check   = $Check a(as) xy(26) sz(14,14) v(schedule.WeekDay3)
WeekDay4Check   = $Check a(as) xy(26) sz(14,14) v(schedule.WeekDay4)
WeekDay5Check   = $Check a(as) xy(26) sz(14,14) v(schedule.WeekDay5)
WeekDay6Check   = $Check a(as) xy(26) sz(14,14) v(schedule.WeekDay6)

[SchedulerView_Once]
@           = $SchedulePage visible(schedule.Type==4)
DateText
Date        = t(timeedit) at(date) a(as) xy(5,-4) sz(150,22) v(schedule.Time)

[SchedulerView_Monthly]
@           = $SchedulePage visible(schedule.Type==5)
MonthEvery
MonthEdit   = t(edit) at(number) a(as) sz(50) nl(1,31) xy($Edit_CommentOffsetX,$Edit_CenterOffsetY) v(schedule.DaysCount)
MonthLalel  = a(as) xy(10,3)

[SchedulerView_AtStartup]
@               = $SchedulePage visible(schedule.Type==6)
AtStartup
AtStartupEdit   = t(edit) at(number) a(as) sz(50) nl(0,60) xy($Edit_CommentOffsetX,$Edit_CenterOffsetY) v(schedule.StartDelay)
AtStartupLalel  = a(as) xy(10,3)

[SchedulerView_AfterUpdate]
@ = $SchedulePage visible(schedule.Type==7)

[HeuristicParams]
@           = sz(p,a) a(la) xy(,7) ext(1)
Val         = t(slider) a(la) sz(p,30) nl(0,2) extprm(1)
LevelLow    = a(la) sz(a,a)
LevelMed    = a(cs) sz(a,a)
LevelHigh   = a(rs) sz(a,a)

[EditSimpleItem]
@       = $DlgAttr sz(350,a) alias(settings)
Body    = [EditSimpleItem_Body]

[EditSimpleItem_Body]
@       = sz(p,a) xy(,,,$DialogPanelSizeY)
Name    = t(edit) sz(p,a) v(Name) extprm(1)
Example = sz(a,a) a(la) xy(,7) f("Normal_Grey") extprm(1)

[PauseTaskGroup]
@           = $SettingsGroup xy(,7) ext(1)
SheduleBtn  = t(button) sz(86,23) a(rs) xy(,-3) enable(smode.EnablePeriod) onclick(dialog("PauseTaskScheduleSettings"))
Schedule    = t(check) sz(a,a) v(smode.EnablePeriod)
AppStart    = t(check) sz(a,a) a(la) xy(,13) v(smode.EnableAppList)
AppStartBtn = t(button) sz(86,23) a(rs) xy(,-3) enable(smode.EnableAppList) onclick(dialog("PauseTaskAppSettings"))

[PauseTaskScheduleSettings]
@       = $DlgAttr sz(263,a) alias(taskedit)
Body    = [PauseTaskScheduleSettings_Body]

[PauseTaskScheduleSettings_Body]
@           = sz(p,a) xy(,,,$DialogPanelSizeY)
FromLabel   = a(lt)
FromEdit    = t(timeedit) a(rs) xy(,-3) sz(60,a) v(smode.From)
ToLabel     = a(la) xy(,7)
ToEdit      = t(timeedit) a(rs) xy(,-3) sz(60,a) v(smode.To)

[PauseTaskAppSettings]
@       = $DlgAttr sz(320,200) at(resizable) h(1293) alias(taskedit)
Body    = [PauseTaskAppSettings_Body]

[PauseTaskAppSettings_Body]
@       = sz(p,p) xy(,,,$DialogPanelSizeY)
AppList = [PauseTaskAppSettings_Body_AppList]

[PauseTaskAppSettings_Body_AppList]
@       = $List alias(vector) at(singlesel,noheader,checked) v(smode.AppList) unique(Name == newItem.Name)
App     = text(Name) i(getIconAsync(Name, "unkobj")) v(Enabled) sz(a)
footer  = [Grid.Footer.Template] subst(Add(onclick(browseapp(Name))))
rowedit = [Grid.Editor.Template]

[ProfileStatusMenu]
@           = t(menu) at(enum) v(enabled)
Enabled     = text($Enable)  at(radiolike) v(1)
Disabled    = text($Disable) at(radiolike) v(0)
sep
Details     = text($Details) onclick(dialog("ErrorDescription")) use(state & #StateFlagMalfunction)

[SettingsLevelMenuBase]
@           = t(menu) at(enum)
Level       = [SettingsLevelMenuBase_Level]
sep
Customize   = text($Customize) at(radiolike) extprm(1)

[SettingsLevelMenuBase_Level]
@       = at(enum) extprm(1)
High    = text($High)      at(radiolike) v(#SETTINGS_LEVEL_HIGH)
Medium  = text($Medium)    at(radiolike) v(#SETTINGS_LEVEL_DEFAULT)
Low     = text($Low)       at(radiolike) v(#SETTINGS_LEVEL_LOW)

[SettingsLevelMenu]
@ = [SettingsLevelMenuBase] subst(Level(v(level) onchange(setlevel(level))) Customize(bp(ctl.selected = level == #SETTINGS_LEVEL_CUSTOM)))

[ScanActionMenu]
@               = t(menu) at(enum) v(ScanAction)
AskFinish       = at(radiolike) v(#SCAN_ACTION_POSTPONE) use(type == "ods")
AskDetect       = at(radiolike) v(#SCAN_ACTION_ASKUSER)
DontAsk         = at(radiolike) v(#SCAN_ACTION_DISINFECT)
Separator
TryDisinfect    = at(chklike) v(TryDisinfect) enable(ScanAction == #SCAN_ACTION_DISINFECT)
TryDelete       = at(chklike) v(TryDelete) enable(ScanAction == #SCAN_ACTION_DISINFECT)

[WmActionMenu]
@       = t(menu) at(enum) v(ScanAction)
Ask     = at(radiolike) v(#SCAN_ACTION_ASKDETECT)
Block   = at(radiolike) v(#SCAN_ACTION_DETECT)
Allow   = at(radiolike) v(#SCAN_ACTION_REPORT)

;-------------------------------- OptionsWindow --------------------------------

[OptionsWindow]
$Caption    = sz(a,a) ta(lc) mg(20,,60) bg("OptionsWindowCaption") f("Normal_White")
$NavBtn     = a(la) sz(p,30) at(clickable,fixstyle,singleline,radiolike) mg(8,0,0,0) rs(0,0) bg(ctl.selected ? "MainWindowProtectionBanner" : "") f(ctl.selected ? "SettNav_a" : "SettNav")
$WorkArea   = a(lt) sz(p,p) rs(100,100)
@           = $DlgAttr at(minimizable,a_apply,a_ok,a_cancel) mg(0,0) sz(518,460) alias(taskedit) onok(checkPassword(#pwdc_SaveSettings)) onapply(if(global.enabled != enabled, enable(enabled)); f_IfErrThenMsg(savesettings(), "SettingsOperationError"))
Navigator   = [OptionsWindow_Navigator]

[OptionsWindow_Navigator]
@           = alias(navigator) btns(Btns) workarea(WorkArea) at(enum,rememberdata) sz(p,p) xy(,,,$DialogPanelSizeY)
Btns        = [OptionsWindow_Navigator_Btns]
SepVert     = [OptionsWindow_Navigator_SepVert]
WorkArea    = [OptionsWindow_Navigator_WorkArea]

[OptionsWindow_Navigator_Btns]
@               = sz(160,p) mg(1,1) rs(0,100) bg("MainWindow")
General         = $NavBtn
Threats         = $NavBtn
Exclusions      = $NavBtn
Proxy           = $NavBtn
Traffic         = $NavBtn
Notifications   = $NavBtn
Reports         = $NavBtn
Appearance      = $NavBtn
Feedback        = $NavBtn
TroubleShooting = $NavBtn

[OptionsWindow_Navigator_SepVert]
@ = sz(1,p) a(at) b(Group) rs(0,0)

[OptionsWindow_Navigator_WorkArea]
@               = sz(p,p) a(at) rs(100,100)
General         = [OptionsWindow_Navigator_WorkArea_General]
Threats         = [OptionsWindow_Navigator_WorkArea_Threats]
Exclusions      = [OptionsWindow_Navigator_WorkArea_Exclusions]
Notifications   = [OptionsWindow_Navigator_WorkArea_Notifications]
Proxy           = [OptionsWindow_Navigator_WorkArea_Proxy]
Traffic         = [OptionsWindow_Navigator_WorkArea_Traffic]
Reports         = [OptionsWindow_Navigator_WorkArea_Reports]
Appearance      = [OptionsWindow_Navigator_WorkArea_Appearance]
Feedback        = [OptionsWindow_Navigator_WorkArea_Feedback]
TroubleShooting = [OptionsWindow_Navigator_WorkArea_TroubleShooting]

[OptionsWindow_Navigator_WorkArea_General]
@       = $WorkArea
Caption = $Caption
Body    = [OptionsWindow_Navigator_WorkArea_General_Body]

[OptionsWindow_Navigator_WorkArea_General_Body]
@               = sz(p,p) a(la) mg(7,7)
EnableProt      = $Check xy(10,14) f("Header1") v(enabled)
RunOnStartup    = $Check xy(10,7) v(RunAtSystemStartup)
AdvDis          = $Check xy(10,7) v(AVService.UseActiveDisinfection)
Pswd            = [OptionsWindow_Navigator_WorkArea_General_Body_Pswd]
Performance     = [OptionsWindow_Navigator_WorkArea_General_Body_Performance]

[OptionsWindow_Navigator_WorkArea_General_Body_Pswd]
@               = $SettingsGroup xy(,21)
SelfProt        = $Check v(EnableSelfProtection)
ServiceControl  = $Check xy(,7) v(AllowServiceStop)
Pswd            = $Check xy(,7) v(EnablePswrdProtect) onok(if(!ctl.value, (OPEP = "", #true)))
SetPswd         = $Button_Medium a(rs) xy(,-4) text($Settings) enable(ctl.Pswd.value) onclick(dialog("PasswordEdit")) onok(if(ctl.Pswd.value && !OPEP, balloon("ErrNoPasswordEntered")))

[OptionsWindow_Navigator_WorkArea_General_Body_Performance]
@       = $SettingsGroup xy(,17)
Battery = $Check v(BatterySafe)
Abs     = $Check xy(,7) v(AVService.UseABS)

[OptionsWindow_Navigator_WorkArea_Threats]
@       = $WorkArea alias(taskview) ns(AVService)
Caption = $Caption
Body    = [OptionsWindow_Navigator_WorkArea_Threats_Body]

[OptionsWindow_Navigator_WorkArea_Threats_Body]
@       = sz(p,p) a(la) mg(7,7)
List    = [OptionsWindow_Navigator_WorkArea_Threats_List]

[OptionsWindow_Navigator_WorkArea_Exclusions]
@       = $WorkArea
Caption = $Caption
Body    = [OptionsWindow_Navigator_WorkArea_Exclusions_Body]

[OptionsWindow_Navigator_WorkArea_Exclusions_Body]
@           = sz(p,p) a(la) mg(7,7)
List        = [OptionsWindow_Navigator_WorkArea_Exclusions_Body_List]
RuleLabel   = sz(a,a) a(la) xy(,7)
Rule        = t(richedit) at(readonly,nofocus,vscroll) sz(p,p) a(la) xy(,7) alias(descriptor) dataowner(List) text($ExclusionMasksDescr)

[OptionsWindow_Navigator_WorkArea_Exclusions_Body_List]
@       = $List sz(p,200) a(la) alias(vector) v(AVService.Excludes)
Object  = sz(p,a) rs(80) at(checked) text(Triggers & #AVS_fObjectMask ? Object.Mask : "*") v(Enable)
Threat  = sz(p,a) rs(20) text(Triggers & #AVS_fVerdictMask ? VerdictMask : "*")
footer  = [Grid.Footer.Template] subst(Add(onclick(dialog("ExclusionEdit", "List"))))
rowedit = [Grid.Editor.Template]

[OptionsWindow_Navigator_WorkArea_Notifications]
@       = $WorkArea
Caption = $Caption
Body    = [OptionsWindow_Navigator_WorkArea_Notifications_Body]

[OptionsWindow_Navigator_WorkArea_Notifications_Body]
@       = sz(p,p) a(la) mg(7,7)
List    = [OptionsWindow_Navigator_WorkArea_Notifications_Body_List]

[OptionsWindow_Navigator_WorkArea_Notifications_Body_List]
@       = $List alias(tree.Notifications) v(NSettings) a(la)
Event   = sz(200,a) text(switch(EventID,"EventTypes"))
Ballon  = sz(40,a) at(checked) v(CheckTray)
Sound   = sz(40,a) at(checked) v(CheckSound) enable(CheckTray)
Email   = sz(40,a) at(checked) v(CheckMail)

[OptionsWindow_Navigator_WorkArea_Proxy]
@       = $WorkArea
Caption = $Caption
Body    = [OptionsWindow_Navigator_WorkArea_Proxy_Body]

[OptionsWindow_Navigator_WorkArea_Proxy_Body]
@           = sz(p,p) a(la) mg(7,7)
UseProxy    = $Check xy(10,14) f("Header1") v(ProxySettings.UseProxy)
Settings    = [OptionsWindow_Navigator_WorkArea_Proxy_Body_Settings]

[OptionsWindow_Navigator_WorkArea_Proxy_Body_Settings]
@       = a(la) sz(p,a) xy(10,14) v(ProxySettings.UseIEProxySettings) enable(ProxySettings.UseProxy)
Auto    = $Radio v(1)
Manual  = $Radio xy(,7) v(0)
Address = [OptionsWindow_Navigator_WorkArea_Proxy_Body_Settings_Address]
Port    = [OptionsWindow_Navigator_WorkArea_Proxy_Body_Settings_Port]
UseAuth = $Check xy(,7) v(ProxySettings.ProxyAuth) enable(!ProxySettings.UseIEProxySettings)
Login   = [OptionsWindow_Navigator_WorkArea_Proxy_Body_Settings_Login]
Pass    = [OptionsWindow_Navigator_WorkArea_Proxy_Body_Settings_Pass]
Bypass  = $Check xy(,7) v(ProxySettings.BypassProxyServerForLocalAddresses) enable(!ProxySettings.UseIEProxySettings)

[OptionsWindow_Navigator_WorkArea_Proxy_Body_Settings_Address]
@               = sz(190,a) a(la) xy(20,7) rs(100) enable(!ProxySettings.UseIEProxySettings)
AddressLabel    = sz(a,a)
Address         = t(edit) sz(p,a) a(la) xy(,3,10) v(ProxySettings.ProxyHost) onok(if(ctl.enabled && !ctl.value, balloon("ErrProxyHostIsMissing")))
Sep             = sz(a,a) a(as) xy(-6,3,)

[OptionsWindow_Navigator_WorkArea_Proxy_Body_Settings_Port]
@           = sz(90,a) a(as) rs(0) enable(!ProxySettings.UseIEProxySettings)
PortLabel   = sz(a,a)
Port        = t(edit) sz(p,a) a(la) xy(,3) at(number) nl(1,65535) v(ProxySettings.ProxyPort)

[OptionsWindow_Navigator_WorkArea_Proxy_Body_Settings_Login]
@           = sz(180,a) a(la) xy(20,7) rs(50) enable(!ProxySettings.UseIEProxySettings && ProxySettings.ProxyAuth)
LoginLabel  = sz(a,a)
Login       = t(edit) sz(p,a) a(la) xy(,3) v(ProxySettings.ProxyLogin)

[OptionsWindow_Navigator_WorkArea_Proxy_Body_Settings_Pass]
@           = sz(90,a) a(as) rs(50) xy(10) enable(!ProxySettings.UseIEProxySettings && ProxySettings.ProxyAuth)
PassLabel   = sz(a,a)
Pass        = t(edit) sz(p,a) a(la) xy(,3) at(passwordset) v(bicrypt(ProxySettings.ProxyPassword))

[OptionsWindow_Navigator_WorkArea_Traffic]
@       = $WorkArea
Caption = $Caption
Body    = [OptionsWindow_Navigator_WorkArea_Traffic_Body]

[OptionsWindow_Navigator_WorkArea_Traffic_Body]
@       = sz(p,p) a(la) mg(7,7)
Ports   = [OptionsWindow_Navigator_WorkArea_Traffic_Body_Ports]
Crypted = [OptionsWindow_Navigator_WorkArea_Traffic_Body_Crypted]

[OptionsWindow_Navigator_WorkArea_Traffic_Body_Ports]
@       = $SettingsGroup xy(,14) v(TrafficMonitor.AllPorts)
All     = $Radio v(1)
Custom  = $Radio xy(,7) v(0)
Select  = $Button a(rs) xy(,-4) enable(!TrafficMonitor.AllPorts) onclick(dialog("TrafficMonitor_Ports"))

[OptionsWindow_Navigator_WorkArea_Traffic_Body_Crypted]
@       = $SettingsGroup xy(,17) v(TrafficMonitor.DecodeSSL)
ChkAll  = $Radio v(1)
Ask     = $Radio xy(,7) v(2)
ChkNon  = $Radio xy(,7) v(0)

[OptionsWindow_Navigator_WorkArea_Reports]
@       = $WorkArea
Caption = $Caption
Body    = [OptionsWindow_Navigator_WorkArea_Reports_Body]

[OptionsWindow_Navigator_WorkArea_Reports_Body]
@           = sz(p,p) a(la) mg(7,7)
EventLog    = [OptionsWindow_Navigator_WorkArea_Reports_Body_EventLog]
Statistics  = [OptionsWindow_Navigator_WorkArea_Reports_Body_Statistics]
OldItems    = [OptionsWindow_Navigator_WorkArea_Reports_Body_OldItems]

[OptionsWindow_Navigator_WorkArea_Reports_Body_EventLog]
@           = $SettingsGroup xy(,14)
Period      = $Check xy(,3) v(Report.logPeriodOn)
PeriodVal   = t(edit) sz(50,a) a(ls) xy(180,-3) at(number) nl(1,65535) v(Report.logPeriodVal) enable(Report.logPeriodOn)
PeriodLable = sz(a,a) a(as) xy(7,3)
Size        = $Check xy(,10) v(Report.logSizeOn)
SizeVal     = t(edit) sz(50,a) a(ls) xy(180,-3) at(number) nl(1,65535) v(Report.logSizeVal) enable(Report.logSizeOn)
SizeLable   = sz(a,a) a(as) xy(7,3)

[OptionsWindow_Navigator_WorkArea_Reports_Body_Statistics]
@           = $SettingsGroup xy(,7)
Period      = $Check xy(,3) v(Report.statPeriodOn)
PeriodVal   = t(edit) sz(50,a) a(ls) xy(180,-3) at(number) nl(1,65535) v(Report.statPeriodVal) enable(Report.statPeriodOn)
PeriodLable = sz(a,a) a(as) xy(7,3)
Size        = $Check xy(,10) v(Report.statSizeOn)
SizeVal     = t(edit) sz(50,a) a(ls) xy(180,-3) at(number) nl(1,65535) v(Report.statSizeVal) enable(Report.statSizeOn)
SizeLable   = sz(a,a) a(as) xy(7,3)

[OptionsWindow_Navigator_WorkArea_Reports_Body_OldItems]
@               = $SettingsGroup xy(,7) visible(0)
Archive         = $Radio xy(,3)
ArchiveBrowse   = $Button a(rs) xy(7,-3) onclick(browseobject(ctl.ArchivePath.value, "BrowseForFolder", #SHELL_OBJTYPE_FOLDER)) text($Browse)
ArchivePath     = t(edit) sz(100,a) a(ps) xy(7,1,) rs(100)
Delete          = $Radio xy(,7)

[OptionsWindow_Navigator_WorkArea_Appearance]
@       = $WorkArea
Caption = $Caption
Body    = [OptionsWindow_Navigator_WorkArea_Appearance_Body]

[OptionsWindow_Navigator_WorkArea_Appearance_Body]
@       = sz(p,p) a(la) mg(7,7)
Tray    = [OptionsWindow_Navigator_WorkArea_Appearance_Body_Tray]
Skin    = [OptionsWindow_Navigator_WorkArea_Appearance_Body_Skin]

[OptionsWindow_Navigator_WorkArea_Appearance_Body_Tray]
@               = $SettingsGroup xy(,14)
Tray            = $Check v(Gui.EnableTrayIconAnimation)
Transparency    = $Check xy(,7) v(Gui.EnableTransparentWindows)
News            = $Check xy(,7) v(Gui.EnableNewsTrayIcon)
Login           = $Check xy(,7) v(EnableLoginShow)

[OptionsWindow_Navigator_WorkArea_Appearance_Body_Skin]
@       = $SettingsGroup xy(,21)
Enable  = $Check v(Gui.EnableSkinPath)
Browse  = $Button a(ra) onclick(browseobject(Gui.SkinPath, "BrowseForFolder", #SHELL_OBJTYPE_FOLDER)) text($Browse) xy(,7) enable(ctl.Enable.value)
Path    = t(edit) sz(p,a) a(ps) rs(100) xy(7,1,,) v(Gui.SkinPath) enable(ctl.Enable.value)

[OptionsWindow_Navigator_WorkArea_Feedback]
@       = $WorkArea
Caption = $Caption
Body    = [OptionsWindow_Navigator_WorkArea_Feedback_Body]

[OptionsWindow_Navigator_WorkArea_Feedback_Body]
@       = sz(p,p) a(la) mg(7,7)
Desc    = sz(a,a) a(la) xy(10,14,13)
Ksn     = $Check xy(10,21) f("Header1") v(Statistics.enabled)

[OptionsWindow_Navigator_WorkArea_TroubleShooting]
@       = $WorkArea
Caption = $Caption
Body    = [OptionsWindow_Navigator_WorkArea_TroubleShooting_Body]

[OptionsWindow_Navigator_WorkArea_TroubleShooting_Body]
@       = sz(p,p) a(la) mg(7,7)
Info    = [OptionsWindow_Navigator_WorkArea_TroubleShooting_Body_Info]
Trace   = [OptionsWindow_Navigator_WorkArea_TroubleShooting_Body_Trace]
Collect = [OptionsWindow_Navigator_WorkArea_TroubleShooting_Body_Collect]

[OptionsWindow_Navigator_WorkArea_TroubleShooting_Body_Info]
@           = $SettingsGroup xy(,14)
Location    = [Value] subst(Name() Val(text(env("ProductRoot")) sz(288,a) rs(100) ta(r)))
Version     = [Value] a(la) xy(,7) subst(Name() Val(text(env("ProductVersion")) xy(,,100)))

[OptionsWindow_Navigator_WorkArea_TroubleShooting_Body_Trace]
@           = $SettingsGroup xy(,21)
Label       = sz(p,a)
StateLabel  = a(la) xy(,7) sz(a,a)
State       = a(ls) xy(60,) sz(a,a)
LevelLabel  = a(la) xy(,10) sz(a,a)
Level       = [OptionsWindow_Navigator_WorkArea_TroubleShooting_Body_Trace_Level]
OnOff       = $Button_Large a(rs) onclick(switch_tracer())

[OptionsWindow_Navigator_WorkArea_TroubleShooting_Body_Trace_Level]
@       = t(combo) a(ls) xy(60,-3) sz(100,0) v(tracer_level())
lvl100  = v(100) sz(a,a)
lvl200  = v(200) sz(a,a)
lvl300  = v(300) sz(a,a)
lvl400  = v(400) sz(a,a)
lvl500  = v(500) at(default) sz(a,a)
lvl600  = v(600) sz(a,a)

[OptionsWindow_Navigator_WorkArea_TroubleShooting_Body_Collect]
@       = $SettingsGroup xy(,21)
Send    = $Button_Large a(rt) onclick(dialog("SendTroublesDialog"))
Label   = sz(p,a) xy(7,) a(pc)

[OptionsWindow_Navigator_WorkArea_Threats_List]
@   = $List a(la) ext(1)
row = [OptionsWindow_Navigator_WorkArea_Threats_List_row]

[OptionsWindow_Navigator_WorkArea_Threats_List_row]
@           = sz(a,a)
Malicious   = [OptionsWindow_Navigator_WorkArea_Threats_List_row_Malicious]
Unwanted    = [OptionsWindow_Navigator_WorkArea_Threats_List_row_Unwanted]
Packers     = [OptionsWindow_Navigator_WorkArea_Threats_List_row_Packers]

[OptionsWindow_Navigator_WorkArea_Threats_List_row_Malicious]
@           = at(noplus) f("GridGroup") enable(0) group(default)
Viruses     = [OptionsWindow_Navigator_WorkArea_Threats_List_row_Malicious_Viruses]
Trojans     = [OptionsWindow_Navigator_WorkArea_Threats_List_row_Malicious_Trojans]
Malicious   = [OptionsWindow_Navigator_WorkArea_Threats_List_row_Malicious_Malicious]

[OptionsWindow_Navigator_WorkArea_Threats_List_row_Malicious_Viruses]
@           = at(checkedgroup) v(bmask(DetectTypeMask0,0x0001))
Email-Worm  = at(checked) v(bmask(DetectTypeMask0,0x0002))
IM-Worm     = at(checked) v(bmask(DetectTypeMask0,0x0004))
IRC-Worm    = at(checked) v(bmask(DetectTypeMask0,0x0008))
Net-Worm    = at(checked) v(bmask(DetectTypeMask0,0x0010))
P2P-Worm    = at(checked) v(bmask(DetectTypeMask0,0x0020))
Worm        = at(checked) v(bmask(DetectTypeMask0,0x0040))
Virus       = at(checked) v(bmask(DetectTypeMask0,0x0080))

[OptionsWindow_Navigator_WorkArea_Threats_List_row_Malicious_Trojans]
@                   = at(checkedgroup) v(bmask(DetectTypeMask1,0x0001))
Trojan-ArcBomb      = at(checked) v(bmask(DetectTypeMask1,0x0002))
Backdoor            = at(checked) v(bmask(DetectTypeMask1,0x0004))
Trojan              = at(checked) v(bmask(DetectTypeMask1,0x0008))
Trojan-AOL          = at(checked) v(bmask(DetectTypeMask1,0x0010))
Trojan-Clicker      = at(checked) v(bmask(DetectTypeMask1,0x0020))
Trojan-Downloader   = at(checked) v(bmask(DetectTypeMask1,0x0040))
Trojan-Dropper      = at(checked) v(bmask(DetectTypeMask1,0x0080))
Trojan-Notifier     = at(checked) v(bmask(DetectTypeMask1,0x0100))
Trojan-Proxy        = at(checked) v(bmask(DetectTypeMask1,0x0200))
Trojan-PSW          = at(checked) v(bmask(DetectTypeMask1,0x0400))
Trojan-Spy          = at(checked) v(bmask(DetectTypeMask1,0x0800))
Trojan-DDoS         = at(checked) v(bmask(DetectTypeMask1,0x1000))
Trojan-IM           = at(checked) v(bmask(DetectTypeMask1,0x2000))
RootKit             = at(checked) v(bmask(DetectTypeMask1,0x4000))
Trojan-SMS          = at(checked) v(bmask(DetectTypeMask1,0x8000))
;Trojan-MSN			= at(checked) v(bmask(DetectTypeMask1,0x10000))

[OptionsWindow_Navigator_WorkArea_Threats_List_row_Malicious_Malicious]
@                   = at(checkedgroup) v(bmask(DetectTypeMask2,0x0001))
Constructor         = at(checked) v(bmask(DetectTypeMask2,0x0002))
DoS                 = at(checked) v(bmask(DetectTypeMask2,0x0004))
Exploit             = at(checked) v(bmask(DetectTypeMask2,0x0008))
FileCryptor         = at(checked) v(bmask(DetectTypeMask2,0x0010))
Flooder             = at(checked) v(bmask(DetectTypeMask2,0x0020))
HackTool            = at(checked) v(bmask(DetectTypeMask2,0x0040))
not-virus:Hoax      = at(checked) v(bmask(DetectTypeMask2,0x0080))
not-virus:BadJoke   = at(checked) v(bmask(DetectTypeMask2,0x0100))
Nuker               = at(checked) v(bmask(DetectTypeMask2,0x0200))
PolyCryptor         = at(checked) v(bmask(DetectTypeMask2,0x0400))
PolyEngine          = at(checked) v(bmask(DetectTypeMask2,0x0800))
Sniffer             = at(checked) v(bmask(DetectTypeMask2,0x1000))
SpamTool            = at(checked) v(bmask(DetectTypeMask2,0x2000))
Spoofer             = at(checked) v(bmask(DetectTypeMask2,0x4000))
VirTool             = at(checked) v(bmask(DetectTypeMask2,0x8000))
Email-Flooder       = at(checked) v(bmask(DetectTypeMask2,0x10000))
IM-Flooder          = at(checked) v(bmask(DetectTypeMask2,0x20000))
SMS-Flooder         = at(checked) v(bmask(DetectTypeMask2,0x40000))

[OptionsWindow_Navigator_WorkArea_Threats_List_row_Unwanted]
@           = at(noplus) f("GridGroup") group(default)
AdWare      = at(checked) v(bmask(DetectTypeMask3,0x0001))
PornWare    = [OptionsWindow_Navigator_WorkArea_Threats_List_row_Unwanted_PornWare]
RiskWare    = [OptionsWindow_Navigator_WorkArea_Threats_List_row_Unwanted_RiskWare]

[OptionsWindow_Navigator_WorkArea_Threats_List_row_Unwanted_PornWare]
@                           = at(checkedgroup) v(bmask(DetectTypeMask4,0x0001))
not-a-virus:Porn-Dialer     = at(checked) v(bmask(DetectTypeMask4,0x0002))
not-a-virus:Porn-Downloader = at(checked) v(bmask(DetectTypeMask4,0x0004))
not-a-virus:Porn-Tool       = at(checked) v(bmask(DetectTypeMask4,0x0008))

[OptionsWindow_Navigator_WorkArea_Threats_List_row_Unwanted_RiskWare]
@                           = at(checkedgroup) v(bmask(DetectTypeMask5,0x0001))
not-a-virus:Tool            = at(checked) v(bmask(DetectTypeMask5,0x0002))
not-a-virus:Client-IRC      = at(checked) v(bmask(DetectTypeMask5,0x0004))
not-a-virus:Dialer          = at(checked) v(bmask(DetectTypeMask5,0x0008))
not-a-virus:Downloader      = at(checked) v(bmask(DetectTypeMask5,0x0010))
not-a-virus:Monitor         = at(checked) v(bmask(DetectTypeMask5,0x0020))
not-a-virus:PSWTool         = at(checked) v(bmask(DetectTypeMask5,0x0040))
not-a-virus:RemoteAdmin     = at(checked) v(bmask(DetectTypeMask5,0x0080))
not-a-virus:Server-FTP      = at(checked) v(bmask(DetectTypeMask5,0x0100))
not-a-virus:Server-Proxy    = at(checked) v(bmask(DetectTypeMask5,0x0200))
not-a-virus:Server-Telnet   = at(checked) v(bmask(DetectTypeMask5,0x0400))
not-a-virus:Server-Web      = at(checked) v(bmask(DetectTypeMask5,0x0800))
not-a-virus:RiskTool        = at(checked) v(bmask(DetectTypeMask5,0x1000))
not-a-virus:NetTool         = at(checked) v(bmask(DetectTypeMask5,0x2000))
not-a-virus:Client-P2P      = at(checked) v(bmask(DetectTypeMask5,0x4000))
not-a-virus:Client-SMTP     = at(checked) v(bmask(DetectTypeMask5,0x8000))
not-a-virus:AdTool          = at(checked) v(bmask(DetectTypeMask5,0x10000))
not-a-virus:FraudTool       = at(checked) v(bmask(DetectTypeMask5,0x20000))

[OptionsWindow_Navigator_WorkArea_Threats_List_row_Packers]
@       = at(noplus) f("GridGroup") group(default)
Suspic  = at(checked) v(bmask(PackerTypeMask,#DETPACKER_SUSPICIOUS))
Multi   = at(checked) v(bmask(PackerTypeMask,#DETPACKER_MULTIPACKED))
Grey    = at(checked) v(bmask(PackerTypeMask,#DETPACKER_GREY))

[TrafficMonitor_Ports]
@       = $DlgAttr at(resizable) sz(350,328) alias(taskedit)
Body    = [TrafficMonitor_Ports_Body]

[TrafficMonitor_Ports_Body]
@       = sz(p,p) xy(,,,$DialogPanelSizeY)
Info    = [TrafficMonitor_Ports_Body_Info]
List    = [TrafficMonitor_Ports_Body_List]

[TrafficMonitor_Ports_Body_Info]
@       = $SettingsGroup a(lb)
Text    = sz(p,a)

[TrafficMonitor_Ports_Body_List]
@       = $List alias(vector) xy(,$Group_Shift) v(TrafficMonitor.Ports) unique(Port == newItem.Port) enable(!TrafficMonitor.AllPorts) a(lp)
Desc    = sz(170,a) at(checked) text(Description) v(Enabled)
Port    = text(Port) sz(a,a)
footer  = [Grid.Footer.Template] subst(Add(onclick(dialog("TrafficMonitor_PortEdit", "List"))))
rowedit = [Grid.Editor.Template]

[TrafficMonitor_PortEdit]
@           = $DlgAttr sz(350,a) alias(settings)
PortLabel   = a(lt)
Port        = t(edit) a(ls) sz(80) at(number) nl(1,65535) xy(100,$Edit_CenterOffsetY) v(Port)
DescLabel   = a(la) xy(,5)
Desc        = t(edit) a(ls) sz(p) xy(100,$Edit_CenterOffsetY,,$DialogPanelSizeY) v(Description)

[ExclusionEdit]
@           = $DlgAttr alias(settings) sz(400,250)
PropLabel   = sz(a,a)
PropList    = [ExclusionEdit_PropList]
NameLabel   = a(la) xy(,7) sz(a,a)
Name        = t(edit) a(ls) sz(p) xy(100,$Edit_CenterOffsetY) v(Description)
RuleLabel   = sz(a,a) a(la) xy(,7)
Rule        = t(richedit) at(readonly,nofocus,vscroll) a(la) sz(p,p) text($ExclusionMasksDescr) xy(,,,$DialogPanelSizeY)

[ExclusionEdit_PropList]
@   = $List a(ls) sz(p,50) xy(100) at(checked,noheader)
row = [ExclusionEdit_PropList.items]

[ExclusionEdit_PropList.items]
ObjectMask  = v(bmask(Triggers, #AVS_fObjectMask)) at(checked)
VerdictMask = v(bmask(Triggers, #AVS_fVerdictMask)) at(checked)

[ExclusionObjectEdit]
@       = $DlgAttr sz(300,a) alias(settings)
Text    = sz(p,a)
Browse  = $Button a(ra) xy(,7,$Button_Shift) text($Browse) onclick(browseobject(Object.Mask, "BrowseForFolder", #SHELL_OBJTYPE_MASK|#SHELL_OBJTYPE_DRIVE|#SHELL_OBJTYPE_FOLDER|#SHELL_OBJTYPE_FILE))
Value   = t(edit) a(ps) xy(,1) sz(p) v(Object.Mask)
Recurse = $Check xy(,7,,$DialogPanelSizeY) v(Object.Recurse)

[ExclusionVerdictEdit]
@                   = $DlgAttr sz(300,a) alias(settings)
Text                = sz(p,a)
Value               = t(edit) a(la) sz(p,a) v(VerdictMask)
VerdictObject       = $Check xy(,7) v(bmask(Triggers,#AVS_fVerdictPath))
VerdictObjectMask   = t(edit) a(la) xy(,7,,$DialogPanelSizeY) sz(p,a) v(VerdictPath.Mask) enable(Triggers & #AVS_fVerdictPath)

[ExclusionTasksEdit]
@           = $DlgAttr sz(300,200) h(1253) alias(settings)
TasksList   = [ExclusionTasksEdit_TasksList]

[ExclusionTasksEdit_TasksList]
@   = $List at(noheader) xy(,,,$DialogPanelSizeY) alias(vector.ExceptsTaskList) v(TaskList)
row = [ExclusionTasksEdit_TasksList_row]

[ExclusionTasksEdit_TasksList_row]
@       = sz(a,a)
oas     = at(checked) v(bmask(TasksMask,0x01)) text($File_Monitoring)
mc      = at(checked) v(bmask(TasksMask,0x02)) text($Mail_Monitoring)
hips    = at(checked) v(bmask(TasksMask,0x04)) text($Hips)
ods     = at(checked) v(bmask(TasksMask,0x08)) text($Scan)

;-------------------------------- PasswordEdit --------------------------------

[PasswordEdit]
$PswdEdit   = t(edit) a(rs) sz(150) xy(5,-1) at(password)
@           = $DlgAttr alias(taskedit) sz(390,a)
Pswd        = [PasswordEdit_Pswd]
Sett        = [PasswordEdit_Sett] 

[PasswordEdit_Pswd]
@               = $SettingsGroup xy(0,0)
OldPswdText
OldPswdEdit     = $PswdEdit onchange(if(cryptcmp(OPEP, ctl.value), ctl.enabled = 0)) oninit(if(!OPEP, ctl.enabled = 0))
NewPswdText     = a(la) xy(,7)
NewPswdEdit     = $PswdEdit onok(if(!ctl.OldPswdEdit.enabled && !ctl.value && !ctl.ConfPswdEdit.value, balloon("ErrNoPasswordEntered")))
ConfPswdText    = a(la) xy(,7)
ConfPswdEdit    = $PswdEdit onok(ctl.value == ctl.NewPswdEdit.value ? OPEP = crypt(ctl.value) : balloon("ErrDifferPswrds"))

[PasswordEdit_Sett]
@                   = $SettingsGroup v(AskPswrdAlwaysExeptsAlerts) xy(,$Group_Shift,,$DialogPanelSizeY) ext(1)
All                 = $Radio v(1)
Selected            = $Radio xy(,7) v(0)
WhenSaveSetting     = $Check xy(20,5) v(AskWhenSaveSetting) enable(!AskPswrdAlwaysExeptsAlerts)
WhenExitApp         = $Check a(sa) xy(,7) v(AskWhenExitApp) enable(!AskPswrdAlwaysExeptsAlerts)
WhenStopProtection  = $Check a(sa) xy(,7) v(AskWhenStopProtection) enable(!AskPswrdAlwaysExeptsAlerts)

;------------- SendTroublesDialog --------------

[SendTroublesDialog]
@       = t(dialog) sz(550,a) at(a_close,nohelp) alias(send_traces) onclose(SendState != 0 ? msg("CantCloseTroublesDlg", #m_warning) : 1)
Body    = [SendTroublesDialog_Body]

[SendTroublesDialog_Body]
@       = sz(p,a) xy(,,,$DialogPanelSizeY) mg(7,7)
Header  = [SendTroublesDialog_Body_Header]
List    = [SendTroublesDialog_Body_List]
Footer  = [SendTroublesDialog_Body_Footer]
;HelpUs      = a(la) sz(p,a) xy(,10) text(s_SendTroublesDialog_Header_Help(SendDumps))
;Send        = $Button a(ra) xy(,10) rs(0,0) enable(SendState == 0)
;SendState   = a(ls) text(s_SetTroubles_SendState(SendState))

[SendTroublesDialog_Body_Header]
@       = a(la) sz(p,a) ta(lc)
Name    = sz(a,a) xy(7,5,7) f("Header1") extprm(1) text( s_SendTroublesDialog_Header_Name(SendDumps) )
Descr   = sz(a,a) a(sa) xy(5,5,7) f("Normal") extprm(1) text( s_SendTroublesDialog_Header_Descr(SendDumps) )

[SendTroublesDialog_Body_List]
@           = $List a(la) sz(p,220) alias(vector) v(Dumps) xy(,15)
Size        = text(f_ObjSize(Size)) sz(100) at(checked) v(Send)
PackSize    = text(f_ObjSize(PackSize)) sz(100)
Path        = text(s_SendTroublesDialog_SysInfo(SysInfo, Path)) sz(270)

[SendTroublesDialog_Body_Footer]
@           = a(la) sz(p,a) xy(,,,10)
HelpUs      = a(la) sz(p,a) xy(,10) rs(0,0) text(s_SendTroublesDialog_Header_Help(SendDumps))
Send        = $Button a(ra) xy(,10) rs(0,0) enable(SendState == 0)
SendState   = a(ls) text(s_SetTroubles_SendState(SendState))
SendPercent = a(ls) text( SendPercent + " %" ) xy(250,)
;SendPercent = a(ls) text( if(SendPercent > 0, SendPercent + " %") ) xy(250,)

[SchedulerDlg]
@       = $DlgAttr sz(340,a) alias(taskedit) text($ProfileName) onok(checkPassword(#pwdc_SaveSettings))
Body    = [SchedulerDlg_Body]

[SchedulerDlg_Body]
@           = t(tab) sz(p,a) mg(7,7) xy(,,,$DialogPanelSizeY)
Schedule    = [SchedulerDlg_Body_Schedule]

[SchedulerDlg_Body_Schedule]
@               = sz(p,a) v(schedule.Mode)
Auto            = t(radio) sz(a,a) v(2) xy(,,,7) use(type == "updater")
Manual          = t(radio) sz(a,a) a(la) v(0) xy(,,,7)
Fixed           = t(radio) sz(a,a) a(la) v(1)
SchedulerView   = [SchedulerView] a(la) xy(,17) enable(schedule.Mode == 1)
