#ifndef _GENERAL_EVENTS_H_
#define _GENERAL_EVENTS_H_

namespace KLGNRLEV {

const wchar_t GNRL_EV_NEWS[] = L"GNRL_EV_NEWS";
const wchar_t GNRL_EV_OBJECT_CURED[] = L"GNRL_EV_OBJECT_CURED";
const wchar_t GNRL_EV_OBJECT_DELETED[] = L"GNRL_EV_OBJECT_DELETED";
const wchar_t GNRL_EV_OBJECT_BLOCKED[] = L"GNRL_EV_OBJECT_BLOCKED";
const wchar_t GNRL_EV_OBJECT_PASSED[] = L"GNRL_EV_OBJECT_BLOCKED";

const wchar_t GNRL_EV_PTOTECTION_LEVEL_CHANGED[] = L"GNRL_EV_PTOTECTION_LEVEL_CHANGED";
const wchar_t GNRL_EV_LICENSE_EXPIRATION[] = L"GNRL_EV_LICENSE_EXPIRATION";
const wchar_t GNRL_EV_SUSPICIOUS_OBJECT_FOUND[] = L"GNRL_EV_SUSPICIOUS_OBJECT_FOUND";
const wchar_t GNRL_EV_ERROR[] = L"GNRL_EV_ERROR";
const wchar_t GNRL_EV_ANTIVIRAL_BASES_EXPIRED[] = L"GNRL_EV_ANTIVIRAL_BASES_EXPIRED";
const wchar_t GNRL_EV_VIRUS_FOUND[] = L"GNRL_EV_VIRUS_FOUND";
const wchar_t GNRL_EV_INTERNAL_ERROR[] = L"GNRL_EV_INTERNAL_ERROR";
const wchar_t GNRL_EV_NETWORK_NODE_WAS_REBOOTED[] = L"GNRL_EV_NETWORK_NODE_WAS_REBOOTED";
const wchar_t GNRL_EV_PASSWD_ARCHIVE_FOUND[] = L"GNRL_EV_PASSWD_ARCHIVE_FOUND";
const wchar_t GNRL_EV_OBJECT_NOTCURED[] = L"GNRL_EV_OBJECT_NOTCURED";
const wchar_t GNRL_EV_FULLSCAN_STATUS_NOTIFICATION[] = L"GNRL_EV_FULLSCAN_STATUS_NOTIFICATION";
const wchar_t GNRL_EV_ATTACK_DETECTED[] = L"GNRL_EV_ATTACK_DETECTED";
const wchar_t GNRL_EV_MACRO_BLOCKED[] = L"GNRL_EV_MACRO_BLOCKED";
const wchar_t GNRL_EV_MACRO_ALLOWED[] = L"GNRL_EV_MACRO_ALLOWED";

};

#endif // _GENERAL_EVENTS_H_