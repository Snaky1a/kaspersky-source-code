/* soapServer.cpp
   Generated by gSOAP 2.7.0d from soapheader.h
   Copyright (C) 2001-2004 Genivia, Inc. All Rights Reserved.
   This software is released under one of the following three licenses:
   GPL, the gSOAP public license, or Genivia's license for commercial use.
   See README.txt for further details.
*/
#include "soapH.h"

SOAP_BEGIN_NAMESPACE(soap)

SOAP_SOURCE_STAMP("@(#) soapServer.cpp ver 2.7.0d 2007-04-10 12:48:28 GMT")


SOAP_FMAC5 int SOAP_FMAC6 soap_serve(struct soap *soap)
{
	unsigned int n = soap->max_keep_alive;
	do
	{	soap_begin(soap);
		if (!--n)
			soap->keep_alive = 0;
		if (soap_begin_recv(soap))
		{	if (soap->error < SOAP_STOP)
				return soap_send_fault(soap);
			soap_closesock(soap);
			continue;
		}
		if (soap_envelope_begin_in(soap)
		 || soap_recv_header(soap)
		 || soap_body_begin_in(soap)
		 || soap_serve_request(soap) || (soap->fserveloop && soap->fserveloop(soap)))
			return soap_send_fault(soap);
		
	} while (soap->keep_alive);
	return SOAP_OK;
}

SOAP_FMAC5 int SOAP_FMAC6 soap_serve_request(struct soap *soap)
{
	soap_peek_element(soap);
	if (!soap_match_tag(soap, soap->tag, "aklwngt:SessionBegin"))
		return soap_serve_aklwngt__SessionBegin(soap);
	if (!soap_match_tag(soap, soap->tag, "aklwngt:SessionEnd"))
		return soap_serve_aklwngt__SessionEnd(soap);
	if (!soap_match_tag(soap, soap->tag, "aklwngt:Heartbeat"))
		return soap_serve_aklwngt__Heartbeat(soap);
	if (!soap_match_tag(soap, soap->tag, "aklwngt:PutResult"))
		return soap_serve_aklwngt__PutResult(soap);
	if (!soap_match_tag(soap, soap->tag, "aklwngt:PutEvents"))
		return soap_serve_aklwngt__PutEvents(soap);
	if (!soap_match_tag(soap, soap->tag, "aklwngt:klft-GetFileInfo"))
		return soap_serve_aklwngt__klft_GetFileInfo(soap);
	if (!soap_match_tag(soap, soap->tag, "aklwngt:klft-GetNextFileChunk"))
		return soap_serve_aklwngt__klft_GetNextFileChunk(soap);
	return soap->error = SOAP_NO_METHOD;
}

SOAP_FMAC5 int SOAP_FMAC6 soap_serve_aklwngt__SessionBegin(struct soap *soap)
{	struct aklwngt__SessionBegin soap_tmp_aklwngt__SessionBegin;
	struct aklwngt__SessionBeginResponse r;
	soap_default_aklwngt__SessionBeginResponse(soap, &r);
	soap_default_aklwngt__SessionBegin(soap, &soap_tmp_aklwngt__SessionBegin);
	soap->encodingStyle = NULL;
	soap_get_aklwngt__SessionBegin(soap, &soap_tmp_aklwngt__SessionBegin, "aklwngt:SessionBegin", NULL);
	if (soap->error)
		return soap->error;
	
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
#ifndef WITH_LEANER
	 || soap_resolve_attachments(soap)
#endif
	 || soap_end_recv(soap))
		return soap->error;
	soap->error = aklwngt__SessionBegin(soap, soap_tmp_aklwngt__SessionBegin.szDeviceId, soap_tmp_aklwngt__SessionBegin.szPassword, soap_tmp_aklwngt__SessionBegin.nProtocolVersion, r);
	if (soap->error)
		return soap->error;
	soap_serializeheader(soap);
	soap_serialize_aklwngt__SessionBeginResponse(soap, &r);
	soap_begin_count(soap);
	if (soap->mode & SOAP_IO_LENGTH)
	{	soap_envelope_begin_out(soap);
		soap_putheader(soap);
		soap_body_begin_out(soap);
		soap_put_aklwngt__SessionBeginResponse(soap, &r, "aklwngt:SessionBeginResponse", "");
		soap_body_end_out(soap);
		soap_envelope_end_out(soap);
	};
	if (soap_response(soap, SOAP_OK)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put_aklwngt__SessionBeginResponse(soap, &r, "aklwngt:SessionBeginResponse", "")
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap->error;
	soap_closesock(soap);
	return SOAP_OK;
}

SOAP_FMAC5 int SOAP_FMAC6 soap_serve_aklwngt__SessionEnd(struct soap *soap)
{	struct aklwngt__SessionEnd soap_tmp_aklwngt__SessionEnd;
	struct aklwngt__SessionEndResponse r;
	soap_default_aklwngt__SessionEndResponse(soap, &r);
	soap_default_aklwngt__SessionEnd(soap, &soap_tmp_aklwngt__SessionEnd);
	soap->encodingStyle = NULL;
	soap_get_aklwngt__SessionEnd(soap, &soap_tmp_aklwngt__SessionEnd, "aklwngt:SessionEnd", NULL);
	if (soap->error)
		return soap->error;
	
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
#ifndef WITH_LEANER
	 || soap_resolve_attachments(soap)
#endif
	 || soap_end_recv(soap))
		return soap->error;
	soap->error = aklwngt__SessionEnd(soap, soap_tmp_aklwngt__SessionEnd.szSessionId, r);
	if (soap->error)
		return soap->error;
	soap_serializeheader(soap);
	soap_serialize_aklwngt__SessionEndResponse(soap, &r);
	soap_begin_count(soap);
	if (soap->mode & SOAP_IO_LENGTH)
	{	soap_envelope_begin_out(soap);
		soap_putheader(soap);
		soap_body_begin_out(soap);
		soap_put_aklwngt__SessionEndResponse(soap, &r, "aklwngt:SessionEndResponse", "");
		soap_body_end_out(soap);
		soap_envelope_end_out(soap);
	};
	if (soap_response(soap, SOAP_OK)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put_aklwngt__SessionEndResponse(soap, &r, "aklwngt:SessionEndResponse", "")
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap->error;
	soap_closesock(soap);
	return SOAP_OK;
}

SOAP_FMAC5 int SOAP_FMAC6 soap_serve_aklwngt__Heartbeat(struct soap *soap)
{	struct aklwngt__Heartbeat soap_tmp_aklwngt__Heartbeat;
	struct aklwngt__HeartbeatResponse r;
	soap_default_aklwngt__HeartbeatResponse(soap, &r);
	soap_default_aklwngt__Heartbeat(soap, &soap_tmp_aklwngt__Heartbeat);
	soap->encodingStyle = NULL;
	soap_get_aklwngt__Heartbeat(soap, &soap_tmp_aklwngt__Heartbeat, "aklwngt:Heartbeat", NULL);
	if (soap->error)
		return soap->error;
	
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
#ifndef WITH_LEANER
	 || soap_resolve_attachments(soap)
#endif
	 || soap_end_recv(soap))
		return soap->error;
	soap->error = aklwngt__Heartbeat(soap, soap_tmp_aklwngt__Heartbeat.szSessionId, soap_tmp_aklwngt__Heartbeat.oMaySynchronize, r);
	if (soap->error)
		return soap->error;
	soap_serializeheader(soap);
	soap_serialize_aklwngt__HeartbeatResponse(soap, &r);
	soap_begin_count(soap);
	if (soap->mode & SOAP_IO_LENGTH)
	{	soap_envelope_begin_out(soap);
		soap_putheader(soap);
		soap_body_begin_out(soap);
		soap_put_aklwngt__HeartbeatResponse(soap, &r, "aklwngt:HeartbeatResponse", "");
		soap_body_end_out(soap);
		soap_envelope_end_out(soap);
	};
	if (soap_response(soap, SOAP_OK)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put_aklwngt__HeartbeatResponse(soap, &r, "aklwngt:HeartbeatResponse", "")
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap->error;
	soap_closesock(soap);
	return SOAP_OK;
}

SOAP_FMAC5 int SOAP_FMAC6 soap_serve_aklwngt__PutResult(struct soap *soap)
{	struct aklwngt__PutResult soap_tmp_aklwngt__PutResult;
	struct aklwngt__PutResultResponse r;
	soap_default_aklwngt__PutResultResponse(soap, &r);
	soap_default_aklwngt__PutResult(soap, &soap_tmp_aklwngt__PutResult);
	soap->encodingStyle = NULL;
	soap_get_aklwngt__PutResult(soap, &soap_tmp_aklwngt__PutResult, "aklwngt:PutResult", NULL);
	if (soap->error)
		return soap->error;
	
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
#ifndef WITH_LEANER
	 || soap_resolve_attachments(soap)
#endif
	 || soap_end_recv(soap))
		return soap->error;
	soap->error = aklwngt__PutResult(soap, soap_tmp_aklwngt__PutResult.szSessionId, soap_tmp_aklwngt__PutResult.result, r);
	if (soap->error)
		return soap->error;
	soap_serializeheader(soap);
	soap_serialize_aklwngt__PutResultResponse(soap, &r);
	soap_begin_count(soap);
	if (soap->mode & SOAP_IO_LENGTH)
	{	soap_envelope_begin_out(soap);
		soap_putheader(soap);
		soap_body_begin_out(soap);
		soap_put_aklwngt__PutResultResponse(soap, &r, "aklwngt:PutResultResponse", "");
		soap_body_end_out(soap);
		soap_envelope_end_out(soap);
	};
	if (soap_response(soap, SOAP_OK)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put_aklwngt__PutResultResponse(soap, &r, "aklwngt:PutResultResponse", "")
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap->error;
	soap_closesock(soap);
	return SOAP_OK;
}

SOAP_FMAC5 int SOAP_FMAC6 soap_serve_aklwngt__PutEvents(struct soap *soap)
{	struct aklwngt__PutEvents soap_tmp_aklwngt__PutEvents;
	struct aklwngt__PutEventsResponse r;
	soap_default_aklwngt__PutEventsResponse(soap, &r);
	soap_default_aklwngt__PutEvents(soap, &soap_tmp_aklwngt__PutEvents);
	soap->encodingStyle = NULL;
	soap_get_aklwngt__PutEvents(soap, &soap_tmp_aklwngt__PutEvents, "aklwngt:PutEvents", NULL);
	if (soap->error)
		return soap->error;
	
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
#ifndef WITH_LEANER
	 || soap_resolve_attachments(soap)
#endif
	 || soap_end_recv(soap))
		return soap->error;
	soap->error = aklwngt__PutEvents(soap, soap_tmp_aklwngt__PutEvents.szSessionId, soap_tmp_aklwngt__PutEvents.oEventsInfoArray, r);
	if (soap->error)
		return soap->error;
	soap_serializeheader(soap);
	soap_serialize_aklwngt__PutEventsResponse(soap, &r);
	soap_begin_count(soap);
	if (soap->mode & SOAP_IO_LENGTH)
	{	soap_envelope_begin_out(soap);
		soap_putheader(soap);
		soap_body_begin_out(soap);
		soap_put_aklwngt__PutEventsResponse(soap, &r, "aklwngt:PutEventsResponse", "");
		soap_body_end_out(soap);
		soap_envelope_end_out(soap);
	};
	if (soap_response(soap, SOAP_OK)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put_aklwngt__PutEventsResponse(soap, &r, "aklwngt:PutEventsResponse", "")
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap->error;
	soap_closesock(soap);
	return SOAP_OK;
}

SOAP_FMAC5 int SOAP_FMAC6 soap_serve_aklwngt__klft_GetFileInfo(struct soap *soap)
{	struct aklwngt__klft_GetFileInfo soap_tmp_aklwngt__klft_GetFileInfo;
	struct aklwngt__klft_GetFileInfoResponse r;
	soap_default_aklwngt__klft_GetFileInfoResponse(soap, &r);
	soap_default_aklwngt__klft_GetFileInfo(soap, &soap_tmp_aklwngt__klft_GetFileInfo);
	soap->encodingStyle = NULL;
	soap_get_aklwngt__klft_GetFileInfo(soap, &soap_tmp_aklwngt__klft_GetFileInfo, "aklwngt:klft-GetFileInfo", NULL);
	if (soap->error)
		return soap->error;
	
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
#ifndef WITH_LEANER
	 || soap_resolve_attachments(soap)
#endif
	 || soap_end_recv(soap))
		return soap->error;
	soap->error = aklwngt__klft_GetFileInfo(soap, soap_tmp_aklwngt__klft_GetFileInfo.szSessionId, soap_tmp_aklwngt__klft_GetFileInfo.fileName, r);
	if (soap->error)
		return soap->error;
	soap_serializeheader(soap);
	soap_serialize_aklwngt__klft_GetFileInfoResponse(soap, &r);
	soap_begin_count(soap);
	if (soap->mode & SOAP_IO_LENGTH)
	{	soap_envelope_begin_out(soap);
		soap_putheader(soap);
		soap_body_begin_out(soap);
		soap_put_aklwngt__klft_GetFileInfoResponse(soap, &r, "aklwngt:klft-GetFileInfoResponse", "");
		soap_body_end_out(soap);
		soap_envelope_end_out(soap);
	};
	if (soap_response(soap, SOAP_OK)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put_aklwngt__klft_GetFileInfoResponse(soap, &r, "aklwngt:klft-GetFileInfoResponse", "")
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap->error;
	soap_closesock(soap);
	return SOAP_OK;
}

SOAP_FMAC5 int SOAP_FMAC6 soap_serve_aklwngt__klft_GetNextFileChunk(struct soap *soap)
{	struct aklwngt__klft_GetNextFileChunk soap_tmp_aklwngt__klft_GetNextFileChunk;
	struct aklwngt__klft_GetNextFileChunkResponse r;
	soap_default_aklwngt__klft_GetNextFileChunkResponse(soap, &r);
	soap_default_aklwngt__klft_GetNextFileChunk(soap, &soap_tmp_aklwngt__klft_GetNextFileChunk);
	soap->encodingStyle = NULL;
	soap_get_aklwngt__klft_GetNextFileChunk(soap, &soap_tmp_aklwngt__klft_GetNextFileChunk, "aklwngt:klft-GetNextFileChunk", NULL);
	if (soap->error)
		return soap->error;
	
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
#ifndef WITH_LEANER
	 || soap_resolve_attachments(soap)
#endif
	 || soap_end_recv(soap))
		return soap->error;
	soap->error = aklwngt__klft_GetNextFileChunk(soap, soap_tmp_aklwngt__klft_GetNextFileChunk.szSessionId, soap_tmp_aklwngt__klft_GetNextFileChunk.fileName, soap_tmp_aklwngt__klft_GetNextFileChunk.startFilePos, soap_tmp_aklwngt__klft_GetNextFileChunk.neededSize, r);
	if (soap->error)
		return soap->error;
	soap_serializeheader(soap);
	soap_serialize_aklwngt__klft_GetNextFileChunkResponse(soap, &r);
	soap_begin_count(soap);
	if (soap->mode & SOAP_IO_LENGTH)
	{	soap_envelope_begin_out(soap);
		soap_putheader(soap);
		soap_body_begin_out(soap);
		soap_put_aklwngt__klft_GetNextFileChunkResponse(soap, &r, "aklwngt:klft-GetNextFileChunkResponse", "");
		soap_body_end_out(soap);
		soap_envelope_end_out(soap);
	};
	if (soap_response(soap, SOAP_OK)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put_aklwngt__klft_GetNextFileChunkResponse(soap, &r, "aklwngt:klft-GetNextFileChunkResponse", "")
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap->error;
	soap_closesock(soap);
	return SOAP_OK;
}

SOAP_END_NAMESPACE(soap)

/* end of soapServer.cpp */
