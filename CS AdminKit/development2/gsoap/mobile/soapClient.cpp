/* soapClient.cpp
   Generated by gSOAP 2.7.0d from soapheader.h
   Copyright (C) 2001-2004 Genivia, Inc. All Rights Reserved.
   This software is released under one of the following three licenses:
   GPL, the gSOAP public license, or Genivia's license for commercial use.
   See README.txt for further details.
*/
#include "soapH.h"

SOAP_BEGIN_NAMESPACE(soap)

SOAP_SOURCE_STAMP("@(#) soapClient.cpp ver 2.7.0d 2007-04-10 12:48:28 GMT")


SOAP_FMAC5 int SOAP_FMAC6 soap_call_aklwngt__SessionBegin(struct soap *soap, const char *URL, const char *action, char *szDeviceId, char *szPassword, int nProtocolVersion, struct aklwngt__SessionBeginResponse &r)
{
	struct aklwngt__SessionBegin soap_tmp_aklwngt__SessionBegin;
	soap->encodingStyle = NULL;
	soap_tmp_aklwngt__SessionBegin.szDeviceId=szDeviceId;
	soap_tmp_aklwngt__SessionBegin.szPassword=szPassword;
	soap_tmp_aklwngt__SessionBegin.nProtocolVersion=nProtocolVersion;
	soap_begin(soap);
	soap_serializeheader(soap);
	soap_serialize_aklwngt__SessionBegin(soap, &soap_tmp_aklwngt__SessionBegin);
	soap_begin_count(soap);
	if (soap->mode & SOAP_IO_LENGTH)
	{	soap_envelope_begin_out(soap);
		soap_putheader(soap);
		soap_body_begin_out(soap);
		soap_put_aklwngt__SessionBegin(soap, &soap_tmp_aklwngt__SessionBegin, "aklwngt:SessionBegin", "");
		soap_body_end_out(soap);
		soap_envelope_end_out(soap);
	}
	if (soap_connect(soap, URL, action)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put_aklwngt__SessionBegin(soap, &soap_tmp_aklwngt__SessionBegin, "aklwngt:SessionBegin", "")
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap_closesock(soap);
	soap_default_aklwngt__SessionBeginResponse(soap, &r);
	if (soap_begin_recv(soap)
	 || soap_envelope_begin_in(soap)
	 || soap_recv_header(soap)
	 || soap_body_begin_in(soap))
		return soap_closesock(soap);
	soap_get_aklwngt__SessionBeginResponse(soap, &r, "aklwngt:SessionBeginResponse", "");
	if (soap->error)
	{	if (soap->error == SOAP_TAG_MISMATCH && soap->level == 2)
			return soap_recv_fault(soap);
		return soap_closesock(soap);
	}
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
#ifndef WITH_LEANER
	 || soap_resolve_attachments(soap)
#endif
	 || soap_end_recv(soap))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

SOAP_FMAC5 int SOAP_FMAC6 soap_call_aklwngt__SessionEnd(struct soap *soap, const char *URL, const char *action, char *szSessionId, struct aklwngt__SessionEndResponse &r)
{
	struct aklwngt__SessionEnd soap_tmp_aklwngt__SessionEnd;
	soap->encodingStyle = NULL;
	soap_tmp_aklwngt__SessionEnd.szSessionId=szSessionId;
	soap_begin(soap);
	soap_serializeheader(soap);
	soap_serialize_aklwngt__SessionEnd(soap, &soap_tmp_aklwngt__SessionEnd);
	soap_begin_count(soap);
	if (soap->mode & SOAP_IO_LENGTH)
	{	soap_envelope_begin_out(soap);
		soap_putheader(soap);
		soap_body_begin_out(soap);
		soap_put_aklwngt__SessionEnd(soap, &soap_tmp_aklwngt__SessionEnd, "aklwngt:SessionEnd", "");
		soap_body_end_out(soap);
		soap_envelope_end_out(soap);
	}
	if (soap_connect(soap, URL, action)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put_aklwngt__SessionEnd(soap, &soap_tmp_aklwngt__SessionEnd, "aklwngt:SessionEnd", "")
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap_closesock(soap);
	soap_default_aklwngt__SessionEndResponse(soap, &r);
	if (soap_begin_recv(soap)
	 || soap_envelope_begin_in(soap)
	 || soap_recv_header(soap)
	 || soap_body_begin_in(soap))
		return soap_closesock(soap);
	soap_get_aklwngt__SessionEndResponse(soap, &r, "aklwngt:SessionEndResponse", "");
	if (soap->error)
	{	if (soap->error == SOAP_TAG_MISMATCH && soap->level == 2)
			return soap_recv_fault(soap);
		return soap_closesock(soap);
	}
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
#ifndef WITH_LEANER
	 || soap_resolve_attachments(soap)
#endif
	 || soap_end_recv(soap))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

SOAP_FMAC5 int SOAP_FMAC6 soap_call_aklwngt__Heartbeat(struct soap *soap, const char *URL, const char *action, char *szSessionId, struct aklwngt__sync_info *oMaySynchronize, struct aklwngt__HeartbeatResponse &r)
{
	struct aklwngt__Heartbeat soap_tmp_aklwngt__Heartbeat;
	soap->encodingStyle = NULL;
	soap_tmp_aklwngt__Heartbeat.szSessionId=szSessionId;
	soap_tmp_aklwngt__Heartbeat.oMaySynchronize=oMaySynchronize;
	soap_begin(soap);
	soap_serializeheader(soap);
	soap_serialize_aklwngt__Heartbeat(soap, &soap_tmp_aklwngt__Heartbeat);
	soap_begin_count(soap);
	if (soap->mode & SOAP_IO_LENGTH)
	{	soap_envelope_begin_out(soap);
		soap_putheader(soap);
		soap_body_begin_out(soap);
		soap_put_aklwngt__Heartbeat(soap, &soap_tmp_aklwngt__Heartbeat, "aklwngt:Heartbeat", "");
		soap_body_end_out(soap);
		soap_envelope_end_out(soap);
	}
	if (soap_connect(soap, URL, action)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put_aklwngt__Heartbeat(soap, &soap_tmp_aklwngt__Heartbeat, "aklwngt:Heartbeat", "")
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap_closesock(soap);
	soap_default_aklwngt__HeartbeatResponse(soap, &r);
	if (soap_begin_recv(soap)
	 || soap_envelope_begin_in(soap)
	 || soap_recv_header(soap)
	 || soap_body_begin_in(soap))
		return soap_closesock(soap);
	soap_get_aklwngt__HeartbeatResponse(soap, &r, "aklwngt:HeartbeatResponse", "");
	if (soap->error)
	{	if (soap->error == SOAP_TAG_MISMATCH && soap->level == 2)
			return soap_recv_fault(soap);
		return soap_closesock(soap);
	}
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
#ifndef WITH_LEANER
	 || soap_resolve_attachments(soap)
#endif
	 || soap_end_recv(soap))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

SOAP_FMAC5 int SOAP_FMAC6 soap_call_aklwngt__PutResult(struct soap *soap, const char *URL, const char *action, char *szSessionId, struct aklwngt__command *result, struct aklwngt__PutResultResponse &r)
{
	struct aklwngt__PutResult soap_tmp_aklwngt__PutResult;
	soap->encodingStyle = NULL;
	soap_tmp_aklwngt__PutResult.szSessionId=szSessionId;
	soap_tmp_aklwngt__PutResult.result=result;
	soap_begin(soap);
	soap_serializeheader(soap);
	soap_serialize_aklwngt__PutResult(soap, &soap_tmp_aklwngt__PutResult);
	soap_begin_count(soap);
	if (soap->mode & SOAP_IO_LENGTH)
	{	soap_envelope_begin_out(soap);
		soap_putheader(soap);
		soap_body_begin_out(soap);
		soap_put_aklwngt__PutResult(soap, &soap_tmp_aklwngt__PutResult, "aklwngt:PutResult", "");
		soap_body_end_out(soap);
		soap_envelope_end_out(soap);
	}
	if (soap_connect(soap, URL, action)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put_aklwngt__PutResult(soap, &soap_tmp_aklwngt__PutResult, "aklwngt:PutResult", "")
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap_closesock(soap);
	soap_default_aklwngt__PutResultResponse(soap, &r);
	if (soap_begin_recv(soap)
	 || soap_envelope_begin_in(soap)
	 || soap_recv_header(soap)
	 || soap_body_begin_in(soap))
		return soap_closesock(soap);
	soap_get_aklwngt__PutResultResponse(soap, &r, "aklwngt:PutResultResponse", "");
	if (soap->error)
	{	if (soap->error == SOAP_TAG_MISMATCH && soap->level == 2)
			return soap_recv_fault(soap);
		return soap_closesock(soap);
	}
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
#ifndef WITH_LEANER
	 || soap_resolve_attachments(soap)
#endif
	 || soap_end_recv(soap))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

SOAP_FMAC5 int SOAP_FMAC6 soap_call_aklwngt__PutEvents(struct soap *soap, const char *URL, const char *action, char *szSessionId, struct aklwngt__event_info_array *oEventsInfoArray, struct aklwngt__PutEventsResponse &r)
{
	struct aklwngt__PutEvents soap_tmp_aklwngt__PutEvents;
	soap->encodingStyle = NULL;
	soap_tmp_aklwngt__PutEvents.szSessionId=szSessionId;
	soap_tmp_aklwngt__PutEvents.oEventsInfoArray=oEventsInfoArray;
	soap_begin(soap);
	soap_serializeheader(soap);
	soap_serialize_aklwngt__PutEvents(soap, &soap_tmp_aklwngt__PutEvents);
	soap_begin_count(soap);
	if (soap->mode & SOAP_IO_LENGTH)
	{	soap_envelope_begin_out(soap);
		soap_putheader(soap);
		soap_body_begin_out(soap);
		soap_put_aklwngt__PutEvents(soap, &soap_tmp_aklwngt__PutEvents, "aklwngt:PutEvents", "");
		soap_body_end_out(soap);
		soap_envelope_end_out(soap);
	}
	if (soap_connect(soap, URL, action)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put_aklwngt__PutEvents(soap, &soap_tmp_aklwngt__PutEvents, "aklwngt:PutEvents", "")
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap_closesock(soap);
	soap_default_aklwngt__PutEventsResponse(soap, &r);
	if (soap_begin_recv(soap)
	 || soap_envelope_begin_in(soap)
	 || soap_recv_header(soap)
	 || soap_body_begin_in(soap))
		return soap_closesock(soap);
	soap_get_aklwngt__PutEventsResponse(soap, &r, "aklwngt:PutEventsResponse", "");
	if (soap->error)
	{	if (soap->error == SOAP_TAG_MISMATCH && soap->level == 2)
			return soap_recv_fault(soap);
		return soap_closesock(soap);
	}
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
#ifndef WITH_LEANER
	 || soap_resolve_attachments(soap)
#endif
	 || soap_end_recv(soap))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

SOAP_FMAC5 int SOAP_FMAC6 soap_call_aklwngt__klft_GetFileInfo(struct soap *soap, const char *URL, const char *action, char *szSessionId, wchar_t *fileName, struct aklwngt__klft_GetFileInfoResponse &r)
{
	struct aklwngt__klft_GetFileInfo soap_tmp_aklwngt__klft_GetFileInfo;
	soap->encodingStyle = NULL;
	soap_tmp_aklwngt__klft_GetFileInfo.szSessionId=szSessionId;
	soap_tmp_aklwngt__klft_GetFileInfo.fileName=fileName;
	soap_begin(soap);
	soap_serializeheader(soap);
	soap_serialize_aklwngt__klft_GetFileInfo(soap, &soap_tmp_aklwngt__klft_GetFileInfo);
	soap_begin_count(soap);
	if (soap->mode & SOAP_IO_LENGTH)
	{	soap_envelope_begin_out(soap);
		soap_putheader(soap);
		soap_body_begin_out(soap);
		soap_put_aklwngt__klft_GetFileInfo(soap, &soap_tmp_aklwngt__klft_GetFileInfo, "aklwngt:klft-GetFileInfo", "");
		soap_body_end_out(soap);
		soap_envelope_end_out(soap);
	}
	if (soap_connect(soap, URL, action)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put_aklwngt__klft_GetFileInfo(soap, &soap_tmp_aklwngt__klft_GetFileInfo, "aklwngt:klft-GetFileInfo", "")
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap_closesock(soap);
	soap_default_aklwngt__klft_GetFileInfoResponse(soap, &r);
	if (soap_begin_recv(soap)
	 || soap_envelope_begin_in(soap)
	 || soap_recv_header(soap)
	 || soap_body_begin_in(soap))
		return soap_closesock(soap);
	soap_get_aklwngt__klft_GetFileInfoResponse(soap, &r, "aklwngt:klft-GetFileInfoResponse", "");
	if (soap->error)
	{	if (soap->error == SOAP_TAG_MISMATCH && soap->level == 2)
			return soap_recv_fault(soap);
		return soap_closesock(soap);
	}
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
#ifndef WITH_LEANER
	 || soap_resolve_attachments(soap)
#endif
	 || soap_end_recv(soap))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

SOAP_FMAC5 int SOAP_FMAC6 soap_call_aklwngt__klft_GetNextFileChunk(struct soap *soap, const char *URL, const char *action, char *szSessionId, wchar_t *fileName, ULONG64 startFilePos, ULONG64 neededSize, struct aklwngt__klft_GetNextFileChunkResponse &r)
{
	struct aklwngt__klft_GetNextFileChunk soap_tmp_aklwngt__klft_GetNextFileChunk;
	soap->encodingStyle = NULL;
	soap_tmp_aklwngt__klft_GetNextFileChunk.szSessionId=szSessionId;
	soap_tmp_aklwngt__klft_GetNextFileChunk.fileName=fileName;
	soap_tmp_aklwngt__klft_GetNextFileChunk.startFilePos=startFilePos;
	soap_tmp_aklwngt__klft_GetNextFileChunk.neededSize=neededSize;
	soap_begin(soap);
	soap_serializeheader(soap);
	soap_serialize_aklwngt__klft_GetNextFileChunk(soap, &soap_tmp_aklwngt__klft_GetNextFileChunk);
	soap_begin_count(soap);
	if (soap->mode & SOAP_IO_LENGTH)
	{	soap_envelope_begin_out(soap);
		soap_putheader(soap);
		soap_body_begin_out(soap);
		soap_put_aklwngt__klft_GetNextFileChunk(soap, &soap_tmp_aklwngt__klft_GetNextFileChunk, "aklwngt:klft-GetNextFileChunk", "");
		soap_body_end_out(soap);
		soap_envelope_end_out(soap);
	}
	if (soap_connect(soap, URL, action)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put_aklwngt__klft_GetNextFileChunk(soap, &soap_tmp_aklwngt__klft_GetNextFileChunk, "aklwngt:klft-GetNextFileChunk", "")
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap_closesock(soap);
	soap_default_aklwngt__klft_GetNextFileChunkResponse(soap, &r);
	if (soap_begin_recv(soap)
	 || soap_envelope_begin_in(soap)
	 || soap_recv_header(soap)
	 || soap_body_begin_in(soap))
		return soap_closesock(soap);
	soap_get_aklwngt__klft_GetNextFileChunkResponse(soap, &r, "aklwngt:klft-GetNextFileChunkResponse", "");
	if (soap->error)
	{	if (soap->error == SOAP_TAG_MISMATCH && soap->level == 2)
			return soap_recv_fault(soap);
		return soap_closesock(soap);
	}
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
#ifndef WITH_LEANER
	 || soap_resolve_attachments(soap)
#endif
	 || soap_end_recv(soap))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

SOAP_END_NAMESPACE(soap)

/* end of soapClient.cpp */
