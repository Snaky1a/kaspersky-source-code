Протокол взаимодействия между приложением для мобильного устройства и сервера администрирования.
Версия протокола: 1.0

Версия продукта:
Версия документа:   0.5
Дата:               13.03.2007
Автор:              Казачков А. В.
Статус:             Черновик


1. Виды взаимодействий между сервером администрирования и приложением.
    1.1. Синхронизация -- данное взаимодействие управляется сервером администрирования посредством "команд сервера администрирования", приложение запрашивает у сервера администрирования команды и обрабатывает их.
		1.1.1. Синхронизация настроек -- синхронизация настроек приложения между приложением и сервером администрирования.
		1.1.2. Синхронизация политики -- "вдвигание" сервером администрирования в приложение политики.
		1.1.3. Синхронизация подписок -- "вдвигание" сервером администрирования в приложение т.н. "подписок" -- списка типов событий, которые следует отправлять на сервер администрирования (см. п. "7. Типы событий, отправляемых на сервер администрирования").
		1.1.4. Синхронизация информации о приложении -- передача приложением на сервер администрирования "информации о приложении": дата установки, дата обновления, информация о лицензиях и пр.
		1.1.5. Синхронизация информации о состоянии приложения -- передача приложением на сервер администрирования "информации о состоянии приложения": запущено/не запущено, RTP активна/не активна, дата/время последнего полного сканирования.
	1.2. Отправка событий  -- данное взаимодействие управляется приложением путем вызова методов сервера администрирования.
	1.3. Получение обновлений -- данное взаимодействие управляется приложением путем вызова методов сервера администрирования.



2. Основные понятия
    2.1. Хеш -- непустая строка символов первой половины кодовой таблицы длиной не более 64 символов, способ расчета хеша полностью определяется приложением. Сервер администрирования использует хеши для отслеживания изменений при синхронизации: изменился хеш настроек -- изменинились настройки -- требуется синхронизация, то же с политикой, подписками на события и пр. ( см. 1.1.1 - 1.1.5 ).
    2.2. Состояние приложения -- одно из значений
                APP_STATE_INACTIVE = 0  продукт неактивен (напр, лицензия кончилась)
                APP_STATE_RUNNING = 1   продукт активен

    2.3. Состояние RTP -- состояние постоянной защиты, одно из значений
        APP_RTP_STATE_STOPPED = 1 -- остановлена
        APP_RTP_STATE_SUSPENDED = 2 -- RTP приостановлена
        APP_RTP_STATE_STARTING = 3 -- RTP запускается
        APP_RTP_STATE_RUNNING = 4 -- RTP запущена (только для приложений, которые не детализируют APP_RTP_STATE_RUNNING_*)
        APP_RTP_STATE_RUNNING_MAX_PROTECTION = 5 -- RTP запущена, защита максимальна
        APP_RTP_STATE_RUNNING_MAX_SPEED = 6 -- RTP запущена, производительность максимальна
        APP_RTP_STATE_RUNNING_RECOMMENDED = 7 -- RTP запущена, рекомендованный уровень
        APP_RTP_STATE_RUNNING_CUSTOM = 8 -- RTP запущена, используются "настройки пользователя"
        APP_RTP_STATE_FAILURE = 9 -- сбой RTP
    2.4. Severity, "уровень важности" -- одно из значений:
            KLEVP_EVENT_SEVERITY_INFO       = 1 -- информационный
            KLEVP_EVENT_SEVERITY_WARNING    = 2 -- предупреждение
            KLEVP_EVENT_SEVERITY_ERROR      = 3 -- ошибка
            KLEVP_EVENT_SEVERITY_CRITICAL   = 4 -- критический
    2.5. "Имя приложения" -- строка символов из первой половины кодовой таблицы длиной не более 31 символов, для внутреннего использования сервером администрирования, вместе с "Версией приложения" однозначно идентифицирует приложение. Администратору безопасности не показывается.
    2.6. "Версия приложения" -- строка символов из первой половины кодовой таблицы длиной не более 31 символов, для внутреннего использования сервером администрирования, вместе с "Именем приложения" однозначно идентифицирует приложение. Имеет вид "X.Y" или "X.Y.0.0". Администратору безопасности не показывается.
    2.7. "Полная версия приложения" или "Точная версия приложения" -- строка символов из первой половины кодовой таблицы длиной не более 255 символов, имеет вид "A.B.C.D", напр, "6.0.1403", используется для сравнения версий и для показа администратору безопасности.
    2.8. "Событие" -- структура данных, отсылаемая на сервер администрирования, о чем-либо уведомляющая администратора безопасности. События характеризуются "типом события" и "уровнем важности" (Severity). Например, событие о найденном вирусе имеет тип события "GNRL_EV_VIRUS_FOUND" и уровень важности KLEVP_EVENT_SEVERITY_CRITICAL.
    2.9. Отображаемое имя приложения -- строка произвольных символов Unicode длиной не более 255 символов, используется для показа администратору безопасности.
    2.10. Отображаемое имя устройства -- строка произвольных символов Unicode длиной не более 255 символов, используется для показа администратору безопасности, по этому имени администратор безопасности различает мобильные устройства в Консоли администрирования.
    2.11. Имя группы -- имя контейнера в Консоли администрирования, в который устройства будет добавлено при первом соединениии с сервером администрирования.
    2.12. Подписки на события -- список типов событий, которые следует отправлять на сервер администрирования. Данный список создается пр участии плагина Консоли администрирования.
    2.13. Идентификатор сессии -- случайная строка символов из первой половины кодовой таблицы длиной не более 32 символов



3. Настройки взаимодействия приложения с сервером администрирования
	3.2. Статические настройки взаимодействия приложения с сервером администрирования (определяются при инсталляции и не меняются)
		3.1.1. адрес/порт сервера администрирования
		3.1.2. уникальный идентификатор устройства (DeviceId) -- непустая строка символов первой половины кодовой таблицы длиной не более 64 символов.
		3.1.3. пароль устройства -- Password -- непустая секретная строка символов первой половины кодовой таблицы, длиной не более 64 символов, используемая для аутентификации устройства Сервером администрирования. Генерируется случайным образом при инсталляции.
	3.2. Динамические (задаются Сервером администрирования)
		3.2.1. период синхронизации -- SyncPeriod в секундах; типичное значение 900..7200 секунд.
	3.3. Константы (задаются при компиляции)
		3.3.1. кол-во событий для отправки за один вызов -- nMaxEventsPerCall. Текущее значение -- 10.
		3.3.2. минимальный период отсылки событий в секундах -- nMinEvent2ServerPeriod. Текущее значение -- 1.
		3.3.3. максимальную поддерживаемую версию протокола ProtocolVersion. Текущее значение -- 0x00010000.



4. Общая схема взаимодействия.
    Приложение осуществляет взаимодействие с сервером администрирования в следующих случаях:
        - периодически, с периодом SyncPeriod
        - в случае необходимости отправить события на сервер администрирования
        - для выполнения обновления
    Взаимодействие включает в себя следующие этапы:
	4.1. Создание соединения и открытие сессии
		4.1.1. Приложение создает соединение с Сервером администрирования по SSL
		4.1.2. Приложение вызывает метод aklwngt:SessionBegin, передает DeviceId, Password и максимальную поддерживаемую версию ProtocolVersion протокола, в ответ получает идентификатор сессии и версию ProtocolVersion1 (ProtocolVersion1 <= ProtocolVersion) протокола, c которой будет вестить дальнейшее взаимодействие, или ошибку. В случае ошибки приложению следует закрыть соединение.
    4.2. Отсылка heartbeat. Параметр oMaySynchronize является опциональным, но указывать его следует не реже, чем период синхронизации SyncPeriod. В ответ сервер возвращает первую команду, которую приложению следует выполнить. Если сервер администрирования вернул ошибку, приложение может по выбору перейти к пп. 4.4 (отправка событий) или 4.5 (получение обновлений с сервера администрирования) или 4.6 (закрытие сессии и соединения).
	4.3. Приложение обрабатывает команды сервера администрирования путем вызова метода aklwngt:PutResult до тех пор, пока сервер не вернет команду SRV_NO_COMMANDS. После получения SRV_NO_COMMANDS приложение может по выбору перейти к пп. 4.4 (отправка событий) или 4.5 (получение обновлений с сервера администрирования) или 4.6 (закрытие соединения). Если при обработке команд сервер администрирования вернет ошибку, приложение также может по выбору перейти к пп. 4.4 (отправка событий) или 4.5 (получение обновлений с сервера администрирования) или 4.6 (закрытие сессии и соединения).
	4.4. Отправка событий на сервер администрирования. Приложение вызвает метод aklwngt:PutEvents со списком событий (см. описание метода aklwngt:Heartbeat. Отправлять события следует не более чем по nMaxEventsPerCall и не чаще, чем nMinEvent2ServerPeriod.
	4.5. Получение обновлений с сервера администрирования посредством вызова методов klft_GetFileInfo и klft_GetNextFileChunk.
	4.6. Вызов метода aklwng:SessionEnd и закрытие соединения.



5. Типы данных.
    Формальное описание см. в файлах aklwngt.wsdl и aklwngt.xsd.

    xsd:boolean булевский тип

    xsd:date        дата

    xsd:dateTime    дата + время (в UTC) -- строка вида YYYY-MM-DDTHH:MM:SSZ, например, 2007-03-07T14:39:10Z

    xsd:double      вещественное число двойной точности

    xsd:float       вещественное число

    xsd:int         32-битный знаковый integer

    xsd:long            64-битный знаковый integer

    xsd:unsignedLong    беззнаковый 64-битный знаковый integer

    xsd:wstring     строка, содержащая любые символы Unicode, кодируется в UTF8

    xsd:string      строка символов первой половины кодовой таблицы

    xsd:base64Binary    бинарные данные, закодированные в base64

    param_error_loc_args --  массив строк xsd:wstring

    param_error_loc -- информация о локализации ошибки. Локализация ошибок необязательна, но в некоторых случаях весьма желательна.
        xsd:int                format_id    -- числовой идентификатор форматной строки (плагин GUI должен быть в состоянии по данному идентификатору и параметру locmodule однозначно идентифицировать локализованную форматную строку). Локализованная форматная строка может содержать подстановочные символы %1, %2 ... (соответствующие им строки находятся в массиве args)
        xsd:wstring            format -- форматная строка может содержать подстановочные символы %1, %2 ...
        xsd:wstring            locmodule -- строковый идентификатор модуля
        param_error_loc_args   args -- массив подстановочные строк для форматной строки


    param_error  -- описание ошибки. Информация об ошибке всегда возвращается в виде структуры данных param_error.
    	xsd:int            code     Код ошибки
    	xsd:wstring        module   Имя модуля
    	xsd:string         file     имя файла-исходника, в котором произошла ошибка
    	xsd:int            line     номер строки в файле-исходнике, в котором произошла ошибка
    	xsd:wstring        message  нелокализованный текст сообщения об ошибке.
        param_error_loc    locdata  информация о локализации ошибки (необязательный параметр).

    param:entry -- вспомогательный тип, пара "имя-значение"
    	xsd:wstring	name    имя переменной
    	param:value	value   значение переменной, строго один из типов xsd:boolean (BOOLEAN_T), xsd:wstring (STRING_T), xsd:int (INT_T), xsd:long (INT_T), xsd:date (DATE_T), xsd:float (FLOAT_T), xsd:double (DOUBLE_T), xsd:dateTime (DATETIME_T), xsd:base64Binary (BINARY_T), param:params (PARAMS_T), param:arrayvalue (ARRAY_T).

    param:node -- вспомогательный тип, массив param:entry

    param:params -- *универсальный контейнер*, содержащий произвольные переменные вида "имя-значение"
    	param:node node             массив пар "имя-значение"
        xsd:int    checksum         контрольная сумма, не используется, 0
        xsd:base64Binary   binfmt   не используется, nil (<binfmt/>)


    param:arrayvalue    массив структур величин, каждая из которых может иметь тип xsd:boolean, xsd:wstring, xsd:int, xsd:long, xsd:date, xsd:float, xsd:double, xsd:dateTime, xsd:base64Binary, param:params, param:arrayvalue.

    aklwngt:CmdError    описание ошибки, возвращаемое как результат выполнения команды сервера администрирования, в случае возникновения ошибки
        param_error  oError

    aklwngt:CmdHash         Хеш данных, используется в некоторых командах
    	xsd:base64Binary       hash -- хеш, непустая строка символов первой половины кодовой таблицы длиной не более 64 символов, способ расчета хеша определяет приложение.

    aklwngt:CmdPar      универсальный контейнер, используется в некоторых командах
    	param:params           parameters   -- универсальный контейнер

    aklwngt:CmdParAndHash   универсальный контейнер и его хеш, используется в некоторых командах
    	xsd:base64Binary       hash         -- хеш
    	param:params           parameters    -- универсальный контейнер

    aklwngt:string_array    массив строк xsd:string

    aklwngt:CmdSubscriptions - информация о подписках
    	xsd:base64Binary        hash -- хеш
    	aklwngt:string_array    typesInfo -- массив строк - имен типов событий уровня важности KLEVP_EVENT_SEVERITY_INFO, события указанных типов приложение должно отсылать на сервер администрирования
    	aklwngt:string_array    typesWarning -- массив строк - имен типов событий уровня важности KLEVP_EVENT_SEVERITY_WARNING, события указанных типов приложение должно отсылать на сервер администрирования
    	aklwngt:string_array    typesError -- массив строк - имен типов событий уровня важности KLEVP_EVENT_SEVERITY_ERROR, события указанных типов приложение должно отсылать на сервер администрирования
    	aklwngt:string_array    typesCritical -- массив строк - имен типов событий уровня важности KLEVP_EVENT_SEVERITY_CRITICAL, события указанных типов приложение должно отсылать на сервер администрирования

    aklwngt:DevInfo
        xsd:wstring    presumedName --  Отображаемое имя устройства
        xsd:wstring    presumedGroup -- Имя группы
        xsd:int        os_type      --  Тип операционной системы: 1 -- Windows Mobile, 2 -- Symbian OS
        xsd:int        os_ver_major --  Старшая цифра версии операционной системы
        xsd:int        os_ver_minor --  Младшая цифра версии операционной системы

        xsd:wstring        os_manufacturer - Производитель устройства;
        xsd:wstring        os_name - Имя операционной системы;
        xsd:wstring        os_ver - Версия операционной системы (в виде строки с упоминанием всех "сервиспаков" и пр.);
        xsd:unsignedLong   memory -- кол-во памяти на устройстве, в байтах;
        xsd:wstring        processor_family -- Название семейства процессора;
        xsd:wstring        system_name -- Имя устройства (имя заданное пользователем), может совпадать с presumedName;
        xsd:wstring        system_type -- Тип устройства;


    aklwngt:ProdInfo
        xsd:string     product_name      -- "Имя приложения"
        xsd:string     product_version   -- "Версия приложения"
        xsd:dateTime   installTime      -- дата/время установки приложения (в UTC)
        xsd:wstring    dn               -- отображаемое имя приложения
        xsd:string     prodVersion      -- точная версия приложения вида a.b.c.d

    aklwngt:LicKeyInfo
        xsd:int        keyType           -- тип ключа
        xsd:int        keyProdSuiteID    -- ProdSuiteID ключа
        xsd:int        keyAppID          -- AppID ключа
        xsd:dateTime   keyInstallDate    -- дата/время установки ключа (в UTC)
        xsd:dateTime   keyExpirationDate -- дата/время устаревания ключа (в UTC)
        xsd:dateTime   keyLicPeriod      -- Срок действия лицензии, в днях
        xsd:int        keyLicCount       -- кол-во устройств
        xsd:string     keySerial         -- Серийный номер ключа
        xsd:string     keyMajVer         -- Старшая часть версии приложения
        xsd:string     keyProdName       -- Имя приложения

    aklwngt:LicenseInfo
        aklwngt:LicKeyInfo keyCurrent   -- информация о текущем ключе
        aklwngt:LicKeyInfo keyNext      -- информация о следующем ключе

    aklwngt:CmdAppInfo
    	aklwngt:ProdInfo        prodInfo -- информация о установке/обновлении приложения
    	aklwngt:LicenseInfo     licenseInfo -- информация о ключах
    	aklwngt:DevInfo         devInfo -- информация об устройстве
    	xsd:base64Binary        hash -- хеш prodInfo, devInfo и licenseInfo

    aklwngt:CmdAppState
        xsd:base64Binary        hash -- хеш
        xsd:int                 stateApp -- состояние приложения
        xsd:int                 stateRTP -- состояние RTP
        xsd:dateTime            lastFullScan -- дата/время последнего полного сканирования
        xsd:dateTime            lastUpdateTime   -- дата/время последнего обновления (в UTC)
        xsd:dateTime            basesDate        -- дата/время антивирусных баз (в UTC)
        xsd:dateTime            basesInstallDate -- дата/время установки антивирусных баз (в UTC)
        xsd:int                 basesRecords     -- число записей в антивирусных базах (в UTC)

    aklwngt:command
        xsd:int             code -- код команды
        aklwngt:anyCmd      data -- одна структур данных: aklwngt:CmdError, aklwngt:CmdHash, aklwngt:CmdPar, aklwngt:CmdParAndHash, aklwngt:string_array, aklwngt:CmdSubscriptions, aklwngt:CmdAppInfo, aklwngt:CmdAppState

    aklwngt:sync_info
        xsd:base64Binary    hash_stgs -- хеш настроек
        xsd:base64Binary    hash_pol -- хеш политики
        xsd:base64Binary    hash_sbsc -- хеш подписок
        xsd:base64Binary    hash_info -- хеш информации о продукте
        xsd:base64Binary    hash_state -- хеш состояния продукта

    aklwngt:event_body -- тело события
        xsd:int                    severity  -- уровень важности, KLEVP_EVENT_SEVERITY_*
        xsd:string                 product_name -- "Имя приложения"
        xsd:string                 product_version -- "Версия приложения"
        xsd:string                 event_type -- Тип события, строка длиной не более 50 символов
        xsd:wstring                event_type_display_name -- отображаемое имя типа события, строка символов Unicode длиной не более 100 символов
        xsd:wstring                descr -- описание события, строка символов Unicode длиной не более 1000 символов
        xsd:int                    locid -- идентификатор локализации описания приложения
        xsd:dateTime               rise_time -- дата/время возникновения события (в UTC)
        xsd:int                    rise_time_ms -- миллисекунды для даты/времени возникновения события
        xsd:wstring                par1 -- параметр №1 события, строка произволных смволов длиной не более 512 символов
        xsd:wstring                par2 -- параметр №2 события, строка произволных смволов длиной не более 512 символов
        xsd:wstring                par3 -- параметр №3 события, строка произволных смволов длиной не более 512 символов
        xsd:wstring                par4 -- параметр №4 события, строка произволных смволов длиной не более 512 символов
        xsd:wstring                par5 -- параметр №5 события, строка произволных смволов длиной не более 512 символов
        xsd:wstring                par6 -- параметр №6 события, строка произволных смволов длиной не более 512 символов
        xsd:wstring                par7 -- параметр №7 события, строка произволных смволов длиной не более 512 символов
        xsd:wstring                par8 -- параметр №8 события, строка произволных смволов длиной не более 512 символов
        xsd:wstring                par9 -- параметр №9 события, строка произволных смволов длиной не более 512 символов

    aklwngt:event_info -- информация о событии
        xsd:string                 eventId - идентификатор события, предназначен для отсеивания дублей событий на сервере администрирования (в случае, если приложение, например, несколько раз отправило на сервер администрирования одно и то даже событие) два события с одинаковым eventId считаются одним и тем же событием
        aklwngt:event_body  body -- тело события

    aklwngt:event_info_array -- массив событий aklwngt:event_info

    aklwngt:klft_file_chunk_buff -- прочитанный фрагмент файла

    aklwngt:klft_file_chunk_t -- описание прочитанного фрагмента файла
    	xsd:wstring                     fileName -- имя файла
    	xsd:unsignedLong                CRC -- контрольная сумма фрагмента
    	xsd:unsignedLong                startPosInFile -- смещение
    	xsd:unsignedLong                fullFileSize -- размер всего файла
    	aklwngt:klft_file_chunk_buff    buff -- прочитанный фрагмент

    aklwngt:klft_file_info_t -- информация о файле/директории
    	xsd:wstring         fileName - имя файла/директории
    	xsd:boolean         isDir - true, если директория
    	xsd:boolean         readPermission -- true, если есть права на чтение
    	xsd:dateTime        createTime -- дата/время создания (в UTC)
    	xsd:unsignedLong    fullFileSize -- размер файла



6. Универсальный контейнер

    Универсальный контейнер используется, в основном, для передачи информации о настройках приложения и политике и предствляет собой неупорядоченное множество пар вида "имя-значение", где значением может быть и сам универсальный контейнер, т.е. поддерживаются произвольные иерархические структурв данных.

    Универсальный контейнер представляет собой структуру данных param:params.
        param:params -- *универсальный контейнер*, содержащий произвольные переменные вида "имя-значение"
        	param:node node             массив пар "имя-значение"
            xsd:int    checksum         контрольная сумма, не используется, 0
            xsd:base64Binary   binfmt   не используется, nil (<binfmt/>)


    Где вспомогательный тип данных param:node представляет собой массив структур типа param:entry, каждая из которых и является парой "имя-значение"
        param:entry -- вспомогательный тип, пара "имя-значение"
        	xsd:wstring	name    имя переменной
        	param:value	value   значение переменной, строго один из типов xsd:boolean (BOOLEAN_T), xsd:wstring (STRING_T), xsd:int (INT_T), xsd:long (INT_T), xsd:date (DATE_T), xsd:float (FLOAT_T), xsd:double (DOUBLE_T), xsd:dateTime (DATETIME_T), xsd:base64Binary (BINARY_T), param:params (PARAMS_T), param:arrayvalue (ARRAYVALUE_T).



7. Описания методов

    Метод aklwngt:SessionBegin
        Выполняет "логин" на сервер администрирования и начинает новую сессию.
		Входные параметры:
            xsd:string      szDeviceId          уникальный идентификатор устройства DeviceId
            xsd:string      szPassword          пароль устройства -- Password
            xsd:int         nProtocolVersion    максимальная поддерживаемая версию ProtocolVersion протокола (предполагается, что все более младшие версии протокола приложение поддерживает)

        Выходные параметры:
            aklwngt:InitiateResponse
                xsd:string  szSessionId         идентификатор сессии
            	xsd:int     nProtocolVersion	версия протокола, c которой будет вестить дальнейшее взаимодействие
            	param_error oError				описание ошибки, в случае ее возникновения. В случае возникневения ошибки, приложению следует разорвать соединение.



    Метод aklwngt:Heartbeat
        Уведомляет сервер администрирования о том, что приложение "живо".
        Входные параметры:
            xsd:string          szSessionId         идентификатор сессии
            aklwngt:sync_info   oMaySynchronize     необязательный параметр, структура, содержащая информацию, необходимую для синхронизации. Если приложение указывает параметр oMaySynchronize, то сервер администрирования может запустить алгоритм синхронизации (1.1.*). Указывать параметр oMaySynchronize следует указывать не реже, чем период синхронизации SyncPeriod (параметр 2.2.1.).
    		        Параметр oMaySynchronize содержит следующие поля.
    		            xsd:base64Binary hash_stgs -- хеш настроек -- бинарные данные длиной не более 16 байт. Если хеш настроек изменился по сравнению с хешем настроек, отосланным в прошлый раз, сервер администрирования считает, что настройки изменились и начинает их синхронизацию.
    		            xsd:base64Binary hash_pol -- хеш политики. То же, что с хешем настроек.
    		            xsd:base64Binary hash_sbsc  -- хеш подписок. То же, что с хешем настроек.
    		            xsd:base64Binary hash_info  -- хеш информации о приложении. То же, что с хешем настроек.
    		            xsd:base64Binary hash_state  -- хеш информации о состоянии. То же, что с хешем настроек.

        Выходные параметры (см. файл aklwngt.Heartbeat.res.xml):
            aklwngt:HeartbeatResponse
                aklwngt:command    oCommand     команда сервера администрирования, которую приложение должно выполнить. Если никаких команд нет, метод вернет команду SRV_NO_COMMANDS. Если сервер вернул команду, отличную от SRV_NO_COMMANDS, следует ее обработать и результат отправить на сервер администрирования с помощью метода aklwngt:PutResult, который, в свою очередь, вернет следуующую команду.
                param_error	       oError       описание ошибки, в случае ее возникновения.




	Метод aklwngt:PutResult
	    С помощью данного метода сетевой агент отправляет результат команды, полученной с помощью вызова aklwngt:Heartbeat или предыдущего вызова aklwngt:PutResult, на сервер администрирования.
        Входные параметры:
                xsd:string          szSessionId идентификатор сессии
                aklwngt:command     result      результат обработки команды. Поле code содержит код обработанной команды.

        Выходные параметры:
                aklwngt:PutResultResponse
                    aklwngt:command     oNextCommand очередная команда сервера администрирования, которую приложение должно выполнить. Если никаких команд нет, метод вернет команду SRV_NO_COMMANDS. Если сервер вернул команду, отличную от SRV_NO_COMMANDS, следует ее обработать и результат отправить на сервер администрирования с помощью вызова метода aklwngt:PutResult, который вернет следующую команду.
                    param_error         oError описание ошибки, в случае ее возникновения.



	Метод aklwngt:PutEvents Используется приложением для отправки событий на сервер администрирования.
        Входные параметры:
            xsd:string                  szSessionId         идентификатор сессии
            aklwngt:event_info_array    oEventsInfoArray массив структур с событиями для отправки на сервер

        Выходные параметры:
            aklwngt:PutEventsResponse
                param_error         oError описание ошибки, в случае ее возникновения. Если метод вернул ошибку, события считаются неотправленными.



	Метод aklwngt:klft_GetFileInfo
	    Возвращает информацию о файле
        Входные параметры:
            xsd:string              szSessionId         идентификатор сессии
			xsd:wstring	fileName    имя файла
        Выходные параметры:
            aklwngt:klft_GetFileInfoResponse
                aklwngt:klft_file_info_t	info    информация о файле
				param_error                 oError  описание ошибки, в случае ее возникновения.



	Метод aklwngt:klft_GetNextFileChunk
	    Читает заданное число байт из файла начиная с заданного смещения
        Входные параметры:
            xsd:string          szSessionId         идентификатор сессии
			xsd:wstring	        fileName        имя файла
			xsd:unsignedLong	startFilePos    смещение
			xsd:unsignedLong	neededSize      количество байт
        Выходные параметры:
            aklwngt:klft_GetNextFileChunkResponse
                aklwngt:klft_file_chunk_t	chunk   прочитанные данные и кол-во байт
                param_error                 oError  описание ошибки, в случае ее возникновения.



8. Описания команд сервера администрирования
    Приложение получает первую команду (далее "Запрос") с помощью метода aklwngt:Heartbeat, результат (далее "Ответ") отправляет на сервер с помощью метода aklwngt:PutResult, который возвращает следующую команду, ответ вновь отправляется на сервер с помощью метода aklwngt:PutResult и т.д. до тех пор, пока сервер не вернет команду SRV_NO_COMMANDS.



	SRV_NO_COMMANDS = 0
	    code = 0
	    data = nil



	SRV_SETTINGS_GET = 1
	    Запрос:
	        code = 1
	        data = nil ( <data /> )
	    Ответ:
	        code = 1
	        data =  aklwngt:CmdParAndHash или aklwngt:CmdError



	SRV_SETTINGS_PUT = 2
	    Запрос:
	        code = 2
	        data = aklwngt:CmdPar
	    Ответ:
	        code = 2
	        data = aklwngt:CmdHash (хеш настроек) или aklwngt:CmdError



    SRV_POLICY_PUT = 3
	    Запрос:
	        code = 3
	        data = aklwngt:CmdPar
	    Ответ:
	        code = 3
	        data = aklwngt:CmdHash (хеш политики) или aklwngt:CmdError



    SRV_SUBSCRIPTIONS_PUT = 4
	    Запрос:
	        code = 4
	        data = aklwngt:CmdSubscriptions - данные о подписках
	    Ответ:
	        code = 4
	        data = aklwngt:CmdHash (хеш подписок) или aklwngt:CmdError



    SRV_APPINFO_GET = 5
	    Запрос:
	        code = 5
	        data = nil ( <data /> )
	    Ответ:
	        code = 5
	        data = aklwngt:CmdAppInfo (информация о приложении и его хеш) или aklwngt:CmdError



    SRV_APPSTATE_GET = 6
	    Запрос:
	        code = 6
	        data = nil ( <data /> )
	    Ответ:
	        code = 6
	        data = aklwngt:CmdAppState  (состояние приложения и его хеш) или aklwngt:CmdError



9. Типы событий, отправляемых на сервер администрирования

    Помимо нижеописанных событий, приложение может вводить свои собственные типы событий, которые отличаются от нижеописанных только тем, что у событий, описанных ниже, часть параметров par1..par9 должна иметь строго определенные значения, а для собственных событий приложения параметры par1..par9 сервером администрирования не анализируются и могут иметь произвольные (какие приложение задаст) значения.

    Параметры par1..par9 для некоторых видов событий.
    UID - уникальный идентификатор, позволяющий отследить связь между
            обнаружением зараженного объекта и результом его обработки.
    События
        GNRL_EV_OBJECT_CURED
        GNRL_EV_OBJECT_DELETED
        GNRL_EV_PASSWD_ARCHIVE_FOUND
        GNRL_EV_OBJECT_QUARANTINED
        GNRL_EV_OBJECT_NOTCURED
    Параметры
        par2 "Имя обьекта"
        par6 UID

    События
        GNRL_EV_SUSPICIOUS_OBJECT_FOUND
        GNRL_EV_VIRUS_FOUND

    Параметры
    par2 "Имя обьекта"
    par5 "Имя вируса"
    par6 UID

    Событие
        GNRL_EV_VIRUS_FOUND

	Параметры
    par7 - Пользователь
    par8 - Тип опасности (EDetectionType) в виде строкового представления, например, L"61"


    Событие
        GNRL_EV_ATTACK_DETECTED

	Параметры
    par1 - "Имя атаки"
    par2 - Протокол
    par3 - IP-адрес (как беззнаковое длинное целое)  в виде строкового представления, например, L"2886729929"
	par4 - Порт

    Помимо описанных выше параметров c_er_par1..c_er_par9, все (не только
    GNRL_EV_*) события должны на общих основания содержать атрибуты:
        KLEVP::c_er_locid (INT_T)- идентификатор форматной строки --
                для локализации плагином
        KLEVP::c_er_par1...c_er_par9 (STRING_T) - параметры форматной
                строки c_er_locid (строки)
        KLEVP::c_er_severity (INT_T) - важность, одна из
                констант KLEVP_EVENT_SEVERITY_*:
                    KLEVP_EVENT_SEVERITY_INFO,
                    KLEVP_EVENT_SEVERITY_WARNING,
                    KLEVP_EVENT_SEVERITY_ERROR,
                    KLEVP_EVENT_SEVERITY_CRITICAL.
        KLEVP::c_er_task_display_name (STRING_T) -
                Отображаемое имя задачи, в результате работы
                которой было опубликовано событие.
        KLEVP::c_er_descr (STRING_T) - описание события (по сути
                форматная строка с подставленными c_er_par1...c_er_par9).
        KLEVP::c_er_event_type_display_name (STRING_T)
                Локализованое имя типа события.



10. Формат политики

    Политика ту же структуру, что и настройки, с той разницей, что в политике присутствуют только поля, "заблокированные" администратором.
    Если параметр X присутствует в политике , то приложению следует брать его именно из политики, а не из настроек. Приложению берет параметр X из настроек только в том случае, если параметр не задан в политике.

    Например,
        Структура данных:
            <container1_name>
             +---<var1_name>=value1 //type1
             +---<var2_name>=value2 //type2

        Если поле var1_name заблокировано администратором, а поле var2_name -- нет, то политика будет иметь вид:
            <container1_name>
             +---<var1_name>=value1 //type1

        Если поле var2_name заблокировано администратором, а поле var1_name -- нет, то политика будет иметь вид:
            <container1_name>
             +---<var2_name>=value2 //type2

        Причем массивы, т.е. переменные типа ARRAY_T (param:arrayvalue), могут быть заблокированы администратором только полностью (массив представляет собой упорядоченное множество, поэтому неясно, как следовало бы поступать приложению при наличии в политике только "половины" массива).
