/* soapClient.cpp
   Generated by gSOAP 2.7.0d from soapheader.h
   Copyright (C) 2001-2004 Genivia, Inc. All Rights Reserved.
   This software is released under one of the following three licenses:
   GPL, the gSOAP public license, or Genivia's license for commercial use.
   See README.txt for further details.
*/
#include "soapH.h"

SOAP_BEGIN_NAMESPACE(soap)

SOAP_SOURCE_STAMP("@(#) soapClient.cpp ver 2.7.0d 2007-12-27 13:15:32 GMT")


SOAP_FMAC5 int SOAP_FMAC6 soap_call_tr_InitiateRemoteConnection(struct soap *soap, const char *URL, const char *action, char *remoteName, char *localName, int *result)
{
	struct tr_InitiateRemoteConnection soap_tmp_tr_InitiateRemoteConnection;
	struct tr_InitiateRemoteConnectionResponse *soap_tmp_tr_InitiateRemoteConnectionResponse;
	soap->encodingStyle = NULL;
	soap_tmp_tr_InitiateRemoteConnection.remoteName=remoteName;
	soap_tmp_tr_InitiateRemoteConnection.localName=localName;
	soap_begin(soap);
	soap_serializeheader(soap);
	soap_serialize_tr_InitiateRemoteConnection(soap, &soap_tmp_tr_InitiateRemoteConnection);
	soap_begin_count(soap);
	if (soap->mode & SOAP_IO_LENGTH)
	{	soap_envelope_begin_out(soap);
		soap_putheader(soap);
		soap_body_begin_out(soap);
		soap_put_tr_InitiateRemoteConnection(soap, &soap_tmp_tr_InitiateRemoteConnection, "tr-InitiateRemoteConnection", "");
		soap_body_end_out(soap);
		soap_envelope_end_out(soap);
	}
	if (soap_connect(soap, URL, action)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put_tr_InitiateRemoteConnection(soap, &soap_tmp_tr_InitiateRemoteConnection, "tr-InitiateRemoteConnection", "")
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap_closesock(soap);
	soap_default_int(soap, result);
	if (soap_begin_recv(soap)
	 || soap_envelope_begin_in(soap)
	 || soap_recv_header(soap)
	 || soap_body_begin_in(soap))
		return soap_closesock(soap);
	soap_tmp_tr_InitiateRemoteConnectionResponse = soap_get_tr_InitiateRemoteConnectionResponse(soap, NULL, "tr-InitiateRemoteConnectionResponse", "");
	if (soap->error)
	{	if (soap->error == SOAP_TAG_MISMATCH && soap->level == 2)
			return soap_recv_fault(soap);
		return soap_closesock(soap);
	}
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
#ifndef WITH_LEANER
	 || soap_resolve_attachments(soap)
#endif
	 || soap_end_recv(soap))
		return soap_closesock(soap);
	if (result && soap_tmp_tr_InitiateRemoteConnectionResponse->result)
		*result = *soap_tmp_tr_InitiateRemoteConnectionResponse->result;
	return soap_closesock(soap);
}

SOAP_FMAC5 int SOAP_FMAC6 soap_call_tr_CreateReverseConnection(struct soap *soap, const char *URL, const char *action, char *remoteClientConnName, char *connName, char *remoteClientLoc, char *authClientName, int gatewayConnFlag, int connPingTimeout, int connPriority, SOAPPermissions *permissions, SOAPConnectionOptions *options, int *result)
{
	struct tr_CreateReverseConnection soap_tmp_tr_CreateReverseConnection;
	struct tr_CreateReverseConnectionResponse *soap_tmp_tr_CreateReverseConnectionResponse;
	soap->encodingStyle = NULL;
	soap_tmp_tr_CreateReverseConnection.remoteClientConnName=remoteClientConnName;
	soap_tmp_tr_CreateReverseConnection.connName=connName;
	soap_tmp_tr_CreateReverseConnection.remoteClientLoc=remoteClientLoc;
	soap_tmp_tr_CreateReverseConnection.authClientName=authClientName;
	soap_tmp_tr_CreateReverseConnection.gatewayConnFlag=gatewayConnFlag;
	soap_tmp_tr_CreateReverseConnection.connPingTimeout=connPingTimeout;
	soap_tmp_tr_CreateReverseConnection.connPriority=connPriority;
	soap_tmp_tr_CreateReverseConnection.permissions=permissions;
	soap_tmp_tr_CreateReverseConnection.options=options;
	soap_begin(soap);
	soap_serializeheader(soap);
	soap_serialize_tr_CreateReverseConnection(soap, &soap_tmp_tr_CreateReverseConnection);
	soap_begin_count(soap);
	if (soap->mode & SOAP_IO_LENGTH)
	{	soap_envelope_begin_out(soap);
		soap_putheader(soap);
		soap_body_begin_out(soap);
		soap_put_tr_CreateReverseConnection(soap, &soap_tmp_tr_CreateReverseConnection, "tr-CreateReverseConnection", "");
		soap_body_end_out(soap);
		soap_envelope_end_out(soap);
	}
	if (soap_connect(soap, URL, action)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put_tr_CreateReverseConnection(soap, &soap_tmp_tr_CreateReverseConnection, "tr-CreateReverseConnection", "")
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap_closesock(soap);
	soap_default_int(soap, result);
	if (soap_begin_recv(soap)
	 || soap_envelope_begin_in(soap)
	 || soap_recv_header(soap)
	 || soap_body_begin_in(soap))
		return soap_closesock(soap);
	soap_tmp_tr_CreateReverseConnectionResponse = soap_get_tr_CreateReverseConnectionResponse(soap, NULL, "tr-CreateReverseConnectionResponse", "");
	if (soap->error)
	{	if (soap->error == SOAP_TAG_MISMATCH && soap->level == 2)
			return soap_recv_fault(soap);
		return soap_closesock(soap);
	}
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
#ifndef WITH_LEANER
	 || soap_resolve_attachments(soap)
#endif
	 || soap_end_recv(soap))
		return soap_closesock(soap);
	if (result && soap_tmp_tr_CreateReverseConnectionResponse->result)
		*result = *soap_tmp_tr_CreateReverseConnectionResponse->result;
	return soap_closesock(soap);
}

SOAP_FMAC5 int SOAP_FMAC6 soap_call_tr_ReverseConnectionReply(struct soap *soap, const char *URL, const char *action, char *remoteServerConnName, char *clientConnName, int pingTimeout, SOAPPermissions *permissions, SOAPConnectionOptions *options, int *result)
{
	struct tr_ReverseConnectionReply soap_tmp_tr_ReverseConnectionReply;
	struct tr_ReverseConnectionReplyResponse *soap_tmp_tr_ReverseConnectionReplyResponse;
	soap->encodingStyle = NULL;
	soap_tmp_tr_ReverseConnectionReply.remoteServerConnName=remoteServerConnName;
	soap_tmp_tr_ReverseConnectionReply.clientConnName=clientConnName;
	soap_tmp_tr_ReverseConnectionReply.pingTimeout=pingTimeout;
	soap_tmp_tr_ReverseConnectionReply.permissions=permissions;
	soap_tmp_tr_ReverseConnectionReply.options=options;
	soap_begin(soap);
	soap_serializeheader(soap);
	soap_serialize_tr_ReverseConnectionReply(soap, &soap_tmp_tr_ReverseConnectionReply);
	soap_begin_count(soap);
	if (soap->mode & SOAP_IO_LENGTH)
	{	soap_envelope_begin_out(soap);
		soap_putheader(soap);
		soap_body_begin_out(soap);
		soap_put_tr_ReverseConnectionReply(soap, &soap_tmp_tr_ReverseConnectionReply, "tr-ReverseConnectionReply", "");
		soap_body_end_out(soap);
		soap_envelope_end_out(soap);
	}
	if (soap_connect(soap, URL, action)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put_tr_ReverseConnectionReply(soap, &soap_tmp_tr_ReverseConnectionReply, "tr-ReverseConnectionReply", "")
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap_closesock(soap);
	soap_default_int(soap, result);
	if (soap_begin_recv(soap)
	 || soap_envelope_begin_in(soap)
	 || soap_recv_header(soap)
	 || soap_body_begin_in(soap))
		return soap_closesock(soap);
	soap_tmp_tr_ReverseConnectionReplyResponse = soap_get_tr_ReverseConnectionReplyResponse(soap, NULL, "tr-ReverseConnectionReplyResponse", "");
	if (soap->error)
	{	if (soap->error == SOAP_TAG_MISMATCH && soap->level == 2)
			return soap_recv_fault(soap);
		return soap_closesock(soap);
	}
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
#ifndef WITH_LEANER
	 || soap_resolve_attachments(soap)
#endif
	 || soap_end_recv(soap))
		return soap_closesock(soap);
	if (result && soap_tmp_tr_ReverseConnectionReplyResponse->result)
		*result = *soap_tmp_tr_ReverseConnectionReplyResponse->result;
	return soap_closesock(soap);
}

SOAP_FMAC5 int SOAP_FMAC6 soap_call_tr_PingMethod(struct soap *soap, const char *URL, const char *action, char *remoteClientConnName, int *result)
{
	struct tr_PingMethod soap_tmp_tr_PingMethod;
	struct tr_PingMethodResponse *soap_tmp_tr_PingMethodResponse;
	soap->encodingStyle = NULL;
	soap_tmp_tr_PingMethod.remoteClientConnName=remoteClientConnName;
	soap_begin(soap);
	soap_serializeheader(soap);
	soap_serialize_tr_PingMethod(soap, &soap_tmp_tr_PingMethod);
	soap_begin_count(soap);
	if (soap->mode & SOAP_IO_LENGTH)
	{	soap_envelope_begin_out(soap);
		soap_putheader(soap);
		soap_body_begin_out(soap);
		soap_put_tr_PingMethod(soap, &soap_tmp_tr_PingMethod, "tr-PingMethod", "");
		soap_body_end_out(soap);
		soap_envelope_end_out(soap);
	}
	if (soap_connect(soap, URL, action)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put_tr_PingMethod(soap, &soap_tmp_tr_PingMethod, "tr-PingMethod", "")
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap_closesock(soap);
	soap_default_int(soap, result);
	if (soap_begin_recv(soap)
	 || soap_envelope_begin_in(soap)
	 || soap_recv_header(soap)
	 || soap_body_begin_in(soap))
		return soap_closesock(soap);
	soap_tmp_tr_PingMethodResponse = soap_get_tr_PingMethodResponse(soap, NULL, "tr-PingMethodResponse", "");
	if (soap->error)
	{	if (soap->error == SOAP_TAG_MISMATCH && soap->level == 2)
			return soap_recv_fault(soap);
		return soap_closesock(soap);
	}
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
#ifndef WITH_LEANER
	 || soap_resolve_attachments(soap)
#endif
	 || soap_end_recv(soap))
		return soap_closesock(soap);
	if (result && soap_tmp_tr_PingMethodResponse->result)
		*result = *soap_tmp_tr_PingMethodResponse->result;
	return soap_closesock(soap);
}

SOAP_FMAC5 int SOAP_FMAC6 soap_call_tr_AuthenticationHandshake(struct soap *soap, const char *URL, const char *action, wchar_t *inClientIdentity, xsd__hexBinary inString, int connPriority, struct tr_AuthHandshakeResult &r)
{
	struct tr_AuthenticationHandshake soap_tmp_tr_AuthenticationHandshake;
	soap->encodingStyle = NULL;
	soap_tmp_tr_AuthenticationHandshake.inClientIdentity=inClientIdentity;
	soap_tmp_tr_AuthenticationHandshake.inString=inString;
	soap_tmp_tr_AuthenticationHandshake.connPriority=connPriority;
	soap_begin(soap);
	soap_serializeheader(soap);
	soap_serialize_tr_AuthenticationHandshake(soap, &soap_tmp_tr_AuthenticationHandshake);
	soap_begin_count(soap);
	if (soap->mode & SOAP_IO_LENGTH)
	{	soap_envelope_begin_out(soap);
		soap_putheader(soap);
		soap_body_begin_out(soap);
		soap_put_tr_AuthenticationHandshake(soap, &soap_tmp_tr_AuthenticationHandshake, "tr-AuthenticationHandshake", "");
		soap_body_end_out(soap);
		soap_envelope_end_out(soap);
	}
	if (soap_connect(soap, URL, action)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put_tr_AuthenticationHandshake(soap, &soap_tmp_tr_AuthenticationHandshake, "tr-AuthenticationHandshake", "")
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap_closesock(soap);
	soap_default_tr_AuthHandshakeResult(soap, &r);
	if (soap_begin_recv(soap)
	 || soap_envelope_begin_in(soap)
	 || soap_recv_header(soap)
	 || soap_body_begin_in(soap))
		return soap_closesock(soap);
	soap_get_tr_AuthHandshakeResult(soap, &r, "tr-AuthHandshakeResult", "");
	if (soap->error)
	{	if (soap->error == SOAP_TAG_MISMATCH && soap->level == 2)
			return soap_recv_fault(soap);
		return soap_closesock(soap);
	}
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
#ifndef WITH_LEANER
	 || soap_resolve_attachments(soap)
#endif
	 || soap_end_recv(soap))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

SOAP_FMAC5 int SOAP_FMAC6 soap_call_tr_CreateGatewayConnection(struct soap *soap, const char *URL, const char *action, wchar_t *localName, struct TransportLocList *processNamesList, int nextProcessPos, int connectTimeout, int *result)
{
	struct tr_CreateGatewayConnection soap_tmp_tr_CreateGatewayConnection;
	struct tr_CreateGatewayConnectionResponse *soap_tmp_tr_CreateGatewayConnectionResponse;
	soap->encodingStyle = NULL;
	soap_tmp_tr_CreateGatewayConnection.localName=localName;
	soap_tmp_tr_CreateGatewayConnection.processNamesList=processNamesList;
	soap_tmp_tr_CreateGatewayConnection.nextProcessPos=nextProcessPos;
	soap_tmp_tr_CreateGatewayConnection.connectTimeout=connectTimeout;
	soap_begin(soap);
	soap_serializeheader(soap);
	soap_serialize_tr_CreateGatewayConnection(soap, &soap_tmp_tr_CreateGatewayConnection);
	soap_begin_count(soap);
	if (soap->mode & SOAP_IO_LENGTH)
	{	soap_envelope_begin_out(soap);
		soap_putheader(soap);
		soap_body_begin_out(soap);
		soap_put_tr_CreateGatewayConnection(soap, &soap_tmp_tr_CreateGatewayConnection, "tr-CreateGatewayConnection", "");
		soap_body_end_out(soap);
		soap_envelope_end_out(soap);
	}
	if (soap_connect(soap, URL, action)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put_tr_CreateGatewayConnection(soap, &soap_tmp_tr_CreateGatewayConnection, "tr-CreateGatewayConnection", "")
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap_closesock(soap);
	soap_default_int(soap, result);
	if (soap_begin_recv(soap)
	 || soap_envelope_begin_in(soap)
	 || soap_recv_header(soap)
	 || soap_body_begin_in(soap))
		return soap_closesock(soap);
	soap_tmp_tr_CreateGatewayConnectionResponse = soap_get_tr_CreateGatewayConnectionResponse(soap, NULL, "tr-CreateGatewayConnectionResponse", "");
	if (soap->error)
	{	if (soap->error == SOAP_TAG_MISMATCH && soap->level == 2)
			return soap_recv_fault(soap);
		return soap_closesock(soap);
	}
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
#ifndef WITH_LEANER
	 || soap_resolve_attachments(soap)
#endif
	 || soap_end_recv(soap))
		return soap_closesock(soap);
	if (result && soap_tmp_tr_CreateGatewayConnectionResponse->result)
		*result = *soap_tmp_tr_CreateGatewayConnectionResponse->result;
	return soap_closesock(soap);
}

SOAP_FMAC5 int SOAP_FMAC6 soap_call_tr_TestMethod(struct soap *soap, const char *URL, const char *action, int num, char *str, int *result)
{
	struct tr_TestMethod soap_tmp_tr_TestMethod;
	struct tr_TestMethodResponse *soap_tmp_tr_TestMethodResponse;
	soap->encodingStyle = NULL;
	soap_tmp_tr_TestMethod.num=num;
	soap_tmp_tr_TestMethod.str=str;
	soap_begin(soap);
	soap_serializeheader(soap);
	soap_serialize_tr_TestMethod(soap, &soap_tmp_tr_TestMethod);
	soap_begin_count(soap);
	if (soap->mode & SOAP_IO_LENGTH)
	{	soap_envelope_begin_out(soap);
		soap_putheader(soap);
		soap_body_begin_out(soap);
		soap_put_tr_TestMethod(soap, &soap_tmp_tr_TestMethod, "tr-TestMethod", "");
		soap_body_end_out(soap);
		soap_envelope_end_out(soap);
	}
	if (soap_connect(soap, URL, action)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put_tr_TestMethod(soap, &soap_tmp_tr_TestMethod, "tr-TestMethod", "")
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap_closesock(soap);
	soap_default_int(soap, result);
	if (soap_begin_recv(soap)
	 || soap_envelope_begin_in(soap)
	 || soap_recv_header(soap)
	 || soap_body_begin_in(soap))
		return soap_closesock(soap);
	soap_tmp_tr_TestMethodResponse = soap_get_tr_TestMethodResponse(soap, NULL, "tr-TestMethodResponse", "");
	if (soap->error)
	{	if (soap->error == SOAP_TAG_MISMATCH && soap->level == 2)
			return soap_recv_fault(soap);
		return soap_closesock(soap);
	}
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
#ifndef WITH_LEANER
	 || soap_resolve_attachments(soap)
#endif
	 || soap_end_recv(soap))
		return soap_closesock(soap);
	if (result && soap_tmp_tr_TestMethodResponse->result)
		*result = *soap_tmp_tr_TestMethodResponse->result;
	return soap_closesock(soap);
}

SOAP_FMAC5 int SOAP_FMAC6 soap_call_tr_TestMethod1(struct soap *soap, const char *URL, const char *action, int num, char *str, struct tr_TestMethod1Result &r)
{
	struct tr_TestMethod1 soap_tmp_tr_TestMethod1;
	soap->encodingStyle = NULL;
	soap_tmp_tr_TestMethod1.num=num;
	soap_tmp_tr_TestMethod1.str=str;
	soap_begin(soap);
	soap_serializeheader(soap);
	soap_serialize_tr_TestMethod1(soap, &soap_tmp_tr_TestMethod1);
	soap_begin_count(soap);
	if (soap->mode & SOAP_IO_LENGTH)
	{	soap_envelope_begin_out(soap);
		soap_putheader(soap);
		soap_body_begin_out(soap);
		soap_put_tr_TestMethod1(soap, &soap_tmp_tr_TestMethod1, "tr-TestMethod1", "");
		soap_body_end_out(soap);
		soap_envelope_end_out(soap);
	}
	if (soap_connect(soap, URL, action)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put_tr_TestMethod1(soap, &soap_tmp_tr_TestMethod1, "tr-TestMethod1", "")
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap_closesock(soap);
	soap_default_tr_TestMethod1Result(soap, &r);
	if (soap_begin_recv(soap)
	 || soap_envelope_begin_in(soap)
	 || soap_recv_header(soap)
	 || soap_body_begin_in(soap))
		return soap_closesock(soap);
	soap_get_tr_TestMethod1Result(soap, &r, "tr-TestMethod1Result", "");
	if (soap->error)
	{	if (soap->error == SOAP_TAG_MISMATCH && soap->level == 2)
			return soap_recv_fault(soap);
		return soap_closesock(soap);
	}
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
#ifndef WITH_LEANER
	 || soap_resolve_attachments(soap)
#endif
	 || soap_end_recv(soap))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

SOAP_FMAC5 int SOAP_FMAC6 soap_call_tr_TrafficControlNotify(struct soap *soap, const char *URL, const char *action, int error, int *result)
{
	struct tr_TrafficControlNotify soap_tmp_tr_TrafficControlNotify;
	struct tr_TrafficControlNotifyResponse *soap_tmp_tr_TrafficControlNotifyResponse;
	soap->encodingStyle = NULL;
	soap_tmp_tr_TrafficControlNotify.error=error;
	soap_begin(soap);
	soap_serializeheader(soap);
	soap_serialize_tr_TrafficControlNotify(soap, &soap_tmp_tr_TrafficControlNotify);
	soap_begin_count(soap);
	if (soap->mode & SOAP_IO_LENGTH)
	{	soap_envelope_begin_out(soap);
		soap_putheader(soap);
		soap_body_begin_out(soap);
		soap_put_tr_TrafficControlNotify(soap, &soap_tmp_tr_TrafficControlNotify, "tr-TrafficControlNotify", "");
		soap_body_end_out(soap);
		soap_envelope_end_out(soap);
	}
	if (soap_connect(soap, URL, action)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put_tr_TrafficControlNotify(soap, &soap_tmp_tr_TrafficControlNotify, "tr-TrafficControlNotify", "")
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap_closesock(soap);
	soap_default_int(soap, result);
	if (soap_begin_recv(soap)
	 || soap_envelope_begin_in(soap)
	 || soap_recv_header(soap)
	 || soap_body_begin_in(soap))
		return soap_closesock(soap);
	soap_tmp_tr_TrafficControlNotifyResponse = soap_get_tr_TrafficControlNotifyResponse(soap, NULL, "tr-TrafficControlNotifyResponse", "");
	if (soap->error)
	{	if (soap->error == SOAP_TAG_MISMATCH && soap->level == 2)
			return soap_recv_fault(soap);
		return soap_closesock(soap);
	}
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
#ifndef WITH_LEANER
	 || soap_resolve_attachments(soap)
#endif
	 || soap_end_recv(soap))
		return soap_closesock(soap);
	if (result && soap_tmp_tr_TrafficControlNotifyResponse->result)
		*result = *soap_tmp_tr_TrafficControlNotifyResponse->result;
	return soap_closesock(soap);
}

SOAP_FMAC5 int SOAP_FMAC6 soap_call_ev_RemoteSubscribe(struct soap *soap, const char *URL, const char *action, long subsId, wchar_t *localCompName, SOAPComponentId *subscriber, SOAPComponentId *publisher, wchar_t *eventType, param__params eventBodyFilter, int sendToAgentSubs, int useOnlyLocalConnsFlag, int *result)
{
	struct ev_RemoteSubscribe soap_tmp_ev_RemoteSubscribe;
	struct ev_RemoteSubscribeResponse *soap_tmp_ev_RemoteSubscribeResponse;
	soap->encodingStyle = NULL;
	soap_tmp_ev_RemoteSubscribe.subsId=subsId;
	soap_tmp_ev_RemoteSubscribe.localCompName=localCompName;
	soap_tmp_ev_RemoteSubscribe.subscriber=subscriber;
	soap_tmp_ev_RemoteSubscribe.publisher=publisher;
	soap_tmp_ev_RemoteSubscribe.eventType=eventType;
	soap_tmp_ev_RemoteSubscribe.eventBodyFilter=eventBodyFilter;
	soap_tmp_ev_RemoteSubscribe.sendToAgentSubs=sendToAgentSubs;
	soap_tmp_ev_RemoteSubscribe.useOnlyLocalConnsFlag=useOnlyLocalConnsFlag;
	soap_begin(soap);
	soap_serializeheader(soap);
	soap_serialize_ev_RemoteSubscribe(soap, &soap_tmp_ev_RemoteSubscribe);
	soap_begin_count(soap);
	if (soap->mode & SOAP_IO_LENGTH)
	{	soap_envelope_begin_out(soap);
		soap_putheader(soap);
		soap_body_begin_out(soap);
		soap_put_ev_RemoteSubscribe(soap, &soap_tmp_ev_RemoteSubscribe, "ev-RemoteSubscribe", "");
		soap_body_end_out(soap);
		soap_envelope_end_out(soap);
	}
	if (soap_connect(soap, URL, action)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put_ev_RemoteSubscribe(soap, &soap_tmp_ev_RemoteSubscribe, "ev-RemoteSubscribe", "")
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap_closesock(soap);
	soap_default_int(soap, result);
	if (soap_begin_recv(soap)
	 || soap_envelope_begin_in(soap)
	 || soap_recv_header(soap)
	 || soap_body_begin_in(soap))
		return soap_closesock(soap);
	soap_tmp_ev_RemoteSubscribeResponse = soap_get_ev_RemoteSubscribeResponse(soap, NULL, "ev-RemoteSubscribeResponse", "");
	if (soap->error)
	{	if (soap->error == SOAP_TAG_MISMATCH && soap->level == 2)
			return soap_recv_fault(soap);
		return soap_closesock(soap);
	}
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
#ifndef WITH_LEANER
	 || soap_resolve_attachments(soap)
#endif
	 || soap_end_recv(soap))
		return soap_closesock(soap);
	if (result && soap_tmp_ev_RemoteSubscribeResponse->result)
		*result = *soap_tmp_ev_RemoteSubscribeResponse->result;
	return soap_closesock(soap);
}

SOAP_FMAC5 int SOAP_FMAC6 soap_call_ev_RemoteUnsubscribe(struct soap *soap, const char *URL, const char *action, long remoteSubsId, int *result)
{
	struct ev_RemoteUnsubscribe soap_tmp_ev_RemoteUnsubscribe;
	struct ev_RemoteUnsubscribeResponse *soap_tmp_ev_RemoteUnsubscribeResponse;
	soap->encodingStyle = NULL;
	soap_tmp_ev_RemoteUnsubscribe.remoteSubsId=remoteSubsId;
	soap_begin(soap);
	soap_serializeheader(soap);
	soap_serialize_ev_RemoteUnsubscribe(soap, &soap_tmp_ev_RemoteUnsubscribe);
	soap_begin_count(soap);
	if (soap->mode & SOAP_IO_LENGTH)
	{	soap_envelope_begin_out(soap);
		soap_putheader(soap);
		soap_body_begin_out(soap);
		soap_put_ev_RemoteUnsubscribe(soap, &soap_tmp_ev_RemoteUnsubscribe, "ev-RemoteUnsubscribe", "");
		soap_body_end_out(soap);
		soap_envelope_end_out(soap);
	}
	if (soap_connect(soap, URL, action)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put_ev_RemoteUnsubscribe(soap, &soap_tmp_ev_RemoteUnsubscribe, "ev-RemoteUnsubscribe", "")
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap_closesock(soap);
	soap_default_int(soap, result);
	if (soap_begin_recv(soap)
	 || soap_envelope_begin_in(soap)
	 || soap_recv_header(soap)
	 || soap_body_begin_in(soap))
		return soap_closesock(soap);
	soap_tmp_ev_RemoteUnsubscribeResponse = soap_get_ev_RemoteUnsubscribeResponse(soap, NULL, "ev-RemoteUnsubscribeResponse", "");
	if (soap->error)
	{	if (soap->error == SOAP_TAG_MISMATCH && soap->level == 2)
			return soap_recv_fault(soap);
		return soap_closesock(soap);
	}
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
#ifndef WITH_LEANER
	 || soap_resolve_attachments(soap)
#endif
	 || soap_end_recv(soap))
		return soap_closesock(soap);
	if (result && soap_tmp_ev_RemoteUnsubscribeResponse->result)
		*result = *soap_tmp_ev_RemoteUnsubscribeResponse->result;
	return soap_closesock(soap);
}

SOAP_FMAC5 int SOAP_FMAC6 soap_call_ev_PublishEvent(struct soap *soap, const char *URL, const char *action, SOAPComponentId *eventPublisher, wchar_t *eventType, param__params eventBody, time_t eventBirthTime, int eventLifeTime, struct SOAPComponentIdsList *processedCompsList, struct SOAPSubsIdsList *remoteSubsIdsList, int *result)
{
	struct ev_PublishEvent soap_tmp_ev_PublishEvent;
	struct ev_PublishEventResponse *soap_tmp_ev_PublishEventResponse;
	soap->encodingStyle = NULL;
	soap_tmp_ev_PublishEvent.eventPublisher=eventPublisher;
	soap_tmp_ev_PublishEvent.eventType=eventType;
	soap_tmp_ev_PublishEvent.eventBody=eventBody;
	soap_tmp_ev_PublishEvent.eventBirthTime=eventBirthTime;
	soap_tmp_ev_PublishEvent.eventLifeTime=eventLifeTime;
	soap_tmp_ev_PublishEvent.processedCompsList=processedCompsList;
	soap_tmp_ev_PublishEvent.remoteSubsIdsList=remoteSubsIdsList;
	soap_begin(soap);
	soap_serializeheader(soap);
	soap_serialize_ev_PublishEvent(soap, &soap_tmp_ev_PublishEvent);
	soap_begin_count(soap);
	if (soap->mode & SOAP_IO_LENGTH)
	{	soap_envelope_begin_out(soap);
		soap_putheader(soap);
		soap_body_begin_out(soap);
		soap_put_ev_PublishEvent(soap, &soap_tmp_ev_PublishEvent, "ev-PublishEvent", "");
		soap_body_end_out(soap);
		soap_envelope_end_out(soap);
	}
	if (soap_connect(soap, URL, action)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put_ev_PublishEvent(soap, &soap_tmp_ev_PublishEvent, "ev-PublishEvent", "")
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap_closesock(soap);
	soap_default_int(soap, result);
	if (soap_begin_recv(soap)
	 || soap_envelope_begin_in(soap)
	 || soap_recv_header(soap)
	 || soap_body_begin_in(soap))
		return soap_closesock(soap);
	soap_tmp_ev_PublishEventResponse = soap_get_ev_PublishEventResponse(soap, NULL, "ev-PublishEventResponse", "");
	if (soap->error)
	{	if (soap->error == SOAP_TAG_MISMATCH && soap->level == 2)
			return soap_recv_fault(soap);
		return soap_closesock(soap);
	}
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
#ifndef WITH_LEANER
	 || soap_resolve_attachments(soap)
#endif
	 || soap_end_recv(soap))
		return soap_closesock(soap);
	if (result && soap_tmp_ev_PublishEventResponse->result)
		*result = *soap_tmp_ev_PublishEventResponse->result;
	return soap_closesock(soap);
}

SOAP_FMAC5 int SOAP_FMAC6 soap_call_klspl_GetPermissions(struct soap *soap, const char *URL, const char *action, LONG64 groupId, struct klspl_GetPermissionsResponse &r)
{
	struct klspl_GetPermissions soap_tmp_klspl_GetPermissions;
	soap->encodingStyle = NULL;
	soap_tmp_klspl_GetPermissions.groupId=groupId;
	soap_begin(soap);
	soap_serializeheader(soap);
	soap_serialize_klspl_GetPermissions(soap, &soap_tmp_klspl_GetPermissions);
	soap_begin_count(soap);
	if (soap->mode & SOAP_IO_LENGTH)
	{	soap_envelope_begin_out(soap);
		soap_putheader(soap);
		soap_body_begin_out(soap);
		soap_put_klspl_GetPermissions(soap, &soap_tmp_klspl_GetPermissions, "klspl-GetPermissions", "");
		soap_body_end_out(soap);
		soap_envelope_end_out(soap);
	}
	if (soap_connect(soap, URL, action)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put_klspl_GetPermissions(soap, &soap_tmp_klspl_GetPermissions, "klspl-GetPermissions", "")
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap_closesock(soap);
	soap_default_klspl_GetPermissionsResponse(soap, &r);
	if (soap_begin_recv(soap)
	 || soap_envelope_begin_in(soap)
	 || soap_recv_header(soap)
	 || soap_body_begin_in(soap))
		return soap_closesock(soap);
	soap_get_klspl_GetPermissionsResponse(soap, &r, "klspl-GetPermissionsResponse", "");
	if (soap->error)
	{	if (soap->error == SOAP_TAG_MISMATCH && soap->level == 2)
			return soap_recv_fault(soap);
		return soap_closesock(soap);
	}
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
#ifndef WITH_LEANER
	 || soap_resolve_attachments(soap)
#endif
	 || soap_end_recv(soap))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

SOAP_FMAC5 int SOAP_FMAC6 soap_call_klspl_SetPermissions(struct soap *soap, const char *URL, const char *action, LONG64 groupId, struct klspl_permissions_t perms, bool bCheckUserRights, struct klspl_SetPermissionsResponse &r)
{
	struct klspl_SetPermissions soap_tmp_klspl_SetPermissions;
	soap->encodingStyle = NULL;
	soap_tmp_klspl_SetPermissions.groupId=groupId;
	soap_tmp_klspl_SetPermissions.perms=perms;
	soap_tmp_klspl_SetPermissions.bCheckUserRights=bCheckUserRights;
	soap_begin(soap);
	soap_serializeheader(soap);
	soap_serialize_klspl_SetPermissions(soap, &soap_tmp_klspl_SetPermissions);
	soap_begin_count(soap);
	if (soap->mode & SOAP_IO_LENGTH)
	{	soap_envelope_begin_out(soap);
		soap_putheader(soap);
		soap_body_begin_out(soap);
		soap_put_klspl_SetPermissions(soap, &soap_tmp_klspl_SetPermissions, "klspl-SetPermissions", "");
		soap_body_end_out(soap);
		soap_envelope_end_out(soap);
	}
	if (soap_connect(soap, URL, action)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put_klspl_SetPermissions(soap, &soap_tmp_klspl_SetPermissions, "klspl-SetPermissions", "")
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap_closesock(soap);
	soap_default_klspl_SetPermissionsResponse(soap, &r);
	if (soap_begin_recv(soap)
	 || soap_envelope_begin_in(soap)
	 || soap_recv_header(soap)
	 || soap_body_begin_in(soap))
		return soap_closesock(soap);
	soap_get_klspl_SetPermissionsResponse(soap, &r, "klspl-SetPermissionsResponse", "");
	if (soap->error)
	{	if (soap->error == SOAP_TAG_MISMATCH && soap->level == 2)
			return soap_recv_fault(soap);
		return soap_closesock(soap);
	}
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
#ifndef WITH_LEANER
	 || soap_resolve_attachments(soap)
#endif
	 || soap_end_recv(soap))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

SOAP_FMAC5 int SOAP_FMAC6 soap_call_klprci_GetTasksParams(struct soap *soap, const char *URL, const char *action, wchar_t *ID, long idtask, param__params filter, struct klprci_GetTasksParamsResponse &r)
{
	struct klprci_GetTasksParams soap_tmp_klprci_GetTasksParams;
	soap->encodingStyle = NULL;
	soap_tmp_klprci_GetTasksParams.ID=ID;
	soap_tmp_klprci_GetTasksParams.idtask=idtask;
	soap_tmp_klprci_GetTasksParams.filter=filter;
	soap_begin(soap);
	soap_serializeheader(soap);
	soap_serialize_klprci_GetTasksParams(soap, &soap_tmp_klprci_GetTasksParams);
	soap_begin_count(soap);
	if (soap->mode & SOAP_IO_LENGTH)
	{	soap_envelope_begin_out(soap);
		soap_putheader(soap);
		soap_body_begin_out(soap);
		soap_put_klprci_GetTasksParams(soap, &soap_tmp_klprci_GetTasksParams, "klprci-GetTasksParams", "");
		soap_body_end_out(soap);
		soap_envelope_end_out(soap);
	}
	if (soap_connect(soap, URL, action)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put_klprci_GetTasksParams(soap, &soap_tmp_klprci_GetTasksParams, "klprci-GetTasksParams", "")
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap_closesock(soap);
	soap_default_klprci_GetTasksParamsResponse(soap, &r);
	if (soap_begin_recv(soap)
	 || soap_envelope_begin_in(soap)
	 || soap_recv_header(soap)
	 || soap_body_begin_in(soap))
		return soap_closesock(soap);
	soap_get_klprci_GetTasksParamsResponse(soap, &r, "klprci-GetTasksParamsResponse", "");
	if (soap->error)
	{	if (soap->error == SOAP_TAG_MISMATCH && soap->level == 2)
			return soap_recv_fault(soap);
		return soap_closesock(soap);
	}
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
#ifndef WITH_LEANER
	 || soap_resolve_attachments(soap)
#endif
	 || soap_end_recv(soap))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

SOAP_FMAC5 int SOAP_FMAC6 soap_call_klprci_GetPingTimeout(struct soap *soap, const char *URL, const char *action, wchar_t *ID, struct klprci_GetPingTimeoutResponse &r)
{
	struct klprci_GetPingTimeout soap_tmp_klprci_GetPingTimeout;
	soap->encodingStyle = NULL;
	soap_tmp_klprci_GetPingTimeout.ID=ID;
	soap_begin(soap);
	soap_serializeheader(soap);
	soap_serialize_klprci_GetPingTimeout(soap, &soap_tmp_klprci_GetPingTimeout);
	soap_begin_count(soap);
	if (soap->mode & SOAP_IO_LENGTH)
	{	soap_envelope_begin_out(soap);
		soap_putheader(soap);
		soap_body_begin_out(soap);
		soap_put_klprci_GetPingTimeout(soap, &soap_tmp_klprci_GetPingTimeout, "klprci-GetPingTimeout", "");
		soap_body_end_out(soap);
		soap_envelope_end_out(soap);
	}
	if (soap_connect(soap, URL, action)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put_klprci_GetPingTimeout(soap, &soap_tmp_klprci_GetPingTimeout, "klprci-GetPingTimeout", "")
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap_closesock(soap);
	soap_default_klprci_GetPingTimeoutResponse(soap, &r);
	if (soap_begin_recv(soap)
	 || soap_envelope_begin_in(soap)
	 || soap_recv_header(soap)
	 || soap_body_begin_in(soap))
		return soap_closesock(soap);
	soap_get_klprci_GetPingTimeoutResponse(soap, &r, "klprci-GetPingTimeoutResponse", "");
	if (soap->error)
	{	if (soap->error == SOAP_TAG_MISMATCH && soap->level == 2)
			return soap_recv_fault(soap);
		return soap_closesock(soap);
	}
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
#ifndef WITH_LEANER
	 || soap_resolve_attachments(soap)
#endif
	 || soap_end_recv(soap))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

SOAP_FMAC5 int SOAP_FMAC6 soap_call_klprci_GetState(struct soap *soap, const char *URL, const char *action, wchar_t *ID, struct klprci_GetStateResponse &r)
{
	struct klprci_GetState soap_tmp_klprci_GetState;
	soap->encodingStyle = NULL;
	soap_tmp_klprci_GetState.ID=ID;
	soap_begin(soap);
	soap_serializeheader(soap);
	soap_serialize_klprci_GetState(soap, &soap_tmp_klprci_GetState);
	soap_begin_count(soap);
	if (soap->mode & SOAP_IO_LENGTH)
	{	soap_envelope_begin_out(soap);
		soap_putheader(soap);
		soap_body_begin_out(soap);
		soap_put_klprci_GetState(soap, &soap_tmp_klprci_GetState, "klprci-GetState", "");
		soap_body_end_out(soap);
		soap_envelope_end_out(soap);
	}
	if (soap_connect(soap, URL, action)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put_klprci_GetState(soap, &soap_tmp_klprci_GetState, "klprci-GetState", "")
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap_closesock(soap);
	soap_default_klprci_GetStateResponse(soap, &r);
	if (soap_begin_recv(soap)
	 || soap_envelope_begin_in(soap)
	 || soap_recv_header(soap)
	 || soap_body_begin_in(soap))
		return soap_closesock(soap);
	soap_get_klprci_GetStateResponse(soap, &r, "klprci-GetStateResponse", "");
	if (soap->error)
	{	if (soap->error == SOAP_TAG_MISMATCH && soap->level == 2)
			return soap_recv_fault(soap);
		return soap_closesock(soap);
	}
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
#ifndef WITH_LEANER
	 || soap_resolve_attachments(soap)
#endif
	 || soap_end_recv(soap))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

SOAP_FMAC5 int SOAP_FMAC6 soap_call_klprci_GetStatistics(struct soap *soap, const char *URL, const char *action, wchar_t *ID, param__params statisticsIn, struct klprci_GetStatisticsResponse &r)
{
	struct klprci_GetStatistics soap_tmp_klprci_GetStatistics;
	soap->encodingStyle = NULL;
	soap_tmp_klprci_GetStatistics.ID=ID;
	soap_tmp_klprci_GetStatistics.statisticsIn=statisticsIn;
	soap_begin(soap);
	soap_serializeheader(soap);
	soap_serialize_klprci_GetStatistics(soap, &soap_tmp_klprci_GetStatistics);
	soap_begin_count(soap);
	if (soap->mode & SOAP_IO_LENGTH)
	{	soap_envelope_begin_out(soap);
		soap_putheader(soap);
		soap_body_begin_out(soap);
		soap_put_klprci_GetStatistics(soap, &soap_tmp_klprci_GetStatistics, "klprci-GetStatistics", "");
		soap_body_end_out(soap);
		soap_envelope_end_out(soap);
	}
	if (soap_connect(soap, URL, action)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put_klprci_GetStatistics(soap, &soap_tmp_klprci_GetStatistics, "klprci-GetStatistics", "")
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap_closesock(soap);
	soap_default_klprci_GetStatisticsResponse(soap, &r);
	if (soap_begin_recv(soap)
	 || soap_envelope_begin_in(soap)
	 || soap_recv_header(soap)
	 || soap_body_begin_in(soap))
		return soap_closesock(soap);
	soap_get_klprci_GetStatisticsResponse(soap, &r, "klprci-GetStatisticsResponse", "");
	if (soap->error)
	{	if (soap->error == SOAP_TAG_MISMATCH && soap->level == 2)
			return soap_recv_fault(soap);
		return soap_closesock(soap);
	}
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
#ifndef WITH_LEANER
	 || soap_resolve_attachments(soap)
#endif
	 || soap_end_recv(soap))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

SOAP_FMAC5 int SOAP_FMAC6 soap_call_klprci_Stop(struct soap *soap, const char *URL, const char *action, wchar_t *ID, struct klprci_StopResponse &r)
{
	struct klprci_Stop soap_tmp_klprci_Stop;
	soap->encodingStyle = NULL;
	soap_tmp_klprci_Stop.ID=ID;
	soap_begin(soap);
	soap_serializeheader(soap);
	soap_serialize_klprci_Stop(soap, &soap_tmp_klprci_Stop);
	soap_begin_count(soap);
	if (soap->mode & SOAP_IO_LENGTH)
	{	soap_envelope_begin_out(soap);
		soap_putheader(soap);
		soap_body_begin_out(soap);
		soap_put_klprci_Stop(soap, &soap_tmp_klprci_Stop, "klprci-Stop", "");
		soap_body_end_out(soap);
		soap_envelope_end_out(soap);
	}
	if (soap_connect(soap, URL, action)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put_klprci_Stop(soap, &soap_tmp_klprci_Stop, "klprci-Stop", "")
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap_closesock(soap);
	soap_default_klprci_StopResponse(soap, &r);
	if (soap_begin_recv(soap)
	 || soap_envelope_begin_in(soap)
	 || soap_recv_header(soap)
	 || soap_body_begin_in(soap))
		return soap_closesock(soap);
	soap_get_klprci_StopResponse(soap, &r, "klprci-StopResponse", "");
	if (soap->error)
	{	if (soap->error == SOAP_TAG_MISMATCH && soap->level == 2)
			return soap_recv_fault(soap);
		return soap_closesock(soap);
	}
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
#ifndef WITH_LEANER
	 || soap_resolve_attachments(soap)
#endif
	 || soap_end_recv(soap))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

SOAP_FMAC5 int SOAP_FMAC6 soap_call_klprci_Suspend(struct soap *soap, const char *URL, const char *action, wchar_t *ID, struct klprci_SuspendResponse &r)
{
	struct klprci_Suspend soap_tmp_klprci_Suspend;
	soap->encodingStyle = NULL;
	soap_tmp_klprci_Suspend.ID=ID;
	soap_begin(soap);
	soap_serializeheader(soap);
	soap_serialize_klprci_Suspend(soap, &soap_tmp_klprci_Suspend);
	soap_begin_count(soap);
	if (soap->mode & SOAP_IO_LENGTH)
	{	soap_envelope_begin_out(soap);
		soap_putheader(soap);
		soap_body_begin_out(soap);
		soap_put_klprci_Suspend(soap, &soap_tmp_klprci_Suspend, "klprci-Suspend", "");
		soap_body_end_out(soap);
		soap_envelope_end_out(soap);
	}
	if (soap_connect(soap, URL, action)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put_klprci_Suspend(soap, &soap_tmp_klprci_Suspend, "klprci-Suspend", "")
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap_closesock(soap);
	soap_default_klprci_SuspendResponse(soap, &r);
	if (soap_begin_recv(soap)
	 || soap_envelope_begin_in(soap)
	 || soap_recv_header(soap)
	 || soap_body_begin_in(soap))
		return soap_closesock(soap);
	soap_get_klprci_SuspendResponse(soap, &r, "klprci-SuspendResponse", "");
	if (soap->error)
	{	if (soap->error == SOAP_TAG_MISMATCH && soap->level == 2)
			return soap_recv_fault(soap);
		return soap_closesock(soap);
	}
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
#ifndef WITH_LEANER
	 || soap_resolve_attachments(soap)
#endif
	 || soap_end_recv(soap))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

SOAP_FMAC5 int SOAP_FMAC6 soap_call_klprci_Resume(struct soap *soap, const char *URL, const char *action, wchar_t *ID, struct klprci_ResumeResponse &r)
{
	struct klprci_Resume soap_tmp_klprci_Resume;
	soap->encodingStyle = NULL;
	soap_tmp_klprci_Resume.ID=ID;
	soap_begin(soap);
	soap_serializeheader(soap);
	soap_serialize_klprci_Resume(soap, &soap_tmp_klprci_Resume);
	soap_begin_count(soap);
	if (soap->mode & SOAP_IO_LENGTH)
	{	soap_envelope_begin_out(soap);
		soap_putheader(soap);
		soap_body_begin_out(soap);
		soap_put_klprci_Resume(soap, &soap_tmp_klprci_Resume, "klprci-Resume", "");
		soap_body_end_out(soap);
		soap_envelope_end_out(soap);
	}
	if (soap_connect(soap, URL, action)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put_klprci_Resume(soap, &soap_tmp_klprci_Resume, "klprci-Resume", "")
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap_closesock(soap);
	soap_default_klprci_ResumeResponse(soap, &r);
	if (soap_begin_recv(soap)
	 || soap_envelope_begin_in(soap)
	 || soap_recv_header(soap)
	 || soap_body_begin_in(soap))
		return soap_closesock(soap);
	soap_get_klprci_ResumeResponse(soap, &r, "klprci-ResumeResponse", "");
	if (soap->error)
	{	if (soap->error == SOAP_TAG_MISMATCH && soap->level == 2)
			return soap_recv_fault(soap);
		return soap_closesock(soap);
	}
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
#ifndef WITH_LEANER
	 || soap_resolve_attachments(soap)
#endif
	 || soap_end_recv(soap))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

SOAP_FMAC5 int SOAP_FMAC6 soap_call_klprci_RunTask(struct soap *soap, const char *URL, const char *action, wchar_t *ID, wchar_t *name, param__params settings, wchar_t *asyncID, long timeout, struct klprci_RunTaskResponse &r)
{
	struct klprci_RunTask soap_tmp_klprci_RunTask;
	soap->encodingStyle = NULL;
	soap_tmp_klprci_RunTask.ID=ID;
	soap_tmp_klprci_RunTask.name=name;
	soap_tmp_klprci_RunTask.settings=settings;
	soap_tmp_klprci_RunTask.asyncID=asyncID;
	soap_tmp_klprci_RunTask.timeout=timeout;
	soap_begin(soap);
	soap_serializeheader(soap);
	soap_serialize_klprci_RunTask(soap, &soap_tmp_klprci_RunTask);
	soap_begin_count(soap);
	if (soap->mode & SOAP_IO_LENGTH)
	{	soap_envelope_begin_out(soap);
		soap_putheader(soap);
		soap_body_begin_out(soap);
		soap_put_klprci_RunTask(soap, &soap_tmp_klprci_RunTask, "klprci-RunTask", "");
		soap_body_end_out(soap);
		soap_envelope_end_out(soap);
	}
	if (soap_connect(soap, URL, action)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put_klprci_RunTask(soap, &soap_tmp_klprci_RunTask, "klprci-RunTask", "")
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap_closesock(soap);
	soap_default_klprci_RunTaskResponse(soap, &r);
	if (soap_begin_recv(soap)
	 || soap_envelope_begin_in(soap)
	 || soap_recv_header(soap)
	 || soap_body_begin_in(soap))
		return soap_closesock(soap);
	soap_get_klprci_RunTaskResponse(soap, &r, "klprci-RunTaskResponse", "");
	if (soap->error)
	{	if (soap->error == SOAP_TAG_MISMATCH && soap->level == 2)
			return soap_recv_fault(soap);
		return soap_closesock(soap);
	}
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
#ifndef WITH_LEANER
	 || soap_resolve_attachments(soap)
#endif
	 || soap_end_recv(soap))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

SOAP_FMAC5 int SOAP_FMAC6 soap_call_klprci_RunMethod(struct soap *soap, const char *URL, const char *action, wchar_t *ID, wchar_t *name, param__params settings, long timeout, struct klprci_RunMethodResponse &r)
{
	struct klprci_RunMethod soap_tmp_klprci_RunMethod;
	soap->encodingStyle = NULL;
	soap_tmp_klprci_RunMethod.ID=ID;
	soap_tmp_klprci_RunMethod.name=name;
	soap_tmp_klprci_RunMethod.settings=settings;
	soap_tmp_klprci_RunMethod.timeout=timeout;
	soap_begin(soap);
	soap_serializeheader(soap);
	soap_serialize_klprci_RunMethod(soap, &soap_tmp_klprci_RunMethod);
	soap_begin_count(soap);
	if (soap->mode & SOAP_IO_LENGTH)
	{	soap_envelope_begin_out(soap);
		soap_putheader(soap);
		soap_body_begin_out(soap);
		soap_put_klprci_RunMethod(soap, &soap_tmp_klprci_RunMethod, "klprci-RunMethod", "");
		soap_body_end_out(soap);
		soap_envelope_end_out(soap);
	}
	if (soap_connect(soap, URL, action)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put_klprci_RunMethod(soap, &soap_tmp_klprci_RunMethod, "klprci-RunMethod", "")
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap_closesock(soap);
	soap_default_klprci_RunMethodResponse(soap, &r);
	if (soap_begin_recv(soap)
	 || soap_envelope_begin_in(soap)
	 || soap_recv_header(soap)
	 || soap_body_begin_in(soap))
		return soap_closesock(soap);
	soap_get_klprci_RunMethodResponse(soap, &r, "klprci-RunMethodResponse", "");
	if (soap->error)
	{	if (soap->error == SOAP_TAG_MISMATCH && soap->level == 2)
			return soap_recv_fault(soap);
		return soap_closesock(soap);
	}
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
#ifndef WITH_LEANER
	 || soap_resolve_attachments(soap)
#endif
	 || soap_end_recv(soap))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

SOAP_FMAC5 int SOAP_FMAC6 soap_call_klprci_GetTasksList(struct soap *soap, const char *URL, const char *action, wchar_t *ID, struct klprci_GetTasksListResponse &r)
{
	struct klprci_GetTasksList soap_tmp_klprci_GetTasksList;
	soap->encodingStyle = NULL;
	soap_tmp_klprci_GetTasksList.ID=ID;
	soap_begin(soap);
	soap_serializeheader(soap);
	soap_serialize_klprci_GetTasksList(soap, &soap_tmp_klprci_GetTasksList);
	soap_begin_count(soap);
	if (soap->mode & SOAP_IO_LENGTH)
	{	soap_envelope_begin_out(soap);
		soap_putheader(soap);
		soap_body_begin_out(soap);
		soap_put_klprci_GetTasksList(soap, &soap_tmp_klprci_GetTasksList, "klprci-GetTasksList", "");
		soap_body_end_out(soap);
		soap_envelope_end_out(soap);
	}
	if (soap_connect(soap, URL, action)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put_klprci_GetTasksList(soap, &soap_tmp_klprci_GetTasksList, "klprci-GetTasksList", "")
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap_closesock(soap);
	soap_default_klprci_GetTasksListResponse(soap, &r);
	if (soap_begin_recv(soap)
	 || soap_envelope_begin_in(soap)
	 || soap_recv_header(soap)
	 || soap_body_begin_in(soap))
		return soap_closesock(soap);
	soap_get_klprci_GetTasksListResponse(soap, &r, "klprci-GetTasksListResponse", "");
	if (soap->error)
	{	if (soap->error == SOAP_TAG_MISMATCH && soap->level == 2)
			return soap_recv_fault(soap);
		return soap_closesock(soap);
	}
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
#ifndef WITH_LEANER
	 || soap_resolve_attachments(soap)
#endif
	 || soap_end_recv(soap))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

SOAP_FMAC5 int SOAP_FMAC6 soap_call_klprci_GetTaskName(struct soap *soap, const char *URL, const char *action, wchar_t *ID, long idTask, struct klprci_GetTaskNameResponse &r)
{
	struct klprci_GetTaskName soap_tmp_klprci_GetTaskName;
	soap->encodingStyle = NULL;
	soap_tmp_klprci_GetTaskName.ID=ID;
	soap_tmp_klprci_GetTaskName.idTask=idTask;
	soap_begin(soap);
	soap_serializeheader(soap);
	soap_serialize_klprci_GetTaskName(soap, &soap_tmp_klprci_GetTaskName);
	soap_begin_count(soap);
	if (soap->mode & SOAP_IO_LENGTH)
	{	soap_envelope_begin_out(soap);
		soap_putheader(soap);
		soap_body_begin_out(soap);
		soap_put_klprci_GetTaskName(soap, &soap_tmp_klprci_GetTaskName, "klprci-GetTaskName", "");
		soap_body_end_out(soap);
		soap_envelope_end_out(soap);
	}
	if (soap_connect(soap, URL, action)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put_klprci_GetTaskName(soap, &soap_tmp_klprci_GetTaskName, "klprci-GetTaskName", "")
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap_closesock(soap);
	soap_default_klprci_GetTaskNameResponse(soap, &r);
	if (soap_begin_recv(soap)
	 || soap_envelope_begin_in(soap)
	 || soap_recv_header(soap)
	 || soap_body_begin_in(soap))
		return soap_closesock(soap);
	soap_get_klprci_GetTaskNameResponse(soap, &r, "klprci-GetTaskNameResponse", "");
	if (soap->error)
	{	if (soap->error == SOAP_TAG_MISMATCH && soap->level == 2)
			return soap_recv_fault(soap);
		return soap_closesock(soap);
	}
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
#ifndef WITH_LEANER
	 || soap_resolve_attachments(soap)
#endif
	 || soap_end_recv(soap))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

SOAP_FMAC5 int SOAP_FMAC6 soap_call_klprci_TaskStop(struct soap *soap, const char *URL, const char *action, wchar_t *ID, long idTask, struct klprci_TaskStopResponse &r)
{
	struct klprci_TaskStop soap_tmp_klprci_TaskStop;
	soap->encodingStyle = NULL;
	soap_tmp_klprci_TaskStop.ID=ID;
	soap_tmp_klprci_TaskStop.idTask=idTask;
	soap_begin(soap);
	soap_serializeheader(soap);
	soap_serialize_klprci_TaskStop(soap, &soap_tmp_klprci_TaskStop);
	soap_begin_count(soap);
	if (soap->mode & SOAP_IO_LENGTH)
	{	soap_envelope_begin_out(soap);
		soap_putheader(soap);
		soap_body_begin_out(soap);
		soap_put_klprci_TaskStop(soap, &soap_tmp_klprci_TaskStop, "klprci-TaskStop", "");
		soap_body_end_out(soap);
		soap_envelope_end_out(soap);
	}
	if (soap_connect(soap, URL, action)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put_klprci_TaskStop(soap, &soap_tmp_klprci_TaskStop, "klprci-TaskStop", "")
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap_closesock(soap);
	soap_default_klprci_TaskStopResponse(soap, &r);
	if (soap_begin_recv(soap)
	 || soap_envelope_begin_in(soap)
	 || soap_recv_header(soap)
	 || soap_body_begin_in(soap))
		return soap_closesock(soap);
	soap_get_klprci_TaskStopResponse(soap, &r, "klprci-TaskStopResponse", "");
	if (soap->error)
	{	if (soap->error == SOAP_TAG_MISMATCH && soap->level == 2)
			return soap_recv_fault(soap);
		return soap_closesock(soap);
	}
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
#ifndef WITH_LEANER
	 || soap_resolve_attachments(soap)
#endif
	 || soap_end_recv(soap))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

SOAP_FMAC5 int SOAP_FMAC6 soap_call_klprci_TaskSuspend(struct soap *soap, const char *URL, const char *action, wchar_t *ID, long idTask, struct klprci_TaskSuspendResponse &r)
{
	struct klprci_TaskSuspend soap_tmp_klprci_TaskSuspend;
	soap->encodingStyle = NULL;
	soap_tmp_klprci_TaskSuspend.ID=ID;
	soap_tmp_klprci_TaskSuspend.idTask=idTask;
	soap_begin(soap);
	soap_serializeheader(soap);
	soap_serialize_klprci_TaskSuspend(soap, &soap_tmp_klprci_TaskSuspend);
	soap_begin_count(soap);
	if (soap->mode & SOAP_IO_LENGTH)
	{	soap_envelope_begin_out(soap);
		soap_putheader(soap);
		soap_body_begin_out(soap);
		soap_put_klprci_TaskSuspend(soap, &soap_tmp_klprci_TaskSuspend, "klprci-TaskSuspend", "");
		soap_body_end_out(soap);
		soap_envelope_end_out(soap);
	}
	if (soap_connect(soap, URL, action)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put_klprci_TaskSuspend(soap, &soap_tmp_klprci_TaskSuspend, "klprci-TaskSuspend", "")
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap_closesock(soap);
	soap_default_klprci_TaskSuspendResponse(soap, &r);
	if (soap_begin_recv(soap)
	 || soap_envelope_begin_in(soap)
	 || soap_recv_header(soap)
	 || soap_body_begin_in(soap))
		return soap_closesock(soap);
	soap_get_klprci_TaskSuspendResponse(soap, &r, "klprci-TaskSuspendResponse", "");
	if (soap->error)
	{	if (soap->error == SOAP_TAG_MISMATCH && soap->level == 2)
			return soap_recv_fault(soap);
		return soap_closesock(soap);
	}
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
#ifndef WITH_LEANER
	 || soap_resolve_attachments(soap)
#endif
	 || soap_end_recv(soap))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

SOAP_FMAC5 int SOAP_FMAC6 soap_call_klprci_TaskResume(struct soap *soap, const char *URL, const char *action, wchar_t *ID, long idTask, struct klprci_TaskResumeResponse &r)
{
	struct klprci_TaskResume soap_tmp_klprci_TaskResume;
	soap->encodingStyle = NULL;
	soap_tmp_klprci_TaskResume.ID=ID;
	soap_tmp_klprci_TaskResume.idTask=idTask;
	soap_begin(soap);
	soap_serializeheader(soap);
	soap_serialize_klprci_TaskResume(soap, &soap_tmp_klprci_TaskResume);
	soap_begin_count(soap);
	if (soap->mode & SOAP_IO_LENGTH)
	{	soap_envelope_begin_out(soap);
		soap_putheader(soap);
		soap_body_begin_out(soap);
		soap_put_klprci_TaskResume(soap, &soap_tmp_klprci_TaskResume, "klprci-TaskResume", "");
		soap_body_end_out(soap);
		soap_envelope_end_out(soap);
	}
	if (soap_connect(soap, URL, action)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put_klprci_TaskResume(soap, &soap_tmp_klprci_TaskResume, "klprci-TaskResume", "")
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap_closesock(soap);
	soap_default_klprci_TaskResumeResponse(soap, &r);
	if (soap_begin_recv(soap)
	 || soap_envelope_begin_in(soap)
	 || soap_recv_header(soap)
	 || soap_body_begin_in(soap))
		return soap_closesock(soap);
	soap_get_klprci_TaskResumeResponse(soap, &r, "klprci-TaskResumeResponse", "");
	if (soap->error)
	{	if (soap->error == SOAP_TAG_MISMATCH && soap->level == 2)
			return soap_recv_fault(soap);
		return soap_closesock(soap);
	}
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
#ifndef WITH_LEANER
	 || soap_resolve_attachments(soap)
#endif
	 || soap_end_recv(soap))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

SOAP_FMAC5 int SOAP_FMAC6 soap_call_klprci_TaskGetState(struct soap *soap, const char *URL, const char *action, wchar_t *ID, long idTask, struct klprci_GetTaskStateResponse &r)
{
	struct klprci_TaskGetState soap_tmp_klprci_TaskGetState;
	soap->encodingStyle = NULL;
	soap_tmp_klprci_TaskGetState.ID=ID;
	soap_tmp_klprci_TaskGetState.idTask=idTask;
	soap_begin(soap);
	soap_serializeheader(soap);
	soap_serialize_klprci_TaskGetState(soap, &soap_tmp_klprci_TaskGetState);
	soap_begin_count(soap);
	if (soap->mode & SOAP_IO_LENGTH)
	{	soap_envelope_begin_out(soap);
		soap_putheader(soap);
		soap_body_begin_out(soap);
		soap_put_klprci_TaskGetState(soap, &soap_tmp_klprci_TaskGetState, "klprci-TaskGetState", "");
		soap_body_end_out(soap);
		soap_envelope_end_out(soap);
	}
	if (soap_connect(soap, URL, action)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put_klprci_TaskGetState(soap, &soap_tmp_klprci_TaskGetState, "klprci-TaskGetState", "")
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap_closesock(soap);
	soap_default_klprci_GetTaskStateResponse(soap, &r);
	if (soap_begin_recv(soap)
	 || soap_envelope_begin_in(soap)
	 || soap_recv_header(soap)
	 || soap_body_begin_in(soap))
		return soap_closesock(soap);
	soap_get_klprci_GetTaskStateResponse(soap, &r, "klprci-GetTaskStateResponse", "");
	if (soap->error)
	{	if (soap->error == SOAP_TAG_MISMATCH && soap->level == 2)
			return soap_recv_fault(soap);
		return soap_closesock(soap);
	}
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
#ifndef WITH_LEANER
	 || soap_resolve_attachments(soap)
#endif
	 || soap_end_recv(soap))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

SOAP_FMAC5 int SOAP_FMAC6 soap_call_klprci_TaskGetCompletion(struct soap *soap, const char *URL, const char *action, wchar_t *ID, long idTask, struct klprci_GetTaskCompletionResponse &r)
{
	struct klprci_TaskGetCompletion soap_tmp_klprci_TaskGetCompletion;
	soap->encodingStyle = NULL;
	soap_tmp_klprci_TaskGetCompletion.ID=ID;
	soap_tmp_klprci_TaskGetCompletion.idTask=idTask;
	soap_begin(soap);
	soap_serializeheader(soap);
	soap_serialize_klprci_TaskGetCompletion(soap, &soap_tmp_klprci_TaskGetCompletion);
	soap_begin_count(soap);
	if (soap->mode & SOAP_IO_LENGTH)
	{	soap_envelope_begin_out(soap);
		soap_putheader(soap);
		soap_body_begin_out(soap);
		soap_put_klprci_TaskGetCompletion(soap, &soap_tmp_klprci_TaskGetCompletion, "klprci-TaskGetCompletion", "");
		soap_body_end_out(soap);
		soap_envelope_end_out(soap);
	}
	if (soap_connect(soap, URL, action)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put_klprci_TaskGetCompletion(soap, &soap_tmp_klprci_TaskGetCompletion, "klprci-TaskGetCompletion", "")
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap_closesock(soap);
	soap_default_klprci_GetTaskCompletionResponse(soap, &r);
	if (soap_begin_recv(soap)
	 || soap_envelope_begin_in(soap)
	 || soap_recv_header(soap)
	 || soap_body_begin_in(soap))
		return soap_closesock(soap);
	soap_get_klprci_GetTaskCompletionResponse(soap, &r, "klprci-GetTaskCompletionResponse", "");
	if (soap->error)
	{	if (soap->error == SOAP_TAG_MISMATCH && soap->level == 2)
			return soap_recv_fault(soap);
		return soap_closesock(soap);
	}
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
#ifndef WITH_LEANER
	 || soap_resolve_attachments(soap)
#endif
	 || soap_end_recv(soap))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

SOAP_FMAC5 int SOAP_FMAC6 soap_call_klprci_TaskReload(struct soap *soap, const char *URL, const char *action, wchar_t *ID, long idTask, param__params settings, struct klprci_TaskReloadResponse &r)
{
	struct klprci_TaskReload soap_tmp_klprci_TaskReload;
	soap->encodingStyle = NULL;
	soap_tmp_klprci_TaskReload.ID=ID;
	soap_tmp_klprci_TaskReload.idTask=idTask;
	soap_tmp_klprci_TaskReload.settings=settings;
	soap_begin(soap);
	soap_serializeheader(soap);
	soap_serialize_klprci_TaskReload(soap, &soap_tmp_klprci_TaskReload);
	soap_begin_count(soap);
	if (soap->mode & SOAP_IO_LENGTH)
	{	soap_envelope_begin_out(soap);
		soap_putheader(soap);
		soap_body_begin_out(soap);
		soap_put_klprci_TaskReload(soap, &soap_tmp_klprci_TaskReload, "klprci-TaskReload", "");
		soap_body_end_out(soap);
		soap_envelope_end_out(soap);
	}
	if (soap_connect(soap, URL, action)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put_klprci_TaskReload(soap, &soap_tmp_klprci_TaskReload, "klprci-TaskReload", "")
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap_closesock(soap);
	soap_default_klprci_TaskReloadResponse(soap, &r);
	if (soap_begin_recv(soap)
	 || soap_envelope_begin_in(soap)
	 || soap_recv_header(soap)
	 || soap_body_begin_in(soap))
		return soap_closesock(soap);
	soap_get_klprci_TaskReloadResponse(soap, &r, "klprci-TaskReloadResponse", "");
	if (soap->error)
	{	if (soap->error == SOAP_TAG_MISMATCH && soap->level == 2)
			return soap_recv_fault(soap);
		return soap_closesock(soap);
	}
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
#ifndef WITH_LEANER
	 || soap_resolve_attachments(soap)
#endif
	 || soap_end_recv(soap))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

SOAP_FMAC5 int SOAP_FMAC6 soap_call_KLPRES_ResetSubscriptionsIterator(struct soap *soap, const char *URL, const char *action, wchar_t *sServerObjectID, SOAPComponentId cidFilter, long nTimeout, struct KLPRES_RESET_SUBSCRIPTIONS_ITERATOR_RESPONSE &rc)
{
	struct KLPRES_ResetSubscriptionsIterator soap_tmp_KLPRES_ResetSubscriptionsIterator;
	soap->encodingStyle = NULL;
	soap_tmp_KLPRES_ResetSubscriptionsIterator.sServerObjectID=sServerObjectID;
	soap_tmp_KLPRES_ResetSubscriptionsIterator.cidFilter=cidFilter;
	soap_tmp_KLPRES_ResetSubscriptionsIterator.nTimeout=nTimeout;
	soap_begin(soap);
	soap_serializeheader(soap);
	soap_serialize_KLPRES_ResetSubscriptionsIterator(soap, &soap_tmp_KLPRES_ResetSubscriptionsIterator);
	soap_begin_count(soap);
	if (soap->mode & SOAP_IO_LENGTH)
	{	soap_envelope_begin_out(soap);
		soap_putheader(soap);
		soap_body_begin_out(soap);
		soap_put_KLPRES_ResetSubscriptionsIterator(soap, &soap_tmp_KLPRES_ResetSubscriptionsIterator, "KLPRES-ResetSubscriptionsIterator", "");
		soap_body_end_out(soap);
		soap_envelope_end_out(soap);
	}
	if (soap_connect(soap, URL, action)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put_KLPRES_ResetSubscriptionsIterator(soap, &soap_tmp_KLPRES_ResetSubscriptionsIterator, "KLPRES-ResetSubscriptionsIterator", "")
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap_closesock(soap);
	soap_default_KLPRES_RESET_SUBSCRIPTIONS_ITERATOR_RESPONSE(soap, &rc);
	if (soap_begin_recv(soap)
	 || soap_envelope_begin_in(soap)
	 || soap_recv_header(soap)
	 || soap_body_begin_in(soap))
		return soap_closesock(soap);
	soap_get_KLPRES_RESET_SUBSCRIPTIONS_ITERATOR_RESPONSE(soap, &rc, "KLPRES-RESET-SUBSCRIPTIONS-ITERATOR-RESPONSE", "");
	if (soap->error)
	{	if (soap->error == SOAP_TAG_MISMATCH && soap->level == 2)
			return soap_recv_fault(soap);
		return soap_closesock(soap);
	}
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
#ifndef WITH_LEANER
	 || soap_resolve_attachments(soap)
#endif
	 || soap_end_recv(soap))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

SOAP_FMAC5 int SOAP_FMAC6 soap_call_KLPRES_ReleaseSubscriptionsIterator(struct soap *soap, const char *URL, const char *action, wchar_t *sServerObjectID, wchar_t *sSubscrIteratorId, struct KLPRES_RELEASE_SUBSCRIPTIONS_ITERATOR_RESPONSE &rc)
{
	struct KLPRES_ReleaseSubscriptionsIterator soap_tmp_KLPRES_ReleaseSubscriptionsIterator;
	soap->encodingStyle = NULL;
	soap_tmp_KLPRES_ReleaseSubscriptionsIterator.sServerObjectID=sServerObjectID;
	soap_tmp_KLPRES_ReleaseSubscriptionsIterator.sSubscrIteratorId=sSubscrIteratorId;
	soap_begin(soap);
	soap_serializeheader(soap);
	soap_serialize_KLPRES_ReleaseSubscriptionsIterator(soap, &soap_tmp_KLPRES_ReleaseSubscriptionsIterator);
	soap_begin_count(soap);
	if (soap->mode & SOAP_IO_LENGTH)
	{	soap_envelope_begin_out(soap);
		soap_putheader(soap);
		soap_body_begin_out(soap);
		soap_put_KLPRES_ReleaseSubscriptionsIterator(soap, &soap_tmp_KLPRES_ReleaseSubscriptionsIterator, "KLPRES-ReleaseSubscriptionsIterator", "");
		soap_body_end_out(soap);
		soap_envelope_end_out(soap);
	}
	if (soap_connect(soap, URL, action)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put_KLPRES_ReleaseSubscriptionsIterator(soap, &soap_tmp_KLPRES_ReleaseSubscriptionsIterator, "KLPRES-ReleaseSubscriptionsIterator", "")
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap_closesock(soap);
	soap_default_KLPRES_RELEASE_SUBSCRIPTIONS_ITERATOR_RESPONSE(soap, &rc);
	if (soap_begin_recv(soap)
	 || soap_envelope_begin_in(soap)
	 || soap_recv_header(soap)
	 || soap_body_begin_in(soap))
		return soap_closesock(soap);
	soap_get_KLPRES_RELEASE_SUBSCRIPTIONS_ITERATOR_RESPONSE(soap, &rc, "KLPRES-RELEASE-SUBSCRIPTIONS-ITERATOR-RESPONSE", "");
	if (soap->error)
	{	if (soap->error == SOAP_TAG_MISMATCH && soap->level == 2)
			return soap_recv_fault(soap);
		return soap_closesock(soap);
	}
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
#ifndef WITH_LEANER
	 || soap_resolve_attachments(soap)
#endif
	 || soap_end_recv(soap))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

SOAP_FMAC5 int SOAP_FMAC6 soap_call_KLPRES_GetNextSubscription(struct soap *soap, const char *URL, const char *action, wchar_t *sServerObjectID, wchar_t *sSubscrIteratorId, struct KLPRES_GET_NEXT_SUBSCRIPTION_RESPONSE &rc)
{
	struct KLPRES_GetNextSubscription soap_tmp_KLPRES_GetNextSubscription;
	soap->encodingStyle = NULL;
	soap_tmp_KLPRES_GetNextSubscription.sServerObjectID=sServerObjectID;
	soap_tmp_KLPRES_GetNextSubscription.sSubscrIteratorId=sSubscrIteratorId;
	soap_begin(soap);
	soap_serializeheader(soap);
	soap_serialize_KLPRES_GetNextSubscription(soap, &soap_tmp_KLPRES_GetNextSubscription);
	soap_begin_count(soap);
	if (soap->mode & SOAP_IO_LENGTH)
	{	soap_envelope_begin_out(soap);
		soap_putheader(soap);
		soap_body_begin_out(soap);
		soap_put_KLPRES_GetNextSubscription(soap, &soap_tmp_KLPRES_GetNextSubscription, "KLPRES-GetNextSubscription", "");
		soap_body_end_out(soap);
		soap_envelope_end_out(soap);
	}
	if (soap_connect(soap, URL, action)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put_KLPRES_GetNextSubscription(soap, &soap_tmp_KLPRES_GetNextSubscription, "KLPRES-GetNextSubscription", "")
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap_closesock(soap);
	soap_default_KLPRES_GET_NEXT_SUBSCRIPTION_RESPONSE(soap, &rc);
	if (soap_begin_recv(soap)
	 || soap_envelope_begin_in(soap)
	 || soap_recv_header(soap)
	 || soap_body_begin_in(soap))
		return soap_closesock(soap);
	soap_get_KLPRES_GET_NEXT_SUBSCRIPTION_RESPONSE(soap, &rc, "KLPRES-GET-NEXT-SUBSCRIPTION-RESPONSE", "");
	if (soap->error)
	{	if (soap->error == SOAP_TAG_MISMATCH && soap->level == 2)
			return soap_recv_fault(soap);
		return soap_closesock(soap);
	}
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
#ifndef WITH_LEANER
	 || soap_resolve_attachments(soap)
#endif
	 || soap_end_recv(soap))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

SOAP_FMAC5 int SOAP_FMAC6 soap_call_KLPRES_AddSubscription(struct soap *soap, const char *URL, const char *action, wchar_t *sServerObjectID, wchar_t *sSubscriptionID, bool bPersistent, param__params parSubscription, struct KLPRES_ADD_SUBSCRIPTION_RESPONSE &rc)
{
	struct KLPRES_AddSubscription soap_tmp_KLPRES_AddSubscription;
	soap->encodingStyle = NULL;
	soap_tmp_KLPRES_AddSubscription.sServerObjectID=sServerObjectID;
	soap_tmp_KLPRES_AddSubscription.sSubscriptionID=sSubscriptionID;
	soap_tmp_KLPRES_AddSubscription.bPersistent=bPersistent;
	soap_tmp_KLPRES_AddSubscription.parSubscription=parSubscription;
	soap_begin(soap);
	soap_serializeheader(soap);
	soap_serialize_KLPRES_AddSubscription(soap, &soap_tmp_KLPRES_AddSubscription);
	soap_begin_count(soap);
	if (soap->mode & SOAP_IO_LENGTH)
	{	soap_envelope_begin_out(soap);
		soap_putheader(soap);
		soap_body_begin_out(soap);
		soap_put_KLPRES_AddSubscription(soap, &soap_tmp_KLPRES_AddSubscription, "KLPRES-AddSubscription", "");
		soap_body_end_out(soap);
		soap_envelope_end_out(soap);
	}
	if (soap_connect(soap, URL, action)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put_KLPRES_AddSubscription(soap, &soap_tmp_KLPRES_AddSubscription, "KLPRES-AddSubscription", "")
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap_closesock(soap);
	soap_default_KLPRES_ADD_SUBSCRIPTION_RESPONSE(soap, &rc);
	if (soap_begin_recv(soap)
	 || soap_envelope_begin_in(soap)
	 || soap_recv_header(soap)
	 || soap_body_begin_in(soap))
		return soap_closesock(soap);
	soap_get_KLPRES_ADD_SUBSCRIPTION_RESPONSE(soap, &rc, "KLPRES-ADD-SUBSCRIPTION-RESPONSE", "");
	if (soap->error)
	{	if (soap->error == SOAP_TAG_MISMATCH && soap->level == 2)
			return soap_recv_fault(soap);
		return soap_closesock(soap);
	}
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
#ifndef WITH_LEANER
	 || soap_resolve_attachments(soap)
#endif
	 || soap_end_recv(soap))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

SOAP_FMAC5 int SOAP_FMAC6 soap_call_KLPRES_UpdateSubscription(struct soap *soap, const char *URL, const char *action, wchar_t *sServerObjectID, wchar_t *sSubscriptionID, param__params parSubscription, struct param_error &rc)
{
	struct KLPRES_UpdateSubscription soap_tmp_KLPRES_UpdateSubscription;
	soap->encodingStyle = NULL;
	soap_tmp_KLPRES_UpdateSubscription.sServerObjectID=sServerObjectID;
	soap_tmp_KLPRES_UpdateSubscription.sSubscriptionID=sSubscriptionID;
	soap_tmp_KLPRES_UpdateSubscription.parSubscription=parSubscription;
	soap_begin(soap);
	soap_serializeheader(soap);
	soap_serialize_KLPRES_UpdateSubscription(soap, &soap_tmp_KLPRES_UpdateSubscription);
	soap_begin_count(soap);
	if (soap->mode & SOAP_IO_LENGTH)
	{	soap_envelope_begin_out(soap);
		soap_putheader(soap);
		soap_body_begin_out(soap);
		soap_put_KLPRES_UpdateSubscription(soap, &soap_tmp_KLPRES_UpdateSubscription, "KLPRES-UpdateSubscription", "");
		soap_body_end_out(soap);
		soap_envelope_end_out(soap);
	}
	if (soap_connect(soap, URL, action)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put_KLPRES_UpdateSubscription(soap, &soap_tmp_KLPRES_UpdateSubscription, "KLPRES-UpdateSubscription", "")
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap_closesock(soap);
	soap_default_param_error(soap, &rc);
	if (soap_begin_recv(soap)
	 || soap_envelope_begin_in(soap)
	 || soap_recv_header(soap)
	 || soap_body_begin_in(soap))
		return soap_closesock(soap);
	soap_get_param_error(soap, &rc, "param-error", "");
	if (soap->error)
	{	if (soap->error == SOAP_TAG_MISMATCH && soap->level == 2)
			return soap_recv_fault(soap);
		return soap_closesock(soap);
	}
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
#ifndef WITH_LEANER
	 || soap_resolve_attachments(soap)
#endif
	 || soap_end_recv(soap))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

SOAP_FMAC5 int SOAP_FMAC6 soap_call_KLPRES_PauseSubscription(struct soap *soap, const char *URL, const char *action, wchar_t *sServerObjectID, wchar_t *sSubscriptionID, struct param_error &rc)
{
	struct KLPRES_PauseSubscription soap_tmp_KLPRES_PauseSubscription;
	soap->encodingStyle = NULL;
	soap_tmp_KLPRES_PauseSubscription.sServerObjectID=sServerObjectID;
	soap_tmp_KLPRES_PauseSubscription.sSubscriptionID=sSubscriptionID;
	soap_begin(soap);
	soap_serializeheader(soap);
	soap_serialize_KLPRES_PauseSubscription(soap, &soap_tmp_KLPRES_PauseSubscription);
	soap_begin_count(soap);
	if (soap->mode & SOAP_IO_LENGTH)
	{	soap_envelope_begin_out(soap);
		soap_putheader(soap);
		soap_body_begin_out(soap);
		soap_put_KLPRES_PauseSubscription(soap, &soap_tmp_KLPRES_PauseSubscription, "KLPRES-PauseSubscription", "");
		soap_body_end_out(soap);
		soap_envelope_end_out(soap);
	}
	if (soap_connect(soap, URL, action)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put_KLPRES_PauseSubscription(soap, &soap_tmp_KLPRES_PauseSubscription, "KLPRES-PauseSubscription", "")
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap_closesock(soap);
	soap_default_param_error(soap, &rc);
	if (soap_begin_recv(soap)
	 || soap_envelope_begin_in(soap)
	 || soap_recv_header(soap)
	 || soap_body_begin_in(soap))
		return soap_closesock(soap);
	soap_get_param_error(soap, &rc, "param-error", "");
	if (soap->error)
	{	if (soap->error == SOAP_TAG_MISMATCH && soap->level == 2)
			return soap_recv_fault(soap);
		return soap_closesock(soap);
	}
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
#ifndef WITH_LEANER
	 || soap_resolve_attachments(soap)
#endif
	 || soap_end_recv(soap))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

SOAP_FMAC5 int SOAP_FMAC6 soap_call_KLPRES_ResumeSubscription(struct soap *soap, const char *URL, const char *action, wchar_t *sServerObjectID, wchar_t *sSubscriptionID, struct param_error &rc)
{
	struct KLPRES_ResumeSubscription soap_tmp_KLPRES_ResumeSubscription;
	soap->encodingStyle = NULL;
	soap_tmp_KLPRES_ResumeSubscription.sServerObjectID=sServerObjectID;
	soap_tmp_KLPRES_ResumeSubscription.sSubscriptionID=sSubscriptionID;
	soap_begin(soap);
	soap_serializeheader(soap);
	soap_serialize_KLPRES_ResumeSubscription(soap, &soap_tmp_KLPRES_ResumeSubscription);
	soap_begin_count(soap);
	if (soap->mode & SOAP_IO_LENGTH)
	{	soap_envelope_begin_out(soap);
		soap_putheader(soap);
		soap_body_begin_out(soap);
		soap_put_KLPRES_ResumeSubscription(soap, &soap_tmp_KLPRES_ResumeSubscription, "KLPRES-ResumeSubscription", "");
		soap_body_end_out(soap);
		soap_envelope_end_out(soap);
	}
	if (soap_connect(soap, URL, action)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put_KLPRES_ResumeSubscription(soap, &soap_tmp_KLPRES_ResumeSubscription, "KLPRES-ResumeSubscription", "")
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap_closesock(soap);
	soap_default_param_error(soap, &rc);
	if (soap_begin_recv(soap)
	 || soap_envelope_begin_in(soap)
	 || soap_recv_header(soap)
	 || soap_body_begin_in(soap))
		return soap_closesock(soap);
	soap_get_param_error(soap, &rc, "param-error", "");
	if (soap->error)
	{	if (soap->error == SOAP_TAG_MISMATCH && soap->level == 2)
			return soap_recv_fault(soap);
		return soap_closesock(soap);
	}
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
#ifndef WITH_LEANER
	 || soap_resolve_attachments(soap)
#endif
	 || soap_end_recv(soap))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

SOAP_FMAC5 int SOAP_FMAC6 soap_call_KLPRES_RemoveSubscription(struct soap *soap, const char *URL, const char *action, wchar_t *sServerObjectID, wchar_t *sSubscriptionID, struct param_error &rc)
{
	struct KLPRES_RemoveSubscription soap_tmp_KLPRES_RemoveSubscription;
	soap->encodingStyle = NULL;
	soap_tmp_KLPRES_RemoveSubscription.sServerObjectID=sServerObjectID;
	soap_tmp_KLPRES_RemoveSubscription.sSubscriptionID=sSubscriptionID;
	soap_begin(soap);
	soap_serializeheader(soap);
	soap_serialize_KLPRES_RemoveSubscription(soap, &soap_tmp_KLPRES_RemoveSubscription);
	soap_begin_count(soap);
	if (soap->mode & SOAP_IO_LENGTH)
	{	soap_envelope_begin_out(soap);
		soap_putheader(soap);
		soap_body_begin_out(soap);
		soap_put_KLPRES_RemoveSubscription(soap, &soap_tmp_KLPRES_RemoveSubscription, "KLPRES-RemoveSubscription", "");
		soap_body_end_out(soap);
		soap_envelope_end_out(soap);
	}
	if (soap_connect(soap, URL, action)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put_KLPRES_RemoveSubscription(soap, &soap_tmp_KLPRES_RemoveSubscription, "KLPRES-RemoveSubscription", "")
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap_closesock(soap);
	soap_default_param_error(soap, &rc);
	if (soap_begin_recv(soap)
	 || soap_envelope_begin_in(soap)
	 || soap_recv_header(soap)
	 || soap_body_begin_in(soap))
		return soap_closesock(soap);
	soap_get_param_error(soap, &rc, "param-error", "");
	if (soap->error)
	{	if (soap->error == SOAP_TAG_MISMATCH && soap->level == 2)
			return soap_recv_fault(soap);
		return soap_closesock(soap);
	}
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
#ifndef WITH_LEANER
	 || soap_resolve_attachments(soap)
#endif
	 || soap_end_recv(soap))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

SOAP_FMAC5 int SOAP_FMAC6 soap_call_KLPRES_ResetEventsIterator(struct soap *soap, const char *URL, const char *action, wchar_t *sServerObjectID, wchar_t *sSubscriptionID, struct param_error &rc)
{
	struct KLPRES_ResetEventsIterator soap_tmp_KLPRES_ResetEventsIterator;
	soap->encodingStyle = NULL;
	soap_tmp_KLPRES_ResetEventsIterator.sServerObjectID=sServerObjectID;
	soap_tmp_KLPRES_ResetEventsIterator.sSubscriptionID=sSubscriptionID;
	soap_begin(soap);
	soap_serializeheader(soap);
	soap_serialize_KLPRES_ResetEventsIterator(soap, &soap_tmp_KLPRES_ResetEventsIterator);
	soap_begin_count(soap);
	if (soap->mode & SOAP_IO_LENGTH)
	{	soap_envelope_begin_out(soap);
		soap_putheader(soap);
		soap_body_begin_out(soap);
		soap_put_KLPRES_ResetEventsIterator(soap, &soap_tmp_KLPRES_ResetEventsIterator, "KLPRES-ResetEventsIterator", "");
		soap_body_end_out(soap);
		soap_envelope_end_out(soap);
	}
	if (soap_connect(soap, URL, action)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put_KLPRES_ResetEventsIterator(soap, &soap_tmp_KLPRES_ResetEventsIterator, "KLPRES-ResetEventsIterator", "")
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap_closesock(soap);
	soap_default_param_error(soap, &rc);
	if (soap_begin_recv(soap)
	 || soap_envelope_begin_in(soap)
	 || soap_recv_header(soap)
	 || soap_body_begin_in(soap))
		return soap_closesock(soap);
	soap_get_param_error(soap, &rc, "param-error", "");
	if (soap->error)
	{	if (soap->error == SOAP_TAG_MISMATCH && soap->level == 2)
			return soap_recv_fault(soap);
		return soap_closesock(soap);
	}
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
#ifndef WITH_LEANER
	 || soap_resolve_attachments(soap)
#endif
	 || soap_end_recv(soap))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

SOAP_FMAC5 int SOAP_FMAC6 soap_call_KLPRES_SetEventsIterator(struct soap *soap, const char *URL, const char *action, wchar_t *sServerObjectID, wchar_t *sSubscriptionID, long eventID, struct param_error &rc)
{
	struct KLPRES_SetEventsIterator soap_tmp_KLPRES_SetEventsIterator;
	soap->encodingStyle = NULL;
	soap_tmp_KLPRES_SetEventsIterator.sServerObjectID=sServerObjectID;
	soap_tmp_KLPRES_SetEventsIterator.sSubscriptionID=sSubscriptionID;
	soap_tmp_KLPRES_SetEventsIterator.eventID=eventID;
	soap_begin(soap);
	soap_serializeheader(soap);
	soap_serialize_KLPRES_SetEventsIterator(soap, &soap_tmp_KLPRES_SetEventsIterator);
	soap_begin_count(soap);
	if (soap->mode & SOAP_IO_LENGTH)
	{	soap_envelope_begin_out(soap);
		soap_putheader(soap);
		soap_body_begin_out(soap);
		soap_put_KLPRES_SetEventsIterator(soap, &soap_tmp_KLPRES_SetEventsIterator, "KLPRES-SetEventsIterator", "");
		soap_body_end_out(soap);
		soap_envelope_end_out(soap);
	}
	if (soap_connect(soap, URL, action)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put_KLPRES_SetEventsIterator(soap, &soap_tmp_KLPRES_SetEventsIterator, "KLPRES-SetEventsIterator", "")
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap_closesock(soap);
	soap_default_param_error(soap, &rc);
	if (soap_begin_recv(soap)
	 || soap_envelope_begin_in(soap)
	 || soap_recv_header(soap)
	 || soap_body_begin_in(soap))
		return soap_closesock(soap);
	soap_get_param_error(soap, &rc, "param-error", "");
	if (soap->error)
	{	if (soap->error == SOAP_TAG_MISMATCH && soap->level == 2)
			return soap_recv_fault(soap);
		return soap_closesock(soap);
	}
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
#ifndef WITH_LEANER
	 || soap_resolve_attachments(soap)
#endif
	 || soap_end_recv(soap))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

SOAP_FMAC5 int SOAP_FMAC6 soap_call_KLPRES_ResetEventsIteratorEx(struct soap *soap, const char *URL, const char *action, wchar_t *sServerObjectID, wchar_t *sSubscriptionID, struct KLPRES_RESET_EVENTS_ITERATOR_EX_RESPONSE &rc)
{
	struct KLPRES_ResetEventsIteratorEx soap_tmp_KLPRES_ResetEventsIteratorEx;
	soap->encodingStyle = NULL;
	soap_tmp_KLPRES_ResetEventsIteratorEx.sServerObjectID=sServerObjectID;
	soap_tmp_KLPRES_ResetEventsIteratorEx.sSubscriptionID=sSubscriptionID;
	soap_begin(soap);
	soap_serializeheader(soap);
	soap_serialize_KLPRES_ResetEventsIteratorEx(soap, &soap_tmp_KLPRES_ResetEventsIteratorEx);
	soap_begin_count(soap);
	if (soap->mode & SOAP_IO_LENGTH)
	{	soap_envelope_begin_out(soap);
		soap_putheader(soap);
		soap_body_begin_out(soap);
		soap_put_KLPRES_ResetEventsIteratorEx(soap, &soap_tmp_KLPRES_ResetEventsIteratorEx, "KLPRES-ResetEventsIteratorEx", "");
		soap_body_end_out(soap);
		soap_envelope_end_out(soap);
	}
	if (soap_connect(soap, URL, action)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put_KLPRES_ResetEventsIteratorEx(soap, &soap_tmp_KLPRES_ResetEventsIteratorEx, "KLPRES-ResetEventsIteratorEx", "")
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap_closesock(soap);
	soap_default_KLPRES_RESET_EVENTS_ITERATOR_EX_RESPONSE(soap, &rc);
	if (soap_begin_recv(soap)
	 || soap_envelope_begin_in(soap)
	 || soap_recv_header(soap)
	 || soap_body_begin_in(soap))
		return soap_closesock(soap);
	soap_get_KLPRES_RESET_EVENTS_ITERATOR_EX_RESPONSE(soap, &rc, "KLPRES-RESET-EVENTS-ITERATOR-EX-RESPONSE", "");
	if (soap->error)
	{	if (soap->error == SOAP_TAG_MISMATCH && soap->level == 2)
			return soap_recv_fault(soap);
		return soap_closesock(soap);
	}
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
#ifndef WITH_LEANER
	 || soap_resolve_attachments(soap)
#endif
	 || soap_end_recv(soap))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

SOAP_FMAC5 int SOAP_FMAC6 soap_call_KLPRES_SetEventsIteratorEx(struct soap *soap, const char *URL, const char *action, wchar_t *sServerObjectID, wchar_t *sSubscriptionID, long eventID, struct KLPRES_SET_EVENTS_ITERATOR_EX_RESPONSE &rc)
{
	struct KLPRES_SetEventsIteratorEx soap_tmp_KLPRES_SetEventsIteratorEx;
	soap->encodingStyle = NULL;
	soap_tmp_KLPRES_SetEventsIteratorEx.sServerObjectID=sServerObjectID;
	soap_tmp_KLPRES_SetEventsIteratorEx.sSubscriptionID=sSubscriptionID;
	soap_tmp_KLPRES_SetEventsIteratorEx.eventID=eventID;
	soap_begin(soap);
	soap_serializeheader(soap);
	soap_serialize_KLPRES_SetEventsIteratorEx(soap, &soap_tmp_KLPRES_SetEventsIteratorEx);
	soap_begin_count(soap);
	if (soap->mode & SOAP_IO_LENGTH)
	{	soap_envelope_begin_out(soap);
		soap_putheader(soap);
		soap_body_begin_out(soap);
		soap_put_KLPRES_SetEventsIteratorEx(soap, &soap_tmp_KLPRES_SetEventsIteratorEx, "KLPRES-SetEventsIteratorEx", "");
		soap_body_end_out(soap);
		soap_envelope_end_out(soap);
	}
	if (soap_connect(soap, URL, action)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put_KLPRES_SetEventsIteratorEx(soap, &soap_tmp_KLPRES_SetEventsIteratorEx, "KLPRES-SetEventsIteratorEx", "")
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap_closesock(soap);
	soap_default_KLPRES_SET_EVENTS_ITERATOR_EX_RESPONSE(soap, &rc);
	if (soap_begin_recv(soap)
	 || soap_envelope_begin_in(soap)
	 || soap_recv_header(soap)
	 || soap_body_begin_in(soap))
		return soap_closesock(soap);
	soap_get_KLPRES_SET_EVENTS_ITERATOR_EX_RESPONSE(soap, &rc, "KLPRES-SET-EVENTS-ITERATOR-EX-RESPONSE", "");
	if (soap->error)
	{	if (soap->error == SOAP_TAG_MISMATCH && soap->level == 2)
			return soap_recv_fault(soap);
		return soap_closesock(soap);
	}
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
#ifndef WITH_LEANER
	 || soap_resolve_attachments(soap)
#endif
	 || soap_end_recv(soap))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

SOAP_FMAC5 int SOAP_FMAC6 soap_call_KLPRES_MoveToEventWithIndex(struct soap *soap, const char *URL, const char *action, wchar_t *sServerObjectID, wchar_t *sSubscriptionID, long nIndex, struct param_error &rc)
{
	struct KLPRES_MoveToEventWithIndex soap_tmp_KLPRES_MoveToEventWithIndex;
	soap->encodingStyle = NULL;
	soap_tmp_KLPRES_MoveToEventWithIndex.sServerObjectID=sServerObjectID;
	soap_tmp_KLPRES_MoveToEventWithIndex.sSubscriptionID=sSubscriptionID;
	soap_tmp_KLPRES_MoveToEventWithIndex.nIndex=nIndex;
	soap_begin(soap);
	soap_serializeheader(soap);
	soap_serialize_KLPRES_MoveToEventWithIndex(soap, &soap_tmp_KLPRES_MoveToEventWithIndex);
	soap_begin_count(soap);
	if (soap->mode & SOAP_IO_LENGTH)
	{	soap_envelope_begin_out(soap);
		soap_putheader(soap);
		soap_body_begin_out(soap);
		soap_put_KLPRES_MoveToEventWithIndex(soap, &soap_tmp_KLPRES_MoveToEventWithIndex, "KLPRES-MoveToEventWithIndex", "");
		soap_body_end_out(soap);
		soap_envelope_end_out(soap);
	}
	if (soap_connect(soap, URL, action)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put_KLPRES_MoveToEventWithIndex(soap, &soap_tmp_KLPRES_MoveToEventWithIndex, "KLPRES-MoveToEventWithIndex", "")
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap_closesock(soap);
	soap_default_param_error(soap, &rc);
	if (soap_begin_recv(soap)
	 || soap_envelope_begin_in(soap)
	 || soap_recv_header(soap)
	 || soap_body_begin_in(soap))
		return soap_closesock(soap);
	soap_get_param_error(soap, &rc, "param-error", "");
	if (soap->error)
	{	if (soap->error == SOAP_TAG_MISMATCH && soap->level == 2)
			return soap_recv_fault(soap);
		return soap_closesock(soap);
	}
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
#ifndef WITH_LEANER
	 || soap_resolve_attachments(soap)
#endif
	 || soap_end_recv(soap))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

SOAP_FMAC5 int SOAP_FMAC6 soap_call_KLPRES_GetEventsCount(struct soap *soap, const char *URL, const char *action, wchar_t *sServerObjectID, wchar_t *sSubscriptionID, struct KLPRES_GET_EVENTS_COUNT_RESPONSE &rc)
{
	struct KLPRES_GetEventsCount soap_tmp_KLPRES_GetEventsCount;
	soap->encodingStyle = NULL;
	soap_tmp_KLPRES_GetEventsCount.sServerObjectID=sServerObjectID;
	soap_tmp_KLPRES_GetEventsCount.sSubscriptionID=sSubscriptionID;
	soap_begin(soap);
	soap_serializeheader(soap);
	soap_serialize_KLPRES_GetEventsCount(soap, &soap_tmp_KLPRES_GetEventsCount);
	soap_begin_count(soap);
	if (soap->mode & SOAP_IO_LENGTH)
	{	soap_envelope_begin_out(soap);
		soap_putheader(soap);
		soap_body_begin_out(soap);
		soap_put_KLPRES_GetEventsCount(soap, &soap_tmp_KLPRES_GetEventsCount, "KLPRES-GetEventsCount", "");
		soap_body_end_out(soap);
		soap_envelope_end_out(soap);
	}
	if (soap_connect(soap, URL, action)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put_KLPRES_GetEventsCount(soap, &soap_tmp_KLPRES_GetEventsCount, "KLPRES-GetEventsCount", "")
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap_closesock(soap);
	soap_default_KLPRES_GET_EVENTS_COUNT_RESPONSE(soap, &rc);
	if (soap_begin_recv(soap)
	 || soap_envelope_begin_in(soap)
	 || soap_recv_header(soap)
	 || soap_body_begin_in(soap))
		return soap_closesock(soap);
	soap_get_KLPRES_GET_EVENTS_COUNT_RESPONSE(soap, &rc, "KLPRES-GET-EVENTS-COUNT-RESPONSE", "");
	if (soap->error)
	{	if (soap->error == SOAP_TAG_MISMATCH && soap->level == 2)
			return soap_recv_fault(soap);
		return soap_closesock(soap);
	}
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
#ifndef WITH_LEANER
	 || soap_resolve_attachments(soap)
#endif
	 || soap_end_recv(soap))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

SOAP_FMAC5 int SOAP_FMAC6 soap_call_KLPRES_GetNextEventsChunk(struct soap *soap, const char *URL, const char *action, wchar_t *sServerObjectID, wchar_t *sSubscriptionID, struct KLPRES_GET_NEXT_EVENTS_CHUNK_RESPONSE &rc)
{
	struct KLPRES_GetNextEventsChunk soap_tmp_KLPRES_GetNextEventsChunk;
	soap->encodingStyle = NULL;
	soap_tmp_KLPRES_GetNextEventsChunk.sServerObjectID=sServerObjectID;
	soap_tmp_KLPRES_GetNextEventsChunk.sSubscriptionID=sSubscriptionID;
	soap_begin(soap);
	soap_serializeheader(soap);
	soap_serialize_KLPRES_GetNextEventsChunk(soap, &soap_tmp_KLPRES_GetNextEventsChunk);
	soap_begin_count(soap);
	if (soap->mode & SOAP_IO_LENGTH)
	{	soap_envelope_begin_out(soap);
		soap_putheader(soap);
		soap_body_begin_out(soap);
		soap_put_KLPRES_GetNextEventsChunk(soap, &soap_tmp_KLPRES_GetNextEventsChunk, "KLPRES-GetNextEventsChunk", "");
		soap_body_end_out(soap);
		soap_envelope_end_out(soap);
	}
	if (soap_connect(soap, URL, action)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put_KLPRES_GetNextEventsChunk(soap, &soap_tmp_KLPRES_GetNextEventsChunk, "KLPRES-GetNextEventsChunk", "")
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap_closesock(soap);
	soap_default_KLPRES_GET_NEXT_EVENTS_CHUNK_RESPONSE(soap, &rc);
	if (soap_begin_recv(soap)
	 || soap_envelope_begin_in(soap)
	 || soap_recv_header(soap)
	 || soap_body_begin_in(soap))
		return soap_closesock(soap);
	soap_get_KLPRES_GET_NEXT_EVENTS_CHUNK_RESPONSE(soap, &rc, "KLPRES-GET-NEXT-EVENTS-CHUNK-RESPONSE", "");
	if (soap->error)
	{	if (soap->error == SOAP_TAG_MISMATCH && soap->level == 2)
			return soap_recv_fault(soap);
		return soap_closesock(soap);
	}
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
#ifndef WITH_LEANER
	 || soap_resolve_attachments(soap)
#endif
	 || soap_end_recv(soap))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

SOAP_FMAC5 int SOAP_FMAC6 soap_call_KLPRES_ClearEventsList(struct soap *soap, const char *URL, const char *action, wchar_t *sServerObjectID, wchar_t *sSubscriptionID, struct param_error &rc)
{
	struct KLPRES_ClearEventsList soap_tmp_KLPRES_ClearEventsList;
	soap->encodingStyle = NULL;
	soap_tmp_KLPRES_ClearEventsList.sServerObjectID=sServerObjectID;
	soap_tmp_KLPRES_ClearEventsList.sSubscriptionID=sSubscriptionID;
	soap_begin(soap);
	soap_serializeheader(soap);
	soap_serialize_KLPRES_ClearEventsList(soap, &soap_tmp_KLPRES_ClearEventsList);
	soap_begin_count(soap);
	if (soap->mode & SOAP_IO_LENGTH)
	{	soap_envelope_begin_out(soap);
		soap_putheader(soap);
		soap_body_begin_out(soap);
		soap_put_KLPRES_ClearEventsList(soap, &soap_tmp_KLPRES_ClearEventsList, "KLPRES-ClearEventsList", "");
		soap_body_end_out(soap);
		soap_envelope_end_out(soap);
	}
	if (soap_connect(soap, URL, action)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put_KLPRES_ClearEventsList(soap, &soap_tmp_KLPRES_ClearEventsList, "KLPRES-ClearEventsList", "")
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap_closesock(soap);
	soap_default_param_error(soap, &rc);
	if (soap_begin_recv(soap)
	 || soap_envelope_begin_in(soap)
	 || soap_recv_header(soap)
	 || soap_body_begin_in(soap))
		return soap_closesock(soap);
	soap_get_param_error(soap, &rc, "param-error", "");
	if (soap->error)
	{	if (soap->error == SOAP_TAG_MISMATCH && soap->level == 2)
			return soap_recv_fault(soap);
		return soap_closesock(soap);
	}
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
#ifndef WITH_LEANER
	 || soap_resolve_attachments(soap)
#endif
	 || soap_end_recv(soap))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

SOAP_FMAC5 int SOAP_FMAC6 soap_call_KLPRES_DeleteEvents(struct soap *soap, const char *URL, const char *action, wchar_t *sServerObjectID, wchar_t *sSubscriptionID, long nStopEventID, struct param_error &rc)
{
	struct KLPRES_DeleteEvents soap_tmp_KLPRES_DeleteEvents;
	soap->encodingStyle = NULL;
	soap_tmp_KLPRES_DeleteEvents.sServerObjectID=sServerObjectID;
	soap_tmp_KLPRES_DeleteEvents.sSubscriptionID=sSubscriptionID;
	soap_tmp_KLPRES_DeleteEvents.nStopEventID=nStopEventID;
	soap_begin(soap);
	soap_serializeheader(soap);
	soap_serialize_KLPRES_DeleteEvents(soap, &soap_tmp_KLPRES_DeleteEvents);
	soap_begin_count(soap);
	if (soap->mode & SOAP_IO_LENGTH)
	{	soap_envelope_begin_out(soap);
		soap_putheader(soap);
		soap_body_begin_out(soap);
		soap_put_KLPRES_DeleteEvents(soap, &soap_tmp_KLPRES_DeleteEvents, "KLPRES-DeleteEvents", "");
		soap_body_end_out(soap);
		soap_envelope_end_out(soap);
	}
	if (soap_connect(soap, URL, action)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put_KLPRES_DeleteEvents(soap, &soap_tmp_KLPRES_DeleteEvents, "KLPRES-DeleteEvents", "")
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap_closesock(soap);
	soap_default_param_error(soap, &rc);
	if (soap_begin_recv(soap)
	 || soap_envelope_begin_in(soap)
	 || soap_recv_header(soap)
	 || soap_body_begin_in(soap))
		return soap_closesock(soap);
	soap_get_param_error(soap, &rc, "param-error", "");
	if (soap->error)
	{	if (soap->error == SOAP_TAG_MISMATCH && soap->level == 2)
			return soap_recv_fault(soap);
		return soap_closesock(soap);
	}
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
#ifndef WITH_LEANER
	 || soap_resolve_attachments(soap)
#endif
	 || soap_end_recv(soap))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

SOAP_FMAC5 int SOAP_FMAC6 soap_call_KLPRES_DeleteOneEventByID(struct soap *soap, const char *URL, const char *action, wchar_t *sServerObjectID, wchar_t *sSubscriptionID, long nEventID, struct param_error &rc)
{
	struct KLPRES_DeleteOneEventByID soap_tmp_KLPRES_DeleteOneEventByID;
	soap->encodingStyle = NULL;
	soap_tmp_KLPRES_DeleteOneEventByID.sServerObjectID=sServerObjectID;
	soap_tmp_KLPRES_DeleteOneEventByID.sSubscriptionID=sSubscriptionID;
	soap_tmp_KLPRES_DeleteOneEventByID.nEventID=nEventID;
	soap_begin(soap);
	soap_serializeheader(soap);
	soap_serialize_KLPRES_DeleteOneEventByID(soap, &soap_tmp_KLPRES_DeleteOneEventByID);
	soap_begin_count(soap);
	if (soap->mode & SOAP_IO_LENGTH)
	{	soap_envelope_begin_out(soap);
		soap_putheader(soap);
		soap_body_begin_out(soap);
		soap_put_KLPRES_DeleteOneEventByID(soap, &soap_tmp_KLPRES_DeleteOneEventByID, "KLPRES-DeleteOneEventByID", "");
		soap_body_end_out(soap);
		soap_envelope_end_out(soap);
	}
	if (soap_connect(soap, URL, action)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put_KLPRES_DeleteOneEventByID(soap, &soap_tmp_KLPRES_DeleteOneEventByID, "KLPRES-DeleteOneEventByID", "")
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap_closesock(soap);
	soap_default_param_error(soap, &rc);
	if (soap_begin_recv(soap)
	 || soap_envelope_begin_in(soap)
	 || soap_recv_header(soap)
	 || soap_body_begin_in(soap))
		return soap_closesock(soap);
	soap_get_param_error(soap, &rc, "param-error", "");
	if (soap->error)
	{	if (soap->error == SOAP_TAG_MISMATCH && soap->level == 2)
			return soap_recv_fault(soap);
		return soap_closesock(soap);
	}
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
#ifndef WITH_LEANER
	 || soap_resolve_attachments(soap)
#endif
	 || soap_end_recv(soap))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

SOAP_FMAC5 int SOAP_FMAC6 soap_call_KLPRES_DeleteRanges(struct soap *soap, const char *URL, const char *action, wchar_t *sServerObjectID, wchar_t *sSubscriptionID, param__params parRanges, struct param_error &rc)
{
	struct KLPRES_DeleteRanges soap_tmp_KLPRES_DeleteRanges;
	soap->encodingStyle = NULL;
	soap_tmp_KLPRES_DeleteRanges.sServerObjectID=sServerObjectID;
	soap_tmp_KLPRES_DeleteRanges.sSubscriptionID=sSubscriptionID;
	soap_tmp_KLPRES_DeleteRanges.parRanges=parRanges;
	soap_begin(soap);
	soap_serializeheader(soap);
	soap_serialize_KLPRES_DeleteRanges(soap, &soap_tmp_KLPRES_DeleteRanges);
	soap_begin_count(soap);
	if (soap->mode & SOAP_IO_LENGTH)
	{	soap_envelope_begin_out(soap);
		soap_putheader(soap);
		soap_body_begin_out(soap);
		soap_put_KLPRES_DeleteRanges(soap, &soap_tmp_KLPRES_DeleteRanges, "KLPRES-DeleteRanges", "");
		soap_body_end_out(soap);
		soap_envelope_end_out(soap);
	}
	if (soap_connect(soap, URL, action)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put_KLPRES_DeleteRanges(soap, &soap_tmp_KLPRES_DeleteRanges, "KLPRES-DeleteRanges", "")
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap_closesock(soap);
	soap_default_param_error(soap, &rc);
	if (soap_begin_recv(soap)
	 || soap_envelope_begin_in(soap)
	 || soap_recv_header(soap)
	 || soap_body_begin_in(soap))
		return soap_closesock(soap);
	soap_get_param_error(soap, &rc, "param-error", "");
	if (soap->error)
	{	if (soap->error == SOAP_TAG_MISMATCH && soap->level == 2)
			return soap_recv_fault(soap);
		return soap_closesock(soap);
	}
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
#ifndef WITH_LEANER
	 || soap_resolve_attachments(soap)
#endif
	 || soap_end_recv(soap))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

SOAP_FMAC5 int SOAP_FMAC6 soap_call_KLPRES_RemoveExpiredEvents(struct soap *soap, const char *URL, const char *action, wchar_t *sServerObjectID, wchar_t *sSubscriptionID, struct param_error &rc)
{
	struct KLPRES_RemoveExpiredEvents soap_tmp_KLPRES_RemoveExpiredEvents;
	soap->encodingStyle = NULL;
	soap_tmp_KLPRES_RemoveExpiredEvents.sServerObjectID=sServerObjectID;
	soap_tmp_KLPRES_RemoveExpiredEvents.sSubscriptionID=sSubscriptionID;
	soap_begin(soap);
	soap_serializeheader(soap);
	soap_serialize_KLPRES_RemoveExpiredEvents(soap, &soap_tmp_KLPRES_RemoveExpiredEvents);
	soap_begin_count(soap);
	if (soap->mode & SOAP_IO_LENGTH)
	{	soap_envelope_begin_out(soap);
		soap_putheader(soap);
		soap_body_begin_out(soap);
		soap_put_KLPRES_RemoveExpiredEvents(soap, &soap_tmp_KLPRES_RemoveExpiredEvents, "KLPRES-RemoveExpiredEvents", "");
		soap_body_end_out(soap);
		soap_envelope_end_out(soap);
	}
	if (soap_connect(soap, URL, action)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put_KLPRES_RemoveExpiredEvents(soap, &soap_tmp_KLPRES_RemoveExpiredEvents, "KLPRES-RemoveExpiredEvents", "")
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap_closesock(soap);
	soap_default_param_error(soap, &rc);
	if (soap_begin_recv(soap)
	 || soap_envelope_begin_in(soap)
	 || soap_recv_header(soap)
	 || soap_body_begin_in(soap))
		return soap_closesock(soap);
	soap_get_param_error(soap, &rc, "param-error", "");
	if (soap->error)
	{	if (soap->error == SOAP_TAG_MISMATCH && soap->level == 2)
			return soap_recv_fault(soap);
		return soap_closesock(soap);
	}
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
#ifndef WITH_LEANER
	 || soap_resolve_attachments(soap)
#endif
	 || soap_end_recv(soap))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

SOAP_FMAC5 int SOAP_FMAC6 soap_call_KLPRES_GetEventStorageFileSize(struct soap *soap, const char *URL, const char *action, wchar_t *sServerObjectID, wchar_t *sSubscriptionID, struct KLPRES_GET_EVENT_STORAGE_FILE_SIZE_RESPONSE &rc)
{
	struct KLPRES_GetEventStorageFileSize soap_tmp_KLPRES_GetEventStorageFileSize;
	soap->encodingStyle = NULL;
	soap_tmp_KLPRES_GetEventStorageFileSize.sServerObjectID=sServerObjectID;
	soap_tmp_KLPRES_GetEventStorageFileSize.sSubscriptionID=sSubscriptionID;
	soap_begin(soap);
	soap_serializeheader(soap);
	soap_serialize_KLPRES_GetEventStorageFileSize(soap, &soap_tmp_KLPRES_GetEventStorageFileSize);
	soap_begin_count(soap);
	if (soap->mode & SOAP_IO_LENGTH)
	{	soap_envelope_begin_out(soap);
		soap_putheader(soap);
		soap_body_begin_out(soap);
		soap_put_KLPRES_GetEventStorageFileSize(soap, &soap_tmp_KLPRES_GetEventStorageFileSize, "KLPRES-GetEventStorageFileSize", "");
		soap_body_end_out(soap);
		soap_envelope_end_out(soap);
	}
	if (soap_connect(soap, URL, action)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put_KLPRES_GetEventStorageFileSize(soap, &soap_tmp_KLPRES_GetEventStorageFileSize, "KLPRES-GetEventStorageFileSize", "")
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap_closesock(soap);
	soap_default_KLPRES_GET_EVENT_STORAGE_FILE_SIZE_RESPONSE(soap, &rc);
	if (soap_begin_recv(soap)
	 || soap_envelope_begin_in(soap)
	 || soap_recv_header(soap)
	 || soap_body_begin_in(soap))
		return soap_closesock(soap);
	soap_get_KLPRES_GET_EVENT_STORAGE_FILE_SIZE_RESPONSE(soap, &rc, "KLPRES-GET-EVENT-STORAGE-FILE-SIZE-RESPONSE", "");
	if (soap->error)
	{	if (soap->error == SOAP_TAG_MISMATCH && soap->level == 2)
			return soap_recv_fault(soap);
		return soap_closesock(soap);
	}
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
#ifndef WITH_LEANER
	 || soap_resolve_attachments(soap)
#endif
	 || soap_end_recv(soap))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

SOAP_FMAC5 int SOAP_FMAC6 soap_call_KLPRTS_ResetTasksIterator(struct soap *soap, const char *URL, const char *action, wchar_t *sServerObjectID, SOAPComponentId cidFilter, wchar_t *sTaskNameFilter, struct KLPRTS_RESET_TASKS_ITERATOR_RESPONSE &rc)
{
	struct KLPRTS_ResetTasksIterator soap_tmp_KLPRTS_ResetTasksIterator;
	soap->encodingStyle = NULL;
	soap_tmp_KLPRTS_ResetTasksIterator.sServerObjectID=sServerObjectID;
	soap_tmp_KLPRTS_ResetTasksIterator.cidFilter=cidFilter;
	soap_tmp_KLPRTS_ResetTasksIterator.sTaskNameFilter=sTaskNameFilter;
	soap_begin(soap);
	soap_serializeheader(soap);
	soap_serialize_KLPRTS_ResetTasksIterator(soap, &soap_tmp_KLPRTS_ResetTasksIterator);
	soap_begin_count(soap);
	if (soap->mode & SOAP_IO_LENGTH)
	{	soap_envelope_begin_out(soap);
		soap_putheader(soap);
		soap_body_begin_out(soap);
		soap_put_KLPRTS_ResetTasksIterator(soap, &soap_tmp_KLPRTS_ResetTasksIterator, "KLPRTS-ResetTasksIterator", "");
		soap_body_end_out(soap);
		soap_envelope_end_out(soap);
	}
	if (soap_connect(soap, URL, action)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put_KLPRTS_ResetTasksIterator(soap, &soap_tmp_KLPRTS_ResetTasksIterator, "KLPRTS-ResetTasksIterator", "")
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap_closesock(soap);
	soap_default_KLPRTS_RESET_TASKS_ITERATOR_RESPONSE(soap, &rc);
	if (soap_begin_recv(soap)
	 || soap_envelope_begin_in(soap)
	 || soap_recv_header(soap)
	 || soap_body_begin_in(soap))
		return soap_closesock(soap);
	soap_get_KLPRTS_RESET_TASKS_ITERATOR_RESPONSE(soap, &rc, "KLPRTS-RESET-TASKS-ITERATOR-RESPONSE", "");
	if (soap->error)
	{	if (soap->error == SOAP_TAG_MISMATCH && soap->level == 2)
			return soap_recv_fault(soap);
		return soap_closesock(soap);
	}
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
#ifndef WITH_LEANER
	 || soap_resolve_attachments(soap)
#endif
	 || soap_end_recv(soap))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

SOAP_FMAC5 int SOAP_FMAC6 soap_call_KLPRTS_GetTaskByID(struct soap *soap, const char *URL, const char *action, wchar_t *sServerObjectID, wchar_t *TaskID, struct KLPRTS_GET_TASK_BY_ID_RESPONSE &rc)
{
	struct KLPRTS_GetTaskByID soap_tmp_KLPRTS_GetTaskByID;
	soap->encodingStyle = NULL;
	soap_tmp_KLPRTS_GetTaskByID.sServerObjectID=sServerObjectID;
	soap_tmp_KLPRTS_GetTaskByID.TaskID=TaskID;
	soap_begin(soap);
	soap_serializeheader(soap);
	soap_serialize_KLPRTS_GetTaskByID(soap, &soap_tmp_KLPRTS_GetTaskByID);
	soap_begin_count(soap);
	if (soap->mode & SOAP_IO_LENGTH)
	{	soap_envelope_begin_out(soap);
		soap_putheader(soap);
		soap_body_begin_out(soap);
		soap_put_KLPRTS_GetTaskByID(soap, &soap_tmp_KLPRTS_GetTaskByID, "KLPRTS-GetTaskByID", "");
		soap_body_end_out(soap);
		soap_envelope_end_out(soap);
	}
	if (soap_connect(soap, URL, action)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put_KLPRTS_GetTaskByID(soap, &soap_tmp_KLPRTS_GetTaskByID, "KLPRTS-GetTaskByID", "")
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap_closesock(soap);
	soap_default_KLPRTS_GET_TASK_BY_ID_RESPONSE(soap, &rc);
	if (soap_begin_recv(soap)
	 || soap_envelope_begin_in(soap)
	 || soap_recv_header(soap)
	 || soap_body_begin_in(soap))
		return soap_closesock(soap);
	soap_get_KLPRTS_GET_TASK_BY_ID_RESPONSE(soap, &rc, "KLPRTS-GET-TASK-BY-ID-RESPONSE", "");
	if (soap->error)
	{	if (soap->error == SOAP_TAG_MISMATCH && soap->level == 2)
			return soap_recv_fault(soap);
		return soap_closesock(soap);
	}
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
#ifndef WITH_LEANER
	 || soap_resolve_attachments(soap)
#endif
	 || soap_end_recv(soap))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

SOAP_FMAC5 int SOAP_FMAC6 soap_call_KLPRTS_GetTaskByIDWithPolicyApplied(struct soap *soap, const char *URL, const char *action, wchar_t *sServerObjectID, wchar_t *TaskID, struct KLPRTS_GET_TASK_BY_ID_WPA_RESPONSE &rc)
{
	struct KLPRTS_GetTaskByIDWithPolicyApplied soap_tmp_KLPRTS_GetTaskByIDWithPolicyApplied;
	soap->encodingStyle = NULL;
	soap_tmp_KLPRTS_GetTaskByIDWithPolicyApplied.sServerObjectID=sServerObjectID;
	soap_tmp_KLPRTS_GetTaskByIDWithPolicyApplied.TaskID=TaskID;
	soap_begin(soap);
	soap_serializeheader(soap);
	soap_serialize_KLPRTS_GetTaskByIDWithPolicyApplied(soap, &soap_tmp_KLPRTS_GetTaskByIDWithPolicyApplied);
	soap_begin_count(soap);
	if (soap->mode & SOAP_IO_LENGTH)
	{	soap_envelope_begin_out(soap);
		soap_putheader(soap);
		soap_body_begin_out(soap);
		soap_put_KLPRTS_GetTaskByIDWithPolicyApplied(soap, &soap_tmp_KLPRTS_GetTaskByIDWithPolicyApplied, "KLPRTS-GetTaskByIDWithPolicyApplied", "");
		soap_body_end_out(soap);
		soap_envelope_end_out(soap);
	}
	if (soap_connect(soap, URL, action)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put_KLPRTS_GetTaskByIDWithPolicyApplied(soap, &soap_tmp_KLPRTS_GetTaskByIDWithPolicyApplied, "KLPRTS-GetTaskByIDWithPolicyApplied", "")
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap_closesock(soap);
	soap_default_KLPRTS_GET_TASK_BY_ID_WPA_RESPONSE(soap, &rc);
	if (soap_begin_recv(soap)
	 || soap_envelope_begin_in(soap)
	 || soap_recv_header(soap)
	 || soap_body_begin_in(soap))
		return soap_closesock(soap);
	soap_get_KLPRTS_GET_TASK_BY_ID_WPA_RESPONSE(soap, &rc, "KLPRTS-GET-TASK-BY-ID-WPA-RESPONSE", "");
	if (soap->error)
	{	if (soap->error == SOAP_TAG_MISMATCH && soap->level == 2)
			return soap_recv_fault(soap);
		return soap_closesock(soap);
	}
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
#ifndef WITH_LEANER
	 || soap_resolve_attachments(soap)
#endif
	 || soap_end_recv(soap))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

SOAP_FMAC5 int SOAP_FMAC6 soap_call_KLPRTS_AddTask(struct soap *soap, const char *URL, const char *action, wchar_t *sServerObjectID, param__params parTaskParams, struct KLPRTS_ADD_TASK_RESPONSE &rc)
{
	struct KLPRTS_AddTask soap_tmp_KLPRTS_AddTask;
	soap->encodingStyle = NULL;
	soap_tmp_KLPRTS_AddTask.sServerObjectID=sServerObjectID;
	soap_tmp_KLPRTS_AddTask.parTaskParams=parTaskParams;
	soap_begin(soap);
	soap_serializeheader(soap);
	soap_serialize_KLPRTS_AddTask(soap, &soap_tmp_KLPRTS_AddTask);
	soap_begin_count(soap);
	if (soap->mode & SOAP_IO_LENGTH)
	{	soap_envelope_begin_out(soap);
		soap_putheader(soap);
		soap_body_begin_out(soap);
		soap_put_KLPRTS_AddTask(soap, &soap_tmp_KLPRTS_AddTask, "KLPRTS-AddTask", "");
		soap_body_end_out(soap);
		soap_envelope_end_out(soap);
	}
	if (soap_connect(soap, URL, action)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put_KLPRTS_AddTask(soap, &soap_tmp_KLPRTS_AddTask, "KLPRTS-AddTask", "")
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap_closesock(soap);
	soap_default_KLPRTS_ADD_TASK_RESPONSE(soap, &rc);
	if (soap_begin_recv(soap)
	 || soap_envelope_begin_in(soap)
	 || soap_recv_header(soap)
	 || soap_body_begin_in(soap))
		return soap_closesock(soap);
	soap_get_KLPRTS_ADD_TASK_RESPONSE(soap, &rc, "KLPRTS-ADD-TASK-RESPONSE", "");
	if (soap->error)
	{	if (soap->error == SOAP_TAG_MISMATCH && soap->level == 2)
			return soap_recv_fault(soap);
		return soap_closesock(soap);
	}
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
#ifndef WITH_LEANER
	 || soap_resolve_attachments(soap)
#endif
	 || soap_end_recv(soap))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

SOAP_FMAC5 int SOAP_FMAC6 soap_call_KLPRTS_UpdateTask(struct soap *soap, const char *URL, const char *action, wchar_t *sServerObjectID, wchar_t *TaskID, param__params parTaskParams, struct param_error &rc)
{
	struct KLPRTS_UpdateTask soap_tmp_KLPRTS_UpdateTask;
	soap->encodingStyle = NULL;
	soap_tmp_KLPRTS_UpdateTask.sServerObjectID=sServerObjectID;
	soap_tmp_KLPRTS_UpdateTask.TaskID=TaskID;
	soap_tmp_KLPRTS_UpdateTask.parTaskParams=parTaskParams;
	soap_begin(soap);
	soap_serializeheader(soap);
	soap_serialize_KLPRTS_UpdateTask(soap, &soap_tmp_KLPRTS_UpdateTask);
	soap_begin_count(soap);
	if (soap->mode & SOAP_IO_LENGTH)
	{	soap_envelope_begin_out(soap);
		soap_putheader(soap);
		soap_body_begin_out(soap);
		soap_put_KLPRTS_UpdateTask(soap, &soap_tmp_KLPRTS_UpdateTask, "KLPRTS-UpdateTask", "");
		soap_body_end_out(soap);
		soap_envelope_end_out(soap);
	}
	if (soap_connect(soap, URL, action)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put_KLPRTS_UpdateTask(soap, &soap_tmp_KLPRTS_UpdateTask, "KLPRTS-UpdateTask", "")
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap_closesock(soap);
	soap_default_param_error(soap, &rc);
	if (soap_begin_recv(soap)
	 || soap_envelope_begin_in(soap)
	 || soap_recv_header(soap)
	 || soap_body_begin_in(soap))
		return soap_closesock(soap);
	soap_get_param_error(soap, &rc, "param-error", "");
	if (soap->error)
	{	if (soap->error == SOAP_TAG_MISMATCH && soap->level == 2)
			return soap_recv_fault(soap);
		return soap_closesock(soap);
	}
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
#ifndef WITH_LEANER
	 || soap_resolve_attachments(soap)
#endif
	 || soap_end_recv(soap))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

SOAP_FMAC5 int SOAP_FMAC6 soap_call_KLPRTS_DeleteTask(struct soap *soap, const char *URL, const char *action, wchar_t *sServerObjectID, wchar_t *TaskID, struct param_error &rc)
{
	struct KLPRTS_DeleteTask soap_tmp_KLPRTS_DeleteTask;
	soap->encodingStyle = NULL;
	soap_tmp_KLPRTS_DeleteTask.sServerObjectID=sServerObjectID;
	soap_tmp_KLPRTS_DeleteTask.TaskID=TaskID;
	soap_begin(soap);
	soap_serializeheader(soap);
	soap_serialize_KLPRTS_DeleteTask(soap, &soap_tmp_KLPRTS_DeleteTask);
	soap_begin_count(soap);
	if (soap->mode & SOAP_IO_LENGTH)
	{	soap_envelope_begin_out(soap);
		soap_putheader(soap);
		soap_body_begin_out(soap);
		soap_put_KLPRTS_DeleteTask(soap, &soap_tmp_KLPRTS_DeleteTask, "KLPRTS-DeleteTask", "");
		soap_body_end_out(soap);
		soap_envelope_end_out(soap);
	}
	if (soap_connect(soap, URL, action)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put_KLPRTS_DeleteTask(soap, &soap_tmp_KLPRTS_DeleteTask, "KLPRTS-DeleteTask", "")
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap_closesock(soap);
	soap_default_param_error(soap, &rc);
	if (soap_begin_recv(soap)
	 || soap_envelope_begin_in(soap)
	 || soap_recv_header(soap)
	 || soap_body_begin_in(soap))
		return soap_closesock(soap);
	soap_get_param_error(soap, &rc, "param-error", "");
	if (soap->error)
	{	if (soap->error == SOAP_TAG_MISMATCH && soap->level == 2)
			return soap_recv_fault(soap);
		return soap_closesock(soap);
	}
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
#ifndef WITH_LEANER
	 || soap_resolve_attachments(soap)
#endif
	 || soap_end_recv(soap))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

SOAP_FMAC5 int SOAP_FMAC6 soap_call_KLPRTS_SetTaskStartEvent(struct soap *soap, const char *URL, const char *action, wchar_t *sServerObjectID, wchar_t *TaskID, SOAPComponentId cidEventFilter, wchar_t *sEventType, param__params parBodyFilter, struct param_error &rc)
{
	struct KLPRTS_SetTaskStartEvent soap_tmp_KLPRTS_SetTaskStartEvent;
	soap->encodingStyle = NULL;
	soap_tmp_KLPRTS_SetTaskStartEvent.sServerObjectID=sServerObjectID;
	soap_tmp_KLPRTS_SetTaskStartEvent.TaskID=TaskID;
	soap_tmp_KLPRTS_SetTaskStartEvent.cidEventFilter=cidEventFilter;
	soap_tmp_KLPRTS_SetTaskStartEvent.sEventType=sEventType;
	soap_tmp_KLPRTS_SetTaskStartEvent.parBodyFilter=parBodyFilter;
	soap_begin(soap);
	soap_serializeheader(soap);
	soap_serialize_KLPRTS_SetTaskStartEvent(soap, &soap_tmp_KLPRTS_SetTaskStartEvent);
	soap_begin_count(soap);
	if (soap->mode & SOAP_IO_LENGTH)
	{	soap_envelope_begin_out(soap);
		soap_putheader(soap);
		soap_body_begin_out(soap);
		soap_put_KLPRTS_SetTaskStartEvent(soap, &soap_tmp_KLPRTS_SetTaskStartEvent, "KLPRTS-SetTaskStartEvent", "");
		soap_body_end_out(soap);
		soap_envelope_end_out(soap);
	}
	if (soap_connect(soap, URL, action)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put_KLPRTS_SetTaskStartEvent(soap, &soap_tmp_KLPRTS_SetTaskStartEvent, "KLPRTS-SetTaskStartEvent", "")
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap_closesock(soap);
	soap_default_param_error(soap, &rc);
	if (soap_begin_recv(soap)
	 || soap_envelope_begin_in(soap)
	 || soap_recv_header(soap)
	 || soap_body_begin_in(soap))
		return soap_closesock(soap);
	soap_get_param_error(soap, &rc, "param-error", "");
	if (soap->error)
	{	if (soap->error == SOAP_TAG_MISMATCH && soap->level == 2)
			return soap_recv_fault(soap);
		return soap_closesock(soap);
	}
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
#ifndef WITH_LEANER
	 || soap_resolve_attachments(soap)
#endif
	 || soap_end_recv(soap))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

SOAP_FMAC5 int SOAP_FMAC6 soap_call_KLPRTS_GetTaskStartEvent(struct soap *soap, const char *URL, const char *action, wchar_t *sServerObjectID, wchar_t *TaskID, struct KLPRTS_GET_TASK_START_EVENT_RESPONSE &rc)
{
	struct KLPRTS_GetTaskStartEvent soap_tmp_KLPRTS_GetTaskStartEvent;
	soap->encodingStyle = NULL;
	soap_tmp_KLPRTS_GetTaskStartEvent.sServerObjectID=sServerObjectID;
	soap_tmp_KLPRTS_GetTaskStartEvent.TaskID=TaskID;
	soap_begin(soap);
	soap_serializeheader(soap);
	soap_serialize_KLPRTS_GetTaskStartEvent(soap, &soap_tmp_KLPRTS_GetTaskStartEvent);
	soap_begin_count(soap);
	if (soap->mode & SOAP_IO_LENGTH)
	{	soap_envelope_begin_out(soap);
		soap_putheader(soap);
		soap_body_begin_out(soap);
		soap_put_KLPRTS_GetTaskStartEvent(soap, &soap_tmp_KLPRTS_GetTaskStartEvent, "KLPRTS-GetTaskStartEvent", "");
		soap_body_end_out(soap);
		soap_envelope_end_out(soap);
	}
	if (soap_connect(soap, URL, action)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put_KLPRTS_GetTaskStartEvent(soap, &soap_tmp_KLPRTS_GetTaskStartEvent, "KLPRTS-GetTaskStartEvent", "")
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap_closesock(soap);
	soap_default_KLPRTS_GET_TASK_START_EVENT_RESPONSE(soap, &rc);
	if (soap_begin_recv(soap)
	 || soap_envelope_begin_in(soap)
	 || soap_recv_header(soap)
	 || soap_body_begin_in(soap))
		return soap_closesock(soap);
	soap_get_KLPRTS_GET_TASK_START_EVENT_RESPONSE(soap, &rc, "KLPRTS-GET-TASK-START-EVENT-RESPONSE", "");
	if (soap->error)
	{	if (soap->error == SOAP_TAG_MISMATCH && soap->level == 2)
			return soap_recv_fault(soap);
		return soap_closesock(soap);
	}
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
#ifndef WITH_LEANER
	 || soap_resolve_attachments(soap)
#endif
	 || soap_end_recv(soap))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

SOAP_FMAC5 int SOAP_FMAC6 soap_call_KLPRTS_UpdateTask2(struct soap *soap, const char *URL, const char *action, wchar_t *sServerObjectID, wchar_t *TaskID, param__params parTaskParams, struct param_error &rc)
{
	struct KLPRTS_UpdateTask2 soap_tmp_KLPRTS_UpdateTask2;
	soap->encodingStyle = NULL;
	soap_tmp_KLPRTS_UpdateTask2.sServerObjectID=sServerObjectID;
	soap_tmp_KLPRTS_UpdateTask2.TaskID=TaskID;
	soap_tmp_KLPRTS_UpdateTask2.parTaskParams=parTaskParams;
	soap_begin(soap);
	soap_serializeheader(soap);
	soap_serialize_KLPRTS_UpdateTask2(soap, &soap_tmp_KLPRTS_UpdateTask2);
	soap_begin_count(soap);
	if (soap->mode & SOAP_IO_LENGTH)
	{	soap_envelope_begin_out(soap);
		soap_putheader(soap);
		soap_body_begin_out(soap);
		soap_put_KLPRTS_UpdateTask2(soap, &soap_tmp_KLPRTS_UpdateTask2, "KLPRTS-UpdateTask2", "");
		soap_body_end_out(soap);
		soap_envelope_end_out(soap);
	}
	if (soap_connect(soap, URL, action)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put_KLPRTS_UpdateTask2(soap, &soap_tmp_KLPRTS_UpdateTask2, "KLPRTS-UpdateTask2", "")
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap_closesock(soap);
	soap_default_param_error(soap, &rc);
	if (soap_begin_recv(soap)
	 || soap_envelope_begin_in(soap)
	 || soap_recv_header(soap)
	 || soap_body_begin_in(soap))
		return soap_closesock(soap);
	soap_get_param_error(soap, &rc, "param-error", "");
	if (soap->error)
	{	if (soap->error == SOAP_TAG_MISMATCH && soap->level == 2)
			return soap_recv_fault(soap);
		return soap_closesock(soap);
	}
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
#ifndef WITH_LEANER
	 || soap_resolve_attachments(soap)
#endif
	 || soap_end_recv(soap))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

SOAP_FMAC5 int SOAP_FMAC6 soap_call_KLPRTS_ReplaceTask(struct soap *soap, const char *URL, const char *action, wchar_t *sServerObjectID, wchar_t *TaskID, param__params parTaskParams, struct param_error &rc)
{
	struct KLPRTS_ReplaceTask soap_tmp_KLPRTS_ReplaceTask;
	soap->encodingStyle = NULL;
	soap_tmp_KLPRTS_ReplaceTask.sServerObjectID=sServerObjectID;
	soap_tmp_KLPRTS_ReplaceTask.TaskID=TaskID;
	soap_tmp_KLPRTS_ReplaceTask.parTaskParams=parTaskParams;
	soap_begin(soap);
	soap_serializeheader(soap);
	soap_serialize_KLPRTS_ReplaceTask(soap, &soap_tmp_KLPRTS_ReplaceTask);
	soap_begin_count(soap);
	if (soap->mode & SOAP_IO_LENGTH)
	{	soap_envelope_begin_out(soap);
		soap_putheader(soap);
		soap_body_begin_out(soap);
		soap_put_KLPRTS_ReplaceTask(soap, &soap_tmp_KLPRTS_ReplaceTask, "KLPRTS-ReplaceTask", "");
		soap_body_end_out(soap);
		soap_envelope_end_out(soap);
	}
	if (soap_connect(soap, URL, action)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put_KLPRTS_ReplaceTask(soap, &soap_tmp_KLPRTS_ReplaceTask, "KLPRTS-ReplaceTask", "")
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap_closesock(soap);
	soap_default_param_error(soap, &rc);
	if (soap_begin_recv(soap)
	 || soap_envelope_begin_in(soap)
	 || soap_recv_header(soap)
	 || soap_body_begin_in(soap))
		return soap_closesock(soap);
	soap_get_param_error(soap, &rc, "param-error", "");
	if (soap->error)
	{	if (soap->error == SOAP_TAG_MISMATCH && soap->level == 2)
			return soap_recv_fault(soap);
		return soap_closesock(soap);
	}
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
#ifndef WITH_LEANER
	 || soap_resolve_attachments(soap)
#endif
	 || soap_end_recv(soap))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

SOAP_FMAC5 int SOAP_FMAC6 soap_call_klsssrv_Close(struct soap *soap, const char *URL, const char *action, wchar_t *wstrIdSSS, wchar_t *wstrProxyId, struct klsssrv_CloseResponse &r)
{
	struct klsssrv_Close soap_tmp_klsssrv_Close;
	soap->encodingStyle = NULL;
	soap_tmp_klsssrv_Close.wstrIdSSS=wstrIdSSS;
	soap_tmp_klsssrv_Close.wstrProxyId=wstrProxyId;
	soap_begin(soap);
	soap_serializeheader(soap);
	soap_serialize_klsssrv_Close(soap, &soap_tmp_klsssrv_Close);
	soap_begin_count(soap);
	if (soap->mode & SOAP_IO_LENGTH)
	{	soap_envelope_begin_out(soap);
		soap_putheader(soap);
		soap_body_begin_out(soap);
		soap_put_klsssrv_Close(soap, &soap_tmp_klsssrv_Close, "klsssrv-Close", "");
		soap_body_end_out(soap);
		soap_envelope_end_out(soap);
	}
	if (soap_connect(soap, URL, action)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put_klsssrv_Close(soap, &soap_tmp_klsssrv_Close, "klsssrv-Close", "")
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap_closesock(soap);
	soap_default_klsssrv_CloseResponse(soap, &r);
	if (soap_begin_recv(soap)
	 || soap_envelope_begin_in(soap)
	 || soap_recv_header(soap)
	 || soap_body_begin_in(soap))
		return soap_closesock(soap);
	soap_get_klsssrv_CloseResponse(soap, &r, "klsssrv-CloseResponse", "");
	if (soap->error)
	{	if (soap->error == SOAP_TAG_MISMATCH && soap->level == 2)
			return soap_recv_fault(soap);
		return soap_closesock(soap);
	}
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
#ifndef WITH_LEANER
	 || soap_resolve_attachments(soap)
#endif
	 || soap_end_recv(soap))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

SOAP_FMAC5 int SOAP_FMAC6 soap_call_klsssrv_CreateSettingsStorage(struct soap *soap, const char *URL, const char *action, wchar_t *wstrIdSSS, wchar_t *wstrLocation, long nCreationFlags, long nAccessFlags, param__params options, struct klsssrv_CreateSettingsStorageResponse &r)
{
	struct klsssrv_CreateSettingsStorage soap_tmp_klsssrv_CreateSettingsStorage;
	soap->encodingStyle = NULL;
	soap_tmp_klsssrv_CreateSettingsStorage.wstrIdSSS=wstrIdSSS;
	soap_tmp_klsssrv_CreateSettingsStorage.wstrLocation=wstrLocation;
	soap_tmp_klsssrv_CreateSettingsStorage.nCreationFlags=nCreationFlags;
	soap_tmp_klsssrv_CreateSettingsStorage.nAccessFlags=nAccessFlags;
	soap_tmp_klsssrv_CreateSettingsStorage.options=options;
	soap_begin(soap);
	soap_serializeheader(soap);
	soap_serialize_klsssrv_CreateSettingsStorage(soap, &soap_tmp_klsssrv_CreateSettingsStorage);
	soap_begin_count(soap);
	if (soap->mode & SOAP_IO_LENGTH)
	{	soap_envelope_begin_out(soap);
		soap_putheader(soap);
		soap_body_begin_out(soap);
		soap_put_klsssrv_CreateSettingsStorage(soap, &soap_tmp_klsssrv_CreateSettingsStorage, "klsssrv-CreateSettingsStorage", "");
		soap_body_end_out(soap);
		soap_envelope_end_out(soap);
	}
	if (soap_connect(soap, URL, action)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put_klsssrv_CreateSettingsStorage(soap, &soap_tmp_klsssrv_CreateSettingsStorage, "klsssrv-CreateSettingsStorage", "")
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap_closesock(soap);
	soap_default_klsssrv_CreateSettingsStorageResponse(soap, &r);
	if (soap_begin_recv(soap)
	 || soap_envelope_begin_in(soap)
	 || soap_recv_header(soap)
	 || soap_body_begin_in(soap))
		return soap_closesock(soap);
	soap_get_klsssrv_CreateSettingsStorageResponse(soap, &r, "klsssrv-CreateSettingsStorageResponse", "");
	if (soap->error)
	{	if (soap->error == SOAP_TAG_MISMATCH && soap->level == 2)
			return soap_recv_fault(soap);
		return soap_closesock(soap);
	}
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
#ifndef WITH_LEANER
	 || soap_resolve_attachments(soap)
#endif
	 || soap_end_recv(soap))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

SOAP_FMAC5 int SOAP_FMAC6 soap_call_klsssrv_Read(struct soap *soap, const char *URL, const char *action, wchar_t *wstrIdSSS, wchar_t *wstrProxyId, wchar_t *wstrName, wchar_t *wstrVersion, wchar_t *wstrSection, param__params extra, struct klsssrv_ReadResponse &r)
{
	struct klsssrv_Read soap_tmp_klsssrv_Read;
	soap->encodingStyle = NULL;
	soap_tmp_klsssrv_Read.wstrIdSSS=wstrIdSSS;
	soap_tmp_klsssrv_Read.wstrProxyId=wstrProxyId;
	soap_tmp_klsssrv_Read.wstrName=wstrName;
	soap_tmp_klsssrv_Read.wstrVersion=wstrVersion;
	soap_tmp_klsssrv_Read.wstrSection=wstrSection;
	soap_tmp_klsssrv_Read.extra=extra;
	soap_begin(soap);
	soap_serializeheader(soap);
	soap_serialize_klsssrv_Read(soap, &soap_tmp_klsssrv_Read);
	soap_begin_count(soap);
	if (soap->mode & SOAP_IO_LENGTH)
	{	soap_envelope_begin_out(soap);
		soap_putheader(soap);
		soap_body_begin_out(soap);
		soap_put_klsssrv_Read(soap, &soap_tmp_klsssrv_Read, "klsssrv-Read", "");
		soap_body_end_out(soap);
		soap_envelope_end_out(soap);
	}
	if (soap_connect(soap, URL, action)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put_klsssrv_Read(soap, &soap_tmp_klsssrv_Read, "klsssrv-Read", "")
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap_closesock(soap);
	soap_default_klsssrv_ReadResponse(soap, &r);
	if (soap_begin_recv(soap)
	 || soap_envelope_begin_in(soap)
	 || soap_recv_header(soap)
	 || soap_body_begin_in(soap))
		return soap_closesock(soap);
	soap_get_klsssrv_ReadResponse(soap, &r, "klsssrv-ReadResponse", "");
	if (soap->error)
	{	if (soap->error == SOAP_TAG_MISMATCH && soap->level == 2)
			return soap_recv_fault(soap);
		return soap_closesock(soap);
	}
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
#ifndef WITH_LEANER
	 || soap_resolve_attachments(soap)
#endif
	 || soap_end_recv(soap))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

SOAP_FMAC5 int SOAP_FMAC6 soap_call_klsssrv_Write(struct soap *soap, const char *URL, const char *action, wchar_t *wstrIdSSS, wchar_t *wstrProxyId, wchar_t *wstrName, wchar_t *wstrVersion, wchar_t *wstrSection, long nFlags, param__params data, struct klsssrv_WriteResponse &r)
{
	struct klsssrv_Write soap_tmp_klsssrv_Write;
	soap->encodingStyle = NULL;
	soap_tmp_klsssrv_Write.wstrIdSSS=wstrIdSSS;
	soap_tmp_klsssrv_Write.wstrProxyId=wstrProxyId;
	soap_tmp_klsssrv_Write.wstrName=wstrName;
	soap_tmp_klsssrv_Write.wstrVersion=wstrVersion;
	soap_tmp_klsssrv_Write.wstrSection=wstrSection;
	soap_tmp_klsssrv_Write.nFlags=nFlags;
	soap_tmp_klsssrv_Write.data=data;
	soap_begin(soap);
	soap_serializeheader(soap);
	soap_serialize_klsssrv_Write(soap, &soap_tmp_klsssrv_Write);
	soap_begin_count(soap);
	if (soap->mode & SOAP_IO_LENGTH)
	{	soap_envelope_begin_out(soap);
		soap_putheader(soap);
		soap_body_begin_out(soap);
		soap_put_klsssrv_Write(soap, &soap_tmp_klsssrv_Write, "klsssrv-Write", "");
		soap_body_end_out(soap);
		soap_envelope_end_out(soap);
	}
	if (soap_connect(soap, URL, action)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put_klsssrv_Write(soap, &soap_tmp_klsssrv_Write, "klsssrv-Write", "")
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap_closesock(soap);
	soap_default_klsssrv_WriteResponse(soap, &r);
	if (soap_begin_recv(soap)
	 || soap_envelope_begin_in(soap)
	 || soap_recv_header(soap)
	 || soap_body_begin_in(soap))
		return soap_closesock(soap);
	soap_get_klsssrv_WriteResponse(soap, &r, "klsssrv-WriteResponse", "");
	if (soap->error)
	{	if (soap->error == SOAP_TAG_MISMATCH && soap->level == 2)
			return soap_recv_fault(soap);
		return soap_closesock(soap);
	}
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
#ifndef WITH_LEANER
	 || soap_resolve_attachments(soap)
#endif
	 || soap_end_recv(soap))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

SOAP_FMAC5 int SOAP_FMAC6 soap_call_klsssrv_CreateSection(struct soap *soap, const char *URL, const char *action, wchar_t *wstrIdSSS, wchar_t *wstrProxyId, wchar_t *wstrName, wchar_t *wstrVersion, wchar_t *wstrSection, struct klsssrv_CreateSectionResponse &r)
{
	struct klsssrv_CreateSection soap_tmp_klsssrv_CreateSection;
	soap->encodingStyle = NULL;
	soap_tmp_klsssrv_CreateSection.wstrIdSSS=wstrIdSSS;
	soap_tmp_klsssrv_CreateSection.wstrProxyId=wstrProxyId;
	soap_tmp_klsssrv_CreateSection.wstrName=wstrName;
	soap_tmp_klsssrv_CreateSection.wstrVersion=wstrVersion;
	soap_tmp_klsssrv_CreateSection.wstrSection=wstrSection;
	soap_begin(soap);
	soap_serializeheader(soap);
	soap_serialize_klsssrv_CreateSection(soap, &soap_tmp_klsssrv_CreateSection);
	soap_begin_count(soap);
	if (soap->mode & SOAP_IO_LENGTH)
	{	soap_envelope_begin_out(soap);
		soap_putheader(soap);
		soap_body_begin_out(soap);
		soap_put_klsssrv_CreateSection(soap, &soap_tmp_klsssrv_CreateSection, "klsssrv-CreateSection", "");
		soap_body_end_out(soap);
		soap_envelope_end_out(soap);
	}
	if (soap_connect(soap, URL, action)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put_klsssrv_CreateSection(soap, &soap_tmp_klsssrv_CreateSection, "klsssrv-CreateSection", "")
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap_closesock(soap);
	soap_default_klsssrv_CreateSectionResponse(soap, &r);
	if (soap_begin_recv(soap)
	 || soap_envelope_begin_in(soap)
	 || soap_recv_header(soap)
	 || soap_body_begin_in(soap))
		return soap_closesock(soap);
	soap_get_klsssrv_CreateSectionResponse(soap, &r, "klsssrv-CreateSectionResponse", "");
	if (soap->error)
	{	if (soap->error == SOAP_TAG_MISMATCH && soap->level == 2)
			return soap_recv_fault(soap);
		return soap_closesock(soap);
	}
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
#ifndef WITH_LEANER
	 || soap_resolve_attachments(soap)
#endif
	 || soap_end_recv(soap))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

SOAP_FMAC5 int SOAP_FMAC6 soap_call_klsssrv_DeleteSection(struct soap *soap, const char *URL, const char *action, wchar_t *wstrIdSSS, wchar_t *wstrProxyId, wchar_t *wstrName, wchar_t *wstrVersion, wchar_t *wstrSection, struct klsssrv_DeleteSectionResponse &r)
{
	struct klsssrv_DeleteSection soap_tmp_klsssrv_DeleteSection;
	soap->encodingStyle = NULL;
	soap_tmp_klsssrv_DeleteSection.wstrIdSSS=wstrIdSSS;
	soap_tmp_klsssrv_DeleteSection.wstrProxyId=wstrProxyId;
	soap_tmp_klsssrv_DeleteSection.wstrName=wstrName;
	soap_tmp_klsssrv_DeleteSection.wstrVersion=wstrVersion;
	soap_tmp_klsssrv_DeleteSection.wstrSection=wstrSection;
	soap_begin(soap);
	soap_serializeheader(soap);
	soap_serialize_klsssrv_DeleteSection(soap, &soap_tmp_klsssrv_DeleteSection);
	soap_begin_count(soap);
	if (soap->mode & SOAP_IO_LENGTH)
	{	soap_envelope_begin_out(soap);
		soap_putheader(soap);
		soap_body_begin_out(soap);
		soap_put_klsssrv_DeleteSection(soap, &soap_tmp_klsssrv_DeleteSection, "klsssrv-DeleteSection", "");
		soap_body_end_out(soap);
		soap_envelope_end_out(soap);
	}
	if (soap_connect(soap, URL, action)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put_klsssrv_DeleteSection(soap, &soap_tmp_klsssrv_DeleteSection, "klsssrv-DeleteSection", "")
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap_closesock(soap);
	soap_default_klsssrv_DeleteSectionResponse(soap, &r);
	if (soap_begin_recv(soap)
	 || soap_envelope_begin_in(soap)
	 || soap_recv_header(soap)
	 || soap_body_begin_in(soap))
		return soap_closesock(soap);
	soap_get_klsssrv_DeleteSectionResponse(soap, &r, "klsssrv-DeleteSectionResponse", "");
	if (soap->error)
	{	if (soap->error == SOAP_TAG_MISMATCH && soap->level == 2)
			return soap_recv_fault(soap);
		return soap_closesock(soap);
	}
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
#ifndef WITH_LEANER
	 || soap_resolve_attachments(soap)
#endif
	 || soap_end_recv(soap))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

SOAP_FMAC5 int SOAP_FMAC6 soap_call_klsssrv_SetTimeout(struct soap *soap, const char *URL, const char *action, wchar_t *wstrIdSSS, wchar_t *wstrProxyId, long lTimeout, struct klsssrv_SetTimeoutResponse &r)
{
	struct klsssrv_SetTimeout soap_tmp_klsssrv_SetTimeout;
	soap->encodingStyle = NULL;
	soap_tmp_klsssrv_SetTimeout.wstrIdSSS=wstrIdSSS;
	soap_tmp_klsssrv_SetTimeout.wstrProxyId=wstrProxyId;
	soap_tmp_klsssrv_SetTimeout.lTimeout=lTimeout;
	soap_begin(soap);
	soap_serializeheader(soap);
	soap_serialize_klsssrv_SetTimeout(soap, &soap_tmp_klsssrv_SetTimeout);
	soap_begin_count(soap);
	if (soap->mode & SOAP_IO_LENGTH)
	{	soap_envelope_begin_out(soap);
		soap_putheader(soap);
		soap_body_begin_out(soap);
		soap_put_klsssrv_SetTimeout(soap, &soap_tmp_klsssrv_SetTimeout, "klsssrv-SetTimeout", "");
		soap_body_end_out(soap);
		soap_envelope_end_out(soap);
	}
	if (soap_connect(soap, URL, action)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put_klsssrv_SetTimeout(soap, &soap_tmp_klsssrv_SetTimeout, "klsssrv-SetTimeout", "")
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap_closesock(soap);
	soap_default_klsssrv_SetTimeoutResponse(soap, &r);
	if (soap_begin_recv(soap)
	 || soap_envelope_begin_in(soap)
	 || soap_recv_header(soap)
	 || soap_body_begin_in(soap))
		return soap_closesock(soap);
	soap_get_klsssrv_SetTimeoutResponse(soap, &r, "klsssrv-SetTimeoutResponse", "");
	if (soap->error)
	{	if (soap->error == SOAP_TAG_MISMATCH && soap->level == 2)
			return soap_recv_fault(soap);
		return soap_closesock(soap);
	}
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
#ifndef WITH_LEANER
	 || soap_resolve_attachments(soap)
#endif
	 || soap_end_recv(soap))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

SOAP_FMAC5 int SOAP_FMAC6 soap_call_klsssrv_GetNames(struct soap *soap, const char *URL, const char *action, wchar_t *wstrIdSSS, wchar_t *wstrProxyId, wchar_t *wstrName, wchar_t *wstrVersion, struct klsssrv_GetNamesResponse &r)
{
	struct klsssrv_GetNames soap_tmp_klsssrv_GetNames;
	soap->encodingStyle = NULL;
	soap_tmp_klsssrv_GetNames.wstrIdSSS=wstrIdSSS;
	soap_tmp_klsssrv_GetNames.wstrProxyId=wstrProxyId;
	soap_tmp_klsssrv_GetNames.wstrName=wstrName;
	soap_tmp_klsssrv_GetNames.wstrVersion=wstrVersion;
	soap_begin(soap);
	soap_serializeheader(soap);
	soap_serialize_klsssrv_GetNames(soap, &soap_tmp_klsssrv_GetNames);
	soap_begin_count(soap);
	if (soap->mode & SOAP_IO_LENGTH)
	{	soap_envelope_begin_out(soap);
		soap_putheader(soap);
		soap_body_begin_out(soap);
		soap_put_klsssrv_GetNames(soap, &soap_tmp_klsssrv_GetNames, "klsssrv-GetNames", "");
		soap_body_end_out(soap);
		soap_envelope_end_out(soap);
	}
	if (soap_connect(soap, URL, action)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put_klsssrv_GetNames(soap, &soap_tmp_klsssrv_GetNames, "klsssrv-GetNames", "")
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap_closesock(soap);
	soap_default_klsssrv_GetNamesResponse(soap, &r);
	if (soap_begin_recv(soap)
	 || soap_envelope_begin_in(soap)
	 || soap_recv_header(soap)
	 || soap_body_begin_in(soap))
		return soap_closesock(soap);
	soap_get_klsssrv_GetNamesResponse(soap, &r, "klsssrv-GetNamesResponse", "");
	if (soap->error)
	{	if (soap->error == SOAP_TAG_MISMATCH && soap->level == 2)
			return soap_recv_fault(soap);
		return soap_closesock(soap);
	}
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
#ifndef WITH_LEANER
	 || soap_resolve_attachments(soap)
#endif
	 || soap_end_recv(soap))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

SOAP_FMAC5 int SOAP_FMAC6 soap_call_klsssrv_AttrRead(struct soap *soap, const char *URL, const char *action, wchar_t *wstrIdSSS, wchar_t *wstrProxyId, wchar_t *wstrName, wchar_t *wstrVersion, wchar_t *wstrSection, wchar_t *wstrAttr, struct klsssrv_AttrReadResponse &r)
{
	struct klsssrv_AttrRead soap_tmp_klsssrv_AttrRead;
	soap->encodingStyle = NULL;
	soap_tmp_klsssrv_AttrRead.wstrIdSSS=wstrIdSSS;
	soap_tmp_klsssrv_AttrRead.wstrProxyId=wstrProxyId;
	soap_tmp_klsssrv_AttrRead.wstrName=wstrName;
	soap_tmp_klsssrv_AttrRead.wstrVersion=wstrVersion;
	soap_tmp_klsssrv_AttrRead.wstrSection=wstrSection;
	soap_tmp_klsssrv_AttrRead.wstrAttr=wstrAttr;
	soap_begin(soap);
	soap_serializeheader(soap);
	soap_serialize_klsssrv_AttrRead(soap, &soap_tmp_klsssrv_AttrRead);
	soap_begin_count(soap);
	if (soap->mode & SOAP_IO_LENGTH)
	{	soap_envelope_begin_out(soap);
		soap_putheader(soap);
		soap_body_begin_out(soap);
		soap_put_klsssrv_AttrRead(soap, &soap_tmp_klsssrv_AttrRead, "klsssrv-AttrRead", "");
		soap_body_end_out(soap);
		soap_envelope_end_out(soap);
	}
	if (soap_connect(soap, URL, action)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put_klsssrv_AttrRead(soap, &soap_tmp_klsssrv_AttrRead, "klsssrv-AttrRead", "")
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap_closesock(soap);
	soap_default_klsssrv_AttrReadResponse(soap, &r);
	if (soap_begin_recv(soap)
	 || soap_envelope_begin_in(soap)
	 || soap_recv_header(soap)
	 || soap_body_begin_in(soap))
		return soap_closesock(soap);
	soap_get_klsssrv_AttrReadResponse(soap, &r, "klsssrv-AttrReadResponse", "");
	if (soap->error)
	{	if (soap->error == SOAP_TAG_MISMATCH && soap->level == 2)
			return soap_recv_fault(soap);
		return soap_closesock(soap);
	}
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
#ifndef WITH_LEANER
	 || soap_resolve_attachments(soap)
#endif
	 || soap_end_recv(soap))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

SOAP_FMAC5 int SOAP_FMAC6 soap_call_klagent_StartTaskStorageTask(struct soap *soap, const char *URL, const char *action, wchar_t *idTask, wchar_t *luid, long lTimeout, struct klagent_StartTaskStorageTaskResponse &r)
{
	struct klagent_StartTaskStorageTask soap_tmp_klagent_StartTaskStorageTask;
	soap->encodingStyle = NULL;
	soap_tmp_klagent_StartTaskStorageTask.idTask=idTask;
	soap_tmp_klagent_StartTaskStorageTask.luid=luid;
	soap_tmp_klagent_StartTaskStorageTask.lTimeout=lTimeout;
	soap_begin(soap);
	soap_serializeheader(soap);
	soap_serialize_klagent_StartTaskStorageTask(soap, &soap_tmp_klagent_StartTaskStorageTask);
	soap_begin_count(soap);
	if (soap->mode & SOAP_IO_LENGTH)
	{	soap_envelope_begin_out(soap);
		soap_putheader(soap);
		soap_body_begin_out(soap);
		soap_put_klagent_StartTaskStorageTask(soap, &soap_tmp_klagent_StartTaskStorageTask, "klagent-StartTaskStorageTask", "");
		soap_body_end_out(soap);
		soap_envelope_end_out(soap);
	}
	if (soap_connect(soap, URL, action)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put_klagent_StartTaskStorageTask(soap, &soap_tmp_klagent_StartTaskStorageTask, "klagent-StartTaskStorageTask", "")
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap_closesock(soap);
	soap_default_klagent_StartTaskStorageTaskResponse(soap, &r);
	if (soap_begin_recv(soap)
	 || soap_envelope_begin_in(soap)
	 || soap_recv_header(soap)
	 || soap_body_begin_in(soap))
		return soap_closesock(soap);
	soap_get_klagent_StartTaskStorageTaskResponse(soap, &r, "klagent-StartTaskStorageTaskResponse", "");
	if (soap->error)
	{	if (soap->error == SOAP_TAG_MISMATCH && soap->level == 2)
			return soap_recv_fault(soap);
		return soap_closesock(soap);
	}
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
#ifndef WITH_LEANER
	 || soap_resolve_attachments(soap)
#endif
	 || soap_end_recv(soap))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

SOAP_FMAC5 int SOAP_FMAC6 soap_call_klagent_StartComponentEx(struct soap *soap, const char *URL, const char *action, SOAPComponentId componentId, param__params startParams, wchar_t *asyncId, long flags, long asyncTimeout, long timeoutStop, long logonType, wchar_t *user, wchar_t *domain, wchar_t *password, param__params extraInParams, struct klagent_StartComponentExResponse &r)
{
	struct klagent_StartComponentEx soap_tmp_klagent_StartComponentEx;
	soap->encodingStyle = NULL;
	soap_tmp_klagent_StartComponentEx.componentId=componentId;
	soap_tmp_klagent_StartComponentEx.startParams=startParams;
	soap_tmp_klagent_StartComponentEx.asyncId=asyncId;
	soap_tmp_klagent_StartComponentEx.flags=flags;
	soap_tmp_klagent_StartComponentEx.asyncTimeout=asyncTimeout;
	soap_tmp_klagent_StartComponentEx.timeoutStop=timeoutStop;
	soap_tmp_klagent_StartComponentEx.logonType=logonType;
	soap_tmp_klagent_StartComponentEx.user=user;
	soap_tmp_klagent_StartComponentEx.domain=domain;
	soap_tmp_klagent_StartComponentEx.password=password;
	soap_tmp_klagent_StartComponentEx.extraInParams=extraInParams;
	soap_begin(soap);
	soap_serializeheader(soap);
	soap_serialize_klagent_StartComponentEx(soap, &soap_tmp_klagent_StartComponentEx);
	soap_begin_count(soap);
	if (soap->mode & SOAP_IO_LENGTH)
	{	soap_envelope_begin_out(soap);
		soap_putheader(soap);
		soap_body_begin_out(soap);
		soap_put_klagent_StartComponentEx(soap, &soap_tmp_klagent_StartComponentEx, "klagent-StartComponentEx", "");
		soap_body_end_out(soap);
		soap_envelope_end_out(soap);
	}
	if (soap_connect(soap, URL, action)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put_klagent_StartComponentEx(soap, &soap_tmp_klagent_StartComponentEx, "klagent-StartComponentEx", "")
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap_closesock(soap);
	soap_default_klagent_StartComponentExResponse(soap, &r);
	if (soap_begin_recv(soap)
	 || soap_envelope_begin_in(soap)
	 || soap_recv_header(soap)
	 || soap_body_begin_in(soap))
		return soap_closesock(soap);
	soap_get_klagent_StartComponentExResponse(soap, &r, "klagent-StartComponentExResponse", "");
	if (soap->error)
	{	if (soap->error == SOAP_TAG_MISMATCH && soap->level == 2)
			return soap_recv_fault(soap);
		return soap_closesock(soap);
	}
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
#ifndef WITH_LEANER
	 || soap_resolve_attachments(soap)
#endif
	 || soap_end_recv(soap))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

SOAP_FMAC5 int SOAP_FMAC6 soap_call_klagent_GetStartedComponentsList(struct soap *soap, const char *URL, const char *action, SOAPComponentId filter, struct klagent_GetStartedComponentsListResponse &r)
{
	struct klagent_GetStartedComponentsList soap_tmp_klagent_GetStartedComponentsList;
	soap->encodingStyle = NULL;
	soap_tmp_klagent_GetStartedComponentsList.filter=filter;
	soap_begin(soap);
	soap_serializeheader(soap);
	soap_serialize_klagent_GetStartedComponentsList(soap, &soap_tmp_klagent_GetStartedComponentsList);
	soap_begin_count(soap);
	if (soap->mode & SOAP_IO_LENGTH)
	{	soap_envelope_begin_out(soap);
		soap_putheader(soap);
		soap_body_begin_out(soap);
		soap_put_klagent_GetStartedComponentsList(soap, &soap_tmp_klagent_GetStartedComponentsList, "klagent-GetStartedComponentsList", "");
		soap_body_end_out(soap);
		soap_envelope_end_out(soap);
	}
	if (soap_connect(soap, URL, action)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put_klagent_GetStartedComponentsList(soap, &soap_tmp_klagent_GetStartedComponentsList, "klagent-GetStartedComponentsList", "")
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap_closesock(soap);
	soap_default_klagent_GetStartedComponentsListResponse(soap, &r);
	if (soap_begin_recv(soap)
	 || soap_envelope_begin_in(soap)
	 || soap_recv_header(soap)
	 || soap_body_begin_in(soap))
		return soap_closesock(soap);
	soap_get_klagent_GetStartedComponentsListResponse(soap, &r, "klagent-GetStartedComponentsListResponse", "");
	if (soap->error)
	{	if (soap->error == SOAP_TAG_MISMATCH && soap->level == 2)
			return soap_recv_fault(soap);
		return soap_closesock(soap);
	}
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
#ifndef WITH_LEANER
	 || soap_resolve_attachments(soap)
#endif
	 || soap_end_recv(soap))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

SOAP_FMAC5 int SOAP_FMAC6 soap_call_klagent_IsComponentStarted(struct soap *soap, const char *URL, const char *action, SOAPComponentId componentId, struct klagent_IsComponentStartedResponse &r)
{
	struct klagent_IsComponentStarted soap_tmp_klagent_IsComponentStarted;
	soap->encodingStyle = NULL;
	soap_tmp_klagent_IsComponentStarted.componentId=componentId;
	soap_begin(soap);
	soap_serializeheader(soap);
	soap_serialize_klagent_IsComponentStarted(soap, &soap_tmp_klagent_IsComponentStarted);
	soap_begin_count(soap);
	if (soap->mode & SOAP_IO_LENGTH)
	{	soap_envelope_begin_out(soap);
		soap_putheader(soap);
		soap_body_begin_out(soap);
		soap_put_klagent_IsComponentStarted(soap, &soap_tmp_klagent_IsComponentStarted, "klagent-IsComponentStarted", "");
		soap_body_end_out(soap);
		soap_envelope_end_out(soap);
	}
	if (soap_connect(soap, URL, action)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put_klagent_IsComponentStarted(soap, &soap_tmp_klagent_IsComponentStarted, "klagent-IsComponentStarted", "")
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap_closesock(soap);
	soap_default_klagent_IsComponentStartedResponse(soap, &r);
	if (soap_begin_recv(soap)
	 || soap_envelope_begin_in(soap)
	 || soap_recv_header(soap)
	 || soap_body_begin_in(soap))
		return soap_closesock(soap);
	soap_get_klagent_IsComponentStartedResponse(soap, &r, "klagent-IsComponentStartedResponse", "");
	if (soap->error)
	{	if (soap->error == SOAP_TAG_MISMATCH && soap->level == 2)
			return soap_recv_fault(soap);
		return soap_closesock(soap);
	}
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
#ifndef WITH_LEANER
	 || soap_resolve_attachments(soap)
#endif
	 || soap_end_recv(soap))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

SOAP_FMAC5 int SOAP_FMAC6 soap_call_klagent_GetComponentStartParameters(struct soap *soap, const char *URL, const char *action, SOAPComponentId componentId, struct klagent_GetComponentStartParametersResponse &r)
{
	struct klagent_GetComponentStartParameters soap_tmp_klagent_GetComponentStartParameters;
	soap->encodingStyle = NULL;
	soap_tmp_klagent_GetComponentStartParameters.componentId=componentId;
	soap_begin(soap);
	soap_serializeheader(soap);
	soap_serialize_klagent_GetComponentStartParameters(soap, &soap_tmp_klagent_GetComponentStartParameters);
	soap_begin_count(soap);
	if (soap->mode & SOAP_IO_LENGTH)
	{	soap_envelope_begin_out(soap);
		soap_putheader(soap);
		soap_body_begin_out(soap);
		soap_put_klagent_GetComponentStartParameters(soap, &soap_tmp_klagent_GetComponentStartParameters, "klagent-GetComponentStartParameters", "");
		soap_body_end_out(soap);
		soap_envelope_end_out(soap);
	}
	if (soap_connect(soap, URL, action)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put_klagent_GetComponentStartParameters(soap, &soap_tmp_klagent_GetComponentStartParameters, "klagent-GetComponentStartParameters", "")
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap_closesock(soap);
	soap_default_klagent_GetComponentStartParametersResponse(soap, &r);
	if (soap_begin_recv(soap)
	 || soap_envelope_begin_in(soap)
	 || soap_recv_header(soap)
	 || soap_body_begin_in(soap))
		return soap_closesock(soap);
	soap_get_klagent_GetComponentStartParametersResponse(soap, &r, "klagent-GetComponentStartParametersResponse", "");
	if (soap->error)
	{	if (soap->error == SOAP_TAG_MISMATCH && soap->level == 2)
			return soap_recv_fault(soap);
		return soap_closesock(soap);
	}
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
#ifndef WITH_LEANER
	 || soap_resolve_attachments(soap)
#endif
	 || soap_end_recv(soap))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

SOAP_FMAC5 int SOAP_FMAC6 soap_call_klagent_GetComponentPort(struct soap *soap, const char *URL, const char *action, SOAPComponentId componentId, struct klagent_GetComponentPortResponse &r)
{
	struct klagent_GetComponentPort soap_tmp_klagent_GetComponentPort;
	soap->encodingStyle = NULL;
	soap_tmp_klagent_GetComponentPort.componentId=componentId;
	soap_begin(soap);
	soap_serializeheader(soap);
	soap_serialize_klagent_GetComponentPort(soap, &soap_tmp_klagent_GetComponentPort);
	soap_begin_count(soap);
	if (soap->mode & SOAP_IO_LENGTH)
	{	soap_envelope_begin_out(soap);
		soap_putheader(soap);
		soap_body_begin_out(soap);
		soap_put_klagent_GetComponentPort(soap, &soap_tmp_klagent_GetComponentPort, "klagent-GetComponentPort", "");
		soap_body_end_out(soap);
		soap_envelope_end_out(soap);
	}
	if (soap_connect(soap, URL, action)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put_klagent_GetComponentPort(soap, &soap_tmp_klagent_GetComponentPort, "klagent-GetComponentPort", "")
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap_closesock(soap);
	soap_default_klagent_GetComponentPortResponse(soap, &r);
	if (soap_begin_recv(soap)
	 || soap_envelope_begin_in(soap)
	 || soap_recv_header(soap)
	 || soap_body_begin_in(soap))
		return soap_closesock(soap);
	soap_get_klagent_GetComponentPortResponse(soap, &r, "klagent-GetComponentPortResponse", "");
	if (soap->error)
	{	if (soap->error == SOAP_TAG_MISMATCH && soap->level == 2)
			return soap_recv_fault(soap);
		return soap_closesock(soap);
	}
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
#ifndef WITH_LEANER
	 || soap_resolve_attachments(soap)
#endif
	 || soap_end_recv(soap))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

SOAP_FMAC5 int SOAP_FMAC6 soap_call_klevprop_ResetIterator(struct soap *soap, const char *URL, const char *action, long type, param__params paramIteratorDescr, klevprop_wstring_array fields, klevprop_field_order_array fields_to_order, long lifetime, struct klevprop_ResetIteratorResponse &r)
{
	struct klevprop_ResetIterator soap_tmp_klevprop_ResetIterator;
	soap->encodingStyle = NULL;
	soap_tmp_klevprop_ResetIterator.type=type;
	soap_tmp_klevprop_ResetIterator.paramIteratorDescr=paramIteratorDescr;
	soap_tmp_klevprop_ResetIterator.fields=fields;
	soap_tmp_klevprop_ResetIterator.fields_to_order=fields_to_order;
	soap_tmp_klevprop_ResetIterator.lifetime=lifetime;
	soap_begin(soap);
	soap_serializeheader(soap);
	soap_serialize_klevprop_ResetIterator(soap, &soap_tmp_klevprop_ResetIterator);
	soap_begin_count(soap);
	if (soap->mode & SOAP_IO_LENGTH)
	{	soap_envelope_begin_out(soap);
		soap_putheader(soap);
		soap_body_begin_out(soap);
		soap_put_klevprop_ResetIterator(soap, &soap_tmp_klevprop_ResetIterator, "klevprop-ResetIterator", "");
		soap_body_end_out(soap);
		soap_envelope_end_out(soap);
	}
	if (soap_connect(soap, URL, action)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put_klevprop_ResetIterator(soap, &soap_tmp_klevprop_ResetIterator, "klevprop-ResetIterator", "")
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap_closesock(soap);
	soap_default_klevprop_ResetIteratorResponse(soap, &r);
	if (soap_begin_recv(soap)
	 || soap_envelope_begin_in(soap)
	 || soap_recv_header(soap)
	 || soap_body_begin_in(soap))
		return soap_closesock(soap);
	soap_get_klevprop_ResetIteratorResponse(soap, &r, "klevprop-ResetIteratorResponse", "");
	if (soap->error)
	{	if (soap->error == SOAP_TAG_MISMATCH && soap->level == 2)
			return soap_recv_fault(soap);
		return soap_closesock(soap);
	}
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
#ifndef WITH_LEANER
	 || soap_resolve_attachments(soap)
#endif
	 || soap_end_recv(soap))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

SOAP_FMAC5 int SOAP_FMAC6 soap_call_klevprop_GetRecordCount(struct soap *soap, const char *URL, const char *action, wchar_t *iteratorId, struct klevprop_GetRecordCountResponse &r)
{
	struct klevprop_GetRecordCount soap_tmp_klevprop_GetRecordCount;
	soap->encodingStyle = NULL;
	soap_tmp_klevprop_GetRecordCount.iteratorId=iteratorId;
	soap_begin(soap);
	soap_serializeheader(soap);
	soap_serialize_klevprop_GetRecordCount(soap, &soap_tmp_klevprop_GetRecordCount);
	soap_begin_count(soap);
	if (soap->mode & SOAP_IO_LENGTH)
	{	soap_envelope_begin_out(soap);
		soap_putheader(soap);
		soap_body_begin_out(soap);
		soap_put_klevprop_GetRecordCount(soap, &soap_tmp_klevprop_GetRecordCount, "klevprop-GetRecordCount", "");
		soap_body_end_out(soap);
		soap_envelope_end_out(soap);
	}
	if (soap_connect(soap, URL, action)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put_klevprop_GetRecordCount(soap, &soap_tmp_klevprop_GetRecordCount, "klevprop-GetRecordCount", "")
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap_closesock(soap);
	soap_default_klevprop_GetRecordCountResponse(soap, &r);
	if (soap_begin_recv(soap)
	 || soap_envelope_begin_in(soap)
	 || soap_recv_header(soap)
	 || soap_body_begin_in(soap))
		return soap_closesock(soap);
	soap_get_klevprop_GetRecordCountResponse(soap, &r, "klevprop-GetRecordCountResponse", "");
	if (soap->error)
	{	if (soap->error == SOAP_TAG_MISMATCH && soap->level == 2)
			return soap_recv_fault(soap);
		return soap_closesock(soap);
	}
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
#ifndef WITH_LEANER
	 || soap_resolve_attachments(soap)
#endif
	 || soap_end_recv(soap))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

SOAP_FMAC5 int SOAP_FMAC6 soap_call_klevprop_GetRecordRange(struct soap *soap, const char *URL, const char *action, wchar_t *iteratorId, long nStart, long nEnd, struct klevprop_GetRecordRangeResponse &r)
{
	struct klevprop_GetRecordRange soap_tmp_klevprop_GetRecordRange;
	soap->encodingStyle = NULL;
	soap_tmp_klevprop_GetRecordRange.iteratorId=iteratorId;
	soap_tmp_klevprop_GetRecordRange.nStart=nStart;
	soap_tmp_klevprop_GetRecordRange.nEnd=nEnd;
	soap_begin(soap);
	soap_serializeheader(soap);
	soap_serialize_klevprop_GetRecordRange(soap, &soap_tmp_klevprop_GetRecordRange);
	soap_begin_count(soap);
	if (soap->mode & SOAP_IO_LENGTH)
	{	soap_envelope_begin_out(soap);
		soap_putheader(soap);
		soap_body_begin_out(soap);
		soap_put_klevprop_GetRecordRange(soap, &soap_tmp_klevprop_GetRecordRange, "klevprop-GetRecordRange", "");
		soap_body_end_out(soap);
		soap_envelope_end_out(soap);
	}
	if (soap_connect(soap, URL, action)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put_klevprop_GetRecordRange(soap, &soap_tmp_klevprop_GetRecordRange, "klevprop-GetRecordRange", "")
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap_closesock(soap);
	soap_default_klevprop_GetRecordRangeResponse(soap, &r);
	if (soap_begin_recv(soap)
	 || soap_envelope_begin_in(soap)
	 || soap_recv_header(soap)
	 || soap_body_begin_in(soap))
		return soap_closesock(soap);
	soap_get_klevprop_GetRecordRangeResponse(soap, &r, "klevprop-GetRecordRangeResponse", "");
	if (soap->error)
	{	if (soap->error == SOAP_TAG_MISMATCH && soap->level == 2)
			return soap_recv_fault(soap);
		return soap_closesock(soap);
	}
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
#ifndef WITH_LEANER
	 || soap_resolve_attachments(soap)
#endif
	 || soap_end_recv(soap))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

SOAP_FMAC5 int SOAP_FMAC6 soap_call_klevprop_FindRecordByFirstChars(struct soap *soap, const char *URL, const char *action, wchar_t *iteratorId, wchar_t *wstrFieldToSearch, wchar_t *wstrFirstChars, struct klevprop_FindRecordByFirstCharsResponse &r)
{
	struct klevprop_FindRecordByFirstChars soap_tmp_klevprop_FindRecordByFirstChars;
	soap->encodingStyle = NULL;
	soap_tmp_klevprop_FindRecordByFirstChars.iteratorId=iteratorId;
	soap_tmp_klevprop_FindRecordByFirstChars.wstrFieldToSearch=wstrFieldToSearch;
	soap_tmp_klevprop_FindRecordByFirstChars.wstrFirstChars=wstrFirstChars;
	soap_begin(soap);
	soap_serializeheader(soap);
	soap_serialize_klevprop_FindRecordByFirstChars(soap, &soap_tmp_klevprop_FindRecordByFirstChars);
	soap_begin_count(soap);
	if (soap->mode & SOAP_IO_LENGTH)
	{	soap_envelope_begin_out(soap);
		soap_putheader(soap);
		soap_body_begin_out(soap);
		soap_put_klevprop_FindRecordByFirstChars(soap, &soap_tmp_klevprop_FindRecordByFirstChars, "klevprop-FindRecordByFirstChars", "");
		soap_body_end_out(soap);
		soap_envelope_end_out(soap);
	}
	if (soap_connect(soap, URL, action)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put_klevprop_FindRecordByFirstChars(soap, &soap_tmp_klevprop_FindRecordByFirstChars, "klevprop-FindRecordByFirstChars", "")
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap_closesock(soap);
	soap_default_klevprop_FindRecordByFirstCharsResponse(soap, &r);
	if (soap_begin_recv(soap)
	 || soap_envelope_begin_in(soap)
	 || soap_recv_header(soap)
	 || soap_body_begin_in(soap))
		return soap_closesock(soap);
	soap_get_klevprop_FindRecordByFirstCharsResponse(soap, &r, "klevprop-FindRecordByFirstCharsResponse", "");
	if (soap->error)
	{	if (soap->error == SOAP_TAG_MISMATCH && soap->level == 2)
			return soap_recv_fault(soap);
		return soap_closesock(soap);
	}
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
#ifndef WITH_LEANER
	 || soap_resolve_attachments(soap)
#endif
	 || soap_end_recv(soap))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

SOAP_FMAC5 int SOAP_FMAC6 soap_call_klevprop_DeleteProperties(struct soap *soap, const char *URL, const char *action, klevprop_int_array id_array, struct klevprop_DeletePropertiesResponse &r)
{
	struct klevprop_DeleteProperties soap_tmp_klevprop_DeleteProperties;
	soap->encodingStyle = NULL;
	soap_tmp_klevprop_DeleteProperties.id_array=id_array;
	soap_begin(soap);
	soap_serializeheader(soap);
	soap_serialize_klevprop_DeleteProperties(soap, &soap_tmp_klevprop_DeleteProperties);
	soap_begin_count(soap);
	if (soap->mode & SOAP_IO_LENGTH)
	{	soap_envelope_begin_out(soap);
		soap_putheader(soap);
		soap_body_begin_out(soap);
		soap_put_klevprop_DeleteProperties(soap, &soap_tmp_klevprop_DeleteProperties, "klevprop-DeleteProperties", "");
		soap_body_end_out(soap);
		soap_envelope_end_out(soap);
	}
	if (soap_connect(soap, URL, action)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put_klevprop_DeleteProperties(soap, &soap_tmp_klevprop_DeleteProperties, "klevprop-DeleteProperties", "")
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap_closesock(soap);
	soap_default_klevprop_DeletePropertiesResponse(soap, &r);
	if (soap_begin_recv(soap)
	 || soap_envelope_begin_in(soap)
	 || soap_recv_header(soap)
	 || soap_body_begin_in(soap))
		return soap_closesock(soap);
	soap_get_klevprop_DeletePropertiesResponse(soap, &r, "klevprop-DeletePropertiesResponse", "");
	if (soap->error)
	{	if (soap->error == SOAP_TAG_MISMATCH && soap->level == 2)
			return soap_recv_fault(soap);
		return soap_closesock(soap);
	}
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
#ifndef WITH_LEANER
	 || soap_resolve_attachments(soap)
#endif
	 || soap_end_recv(soap))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

SOAP_FMAC5 int SOAP_FMAC6 soap_call_klevprop_InitiateDelete(struct soap *soap, const char *URL, const char *action, param__params paramSettings, struct klevprop_InitiateDeleteResponse &r)
{
	struct klevprop_InitiateDelete soap_tmp_klevprop_InitiateDelete;
	soap->encodingStyle = NULL;
	soap_tmp_klevprop_InitiateDelete.paramSettings=paramSettings;
	soap_begin(soap);
	soap_serializeheader(soap);
	soap_serialize_klevprop_InitiateDelete(soap, &soap_tmp_klevprop_InitiateDelete);
	soap_begin_count(soap);
	if (soap->mode & SOAP_IO_LENGTH)
	{	soap_envelope_begin_out(soap);
		soap_putheader(soap);
		soap_body_begin_out(soap);
		soap_put_klevprop_InitiateDelete(soap, &soap_tmp_klevprop_InitiateDelete, "klevprop-InitiateDelete", "");
		soap_body_end_out(soap);
		soap_envelope_end_out(soap);
	}
	if (soap_connect(soap, URL, action)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put_klevprop_InitiateDelete(soap, &soap_tmp_klevprop_InitiateDelete, "klevprop-InitiateDelete", "")
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap_closesock(soap);
	soap_default_klevprop_InitiateDeleteResponse(soap, &r);
	if (soap_begin_recv(soap)
	 || soap_envelope_begin_in(soap)
	 || soap_recv_header(soap)
	 || soap_body_begin_in(soap))
		return soap_closesock(soap);
	soap_get_klevprop_InitiateDeleteResponse(soap, &r, "klevprop-InitiateDeleteResponse", "");
	if (soap->error)
	{	if (soap->error == SOAP_TAG_MISMATCH && soap->level == 2)
			return soap_recv_fault(soap);
		return soap_closesock(soap);
	}
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
#ifndef WITH_LEANER
	 || soap_resolve_attachments(soap)
#endif
	 || soap_end_recv(soap))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

SOAP_FMAC5 int SOAP_FMAC6 soap_call_klevprop_CancelDelete(struct soap *soap, const char *URL, const char *action, param__params paramSettings, struct klevprop_CancelDeleteResponse &r)
{
	struct klevprop_CancelDelete soap_tmp_klevprop_CancelDelete;
	soap->encodingStyle = NULL;
	soap_tmp_klevprop_CancelDelete.paramSettings=paramSettings;
	soap_begin(soap);
	soap_serializeheader(soap);
	soap_serialize_klevprop_CancelDelete(soap, &soap_tmp_klevprop_CancelDelete);
	soap_begin_count(soap);
	if (soap->mode & SOAP_IO_LENGTH)
	{	soap_envelope_begin_out(soap);
		soap_putheader(soap);
		soap_body_begin_out(soap);
		soap_put_klevprop_CancelDelete(soap, &soap_tmp_klevprop_CancelDelete, "klevprop-CancelDelete", "");
		soap_body_end_out(soap);
		soap_envelope_end_out(soap);
	}
	if (soap_connect(soap, URL, action)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put_klevprop_CancelDelete(soap, &soap_tmp_klevprop_CancelDelete, "klevprop-CancelDelete", "")
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap_closesock(soap);
	soap_default_klevprop_CancelDeleteResponse(soap, &r);
	if (soap_begin_recv(soap)
	 || soap_envelope_begin_in(soap)
	 || soap_recv_header(soap)
	 || soap_body_begin_in(soap))
		return soap_closesock(soap);
	soap_get_klevprop_CancelDeleteResponse(soap, &r, "klevprop-CancelDeleteResponse", "");
	if (soap->error)
	{	if (soap->error == SOAP_TAG_MISMATCH && soap->level == 2)
			return soap_recv_fault(soap);
		return soap_closesock(soap);
	}
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
#ifndef WITH_LEANER
	 || soap_resolve_attachments(soap)
#endif
	 || soap_end_recv(soap))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

SOAP_FMAC5 int SOAP_FMAC6 soap_call_klevprop_ReleaseIterator(struct soap *soap, const char *URL, const char *action, wchar_t *iteratorId, struct klevprop_ReleaseIteratorResponse &r)
{
	struct klevprop_ReleaseIterator soap_tmp_klevprop_ReleaseIterator;
	soap->encodingStyle = NULL;
	soap_tmp_klevprop_ReleaseIterator.iteratorId=iteratorId;
	soap_begin(soap);
	soap_serializeheader(soap);
	soap_serialize_klevprop_ReleaseIterator(soap, &soap_tmp_klevprop_ReleaseIterator);
	soap_begin_count(soap);
	if (soap->mode & SOAP_IO_LENGTH)
	{	soap_envelope_begin_out(soap);
		soap_putheader(soap);
		soap_body_begin_out(soap);
		soap_put_klevprop_ReleaseIterator(soap, &soap_tmp_klevprop_ReleaseIterator, "klevprop-ReleaseIterator", "");
		soap_body_end_out(soap);
		soap_envelope_end_out(soap);
	}
	if (soap_connect(soap, URL, action)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put_klevprop_ReleaseIterator(soap, &soap_tmp_klevprop_ReleaseIterator, "klevprop-ReleaseIterator", "")
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap_closesock(soap);
	soap_default_klevprop_ReleaseIteratorResponse(soap, &r);
	if (soap_begin_recv(soap)
	 || soap_envelope_begin_in(soap)
	 || soap_recv_header(soap)
	 || soap_body_begin_in(soap))
		return soap_closesock(soap);
	soap_get_klevprop_ReleaseIteratorResponse(soap, &r, "klevprop-ReleaseIteratorResponse", "");
	if (soap->error)
	{	if (soap->error == SOAP_TAG_MISMATCH && soap->level == 2)
			return soap_recv_fault(soap);
		return soap_closesock(soap);
	}
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
#ifndef WITH_LEANER
	 || soap_resolve_attachments(soap)
#endif
	 || soap_end_recv(soap))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

SOAP_FMAC5 int SOAP_FMAC6 soap_call_klevproc_Process(struct soap *soap, const char *URL, const char *action, param__params parEventInfoArray, wchar_t *deliveryId, wchar_t *domain, wchar_t *hostName, wchar_t *agentId, struct klevproc_ProcessResponse &r)
{
	struct klevproc_Process soap_tmp_klevproc_Process;
	soap->encodingStyle = NULL;
	soap_tmp_klevproc_Process.parEventInfoArray=parEventInfoArray;
	soap_tmp_klevproc_Process.deliveryId=deliveryId;
	soap_tmp_klevproc_Process.domain=domain;
	soap_tmp_klevproc_Process.hostName=hostName;
	soap_tmp_klevproc_Process.agentId=agentId;
	soap_begin(soap);
	soap_serializeheader(soap);
	soap_serialize_klevproc_Process(soap, &soap_tmp_klevproc_Process);
	soap_begin_count(soap);
	if (soap->mode & SOAP_IO_LENGTH)
	{	soap_envelope_begin_out(soap);
		soap_putheader(soap);
		soap_body_begin_out(soap);
		soap_put_klevproc_Process(soap, &soap_tmp_klevproc_Process, "klevproc-Process", "");
		soap_body_end_out(soap);
		soap_envelope_end_out(soap);
	}
	if (soap_connect(soap, URL, action)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put_klevproc_Process(soap, &soap_tmp_klevproc_Process, "klevproc-Process", "")
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap_closesock(soap);
	soap_default_klevproc_ProcessResponse(soap, &r);
	if (soap_begin_recv(soap)
	 || soap_envelope_begin_in(soap)
	 || soap_recv_header(soap)
	 || soap_body_begin_in(soap))
		return soap_closesock(soap);
	soap_get_klevproc_ProcessResponse(soap, &r, "klevproc-ProcessResponse", "");
	if (soap->error)
	{	if (soap->error == SOAP_TAG_MISMATCH && soap->level == 2)
			return soap_recv_fault(soap);
		return soap_closesock(soap);
	}
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
#ifndef WITH_LEANER
	 || soap_resolve_attachments(soap)
#endif
	 || soap_end_recv(soap))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

SOAP_FMAC5 int SOAP_FMAC6 soap_call_klevpnp_GetDefaultSettings(struct soap *soap, const char *URL, const char *action, void *_, struct klevpnp_GetDefaultSettingsResponse &r)
{
	struct klevpnp_GetDefaultSettings soap_tmp_klevpnp_GetDefaultSettings;
	soap->encodingStyle = NULL;
	soap_tmp_klevpnp_GetDefaultSettings._=_;
	soap_begin(soap);
	soap_serializeheader(soap);
	soap_serialize_klevpnp_GetDefaultSettings(soap, &soap_tmp_klevpnp_GetDefaultSettings);
	soap_begin_count(soap);
	if (soap->mode & SOAP_IO_LENGTH)
	{	soap_envelope_begin_out(soap);
		soap_putheader(soap);
		soap_body_begin_out(soap);
		soap_put_klevpnp_GetDefaultSettings(soap, &soap_tmp_klevpnp_GetDefaultSettings, "klevpnp-GetDefaultSettings", "");
		soap_body_end_out(soap);
		soap_envelope_end_out(soap);
	}
	if (soap_connect(soap, URL, action)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put_klevpnp_GetDefaultSettings(soap, &soap_tmp_klevpnp_GetDefaultSettings, "klevpnp-GetDefaultSettings", "")
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap_closesock(soap);
	soap_default_klevpnp_GetDefaultSettingsResponse(soap, &r);
	if (soap_begin_recv(soap)
	 || soap_envelope_begin_in(soap)
	 || soap_recv_header(soap)
	 || soap_body_begin_in(soap))
		return soap_closesock(soap);
	soap_get_klevpnp_GetDefaultSettingsResponse(soap, &r, "klevpnp-GetDefaultSettingsResponse", "");
	if (soap->error)
	{	if (soap->error == SOAP_TAG_MISMATCH && soap->level == 2)
			return soap_recv_fault(soap);
		return soap_closesock(soap);
	}
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
#ifndef WITH_LEANER
	 || soap_resolve_attachments(soap)
#endif
	 || soap_end_recv(soap))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

SOAP_FMAC5 int SOAP_FMAC6 soap_call_klevpnp_SetDefaultSettings(struct soap *soap, const char *URL, const char *action, param__params paramDefaultSettings, struct klevpnp_SetDefaultSettingsResponse &r)
{
	struct klevpnp_SetDefaultSettings soap_tmp_klevpnp_SetDefaultSettings;
	soap->encodingStyle = NULL;
	soap_tmp_klevpnp_SetDefaultSettings.paramDefaultSettings=paramDefaultSettings;
	soap_begin(soap);
	soap_serializeheader(soap);
	soap_serialize_klevpnp_SetDefaultSettings(soap, &soap_tmp_klevpnp_SetDefaultSettings);
	soap_begin_count(soap);
	if (soap->mode & SOAP_IO_LENGTH)
	{	soap_envelope_begin_out(soap);
		soap_putheader(soap);
		soap_body_begin_out(soap);
		soap_put_klevpnp_SetDefaultSettings(soap, &soap_tmp_klevpnp_SetDefaultSettings, "klevpnp-SetDefaultSettings", "");
		soap_body_end_out(soap);
		soap_envelope_end_out(soap);
	}
	if (soap_connect(soap, URL, action)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put_klevpnp_SetDefaultSettings(soap, &soap_tmp_klevpnp_SetDefaultSettings, "klevpnp-SetDefaultSettings", "")
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap_closesock(soap);
	soap_default_klevpnp_SetDefaultSettingsResponse(soap, &r);
	if (soap_begin_recv(soap)
	 || soap_envelope_begin_in(soap)
	 || soap_recv_header(soap)
	 || soap_body_begin_in(soap))
		return soap_closesock(soap);
	soap_get_klevpnp_SetDefaultSettingsResponse(soap, &r, "klevpnp-SetDefaultSettingsResponse", "");
	if (soap->error)
	{	if (soap->error == SOAP_TAG_MISMATCH && soap->level == 2)
			return soap_recv_fault(soap);
		return soap_closesock(soap);
	}
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
#ifndef WITH_LEANER
	 || soap_resolve_attachments(soap)
#endif
	 || soap_end_recv(soap))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

SOAP_FMAC5 int SOAP_FMAC6 soap_call_klevpnp_TestNotification(struct soap *soap, const char *URL, const char *action, param__params paramSettings, struct klevpnp_TestNotificationResponse &r)
{
	struct klevpnp_TestNotification soap_tmp_klevpnp_TestNotification;
	soap->encodingStyle = NULL;
	soap_tmp_klevpnp_TestNotification.paramSettings=paramSettings;
	soap_begin(soap);
	soap_serializeheader(soap);
	soap_serialize_klevpnp_TestNotification(soap, &soap_tmp_klevpnp_TestNotification);
	soap_begin_count(soap);
	if (soap->mode & SOAP_IO_LENGTH)
	{	soap_envelope_begin_out(soap);
		soap_putheader(soap);
		soap_body_begin_out(soap);
		soap_put_klevpnp_TestNotification(soap, &soap_tmp_klevpnp_TestNotification, "klevpnp-TestNotification", "");
		soap_body_end_out(soap);
		soap_envelope_end_out(soap);
	}
	if (soap_connect(soap, URL, action)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put_klevpnp_TestNotification(soap, &soap_tmp_klevpnp_TestNotification, "klevpnp-TestNotification", "")
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap_closesock(soap);
	soap_default_klevpnp_TestNotificationResponse(soap, &r);
	if (soap_begin_recv(soap)
	 || soap_envelope_begin_in(soap)
	 || soap_recv_header(soap)
	 || soap_body_begin_in(soap))
		return soap_closesock(soap);
	soap_get_klevpnp_TestNotificationResponse(soap, &r, "klevpnp-TestNotificationResponse", "");
	if (soap->error)
	{	if (soap->error == SOAP_TAG_MISMATCH && soap->level == 2)
			return soap_recv_fault(soap);
		return soap_closesock(soap);
	}
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
#ifndef WITH_LEANER
	 || soap_resolve_attachments(soap)
#endif
	 || soap_end_recv(soap))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

SOAP_FMAC5 int SOAP_FMAC6 soap_call_klevpnp_SetNotificationLimits(struct soap *soap, const char *URL, const char *action, param__params paramSettings, struct klevpnp_SetNotificationLimitsResponse &r)
{
	struct klevpnp_SetNotificationLimits soap_tmp_klevpnp_SetNotificationLimits;
	soap->encodingStyle = NULL;
	soap_tmp_klevpnp_SetNotificationLimits.paramSettings=paramSettings;
	soap_begin(soap);
	soap_serializeheader(soap);
	soap_serialize_klevpnp_SetNotificationLimits(soap, &soap_tmp_klevpnp_SetNotificationLimits);
	soap_begin_count(soap);
	if (soap->mode & SOAP_IO_LENGTH)
	{	soap_envelope_begin_out(soap);
		soap_putheader(soap);
		soap_body_begin_out(soap);
		soap_put_klevpnp_SetNotificationLimits(soap, &soap_tmp_klevpnp_SetNotificationLimits, "klevpnp-SetNotificationLimits", "");
		soap_body_end_out(soap);
		soap_envelope_end_out(soap);
	}
	if (soap_connect(soap, URL, action)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put_klevpnp_SetNotificationLimits(soap, &soap_tmp_klevpnp_SetNotificationLimits, "klevpnp-SetNotificationLimits", "")
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap_closesock(soap);
	soap_default_klevpnp_SetNotificationLimitsResponse(soap, &r);
	if (soap_begin_recv(soap)
	 || soap_envelope_begin_in(soap)
	 || soap_recv_header(soap)
	 || soap_body_begin_in(soap))
		return soap_closesock(soap);
	soap_get_klevpnp_SetNotificationLimitsResponse(soap, &r, "klevpnp-SetNotificationLimitsResponse", "");
	if (soap->error)
	{	if (soap->error == SOAP_TAG_MISMATCH && soap->level == 2)
			return soap_recv_fault(soap);
		return soap_closesock(soap);
	}
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
#ifndef WITH_LEANER
	 || soap_resolve_attachments(soap)
#endif
	 || soap_end_recv(soap))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

SOAP_FMAC5 int SOAP_FMAC6 soap_call_klevpnp_GetNotificationLimits(struct soap *soap, const char *URL, const char *action, void *_, struct klevpnp_GetNotificationLimitsResponse &r)
{
	struct klevpnp_GetNotificationLimits soap_tmp_klevpnp_GetNotificationLimits;
	soap->encodingStyle = NULL;
	soap_tmp_klevpnp_GetNotificationLimits._=_;
	soap_begin(soap);
	soap_serializeheader(soap);
	soap_serialize_klevpnp_GetNotificationLimits(soap, &soap_tmp_klevpnp_GetNotificationLimits);
	soap_begin_count(soap);
	if (soap->mode & SOAP_IO_LENGTH)
	{	soap_envelope_begin_out(soap);
		soap_putheader(soap);
		soap_body_begin_out(soap);
		soap_put_klevpnp_GetNotificationLimits(soap, &soap_tmp_klevpnp_GetNotificationLimits, "klevpnp-GetNotificationLimits", "");
		soap_body_end_out(soap);
		soap_envelope_end_out(soap);
	}
	if (soap_connect(soap, URL, action)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put_klevpnp_GetNotificationLimits(soap, &soap_tmp_klevpnp_GetNotificationLimits, "klevpnp-GetNotificationLimits", "")
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap_closesock(soap);
	soap_default_klevpnp_GetNotificationLimitsResponse(soap, &r);
	if (soap_begin_recv(soap)
	 || soap_envelope_begin_in(soap)
	 || soap_recv_header(soap)
	 || soap_body_begin_in(soap))
		return soap_closesock(soap);
	soap_get_klevpnp_GetNotificationLimitsResponse(soap, &r, "klevpnp-GetNotificationLimitsResponse", "");
	if (soap->error)
	{	if (soap->error == SOAP_TAG_MISMATCH && soap->level == 2)
			return soap_recv_fault(soap);
		return soap_closesock(soap);
	}
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
#ifndef WITH_LEANER
	 || soap_resolve_attachments(soap)
#endif
	 || soap_end_recv(soap))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

SOAP_FMAC5 int SOAP_FMAC6 soap_call_klevpnp_GetCommonProperties(struct soap *soap, const char *URL, const char *action, void *_, struct klevpnp_GetCommonPropertiesResponse &r)
{
	struct klevpnp_GetCommonProperties soap_tmp_klevpnp_GetCommonProperties;
	soap->encodingStyle = NULL;
	soap_tmp_klevpnp_GetCommonProperties._=_;
	soap_begin(soap);
	soap_serializeheader(soap);
	soap_serialize_klevpnp_GetCommonProperties(soap, &soap_tmp_klevpnp_GetCommonProperties);
	soap_begin_count(soap);
	if (soap->mode & SOAP_IO_LENGTH)
	{	soap_envelope_begin_out(soap);
		soap_putheader(soap);
		soap_body_begin_out(soap);
		soap_put_klevpnp_GetCommonProperties(soap, &soap_tmp_klevpnp_GetCommonProperties, "klevpnp-GetCommonProperties", "");
		soap_body_end_out(soap);
		soap_envelope_end_out(soap);
	}
	if (soap_connect(soap, URL, action)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put_klevpnp_GetCommonProperties(soap, &soap_tmp_klevpnp_GetCommonProperties, "klevpnp-GetCommonProperties", "")
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap_closesock(soap);
	soap_default_klevpnp_GetCommonPropertiesResponse(soap, &r);
	if (soap_begin_recv(soap)
	 || soap_envelope_begin_in(soap)
	 || soap_recv_header(soap)
	 || soap_body_begin_in(soap))
		return soap_closesock(soap);
	soap_get_klevpnp_GetCommonPropertiesResponse(soap, &r, "klevpnp-GetCommonPropertiesResponse", "");
	if (soap->error)
	{	if (soap->error == SOAP_TAG_MISMATCH && soap->level == 2)
			return soap_recv_fault(soap);
		return soap_closesock(soap);
	}
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
#ifndef WITH_LEANER
	 || soap_resolve_attachments(soap)
#endif
	 || soap_end_recv(soap))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

SOAP_FMAC5 int SOAP_FMAC6 soap_call_klevpnp_GetGroupProperties(struct soap *soap, const char *URL, const char *action, long nGroupId, struct klevpnp_GetGroupPropertiesResponse &r)
{
	struct klevpnp_GetGroupProperties soap_tmp_klevpnp_GetGroupProperties;
	soap->encodingStyle = NULL;
	soap_tmp_klevpnp_GetGroupProperties.nGroupId=nGroupId;
	soap_begin(soap);
	soap_serializeheader(soap);
	soap_serialize_klevpnp_GetGroupProperties(soap, &soap_tmp_klevpnp_GetGroupProperties);
	soap_begin_count(soap);
	if (soap->mode & SOAP_IO_LENGTH)
	{	soap_envelope_begin_out(soap);
		soap_putheader(soap);
		soap_body_begin_out(soap);
		soap_put_klevpnp_GetGroupProperties(soap, &soap_tmp_klevpnp_GetGroupProperties, "klevpnp-GetGroupProperties", "");
		soap_body_end_out(soap);
		soap_envelope_end_out(soap);
	}
	if (soap_connect(soap, URL, action)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put_klevpnp_GetGroupProperties(soap, &soap_tmp_klevpnp_GetGroupProperties, "klevpnp-GetGroupProperties", "")
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap_closesock(soap);
	soap_default_klevpnp_GetGroupPropertiesResponse(soap, &r);
	if (soap_begin_recv(soap)
	 || soap_envelope_begin_in(soap)
	 || soap_recv_header(soap)
	 || soap_body_begin_in(soap))
		return soap_closesock(soap);
	soap_get_klevpnp_GetGroupPropertiesResponse(soap, &r, "klevpnp-GetGroupPropertiesResponse", "");
	if (soap->error)
	{	if (soap->error == SOAP_TAG_MISMATCH && soap->level == 2)
			return soap_recv_fault(soap);
		return soap_closesock(soap);
	}
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
#ifndef WITH_LEANER
	 || soap_resolve_attachments(soap)
#endif
	 || soap_end_recv(soap))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

SOAP_FMAC5 int SOAP_FMAC6 soap_call_klevpnp_GetTaskProperties(struct soap *soap, const char *URL, const char *action, wchar_t *wstrTaskId, struct klevpnp_GetTaskPropertiesResponse &r)
{
	struct klevpnp_GetTaskProperties soap_tmp_klevpnp_GetTaskProperties;
	soap->encodingStyle = NULL;
	soap_tmp_klevpnp_GetTaskProperties.wstrTaskId=wstrTaskId;
	soap_begin(soap);
	soap_serializeheader(soap);
	soap_serialize_klevpnp_GetTaskProperties(soap, &soap_tmp_klevpnp_GetTaskProperties);
	soap_begin_count(soap);
	if (soap->mode & SOAP_IO_LENGTH)
	{	soap_envelope_begin_out(soap);
		soap_putheader(soap);
		soap_body_begin_out(soap);
		soap_put_klevpnp_GetTaskProperties(soap, &soap_tmp_klevpnp_GetTaskProperties, "klevpnp-GetTaskProperties", "");
		soap_body_end_out(soap);
		soap_envelope_end_out(soap);
	}
	if (soap_connect(soap, URL, action)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put_klevpnp_GetTaskProperties(soap, &soap_tmp_klevpnp_GetTaskProperties, "klevpnp-GetTaskProperties", "")
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap_closesock(soap);
	soap_default_klevpnp_GetTaskPropertiesResponse(soap, &r);
	if (soap_begin_recv(soap)
	 || soap_envelope_begin_in(soap)
	 || soap_recv_header(soap)
	 || soap_body_begin_in(soap))
		return soap_closesock(soap);
	soap_get_klevpnp_GetTaskPropertiesResponse(soap, &r, "klevpnp-GetTaskPropertiesResponse", "");
	if (soap->error)
	{	if (soap->error == SOAP_TAG_MISMATCH && soap->level == 2)
			return soap_recv_fault(soap);
		return soap_closesock(soap);
	}
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
#ifndef WITH_LEANER
	 || soap_resolve_attachments(soap)
#endif
	 || soap_end_recv(soap))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

SOAP_FMAC5 int SOAP_FMAC6 soap_call_klevpnp_SetCommonProperties(struct soap *soap, const char *URL, const char *action, klevpnp_notification_descr_array notificationDescrArray, struct klevpnp_SetCommonPropertiesResponse &r)
{
	struct klevpnp_SetCommonProperties soap_tmp_klevpnp_SetCommonProperties;
	soap->encodingStyle = NULL;
	soap_tmp_klevpnp_SetCommonProperties.notificationDescrArray=notificationDescrArray;
	soap_begin(soap);
	soap_serializeheader(soap);
	soap_serialize_klevpnp_SetCommonProperties(soap, &soap_tmp_klevpnp_SetCommonProperties);
	soap_begin_count(soap);
	if (soap->mode & SOAP_IO_LENGTH)
	{	soap_envelope_begin_out(soap);
		soap_putheader(soap);
		soap_body_begin_out(soap);
		soap_put_klevpnp_SetCommonProperties(soap, &soap_tmp_klevpnp_SetCommonProperties, "klevpnp-SetCommonProperties", "");
		soap_body_end_out(soap);
		soap_envelope_end_out(soap);
	}
	if (soap_connect(soap, URL, action)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put_klevpnp_SetCommonProperties(soap, &soap_tmp_klevpnp_SetCommonProperties, "klevpnp-SetCommonProperties", "")
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap_closesock(soap);
	soap_default_klevpnp_SetCommonPropertiesResponse(soap, &r);
	if (soap_begin_recv(soap)
	 || soap_envelope_begin_in(soap)
	 || soap_recv_header(soap)
	 || soap_body_begin_in(soap))
		return soap_closesock(soap);
	soap_get_klevpnp_SetCommonPropertiesResponse(soap, &r, "klevpnp-SetCommonPropertiesResponse", "");
	if (soap->error)
	{	if (soap->error == SOAP_TAG_MISMATCH && soap->level == 2)
			return soap_recv_fault(soap);
		return soap_closesock(soap);
	}
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
#ifndef WITH_LEANER
	 || soap_resolve_attachments(soap)
#endif
	 || soap_end_recv(soap))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

SOAP_FMAC5 int SOAP_FMAC6 soap_call_klevpnp_SetGroupProperties(struct soap *soap, const char *URL, const char *action, long nGroupId, klevpnp_notification_descr_array notificationDescrArray, struct klevpnp_SetGroupPropertiesResponse &r)
{
	struct klevpnp_SetGroupProperties soap_tmp_klevpnp_SetGroupProperties;
	soap->encodingStyle = NULL;
	soap_tmp_klevpnp_SetGroupProperties.nGroupId=nGroupId;
	soap_tmp_klevpnp_SetGroupProperties.notificationDescrArray=notificationDescrArray;
	soap_begin(soap);
	soap_serializeheader(soap);
	soap_serialize_klevpnp_SetGroupProperties(soap, &soap_tmp_klevpnp_SetGroupProperties);
	soap_begin_count(soap);
	if (soap->mode & SOAP_IO_LENGTH)
	{	soap_envelope_begin_out(soap);
		soap_putheader(soap);
		soap_body_begin_out(soap);
		soap_put_klevpnp_SetGroupProperties(soap, &soap_tmp_klevpnp_SetGroupProperties, "klevpnp-SetGroupProperties", "");
		soap_body_end_out(soap);
		soap_envelope_end_out(soap);
	}
	if (soap_connect(soap, URL, action)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put_klevpnp_SetGroupProperties(soap, &soap_tmp_klevpnp_SetGroupProperties, "klevpnp-SetGroupProperties", "")
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap_closesock(soap);
	soap_default_klevpnp_SetGroupPropertiesResponse(soap, &r);
	if (soap_begin_recv(soap)
	 || soap_envelope_begin_in(soap)
	 || soap_recv_header(soap)
	 || soap_body_begin_in(soap))
		return soap_closesock(soap);
	soap_get_klevpnp_SetGroupPropertiesResponse(soap, &r, "klevpnp-SetGroupPropertiesResponse", "");
	if (soap->error)
	{	if (soap->error == SOAP_TAG_MISMATCH && soap->level == 2)
			return soap_recv_fault(soap);
		return soap_closesock(soap);
	}
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
#ifndef WITH_LEANER
	 || soap_resolve_attachments(soap)
#endif
	 || soap_end_recv(soap))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

SOAP_FMAC5 int SOAP_FMAC6 soap_call_klevpnp_SetTaskProperties(struct soap *soap, const char *URL, const char *action, wchar_t *wstrTaskId, klevpnp_notification_descr_array notificationDescrArray, struct klevpnp_SetTaskPropertiesResponse &r)
{
	struct klevpnp_SetTaskProperties soap_tmp_klevpnp_SetTaskProperties;
	soap->encodingStyle = NULL;
	soap_tmp_klevpnp_SetTaskProperties.wstrTaskId=wstrTaskId;
	soap_tmp_klevpnp_SetTaskProperties.notificationDescrArray=notificationDescrArray;
	soap_begin(soap);
	soap_serializeheader(soap);
	soap_serialize_klevpnp_SetTaskProperties(soap, &soap_tmp_klevpnp_SetTaskProperties);
	soap_begin_count(soap);
	if (soap->mode & SOAP_IO_LENGTH)
	{	soap_envelope_begin_out(soap);
		soap_putheader(soap);
		soap_body_begin_out(soap);
		soap_put_klevpnp_SetTaskProperties(soap, &soap_tmp_klevpnp_SetTaskProperties, "klevpnp-SetTaskProperties", "");
		soap_body_end_out(soap);
		soap_envelope_end_out(soap);
	}
	if (soap_connect(soap, URL, action)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put_klevpnp_SetTaskProperties(soap, &soap_tmp_klevpnp_SetTaskProperties, "klevpnp-SetTaskProperties", "")
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap_closesock(soap);
	soap_default_klevpnp_SetTaskPropertiesResponse(soap, &r);
	if (soap_begin_recv(soap)
	 || soap_envelope_begin_in(soap)
	 || soap_recv_header(soap)
	 || soap_body_begin_in(soap))
		return soap_closesock(soap);
	soap_get_klevpnp_SetTaskPropertiesResponse(soap, &r, "klevpnp-SetTaskPropertiesResponse", "");
	if (soap->error)
	{	if (soap->error == SOAP_TAG_MISMATCH && soap->level == 2)
			return soap_recv_fault(soap);
		return soap_closesock(soap);
	}
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
#ifndef WITH_LEANER
	 || soap_resolve_attachments(soap)
#endif
	 || soap_end_recv(soap))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

SOAP_FMAC5 int SOAP_FMAC6 soap_call_klnag_RemoveStores(struct soap *soap, const char *URL, const char *action, struct klnag_StoresList stores, struct klnag_RemoveStoresResponse &r)
{
	struct klnag_RemoveStores soap_tmp_klnag_RemoveStores;
	soap->encodingStyle = NULL;
	soap_tmp_klnag_RemoveStores.stores=stores;
	soap_begin(soap);
	soap_serializeheader(soap);
	soap_serialize_klnag_RemoveStores(soap, &soap_tmp_klnag_RemoveStores);
	soap_begin_count(soap);
	if (soap->mode & SOAP_IO_LENGTH)
	{	soap_envelope_begin_out(soap);
		soap_putheader(soap);
		soap_body_begin_out(soap);
		soap_put_klnag_RemoveStores(soap, &soap_tmp_klnag_RemoveStores, "klnag-RemoveStores", "");
		soap_body_end_out(soap);
		soap_envelope_end_out(soap);
	}
	if (soap_connect(soap, URL, action)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put_klnag_RemoveStores(soap, &soap_tmp_klnag_RemoveStores, "klnag-RemoveStores", "")
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap_closesock(soap);
	soap_default_klnag_RemoveStoresResponse(soap, &r);
	if (soap_begin_recv(soap)
	 || soap_envelope_begin_in(soap)
	 || soap_recv_header(soap)
	 || soap_body_begin_in(soap))
		return soap_closesock(soap);
	soap_get_klnag_RemoveStoresResponse(soap, &r, "klnag-RemoveStoresResponse", "");
	if (soap->error)
	{	if (soap->error == SOAP_TAG_MISMATCH && soap->level == 2)
			return soap_recv_fault(soap);
		return soap_closesock(soap);
	}
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
#ifndef WITH_LEANER
	 || soap_resolve_attachments(soap)
#endif
	 || soap_end_recv(soap))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

SOAP_FMAC5 int SOAP_FMAC6 soap_call_klnag_StartNewIntegration(struct soap *soap, const char *URL, const char *action, wchar_t *hostid, struct klnag_StartNewIntegrationResponse &r)
{
	struct klnag_StartNewIntegration soap_tmp_klnag_StartNewIntegration;
	soap->encodingStyle = NULL;
	soap_tmp_klnag_StartNewIntegration.hostid=hostid;
	soap_begin(soap);
	soap_serializeheader(soap);
	soap_serialize_klnag_StartNewIntegration(soap, &soap_tmp_klnag_StartNewIntegration);
	soap_begin_count(soap);
	if (soap->mode & SOAP_IO_LENGTH)
	{	soap_envelope_begin_out(soap);
		soap_putheader(soap);
		soap_body_begin_out(soap);
		soap_put_klnag_StartNewIntegration(soap, &soap_tmp_klnag_StartNewIntegration, "klnag-StartNewIntegration", "");
		soap_body_end_out(soap);
		soap_envelope_end_out(soap);
	}
	if (soap_connect(soap, URL, action)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put_klnag_StartNewIntegration(soap, &soap_tmp_klnag_StartNewIntegration, "klnag-StartNewIntegration", "")
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap_closesock(soap);
	soap_default_klnag_StartNewIntegrationResponse(soap, &r);
	if (soap_begin_recv(soap)
	 || soap_envelope_begin_in(soap)
	 || soap_recv_header(soap)
	 || soap_body_begin_in(soap))
		return soap_closesock(soap);
	soap_get_klnag_StartNewIntegrationResponse(soap, &r, "klnag-StartNewIntegrationResponse", "");
	if (soap->error)
	{	if (soap->error == SOAP_TAG_MISMATCH && soap->level == 2)
			return soap_recv_fault(soap);
		return soap_closesock(soap);
	}
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
#ifndef WITH_LEANER
	 || soap_resolve_attachments(soap)
#endif
	 || soap_end_recv(soap))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

SOAP_FMAC5 int SOAP_FMAC6 soap_call_klnag_NotifySSChange(struct soap *soap, const char *URL, const char *action, wchar_t *product, wchar_t *version, wchar_t *section, long ss_type, struct klnag_NotifySSChangeResponse &r)
{
	struct klnag_NotifySSChange soap_tmp_klnag_NotifySSChange;
	soap->encodingStyle = NULL;
	soap_tmp_klnag_NotifySSChange.product=product;
	soap_tmp_klnag_NotifySSChange.version=version;
	soap_tmp_klnag_NotifySSChange.section=section;
	soap_tmp_klnag_NotifySSChange.ss_type=ss_type;
	soap_begin(soap);
	soap_serializeheader(soap);
	soap_serialize_klnag_NotifySSChange(soap, &soap_tmp_klnag_NotifySSChange);
	soap_begin_count(soap);
	if (soap->mode & SOAP_IO_LENGTH)
	{	soap_envelope_begin_out(soap);
		soap_putheader(soap);
		soap_body_begin_out(soap);
		soap_put_klnag_NotifySSChange(soap, &soap_tmp_klnag_NotifySSChange, "klnag-NotifySSChange", "");
		soap_body_end_out(soap);
		soap_envelope_end_out(soap);
	}
	if (soap_connect(soap, URL, action)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put_klnag_NotifySSChange(soap, &soap_tmp_klnag_NotifySSChange, "klnag-NotifySSChange", "")
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap_closesock(soap);
	soap_default_klnag_NotifySSChangeResponse(soap, &r);
	if (soap_begin_recv(soap)
	 || soap_envelope_begin_in(soap)
	 || soap_recv_header(soap)
	 || soap_body_begin_in(soap))
		return soap_closesock(soap);
	soap_get_klnag_NotifySSChangeResponse(soap, &r, "klnag-NotifySSChangeResponse", "");
	if (soap->error)
	{	if (soap->error == SOAP_TAG_MISMATCH && soap->level == 2)
			return soap_recv_fault(soap);
		return soap_closesock(soap);
	}
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
#ifndef WITH_LEANER
	 || soap_resolve_attachments(soap)
#endif
	 || soap_end_recv(soap))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

SOAP_FMAC5 int SOAP_FMAC6 soap_call_klnag_OnPing(struct soap *soap, const char *URL, const char *action, param__params info, struct klnag_OnPingResponse &r)
{
	struct klnag_OnPing soap_tmp_klnag_OnPing;
	soap->encodingStyle = NULL;
	soap_tmp_klnag_OnPing.info=info;
	soap_begin(soap);
	soap_serializeheader(soap);
	soap_serialize_klnag_OnPing(soap, &soap_tmp_klnag_OnPing);
	soap_begin_count(soap);
	if (soap->mode & SOAP_IO_LENGTH)
	{	soap_envelope_begin_out(soap);
		soap_putheader(soap);
		soap_body_begin_out(soap);
		soap_put_klnag_OnPing(soap, &soap_tmp_klnag_OnPing, "klnag-OnPing", "");
		soap_body_end_out(soap);
		soap_envelope_end_out(soap);
	}
	if (soap_connect(soap, URL, action)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put_klnag_OnPing(soap, &soap_tmp_klnag_OnPing, "klnag-OnPing", "")
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap_closesock(soap);
	soap_default_klnag_OnPingResponse(soap, &r);
	if (soap_begin_recv(soap)
	 || soap_envelope_begin_in(soap)
	 || soap_recv_header(soap)
	 || soap_body_begin_in(soap))
		return soap_closesock(soap);
	soap_get_klnag_OnPingResponse(soap, &r, "klnag-OnPingResponse", "");
	if (soap->error)
	{	if (soap->error == SOAP_TAG_MISMATCH && soap->level == 2)
			return soap_recv_fault(soap);
		return soap_closesock(soap);
	}
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
#ifndef WITH_LEANER
	 || soap_resolve_attachments(soap)
#endif
	 || soap_end_recv(soap))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

SOAP_FMAC5 int SOAP_FMAC6 soap_call_klnag_WatchdogPing(struct soap *soap, const char *URL, const char *action, struct klnag_WatchdogPingResponse &r)
{
	struct klnag_WatchdogPing soap_tmp_klnag_WatchdogPing;
	soap->encodingStyle = NULL;
	soap_begin(soap);
	soap_serializeheader(soap);
	soap_serialize_klnag_WatchdogPing(soap, &soap_tmp_klnag_WatchdogPing);
	soap_begin_count(soap);
	if (soap->mode & SOAP_IO_LENGTH)
	{	soap_envelope_begin_out(soap);
		soap_putheader(soap);
		soap_body_begin_out(soap);
		soap_put_klnag_WatchdogPing(soap, &soap_tmp_klnag_WatchdogPing, "klnag-WatchdogPing", "");
		soap_body_end_out(soap);
		soap_envelope_end_out(soap);
	}
	if (soap_connect(soap, URL, action)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put_klnag_WatchdogPing(soap, &soap_tmp_klnag_WatchdogPing, "klnag-WatchdogPing", "")
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap_closesock(soap);
	soap_default_klnag_WatchdogPingResponse(soap, &r);
	if (soap_begin_recv(soap)
	 || soap_envelope_begin_in(soap)
	 || soap_recv_header(soap)
	 || soap_body_begin_in(soap))
		return soap_closesock(soap);
	soap_get_klnag_WatchdogPingResponse(soap, &r, "klnag-WatchdogPingResponse", "");
	if (soap->error)
	{	if (soap->error == SOAP_TAG_MISMATCH && soap->level == 2)
			return soap_recv_fault(soap);
		return soap_closesock(soap);
	}
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
#ifndef WITH_LEANER
	 || soap_resolve_attachments(soap)
#endif
	 || soap_end_recv(soap))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

SOAP_FMAC5 int SOAP_FMAC6 soap_call_klnag_GetRunTimeInfo(struct soap *soap, const char *URL, const char *action, param__params filter, struct klnag_GetRunTimeInfoResponse &r)
{
	struct klnag_GetRunTimeInfo soap_tmp_klnag_GetRunTimeInfo;
	soap->encodingStyle = NULL;
	soap_tmp_klnag_GetRunTimeInfo.filter=filter;
	soap_begin(soap);
	soap_serializeheader(soap);
	soap_serialize_klnag_GetRunTimeInfo(soap, &soap_tmp_klnag_GetRunTimeInfo);
	soap_begin_count(soap);
	if (soap->mode & SOAP_IO_LENGTH)
	{	soap_envelope_begin_out(soap);
		soap_putheader(soap);
		soap_body_begin_out(soap);
		soap_put_klnag_GetRunTimeInfo(soap, &soap_tmp_klnag_GetRunTimeInfo, "klnag-GetRunTimeInfo", "");
		soap_body_end_out(soap);
		soap_envelope_end_out(soap);
	}
	if (soap_connect(soap, URL, action)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put_klnag_GetRunTimeInfo(soap, &soap_tmp_klnag_GetRunTimeInfo, "klnag-GetRunTimeInfo", "")
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap_closesock(soap);
	soap_default_klnag_GetRunTimeInfoResponse(soap, &r);
	if (soap_begin_recv(soap)
	 || soap_envelope_begin_in(soap)
	 || soap_recv_header(soap)
	 || soap_body_begin_in(soap))
		return soap_closesock(soap);
	soap_get_klnag_GetRunTimeInfoResponse(soap, &r, "klnag-GetRunTimeInfoResponse", "");
	if (soap->error)
	{	if (soap->error == SOAP_TAG_MISMATCH && soap->level == 2)
			return soap_recv_fault(soap);
		return soap_closesock(soap);
	}
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
#ifndef WITH_LEANER
	 || soap_resolve_attachments(soap)
#endif
	 || soap_end_recv(soap))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

SOAP_FMAC5 int SOAP_FMAC6 soap_call_klnag_GetStaticInfo(struct soap *soap, const char *URL, const char *action, param__params filter, struct klnag_GetStaticInfoResponse &r)
{
	struct klnag_GetStaticInfo soap_tmp_klnag_GetStaticInfo;
	soap->encodingStyle = NULL;
	soap_tmp_klnag_GetStaticInfo.filter=filter;
	soap_begin(soap);
	soap_serializeheader(soap);
	soap_serialize_klnag_GetStaticInfo(soap, &soap_tmp_klnag_GetStaticInfo);
	soap_begin_count(soap);
	if (soap->mode & SOAP_IO_LENGTH)
	{	soap_envelope_begin_out(soap);
		soap_putheader(soap);
		soap_body_begin_out(soap);
		soap_put_klnag_GetStaticInfo(soap, &soap_tmp_klnag_GetStaticInfo, "klnag-GetStaticInfo", "");
		soap_body_end_out(soap);
		soap_envelope_end_out(soap);
	}
	if (soap_connect(soap, URL, action)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put_klnag_GetStaticInfo(soap, &soap_tmp_klnag_GetStaticInfo, "klnag-GetStaticInfo", "")
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap_closesock(soap);
	soap_default_klnag_GetStaticInfoResponse(soap, &r);
	if (soap_begin_recv(soap)
	 || soap_envelope_begin_in(soap)
	 || soap_recv_header(soap)
	 || soap_body_begin_in(soap))
		return soap_closesock(soap);
	soap_get_klnag_GetStaticInfoResponse(soap, &r, "klnag-GetStaticInfoResponse", "");
	if (soap->error)
	{	if (soap->error == SOAP_TAG_MISMATCH && soap->level == 2)
			return soap_recv_fault(soap);
		return soap_closesock(soap);
	}
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
#ifndef WITH_LEANER
	 || soap_resolve_attachments(soap)
#endif
	 || soap_end_recv(soap))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

SOAP_FMAC5 int SOAP_FMAC6 soap_call_klnag_GetStatistics(struct soap *soap, const char *URL, const char *action, param__params filter, struct klnag_GetStatisticsResponse &r)
{
	struct klnag_GetStatistics soap_tmp_klnag_GetStatistics;
	soap->encodingStyle = NULL;
	soap_tmp_klnag_GetStatistics.filter=filter;
	soap_begin(soap);
	soap_serializeheader(soap);
	soap_serialize_klnag_GetStatistics(soap, &soap_tmp_klnag_GetStatistics);
	soap_begin_count(soap);
	if (soap->mode & SOAP_IO_LENGTH)
	{	soap_envelope_begin_out(soap);
		soap_putheader(soap);
		soap_body_begin_out(soap);
		soap_put_klnag_GetStatistics(soap, &soap_tmp_klnag_GetStatistics, "klnag-GetStatistics", "");
		soap_body_end_out(soap);
		soap_envelope_end_out(soap);
	}
	if (soap_connect(soap, URL, action)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put_klnag_GetStatistics(soap, &soap_tmp_klnag_GetStatistics, "klnag-GetStatistics", "")
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap_closesock(soap);
	soap_default_klnag_GetStatisticsResponse(soap, &r);
	if (soap_begin_recv(soap)
	 || soap_envelope_begin_in(soap)
	 || soap_recv_header(soap)
	 || soap_body_begin_in(soap))
		return soap_closesock(soap);
	soap_get_klnag_GetStatisticsResponse(soap, &r, "klnag-GetStatisticsResponse", "");
	if (soap->error)
	{	if (soap->error == SOAP_TAG_MISMATCH && soap->level == 2)
			return soap_recv_fault(soap);
		return soap_closesock(soap);
	}
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
#ifndef WITH_LEANER
	 || soap_resolve_attachments(soap)
#endif
	 || soap_end_recv(soap))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

SOAP_FMAC5 int SOAP_FMAC6 soap_call_klnag_GetInstancePort(struct soap *soap, const char *URL, const char *action, wchar_t *product, wchar_t *version, wchar_t *component, wchar_t *instance, struct klnag_GetInstancePortResponse &r)
{
	struct klnag_GetInstancePort soap_tmp_klnag_GetInstancePort;
	soap->encodingStyle = NULL;
	soap_tmp_klnag_GetInstancePort.product=product;
	soap_tmp_klnag_GetInstancePort.version=version;
	soap_tmp_klnag_GetInstancePort.component=component;
	soap_tmp_klnag_GetInstancePort.instance=instance;
	soap_begin(soap);
	soap_serializeheader(soap);
	soap_serialize_klnag_GetInstancePort(soap, &soap_tmp_klnag_GetInstancePort);
	soap_begin_count(soap);
	if (soap->mode & SOAP_IO_LENGTH)
	{	soap_envelope_begin_out(soap);
		soap_putheader(soap);
		soap_body_begin_out(soap);
		soap_put_klnag_GetInstancePort(soap, &soap_tmp_klnag_GetInstancePort, "klnag-GetInstancePort", "");
		soap_body_end_out(soap);
		soap_envelope_end_out(soap);
	}
	if (soap_connect(soap, URL, action)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put_klnag_GetInstancePort(soap, &soap_tmp_klnag_GetInstancePort, "klnag-GetInstancePort", "")
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap_closesock(soap);
	soap_default_klnag_GetInstancePortResponse(soap, &r);
	if (soap_begin_recv(soap)
	 || soap_envelope_begin_in(soap)
	 || soap_recv_header(soap)
	 || soap_body_begin_in(soap))
		return soap_closesock(soap);
	soap_get_klnag_GetInstancePortResponse(soap, &r, "klnag-GetInstancePortResponse", "");
	if (soap->error)
	{	if (soap->error == SOAP_TAG_MISMATCH && soap->level == 2)
			return soap_recv_fault(soap);
		return soap_closesock(soap);
	}
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
#ifndef WITH_LEANER
	 || soap_resolve_attachments(soap)
#endif
	 || soap_end_recv(soap))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

SOAP_FMAC5 int SOAP_FMAC6 soap_call_klnag_StartProduct(struct soap *soap, const char *URL, const char *action, wchar_t *productname, wchar_t *productversion, param__params extraparams, struct klnag_StartProductResponse &r)
{
	struct klnag_StartProduct soap_tmp_klnag_StartProduct;
	soap->encodingStyle = NULL;
	soap_tmp_klnag_StartProduct.productname=productname;
	soap_tmp_klnag_StartProduct.productversion=productversion;
	soap_tmp_klnag_StartProduct.extraparams=extraparams;
	soap_begin(soap);
	soap_serializeheader(soap);
	soap_serialize_klnag_StartProduct(soap, &soap_tmp_klnag_StartProduct);
	soap_begin_count(soap);
	if (soap->mode & SOAP_IO_LENGTH)
	{	soap_envelope_begin_out(soap);
		soap_putheader(soap);
		soap_body_begin_out(soap);
		soap_put_klnag_StartProduct(soap, &soap_tmp_klnag_StartProduct, "klnag-StartProduct", "");
		soap_body_end_out(soap);
		soap_envelope_end_out(soap);
	}
	if (soap_connect(soap, URL, action)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put_klnag_StartProduct(soap, &soap_tmp_klnag_StartProduct, "klnag-StartProduct", "")
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap_closesock(soap);
	soap_default_klnag_StartProductResponse(soap, &r);
	if (soap_begin_recv(soap)
	 || soap_envelope_begin_in(soap)
	 || soap_recv_header(soap)
	 || soap_body_begin_in(soap))
		return soap_closesock(soap);
	soap_get_klnag_StartProductResponse(soap, &r, "klnag-StartProductResponse", "");
	if (soap->error)
	{	if (soap->error == SOAP_TAG_MISMATCH && soap->level == 2)
			return soap_recv_fault(soap);
		return soap_closesock(soap);
	}
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
#ifndef WITH_LEANER
	 || soap_resolve_attachments(soap)
#endif
	 || soap_end_recv(soap))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

SOAP_FMAC5 int SOAP_FMAC6 soap_call_klnag_StopProduct(struct soap *soap, const char *URL, const char *action, wchar_t *productname, wchar_t *productversion, param__params extraparams, struct klnag_StopProductResponse &r)
{
	struct klnag_StopProduct soap_tmp_klnag_StopProduct;
	soap->encodingStyle = NULL;
	soap_tmp_klnag_StopProduct.productname=productname;
	soap_tmp_klnag_StopProduct.productversion=productversion;
	soap_tmp_klnag_StopProduct.extraparams=extraparams;
	soap_begin(soap);
	soap_serializeheader(soap);
	soap_serialize_klnag_StopProduct(soap, &soap_tmp_klnag_StopProduct);
	soap_begin_count(soap);
	if (soap->mode & SOAP_IO_LENGTH)
	{	soap_envelope_begin_out(soap);
		soap_putheader(soap);
		soap_body_begin_out(soap);
		soap_put_klnag_StopProduct(soap, &soap_tmp_klnag_StopProduct, "klnag-StopProduct", "");
		soap_body_end_out(soap);
		soap_envelope_end_out(soap);
	}
	if (soap_connect(soap, URL, action)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put_klnag_StopProduct(soap, &soap_tmp_klnag_StopProduct, "klnag-StopProduct", "")
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap_closesock(soap);
	soap_default_klnag_StopProductResponse(soap, &r);
	if (soap_begin_recv(soap)
	 || soap_envelope_begin_in(soap)
	 || soap_recv_header(soap)
	 || soap_body_begin_in(soap))
		return soap_closesock(soap);
	soap_get_klnag_StopProductResponse(soap, &r, "klnag-StopProductResponse", "");
	if (soap->error)
	{	if (soap->error == SOAP_TAG_MISMATCH && soap->level == 2)
			return soap_recv_fault(soap);
		return soap_closesock(soap);
	}
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
#ifndef WITH_LEANER
	 || soap_resolve_attachments(soap)
#endif
	 || soap_end_recv(soap))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

SOAP_FMAC5 int SOAP_FMAC6 soap_call_klnag_OnStartRemoteInstallTask(struct soap *soap, const char *URL, const char *action, long taskId, struct klnag_OnStartRemoteInstallTaskResponse &r)
{
	struct klnag_OnStartRemoteInstallTask soap_tmp_klnag_OnStartRemoteInstallTask;
	soap->encodingStyle = NULL;
	soap_tmp_klnag_OnStartRemoteInstallTask.taskId=taskId;
	soap_begin(soap);
	soap_serializeheader(soap);
	soap_serialize_klnag_OnStartRemoteInstallTask(soap, &soap_tmp_klnag_OnStartRemoteInstallTask);
	soap_begin_count(soap);
	if (soap->mode & SOAP_IO_LENGTH)
	{	soap_envelope_begin_out(soap);
		soap_putheader(soap);
		soap_body_begin_out(soap);
		soap_put_klnag_OnStartRemoteInstallTask(soap, &soap_tmp_klnag_OnStartRemoteInstallTask, "klnag-OnStartRemoteInstallTask", "");
		soap_body_end_out(soap);
		soap_envelope_end_out(soap);
	}
	if (soap_connect(soap, URL, action)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put_klnag_OnStartRemoteInstallTask(soap, &soap_tmp_klnag_OnStartRemoteInstallTask, "klnag-OnStartRemoteInstallTask", "")
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap_closesock(soap);
	soap_default_klnag_OnStartRemoteInstallTaskResponse(soap, &r);
	if (soap_begin_recv(soap)
	 || soap_envelope_begin_in(soap)
	 || soap_recv_header(soap)
	 || soap_body_begin_in(soap))
		return soap_closesock(soap);
	soap_get_klnag_OnStartRemoteInstallTaskResponse(soap, &r, "klnag-OnStartRemoteInstallTaskResponse", "");
	if (soap->error)
	{	if (soap->error == SOAP_TAG_MISMATCH && soap->level == 2)
			return soap_recv_fault(soap);
		return soap_closesock(soap);
	}
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
#ifndef WITH_LEANER
	 || soap_resolve_attachments(soap)
#endif
	 || soap_end_recv(soap))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

SOAP_FMAC5 int SOAP_FMAC6 soap_call_klnag_OnInstallerNotification(struct soap *soap, const char *URL, const char *action, param__params info, struct klnag_OnInstallerNotificationResponse &r)
{
	struct klnag_OnInstallerNotification soap_tmp_klnag_OnInstallerNotification;
	soap->encodingStyle = NULL;
	soap_tmp_klnag_OnInstallerNotification.info=info;
	soap_begin(soap);
	soap_serializeheader(soap);
	soap_serialize_klnag_OnInstallerNotification(soap, &soap_tmp_klnag_OnInstallerNotification);
	soap_begin_count(soap);
	if (soap->mode & SOAP_IO_LENGTH)
	{	soap_envelope_begin_out(soap);
		soap_putheader(soap);
		soap_body_begin_out(soap);
		soap_put_klnag_OnInstallerNotification(soap, &soap_tmp_klnag_OnInstallerNotification, "klnag-OnInstallerNotification", "");
		soap_body_end_out(soap);
		soap_envelope_end_out(soap);
	}
	if (soap_connect(soap, URL, action)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put_klnag_OnInstallerNotification(soap, &soap_tmp_klnag_OnInstallerNotification, "klnag-OnInstallerNotification", "")
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap_closesock(soap);
	soap_default_klnag_OnInstallerNotificationResponse(soap, &r);
	if (soap_begin_recv(soap)
	 || soap_envelope_begin_in(soap)
	 || soap_recv_header(soap)
	 || soap_body_begin_in(soap))
		return soap_closesock(soap);
	soap_get_klnag_OnInstallerNotificationResponse(soap, &r, "klnag-OnInstallerNotificationResponse", "");
	if (soap->error)
	{	if (soap->error == SOAP_TAG_MISMATCH && soap->level == 2)
			return soap_recv_fault(soap);
		return soap_closesock(soap);
	}
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
#ifndef WITH_LEANER
	 || soap_resolve_attachments(soap)
#endif
	 || soap_end_recv(soap))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

SOAP_FMAC5 int SOAP_FMAC6 soap_call_klnag_GetHostPublicKey(struct soap *soap, const char *URL, const char *action, struct klnag_GetHostPublicKeyResponse &r)
{
	struct klnag_GetHostPublicKey soap_tmp_klnag_GetHostPublicKey;
	soap->encodingStyle = NULL;
	soap_begin(soap);
	soap_serializeheader(soap);
	soap_serialize_klnag_GetHostPublicKey(soap, &soap_tmp_klnag_GetHostPublicKey);
	soap_begin_count(soap);
	if (soap->mode & SOAP_IO_LENGTH)
	{	soap_envelope_begin_out(soap);
		soap_putheader(soap);
		soap_body_begin_out(soap);
		soap_put_klnag_GetHostPublicKey(soap, &soap_tmp_klnag_GetHostPublicKey, "klnag-GetHostPublicKey", "");
		soap_body_end_out(soap);
		soap_envelope_end_out(soap);
	}
	if (soap_connect(soap, URL, action)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put_klnag_GetHostPublicKey(soap, &soap_tmp_klnag_GetHostPublicKey, "klnag-GetHostPublicKey", "")
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap_closesock(soap);
	soap_default_klnag_GetHostPublicKeyResponse(soap, &r);
	if (soap_begin_recv(soap)
	 || soap_envelope_begin_in(soap)
	 || soap_recv_header(soap)
	 || soap_body_begin_in(soap))
		return soap_closesock(soap);
	soap_get_klnag_GetHostPublicKeyResponse(soap, &r, "klnag-GetHostPublicKeyResponse", "");
	if (soap->error)
	{	if (soap->error == SOAP_TAG_MISMATCH && soap->level == 2)
			return soap_recv_fault(soap);
		return soap_closesock(soap);
	}
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
#ifndef WITH_LEANER
	 || soap_resolve_attachments(soap)
#endif
	 || soap_end_recv(soap))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

SOAP_FMAC5 int SOAP_FMAC6 soap_call_klnag_PutGlobalKeys(struct soap *soap, const char *URL, const char *action, xsd__base64Binary key1, xsd__base64Binary key2, struct klnag_PutGlobalKeysResponse &r)
{
	struct klnag_PutGlobalKeys soap_tmp_klnag_PutGlobalKeys;
	soap->encodingStyle = NULL;
	soap_tmp_klnag_PutGlobalKeys.key1=key1;
	soap_tmp_klnag_PutGlobalKeys.key2=key2;
	soap_begin(soap);
	soap_serializeheader(soap);
	soap_serialize_klnag_PutGlobalKeys(soap, &soap_tmp_klnag_PutGlobalKeys);
	soap_begin_count(soap);
	if (soap->mode & SOAP_IO_LENGTH)
	{	soap_envelope_begin_out(soap);
		soap_putheader(soap);
		soap_body_begin_out(soap);
		soap_put_klnag_PutGlobalKeys(soap, &soap_tmp_klnag_PutGlobalKeys, "klnag-PutGlobalKeys", "");
		soap_body_end_out(soap);
		soap_envelope_end_out(soap);
	}
	if (soap_connect(soap, URL, action)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put_klnag_PutGlobalKeys(soap, &soap_tmp_klnag_PutGlobalKeys, "klnag-PutGlobalKeys", "")
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap_closesock(soap);
	soap_default_klnag_PutGlobalKeysResponse(soap, &r);
	if (soap_begin_recv(soap)
	 || soap_envelope_begin_in(soap)
	 || soap_recv_header(soap)
	 || soap_body_begin_in(soap))
		return soap_closesock(soap);
	soap_get_klnag_PutGlobalKeysResponse(soap, &r, "klnag-PutGlobalKeysResponse", "");
	if (soap->error)
	{	if (soap->error == SOAP_TAG_MISMATCH && soap->level == 2)
			return soap_recv_fault(soap);
		return soap_closesock(soap);
	}
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
#ifndef WITH_LEANER
	 || soap_resolve_attachments(soap)
#endif
	 || soap_end_recv(soap))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

SOAP_FMAC5 int SOAP_FMAC6 soap_call_klnag_OnUserForceSyncRequest(struct soap *soap, const char *URL, const char *action, param__params info, struct klnag_OnUserForceSyncRequestResponse &r)
{
	struct klnag_OnUserForceSyncRequest soap_tmp_klnag_OnUserForceSyncRequest;
	soap->encodingStyle = NULL;
	soap_tmp_klnag_OnUserForceSyncRequest.info=info;
	soap_begin(soap);
	soap_serializeheader(soap);
	soap_serialize_klnag_OnUserForceSyncRequest(soap, &soap_tmp_klnag_OnUserForceSyncRequest);
	soap_begin_count(soap);
	if (soap->mode & SOAP_IO_LENGTH)
	{	soap_envelope_begin_out(soap);
		soap_putheader(soap);
		soap_body_begin_out(soap);
		soap_put_klnag_OnUserForceSyncRequest(soap, &soap_tmp_klnag_OnUserForceSyncRequest, "klnag-OnUserForceSyncRequest", "");
		soap_body_end_out(soap);
		soap_envelope_end_out(soap);
	}
	if (soap_connect(soap, URL, action)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put_klnag_OnUserForceSyncRequest(soap, &soap_tmp_klnag_OnUserForceSyncRequest, "klnag-OnUserForceSyncRequest", "")
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap_closesock(soap);
	soap_default_klnag_OnUserForceSyncRequestResponse(soap, &r);
	if (soap_begin_recv(soap)
	 || soap_envelope_begin_in(soap)
	 || soap_recv_header(soap)
	 || soap_body_begin_in(soap))
		return soap_closesock(soap);
	soap_get_klnag_OnUserForceSyncRequestResponse(soap, &r, "klnag-OnUserForceSyncRequestResponse", "");
	if (soap->error)
	{	if (soap->error == SOAP_TAG_MISMATCH && soap->level == 2)
			return soap_recv_fault(soap);
		return soap_closesock(soap);
	}
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
#ifndef WITH_LEANER
	 || soap_resolve_attachments(soap)
#endif
	 || soap_end_recv(soap))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

SOAP_FMAC5 int SOAP_FMAC6 soap_call_klftbridge_CreateReceiver(struct soap *soap, const char *URL, const char *action, bool useUpdaterFolder, struct klftbridge_CreateReceiverResponse &r)
{
	struct klftbridge_CreateReceiver soap_tmp_klftbridge_CreateReceiver;
	soap->encodingStyle = NULL;
	soap_tmp_klftbridge_CreateReceiver.useUpdaterFolder=useUpdaterFolder;
	soap_begin(soap);
	soap_serializeheader(soap);
	soap_serialize_klftbridge_CreateReceiver(soap, &soap_tmp_klftbridge_CreateReceiver);
	soap_begin_count(soap);
	if (soap->mode & SOAP_IO_LENGTH)
	{	soap_envelope_begin_out(soap);
		soap_putheader(soap);
		soap_body_begin_out(soap);
		soap_put_klftbridge_CreateReceiver(soap, &soap_tmp_klftbridge_CreateReceiver, "klftbridge-CreateReceiver", "");
		soap_body_end_out(soap);
		soap_envelope_end_out(soap);
	}
	if (soap_connect(soap, URL, action)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put_klftbridge_CreateReceiver(soap, &soap_tmp_klftbridge_CreateReceiver, "klftbridge-CreateReceiver", "")
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap_closesock(soap);
	soap_default_klftbridge_CreateReceiverResponse(soap, &r);
	if (soap_begin_recv(soap)
	 || soap_envelope_begin_in(soap)
	 || soap_recv_header(soap)
	 || soap_body_begin_in(soap))
		return soap_closesock(soap);
	soap_get_klftbridge_CreateReceiverResponse(soap, &r, "klftbridge-CreateReceiverResponse", "");
	if (soap->error)
	{	if (soap->error == SOAP_TAG_MISMATCH && soap->level == 2)
			return soap_recv_fault(soap);
		return soap_closesock(soap);
	}
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
#ifndef WITH_LEANER
	 || soap_resolve_attachments(soap)
#endif
	 || soap_end_recv(soap))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

SOAP_FMAC5 int SOAP_FMAC6 soap_call_klftbridge_Connect(struct soap *soap, const char *URL, const char *action, wchar_t *receiverId, bool toMasterServer, struct klftbridge_ConnectResponse &r)
{
	struct klftbridge_Connect soap_tmp_klftbridge_Connect;
	soap->encodingStyle = NULL;
	soap_tmp_klftbridge_Connect.receiverId=receiverId;
	soap_tmp_klftbridge_Connect.toMasterServer=toMasterServer;
	soap_begin(soap);
	soap_serializeheader(soap);
	soap_serialize_klftbridge_Connect(soap, &soap_tmp_klftbridge_Connect);
	soap_begin_count(soap);
	if (soap->mode & SOAP_IO_LENGTH)
	{	soap_envelope_begin_out(soap);
		soap_putheader(soap);
		soap_body_begin_out(soap);
		soap_put_klftbridge_Connect(soap, &soap_tmp_klftbridge_Connect, "klftbridge-Connect", "");
		soap_body_end_out(soap);
		soap_envelope_end_out(soap);
	}
	if (soap_connect(soap, URL, action)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put_klftbridge_Connect(soap, &soap_tmp_klftbridge_Connect, "klftbridge-Connect", "")
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap_closesock(soap);
	soap_default_klftbridge_ConnectResponse(soap, &r);
	if (soap_begin_recv(soap)
	 || soap_envelope_begin_in(soap)
	 || soap_recv_header(soap)
	 || soap_body_begin_in(soap))
		return soap_closesock(soap);
	soap_get_klftbridge_ConnectResponse(soap, &r, "klftbridge-ConnectResponse", "");
	if (soap->error)
	{	if (soap->error == SOAP_TAG_MISMATCH && soap->level == 2)
			return soap_recv_fault(soap);
		return soap_closesock(soap);
	}
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
#ifndef WITH_LEANER
	 || soap_resolve_attachments(soap)
#endif
	 || soap_end_recv(soap))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

SOAP_FMAC5 int SOAP_FMAC6 soap_call_klftbridge_GetFileInfo(struct soap *soap, const char *URL, const char *action, wchar_t *receiverId, wchar_t *fileName, struct klftbridge_GetFileInfoResponse &r)
{
	struct klftbridge_GetFileInfo soap_tmp_klftbridge_GetFileInfo;
	soap->encodingStyle = NULL;
	soap_tmp_klftbridge_GetFileInfo.receiverId=receiverId;
	soap_tmp_klftbridge_GetFileInfo.fileName=fileName;
	soap_begin(soap);
	soap_serializeheader(soap);
	soap_serialize_klftbridge_GetFileInfo(soap, &soap_tmp_klftbridge_GetFileInfo);
	soap_begin_count(soap);
	if (soap->mode & SOAP_IO_LENGTH)
	{	soap_envelope_begin_out(soap);
		soap_putheader(soap);
		soap_body_begin_out(soap);
		soap_put_klftbridge_GetFileInfo(soap, &soap_tmp_klftbridge_GetFileInfo, "klftbridge-GetFileInfo", "");
		soap_body_end_out(soap);
		soap_envelope_end_out(soap);
	}
	if (soap_connect(soap, URL, action)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put_klftbridge_GetFileInfo(soap, &soap_tmp_klftbridge_GetFileInfo, "klftbridge-GetFileInfo", "")
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap_closesock(soap);
	soap_default_klftbridge_GetFileInfoResponse(soap, &r);
	if (soap_begin_recv(soap)
	 || soap_envelope_begin_in(soap)
	 || soap_recv_header(soap)
	 || soap_body_begin_in(soap))
		return soap_closesock(soap);
	soap_get_klftbridge_GetFileInfoResponse(soap, &r, "klftbridge-GetFileInfoResponse", "");
	if (soap->error)
	{	if (soap->error == SOAP_TAG_MISMATCH && soap->level == 2)
			return soap_recv_fault(soap);
		return soap_closesock(soap);
	}
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
#ifndef WITH_LEANER
	 || soap_resolve_attachments(soap)
#endif
	 || soap_end_recv(soap))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

SOAP_FMAC5 int SOAP_FMAC6 soap_call_klftbridge_GetNextFileChunk(struct soap *soap, const char *URL, const char *action, wchar_t *receiverId, wchar_t *fileName, ULONG64 startFilePos, ULONG64 neededSize, struct klftbridge_GetNextFileChunkResponse &r)
{
	struct klftbridge_GetNextFileChunk soap_tmp_klftbridge_GetNextFileChunk;
	soap->encodingStyle = NULL;
	soap_tmp_klftbridge_GetNextFileChunk.receiverId=receiverId;
	soap_tmp_klftbridge_GetNextFileChunk.fileName=fileName;
	soap_tmp_klftbridge_GetNextFileChunk.startFilePos=startFilePos;
	soap_tmp_klftbridge_GetNextFileChunk.neededSize=neededSize;
	soap_begin(soap);
	soap_serializeheader(soap);
	soap_serialize_klftbridge_GetNextFileChunk(soap, &soap_tmp_klftbridge_GetNextFileChunk);
	soap_begin_count(soap);
	if (soap->mode & SOAP_IO_LENGTH)
	{	soap_envelope_begin_out(soap);
		soap_putheader(soap);
		soap_body_begin_out(soap);
		soap_put_klftbridge_GetNextFileChunk(soap, &soap_tmp_klftbridge_GetNextFileChunk, "klftbridge-GetNextFileChunk", "");
		soap_body_end_out(soap);
		soap_envelope_end_out(soap);
	}
	if (soap_connect(soap, URL, action)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put_klftbridge_GetNextFileChunk(soap, &soap_tmp_klftbridge_GetNextFileChunk, "klftbridge-GetNextFileChunk", "")
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap_closesock(soap);
	soap_default_klftbridge_GetNextFileChunkResponse(soap, &r);
	if (soap_begin_recv(soap)
	 || soap_envelope_begin_in(soap)
	 || soap_recv_header(soap)
	 || soap_body_begin_in(soap))
		return soap_closesock(soap);
	soap_get_klftbridge_GetNextFileChunkResponse(soap, &r, "klftbridge-GetNextFileChunkResponse", "");
	if (soap->error)
	{	if (soap->error == SOAP_TAG_MISMATCH && soap->level == 2)
			return soap_recv_fault(soap);
		return soap_closesock(soap);
	}
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
#ifndef WITH_LEANER
	 || soap_resolve_attachments(soap)
#endif
	 || soap_end_recv(soap))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

SOAP_FMAC5 int SOAP_FMAC6 soap_call_klftbridge_ReleaseReceiver(struct soap *soap, const char *URL, const char *action, wchar_t *receiverId, struct klftbridge_ReleaseReceiverResponse &r)
{
	struct klftbridge_ReleaseReceiver soap_tmp_klftbridge_ReleaseReceiver;
	soap->encodingStyle = NULL;
	soap_tmp_klftbridge_ReleaseReceiver.receiverId=receiverId;
	soap_begin(soap);
	soap_serializeheader(soap);
	soap_serialize_klftbridge_ReleaseReceiver(soap, &soap_tmp_klftbridge_ReleaseReceiver);
	soap_begin_count(soap);
	if (soap->mode & SOAP_IO_LENGTH)
	{	soap_envelope_begin_out(soap);
		soap_putheader(soap);
		soap_body_begin_out(soap);
		soap_put_klftbridge_ReleaseReceiver(soap, &soap_tmp_klftbridge_ReleaseReceiver, "klftbridge-ReleaseReceiver", "");
		soap_body_end_out(soap);
		soap_envelope_end_out(soap);
	}
	if (soap_connect(soap, URL, action)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put_klftbridge_ReleaseReceiver(soap, &soap_tmp_klftbridge_ReleaseReceiver, "klftbridge-ReleaseReceiver", "")
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap_closesock(soap);
	soap_default_klftbridge_ReleaseReceiverResponse(soap, &r);
	if (soap_begin_recv(soap)
	 || soap_envelope_begin_in(soap)
	 || soap_recv_header(soap)
	 || soap_body_begin_in(soap))
		return soap_closesock(soap);
	soap_get_klftbridge_ReleaseReceiverResponse(soap, &r, "klftbridge-ReleaseReceiverResponse", "");
	if (soap->error)
	{	if (soap->error == SOAP_TAG_MISMATCH && soap->level == 2)
			return soap_recv_fault(soap);
		return soap_closesock(soap);
	}
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
#ifndef WITH_LEANER
	 || soap_resolve_attachments(soap)
#endif
	 || soap_end_recv(soap))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

SOAP_FMAC5 int SOAP_FMAC6 soap_call_klft_InitiateFileUpload(struct soap *soap, const char *URL, const char *action, wchar_t *fileName, wchar_t *fileId, wchar_t *description, ULONG64 dirFlag, ULONG64 fullFileSize, wchar_t *serverComponent, wchar_t *remoteClientName, ULONG64 uploadDelay, ULONG64 nextChunkDelay, long fileType, ULONG64 forUpdateAgentFlag, struct SOAPUpdateAgentInfosList *updatesAgents, struct klft_InitiateFileUploadResponse &r)
{
	struct klft_InitiateFileUpload soap_tmp_klft_InitiateFileUpload;
	soap->encodingStyle = NULL;
	soap_tmp_klft_InitiateFileUpload.fileName=fileName;
	soap_tmp_klft_InitiateFileUpload.fileId=fileId;
	soap_tmp_klft_InitiateFileUpload.description=description;
	soap_tmp_klft_InitiateFileUpload.dirFlag=dirFlag;
	soap_tmp_klft_InitiateFileUpload.fullFileSize=fullFileSize;
	soap_tmp_klft_InitiateFileUpload.serverComponent=serverComponent;
	soap_tmp_klft_InitiateFileUpload.remoteClientName=remoteClientName;
	soap_tmp_klft_InitiateFileUpload.uploadDelay=uploadDelay;
	soap_tmp_klft_InitiateFileUpload.nextChunkDelay=nextChunkDelay;
	soap_tmp_klft_InitiateFileUpload.fileType=fileType;
	soap_tmp_klft_InitiateFileUpload.forUpdateAgentFlag=forUpdateAgentFlag;
	soap_tmp_klft_InitiateFileUpload.updatesAgents=updatesAgents;
	soap_begin(soap);
	soap_serializeheader(soap);
	soap_serialize_klft_InitiateFileUpload(soap, &soap_tmp_klft_InitiateFileUpload);
	soap_begin_count(soap);
	if (soap->mode & SOAP_IO_LENGTH)
	{	soap_envelope_begin_out(soap);
		soap_putheader(soap);
		soap_body_begin_out(soap);
		soap_put_klft_InitiateFileUpload(soap, &soap_tmp_klft_InitiateFileUpload, "klft-InitiateFileUpload", "");
		soap_body_end_out(soap);
		soap_envelope_end_out(soap);
	}
	if (soap_connect(soap, URL, action)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put_klft_InitiateFileUpload(soap, &soap_tmp_klft_InitiateFileUpload, "klft-InitiateFileUpload", "")
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap_closesock(soap);
	soap_default_klft_InitiateFileUploadResponse(soap, &r);
	if (soap_begin_recv(soap)
	 || soap_envelope_begin_in(soap)
	 || soap_recv_header(soap)
	 || soap_body_begin_in(soap))
		return soap_closesock(soap);
	soap_get_klft_InitiateFileUploadResponse(soap, &r, "klft-InitiateFileUploadResponse", "");
	if (soap->error)
	{	if (soap->error == SOAP_TAG_MISMATCH && soap->level == 2)
			return soap_recv_fault(soap);
		return soap_closesock(soap);
	}
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
#ifndef WITH_LEANER
	 || soap_resolve_attachments(soap)
#endif
	 || soap_end_recv(soap))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

SOAP_FMAC5 int SOAP_FMAC6 soap_call_klft_RegisterUpdateAgent(struct soap *soap, const char *URL, const char *action, wchar_t *strAddress, wchar_t *strNoSSLAddress, wchar_t *strMulticastIp, param__params pParOptions, struct klft_RegisterUpdateAgentResponse &r)
{
	struct klft_RegisterUpdateAgent soap_tmp_klft_RegisterUpdateAgent;
	soap->encodingStyle = NULL;
	soap_tmp_klft_RegisterUpdateAgent.strAddress=strAddress;
	soap_tmp_klft_RegisterUpdateAgent.strNoSSLAddress=strNoSSLAddress;
	soap_tmp_klft_RegisterUpdateAgent.strMulticastIp=strMulticastIp;
	soap_tmp_klft_RegisterUpdateAgent.pParOptions=pParOptions;
	soap_begin(soap);
	soap_serializeheader(soap);
	soap_serialize_klft_RegisterUpdateAgent(soap, &soap_tmp_klft_RegisterUpdateAgent);
	soap_begin_count(soap);
	if (soap->mode & SOAP_IO_LENGTH)
	{	soap_envelope_begin_out(soap);
		soap_putheader(soap);
		soap_body_begin_out(soap);
		soap_put_klft_RegisterUpdateAgent(soap, &soap_tmp_klft_RegisterUpdateAgent, "klft-RegisterUpdateAgent", "");
		soap_body_end_out(soap);
		soap_envelope_end_out(soap);
	}
	if (soap_connect(soap, URL, action)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put_klft_RegisterUpdateAgent(soap, &soap_tmp_klft_RegisterUpdateAgent, "klft-RegisterUpdateAgent", "")
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap_closesock(soap);
	soap_default_klft_RegisterUpdateAgentResponse(soap, &r);
	if (soap_begin_recv(soap)
	 || soap_envelope_begin_in(soap)
	 || soap_recv_header(soap)
	 || soap_body_begin_in(soap))
		return soap_closesock(soap);
	soap_get_klft_RegisterUpdateAgentResponse(soap, &r, "klft-RegisterUpdateAgentResponse", "");
	if (soap->error)
	{	if (soap->error == SOAP_TAG_MISMATCH && soap->level == 2)
			return soap_recv_fault(soap);
		return soap_closesock(soap);
	}
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
#ifndef WITH_LEANER
	 || soap_resolve_attachments(soap)
#endif
	 || soap_end_recv(soap))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

SOAP_FMAC5 int SOAP_FMAC6 soap_call_klft_InitiateServerFileUpload(struct soap *soap, const char *URL, const char *action, wchar_t *fileId, ULONG64 dirFlag, ULONG64 lifeTime, ULONG64 fullFileSize, struct klft_InitiateServerFileUploadResponse &r)
{
	struct klft_InitiateServerFileUpload soap_tmp_klft_InitiateServerFileUpload;
	soap->encodingStyle = NULL;
	soap_tmp_klft_InitiateServerFileUpload.fileId=fileId;
	soap_tmp_klft_InitiateServerFileUpload.dirFlag=dirFlag;
	soap_tmp_klft_InitiateServerFileUpload.lifeTime=lifeTime;
	soap_tmp_klft_InitiateServerFileUpload.fullFileSize=fullFileSize;
	soap_begin(soap);
	soap_serializeheader(soap);
	soap_serialize_klft_InitiateServerFileUpload(soap, &soap_tmp_klft_InitiateServerFileUpload);
	soap_begin_count(soap);
	if (soap->mode & SOAP_IO_LENGTH)
	{	soap_envelope_begin_out(soap);
		soap_putheader(soap);
		soap_body_begin_out(soap);
		soap_put_klft_InitiateServerFileUpload(soap, &soap_tmp_klft_InitiateServerFileUpload, "klft-InitiateServerFileUpload", "");
		soap_body_end_out(soap);
		soap_envelope_end_out(soap);
	}
	if (soap_connect(soap, URL, action)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put_klft_InitiateServerFileUpload(soap, &soap_tmp_klft_InitiateServerFileUpload, "klft-InitiateServerFileUpload", "")
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap_closesock(soap);
	soap_default_klft_InitiateServerFileUploadResponse(soap, &r);
	if (soap_begin_recv(soap)
	 || soap_envelope_begin_in(soap)
	 || soap_recv_header(soap)
	 || soap_body_begin_in(soap))
		return soap_closesock(soap);
	soap_get_klft_InitiateServerFileUploadResponse(soap, &r, "klft-InitiateServerFileUploadResponse", "");
	if (soap->error)
	{	if (soap->error == SOAP_TAG_MISMATCH && soap->level == 2)
			return soap_recv_fault(soap);
		return soap_closesock(soap);
	}
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
#ifndef WITH_LEANER
	 || soap_resolve_attachments(soap)
#endif
	 || soap_end_recv(soap))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

SOAP_FMAC5 int SOAP_FMAC6 soap_call_klft_CancelServerFileUpload(struct soap *soap, const char *URL, const char *action, wchar_t *fileId, struct klft_CancelServerFileUploadResponse &r)
{
	struct klft_CancelServerFileUpload soap_tmp_klft_CancelServerFileUpload;
	soap->encodingStyle = NULL;
	soap_tmp_klft_CancelServerFileUpload.fileId=fileId;
	soap_begin(soap);
	soap_serializeheader(soap);
	soap_serialize_klft_CancelServerFileUpload(soap, &soap_tmp_klft_CancelServerFileUpload);
	soap_begin_count(soap);
	if (soap->mode & SOAP_IO_LENGTH)
	{	soap_envelope_begin_out(soap);
		soap_putheader(soap);
		soap_body_begin_out(soap);
		soap_put_klft_CancelServerFileUpload(soap, &soap_tmp_klft_CancelServerFileUpload, "klft-CancelServerFileUpload", "");
		soap_body_end_out(soap);
		soap_envelope_end_out(soap);
	}
	if (soap_connect(soap, URL, action)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put_klft_CancelServerFileUpload(soap, &soap_tmp_klft_CancelServerFileUpload, "klft-CancelServerFileUpload", "")
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap_closesock(soap);
	soap_default_klft_CancelServerFileUploadResponse(soap, &r);
	if (soap_begin_recv(soap)
	 || soap_envelope_begin_in(soap)
	 || soap_recv_header(soap)
	 || soap_body_begin_in(soap))
		return soap_closesock(soap);
	soap_get_klft_CancelServerFileUploadResponse(soap, &r, "klft-CancelServerFileUploadResponse", "");
	if (soap->error)
	{	if (soap->error == SOAP_TAG_MISMATCH && soap->level == 2)
			return soap_recv_fault(soap);
		return soap_closesock(soap);
	}
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
#ifndef WITH_LEANER
	 || soap_resolve_attachments(soap)
#endif
	 || soap_end_recv(soap))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

SOAP_FMAC5 int SOAP_FMAC6 soap_call_klft_PutNextFileChunk(struct soap *soap, const char *URL, const char *action, wchar_t *fileId, struct klft_file_chunk_t chunk, struct klft_PutNextFileChunkResponse &r)
{
	struct klft_PutNextFileChunk soap_tmp_klft_PutNextFileChunk;
	soap->encodingStyle = NULL;
	soap_tmp_klft_PutNextFileChunk.fileId=fileId;
	soap_tmp_klft_PutNextFileChunk.chunk=chunk;
	soap_begin(soap);
	soap_serializeheader(soap);
	soap_serialize_klft_PutNextFileChunk(soap, &soap_tmp_klft_PutNextFileChunk);
	soap_begin_count(soap);
	if (soap->mode & SOAP_IO_LENGTH)
	{	soap_envelope_begin_out(soap);
		soap_putheader(soap);
		soap_body_begin_out(soap);
		soap_put_klft_PutNextFileChunk(soap, &soap_tmp_klft_PutNextFileChunk, "klft-PutNextFileChunk", "");
		soap_body_end_out(soap);
		soap_envelope_end_out(soap);
	}
	if (soap_connect(soap, URL, action)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put_klft_PutNextFileChunk(soap, &soap_tmp_klft_PutNextFileChunk, "klft-PutNextFileChunk", "")
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap_closesock(soap);
	soap_default_klft_PutNextFileChunkResponse(soap, &r);
	if (soap_begin_recv(soap)
	 || soap_envelope_begin_in(soap)
	 || soap_recv_header(soap)
	 || soap_body_begin_in(soap))
		return soap_closesock(soap);
	soap_get_klft_PutNextFileChunkResponse(soap, &r, "klft-PutNextFileChunkResponse", "");
	if (soap->error)
	{	if (soap->error == SOAP_TAG_MISMATCH && soap->level == 2)
			return soap_recv_fault(soap);
		return soap_closesock(soap);
	}
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
#ifndef WITH_LEANER
	 || soap_resolve_attachments(soap)
#endif
	 || soap_end_recv(soap))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

SOAP_FMAC5 int SOAP_FMAC6 soap_call_klft_GetSyncFolderDiff(struct soap *soap, const char *URL, const char *action, wchar_t *fileDescription, struct SOAPFilesInfoList *clientFilesList, struct SOAPSyncFolderOptions *subfoldersOptions, struct klft_GetSyncFolderDiffResponse &r)
{
	struct klft_GetSyncFolderDiff soap_tmp_klft_GetSyncFolderDiff;
	soap->encodingStyle = NULL;
	soap_tmp_klft_GetSyncFolderDiff.fileDescription=fileDescription;
	soap_tmp_klft_GetSyncFolderDiff.clientFilesList=clientFilesList;
	soap_tmp_klft_GetSyncFolderDiff.subfoldersOptions=subfoldersOptions;
	soap_begin(soap);
	soap_serializeheader(soap);
	soap_serialize_klft_GetSyncFolderDiff(soap, &soap_tmp_klft_GetSyncFolderDiff);
	soap_begin_count(soap);
	if (soap->mode & SOAP_IO_LENGTH)
	{	soap_envelope_begin_out(soap);
		soap_putheader(soap);
		soap_body_begin_out(soap);
		soap_put_klft_GetSyncFolderDiff(soap, &soap_tmp_klft_GetSyncFolderDiff, "klft-GetSyncFolderDiff", "");
		soap_body_end_out(soap);
		soap_envelope_end_out(soap);
	}
	if (soap_connect(soap, URL, action)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put_klft_GetSyncFolderDiff(soap, &soap_tmp_klft_GetSyncFolderDiff, "klft-GetSyncFolderDiff", "")
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap_closesock(soap);
	soap_default_klft_GetSyncFolderDiffResponse(soap, &r);
	if (soap_begin_recv(soap)
	 || soap_envelope_begin_in(soap)
	 || soap_recv_header(soap)
	 || soap_body_begin_in(soap))
		return soap_closesock(soap);
	soap_get_klft_GetSyncFolderDiffResponse(soap, &r, "klft-GetSyncFolderDiffResponse", "");
	if (soap->error)
	{	if (soap->error == SOAP_TAG_MISMATCH && soap->level == 2)
			return soap_recv_fault(soap);
		return soap_closesock(soap);
	}
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
#ifndef WITH_LEANER
	 || soap_resolve_attachments(soap)
#endif
	 || soap_end_recv(soap))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

SOAP_FMAC5 int SOAP_FMAC6 soap_call_klft_GetSyncFolderFileInfo(struct soap *soap, const char *URL, const char *action, wchar_t *syncFolderFileId, wchar_t *folderFileName, struct klft_GetSyncFolderFileInfoResponse &r)
{
	struct klft_GetSyncFolderFileInfo soap_tmp_klft_GetSyncFolderFileInfo;
	soap->encodingStyle = NULL;
	soap_tmp_klft_GetSyncFolderFileInfo.syncFolderFileId=syncFolderFileId;
	soap_tmp_klft_GetSyncFolderFileInfo.folderFileName=folderFileName;
	soap_begin(soap);
	soap_serializeheader(soap);
	soap_serialize_klft_GetSyncFolderFileInfo(soap, &soap_tmp_klft_GetSyncFolderFileInfo);
	soap_begin_count(soap);
	if (soap->mode & SOAP_IO_LENGTH)
	{	soap_envelope_begin_out(soap);
		soap_putheader(soap);
		soap_body_begin_out(soap);
		soap_put_klft_GetSyncFolderFileInfo(soap, &soap_tmp_klft_GetSyncFolderFileInfo, "klft-GetSyncFolderFileInfo", "");
		soap_body_end_out(soap);
		soap_envelope_end_out(soap);
	}
	if (soap_connect(soap, URL, action)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put_klft_GetSyncFolderFileInfo(soap, &soap_tmp_klft_GetSyncFolderFileInfo, "klft-GetSyncFolderFileInfo", "")
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap_closesock(soap);
	soap_default_klft_GetSyncFolderFileInfoResponse(soap, &r);
	if (soap_begin_recv(soap)
	 || soap_envelope_begin_in(soap)
	 || soap_recv_header(soap)
	 || soap_body_begin_in(soap))
		return soap_closesock(soap);
	soap_get_klft_GetSyncFolderFileInfoResponse(soap, &r, "klft-GetSyncFolderFileInfoResponse", "");
	if (soap->error)
	{	if (soap->error == SOAP_TAG_MISMATCH && soap->level == 2)
			return soap_recv_fault(soap);
		return soap_closesock(soap);
	}
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
#ifndef WITH_LEANER
	 || soap_resolve_attachments(soap)
#endif
	 || soap_end_recv(soap))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

SOAP_FMAC5 int SOAP_FMAC6 soap_call_klft_GetSyncFolderFileChunk(struct soap *soap, const char *URL, const char *action, wchar_t *syncFolderFileId, wchar_t *folderFileName, ULONG64 startFilePos, ULONG64 neededSize, struct klft_GetSyncFolderFileChunkResponse &r)
{
	struct klft_GetSyncFolderFileChunk soap_tmp_klft_GetSyncFolderFileChunk;
	soap->encodingStyle = NULL;
	soap_tmp_klft_GetSyncFolderFileChunk.syncFolderFileId=syncFolderFileId;
	soap_tmp_klft_GetSyncFolderFileChunk.folderFileName=folderFileName;
	soap_tmp_klft_GetSyncFolderFileChunk.startFilePos=startFilePos;
	soap_tmp_klft_GetSyncFolderFileChunk.neededSize=neededSize;
	soap_begin(soap);
	soap_serializeheader(soap);
	soap_serialize_klft_GetSyncFolderFileChunk(soap, &soap_tmp_klft_GetSyncFolderFileChunk);
	soap_begin_count(soap);
	if (soap->mode & SOAP_IO_LENGTH)
	{	soap_envelope_begin_out(soap);
		soap_putheader(soap);
		soap_body_begin_out(soap);
		soap_put_klft_GetSyncFolderFileChunk(soap, &soap_tmp_klft_GetSyncFolderFileChunk, "klft-GetSyncFolderFileChunk", "");
		soap_body_end_out(soap);
		soap_envelope_end_out(soap);
	}
	if (soap_connect(soap, URL, action)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put_klft_GetSyncFolderFileChunk(soap, &soap_tmp_klft_GetSyncFolderFileChunk, "klft-GetSyncFolderFileChunk", "")
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap_closesock(soap);
	soap_default_klft_GetSyncFolderFileChunkResponse(soap, &r);
	if (soap_begin_recv(soap)
	 || soap_envelope_begin_in(soap)
	 || soap_recv_header(soap)
	 || soap_body_begin_in(soap))
		return soap_closesock(soap);
	soap_get_klft_GetSyncFolderFileChunkResponse(soap, &r, "klft-GetSyncFolderFileChunkResponse", "");
	if (soap->error)
	{	if (soap->error == SOAP_TAG_MISMATCH && soap->level == 2)
			return soap_recv_fault(soap);
		return soap_closesock(soap);
	}
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
#ifndef WITH_LEANER
	 || soap_resolve_attachments(soap)
#endif
	 || soap_end_recv(soap))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

SOAP_FMAC5 int SOAP_FMAC6 soap_call_sync_putData(struct soap *soap, const char *URL, const char *action, wchar_t *wstrID, param__params data, struct sync_putDataResponse &r)
{
	struct sync_putData soap_tmp_sync_putData;
	soap->encodingStyle = NULL;
	soap_tmp_sync_putData.wstrID=wstrID;
	soap_tmp_sync_putData.data=data;
	soap_begin(soap);
	soap_serializeheader(soap);
	soap_serialize_sync_putData(soap, &soap_tmp_sync_putData);
	soap_begin_count(soap);
	if (soap->mode & SOAP_IO_LENGTH)
	{	soap_envelope_begin_out(soap);
		soap_putheader(soap);
		soap_body_begin_out(soap);
		soap_put_sync_putData(soap, &soap_tmp_sync_putData, "sync-putData", "");
		soap_body_end_out(soap);
		soap_envelope_end_out(soap);
	}
	if (soap_connect(soap, URL, action)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put_sync_putData(soap, &soap_tmp_sync_putData, "sync-putData", "")
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap_closesock(soap);
	soap_default_sync_putDataResponse(soap, &r);
	if (soap_begin_recv(soap)
	 || soap_envelope_begin_in(soap)
	 || soap_recv_header(soap)
	 || soap_body_begin_in(soap))
		return soap_closesock(soap);
	soap_get_sync_putDataResponse(soap, &r, "sync-putDataResponse", "");
	if (soap->error)
	{	if (soap->error == SOAP_TAG_MISMATCH && soap->level == 2)
			return soap_recv_fault(soap);
		return soap_closesock(soap);
	}
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
#ifndef WITH_LEANER
	 || soap_resolve_attachments(soap)
#endif
	 || soap_end_recv(soap))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

SOAP_FMAC5 int SOAP_FMAC6 soap_call_sync_Call(struct soap *soap, const char *URL, const char *action, wchar_t *wstrIDTo, wchar_t *wstrIDFrom, param__params parInputData, struct sync_CallResponse &r)
{
	struct sync_Call soap_tmp_sync_Call;
	soap->encodingStyle = NULL;
	soap_tmp_sync_Call.wstrIDTo=wstrIDTo;
	soap_tmp_sync_Call.wstrIDFrom=wstrIDFrom;
	soap_tmp_sync_Call.parInputData=parInputData;
	soap_begin(soap);
	soap_serializeheader(soap);
	soap_serialize_sync_Call(soap, &soap_tmp_sync_Call);
	soap_begin_count(soap);
	if (soap->mode & SOAP_IO_LENGTH)
	{	soap_envelope_begin_out(soap);
		soap_putheader(soap);
		soap_body_begin_out(soap);
		soap_put_sync_Call(soap, &soap_tmp_sync_Call, "sync-Call", "");
		soap_body_end_out(soap);
		soap_envelope_end_out(soap);
	}
	if (soap_connect(soap, URL, action)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put_sync_Call(soap, &soap_tmp_sync_Call, "sync-Call", "")
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap_closesock(soap);
	soap_default_sync_CallResponse(soap, &r);
	if (soap_begin_recv(soap)
	 || soap_envelope_begin_in(soap)
	 || soap_recv_header(soap)
	 || soap_body_begin_in(soap))
		return soap_closesock(soap);
	soap_get_sync_CallResponse(soap, &r, "sync-CallResponse", "");
	if (soap->error)
	{	if (soap->error == SOAP_TAG_MISMATCH && soap->level == 2)
			return soap_recv_fault(soap);
		return soap_closesock(soap);
	}
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
#ifndef WITH_LEANER
	 || soap_resolve_attachments(soap)
#endif
	 || soap_end_recv(soap))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

SOAP_FMAC5 int SOAP_FMAC6 soap_call_sync_start(struct soap *soap, const char *URL, const char *action, wchar_t *wstrType, wchar_t *wstrIDFrom, param__params parOptions, struct sync_startResponse &r)
{
	struct sync_start soap_tmp_sync_start;
	soap->encodingStyle = NULL;
	soap_tmp_sync_start.wstrType=wstrType;
	soap_tmp_sync_start.wstrIDFrom=wstrIDFrom;
	soap_tmp_sync_start.parOptions=parOptions;
	soap_begin(soap);
	soap_serializeheader(soap);
	soap_serialize_sync_start(soap, &soap_tmp_sync_start);
	soap_begin_count(soap);
	if (soap->mode & SOAP_IO_LENGTH)
	{	soap_envelope_begin_out(soap);
		soap_putheader(soap);
		soap_body_begin_out(soap);
		soap_put_sync_start(soap, &soap_tmp_sync_start, "sync-start", "");
		soap_body_end_out(soap);
		soap_envelope_end_out(soap);
	}
	if (soap_connect(soap, URL, action)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put_sync_start(soap, &soap_tmp_sync_start, "sync-start", "")
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap_closesock(soap);
	soap_default_sync_startResponse(soap, &r);
	if (soap_begin_recv(soap)
	 || soap_envelope_begin_in(soap)
	 || soap_recv_header(soap)
	 || soap_body_begin_in(soap))
		return soap_closesock(soap);
	soap_get_sync_startResponse(soap, &r, "sync-startResponse", "");
	if (soap->error)
	{	if (soap->error == SOAP_TAG_MISMATCH && soap->level == 2)
			return soap_recv_fault(soap);
		return soap_closesock(soap);
	}
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
#ifndef WITH_LEANER
	 || soap_resolve_attachments(soap)
#endif
	 || soap_end_recv(soap))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

SOAP_FMAC5 int SOAP_FMAC6 soap_call_klhst_UseKeepConnection(struct soap *soap, const char *URL, const char *action, wchar_t *host, struct klhst_UseKeepConnectionResponse &r)
{
	struct klhst_UseKeepConnection soap_tmp_klhst_UseKeepConnection;
	soap->encodingStyle = NULL;
	soap_tmp_klhst_UseKeepConnection.host=host;
	soap_begin(soap);
	soap_serializeheader(soap);
	soap_serialize_klhst_UseKeepConnection(soap, &soap_tmp_klhst_UseKeepConnection);
	soap_begin_count(soap);
	if (soap->mode & SOAP_IO_LENGTH)
	{	soap_envelope_begin_out(soap);
		soap_putheader(soap);
		soap_body_begin_out(soap);
		soap_put_klhst_UseKeepConnection(soap, &soap_tmp_klhst_UseKeepConnection, "klhst-UseKeepConnection", "");
		soap_body_end_out(soap);
		soap_envelope_end_out(soap);
	}
	if (soap_connect(soap, URL, action)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put_klhst_UseKeepConnection(soap, &soap_tmp_klhst_UseKeepConnection, "klhst-UseKeepConnection", "")
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap_closesock(soap);
	soap_default_klhst_UseKeepConnectionResponse(soap, &r);
	if (soap_begin_recv(soap)
	 || soap_envelope_begin_in(soap)
	 || soap_recv_header(soap)
	 || soap_body_begin_in(soap))
		return soap_closesock(soap);
	soap_get_klhst_UseKeepConnectionResponse(soap, &r, "klhst-UseKeepConnectionResponse", "");
	if (soap->error)
	{	if (soap->error == SOAP_TAG_MISMATCH && soap->level == 2)
			return soap_recv_fault(soap);
		return soap_closesock(soap);
	}
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
#ifndef WITH_LEANER
	 || soap_resolve_attachments(soap)
#endif
	 || soap_end_recv(soap))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

SOAP_FMAC5 int SOAP_FMAC6 soap_call_klhst_AddHosts(struct soap *soap, const char *URL, const char *action, param__params info, struct klhst_AddHostsResponse &r)
{
	struct klhst_AddHosts soap_tmp_klhst_AddHosts;
	soap->encodingStyle = NULL;
	soap_tmp_klhst_AddHosts.info=info;
	soap_begin(soap);
	soap_serializeheader(soap);
	soap_serialize_klhst_AddHosts(soap, &soap_tmp_klhst_AddHosts);
	soap_begin_count(soap);
	if (soap->mode & SOAP_IO_LENGTH)
	{	soap_envelope_begin_out(soap);
		soap_putheader(soap);
		soap_body_begin_out(soap);
		soap_put_klhst_AddHosts(soap, &soap_tmp_klhst_AddHosts, "klhst-AddHosts", "");
		soap_body_end_out(soap);
		soap_envelope_end_out(soap);
	}
	if (soap_connect(soap, URL, action)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put_klhst_AddHosts(soap, &soap_tmp_klhst_AddHosts, "klhst-AddHosts", "")
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap_closesock(soap);
	soap_default_klhst_AddHostsResponse(soap, &r);
	if (soap_begin_recv(soap)
	 || soap_envelope_begin_in(soap)
	 || soap_recv_header(soap)
	 || soap_body_begin_in(soap))
		return soap_closesock(soap);
	soap_get_klhst_AddHostsResponse(soap, &r, "klhst-AddHostsResponse", "");
	if (soap->error)
	{	if (soap->error == SOAP_TAG_MISMATCH && soap->level == 2)
			return soap_recv_fault(soap);
		return soap_closesock(soap);
	}
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
#ifndef WITH_LEANER
	 || soap_resolve_attachments(soap)
#endif
	 || soap_end_recv(soap))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

SOAP_FMAC5 int SOAP_FMAC6 soap_call_klhst_GetHostTasks(struct soap *soap, const char *URL, const char *action, wchar_t *host, wchar_t *product, wchar_t *version, long lifetime, struct klhst_GetHostTasksResponse &r)
{
	struct klhst_GetHostTasks soap_tmp_klhst_GetHostTasks;
	soap->encodingStyle = NULL;
	soap_tmp_klhst_GetHostTasks.host=host;
	soap_tmp_klhst_GetHostTasks.product=product;
	soap_tmp_klhst_GetHostTasks.version=version;
	soap_tmp_klhst_GetHostTasks.lifetime=lifetime;
	soap_begin(soap);
	soap_serializeheader(soap);
	soap_serialize_klhst_GetHostTasks(soap, &soap_tmp_klhst_GetHostTasks);
	soap_begin_count(soap);
	if (soap->mode & SOAP_IO_LENGTH)
	{	soap_envelope_begin_out(soap);
		soap_putheader(soap);
		soap_body_begin_out(soap);
		soap_put_klhst_GetHostTasks(soap, &soap_tmp_klhst_GetHostTasks, "klhst-GetHostTasks", "");
		soap_body_end_out(soap);
		soap_envelope_end_out(soap);
	}
	if (soap_connect(soap, URL, action)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put_klhst_GetHostTasks(soap, &soap_tmp_klhst_GetHostTasks, "klhst-GetHostTasks", "")
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap_closesock(soap);
	soap_default_klhst_GetHostTasksResponse(soap, &r);
	if (soap_begin_recv(soap)
	 || soap_envelope_begin_in(soap)
	 || soap_recv_header(soap)
	 || soap_body_begin_in(soap))
		return soap_closesock(soap);
	soap_get_klhst_GetHostTasksResponse(soap, &r, "klhst-GetHostTasksResponse", "");
	if (soap->error)
	{	if (soap->error == SOAP_TAG_MISMATCH && soap->level == 2)
			return soap_recv_fault(soap);
		return soap_closesock(soap);
	}
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
#ifndef WITH_LEANER
	 || soap_resolve_attachments(soap)
#endif
	 || soap_end_recv(soap))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

SOAP_FMAC5 int SOAP_FMAC6 soap_call_klhst_GetDomains(struct soap *soap, const char *URL, const char *action, void *_, struct klhst_GetDomainsResponse &r)
{
	struct klhst_GetDomains soap_tmp_klhst_GetDomains;
	soap->encodingStyle = NULL;
	soap_tmp_klhst_GetDomains._=_;
	soap_begin(soap);
	soap_serializeheader(soap);
	soap_serialize_klhst_GetDomains(soap, &soap_tmp_klhst_GetDomains);
	soap_begin_count(soap);
	if (soap->mode & SOAP_IO_LENGTH)
	{	soap_envelope_begin_out(soap);
		soap_putheader(soap);
		soap_body_begin_out(soap);
		soap_put_klhst_GetDomains(soap, &soap_tmp_klhst_GetDomains, "klhst-GetDomains", "");
		soap_body_end_out(soap);
		soap_envelope_end_out(soap);
	}
	if (soap_connect(soap, URL, action)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put_klhst_GetDomains(soap, &soap_tmp_klhst_GetDomains, "klhst-GetDomains", "")
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap_closesock(soap);
	soap_default_klhst_GetDomainsResponse(soap, &r);
	if (soap_begin_recv(soap)
	 || soap_envelope_begin_in(soap)
	 || soap_recv_header(soap)
	 || soap_body_begin_in(soap))
		return soap_closesock(soap);
	soap_get_klhst_GetDomainsResponse(soap, &r, "klhst-GetDomainsResponse", "");
	if (soap->error)
	{	if (soap->error == SOAP_TAG_MISMATCH && soap->level == 2)
			return soap_recv_fault(soap);
		return soap_closesock(soap);
	}
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
#ifndef WITH_LEANER
	 || soap_resolve_attachments(soap)
#endif
	 || soap_end_recv(soap))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

SOAP_FMAC5 int SOAP_FMAC6 soap_call_klhst_GetDomainHosts(struct soap *soap, const char *URL, const char *action, wchar_t *domain, struct klhst_GetDomainHostsResponse &r)
{
	struct klhst_GetDomainHosts soap_tmp_klhst_GetDomainHosts;
	soap->encodingStyle = NULL;
	soap_tmp_klhst_GetDomainHosts.domain=domain;
	soap_begin(soap);
	soap_serializeheader(soap);
	soap_serialize_klhst_GetDomainHosts(soap, &soap_tmp_klhst_GetDomainHosts);
	soap_begin_count(soap);
	if (soap->mode & SOAP_IO_LENGTH)
	{	soap_envelope_begin_out(soap);
		soap_putheader(soap);
		soap_body_begin_out(soap);
		soap_put_klhst_GetDomainHosts(soap, &soap_tmp_klhst_GetDomainHosts, "klhst-GetDomainHosts", "");
		soap_body_end_out(soap);
		soap_envelope_end_out(soap);
	}
	if (soap_connect(soap, URL, action)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put_klhst_GetDomainHosts(soap, &soap_tmp_klhst_GetDomainHosts, "klhst-GetDomainHosts", "")
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap_closesock(soap);
	soap_default_klhst_GetDomainHostsResponse(soap, &r);
	if (soap_begin_recv(soap)
	 || soap_envelope_begin_in(soap)
	 || soap_recv_header(soap)
	 || soap_body_begin_in(soap))
		return soap_closesock(soap);
	soap_get_klhst_GetDomainHostsResponse(soap, &r, "klhst-GetDomainHostsResponse", "");
	if (soap->error)
	{	if (soap->error == SOAP_TAG_MISMATCH && soap->level == 2)
			return soap_recv_fault(soap);
		return soap_closesock(soap);
	}
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
#ifndef WITH_LEANER
	 || soap_resolve_attachments(soap)
#endif
	 || soap_end_recv(soap))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

SOAP_FMAC5 int SOAP_FMAC6 soap_call_klhst_GetHostInfo(struct soap *soap, const char *URL, const char *action, wchar_t *name, klhst_wstrings fields, struct klhst_GetHostInfoResponse &r)
{
	struct klhst_GetHostInfo soap_tmp_klhst_GetHostInfo;
	soap->encodingStyle = NULL;
	soap_tmp_klhst_GetHostInfo.name=name;
	soap_tmp_klhst_GetHostInfo.fields=fields;
	soap_begin(soap);
	soap_serializeheader(soap);
	soap_serialize_klhst_GetHostInfo(soap, &soap_tmp_klhst_GetHostInfo);
	soap_begin_count(soap);
	if (soap->mode & SOAP_IO_LENGTH)
	{	soap_envelope_begin_out(soap);
		soap_putheader(soap);
		soap_body_begin_out(soap);
		soap_put_klhst_GetHostInfo(soap, &soap_tmp_klhst_GetHostInfo, "klhst-GetHostInfo", "");
		soap_body_end_out(soap);
		soap_envelope_end_out(soap);
	}
	if (soap_connect(soap, URL, action)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put_klhst_GetHostInfo(soap, &soap_tmp_klhst_GetHostInfo, "klhst-GetHostInfo", "")
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap_closesock(soap);
	soap_default_klhst_GetHostInfoResponse(soap, &r);
	if (soap_begin_recv(soap)
	 || soap_envelope_begin_in(soap)
	 || soap_recv_header(soap)
	 || soap_body_begin_in(soap))
		return soap_closesock(soap);
	soap_get_klhst_GetHostInfoResponse(soap, &r, "klhst-GetHostInfoResponse", "");
	if (soap->error)
	{	if (soap->error == SOAP_TAG_MISMATCH && soap->level == 2)
			return soap_recv_fault(soap);
		return soap_closesock(soap);
	}
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
#ifndef WITH_LEANER
	 || soap_resolve_attachments(soap)
#endif
	 || soap_end_recv(soap))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

SOAP_FMAC5 int SOAP_FMAC6 soap_call_klhst_AddDomain(struct soap *soap, const char *URL, const char *action, wchar_t *domain, long type, struct klhst_AddDomainResponse &r)
{
	struct klhst_AddDomain soap_tmp_klhst_AddDomain;
	soap->encodingStyle = NULL;
	soap_tmp_klhst_AddDomain.domain=domain;
	soap_tmp_klhst_AddDomain.type=type;
	soap_begin(soap);
	soap_serializeheader(soap);
	soap_serialize_klhst_AddDomain(soap, &soap_tmp_klhst_AddDomain);
	soap_begin_count(soap);
	if (soap->mode & SOAP_IO_LENGTH)
	{	soap_envelope_begin_out(soap);
		soap_putheader(soap);
		soap_body_begin_out(soap);
		soap_put_klhst_AddDomain(soap, &soap_tmp_klhst_AddDomain, "klhst-AddDomain", "");
		soap_body_end_out(soap);
		soap_envelope_end_out(soap);
	}
	if (soap_connect(soap, URL, action)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put_klhst_AddDomain(soap, &soap_tmp_klhst_AddDomain, "klhst-AddDomain", "")
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap_closesock(soap);
	soap_default_klhst_AddDomainResponse(soap, &r);
	if (soap_begin_recv(soap)
	 || soap_envelope_begin_in(soap)
	 || soap_recv_header(soap)
	 || soap_body_begin_in(soap))
		return soap_closesock(soap);
	soap_get_klhst_AddDomainResponse(soap, &r, "klhst-AddDomainResponse", "");
	if (soap->error)
	{	if (soap->error == SOAP_TAG_MISMATCH && soap->level == 2)
			return soap_recv_fault(soap);
		return soap_closesock(soap);
	}
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
#ifndef WITH_LEANER
	 || soap_resolve_attachments(soap)
#endif
	 || soap_end_recv(soap))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

SOAP_FMAC5 int SOAP_FMAC6 soap_call_klhst_DelDomain(struct soap *soap, const char *URL, const char *action, wchar_t *domain, struct klhst_DelDomainResponse &r)
{
	struct klhst_DelDomain soap_tmp_klhst_DelDomain;
	soap->encodingStyle = NULL;
	soap_tmp_klhst_DelDomain.domain=domain;
	soap_begin(soap);
	soap_serializeheader(soap);
	soap_serialize_klhst_DelDomain(soap, &soap_tmp_klhst_DelDomain);
	soap_begin_count(soap);
	if (soap->mode & SOAP_IO_LENGTH)
	{	soap_envelope_begin_out(soap);
		soap_putheader(soap);
		soap_body_begin_out(soap);
		soap_put_klhst_DelDomain(soap, &soap_tmp_klhst_DelDomain, "klhst-DelDomain", "");
		soap_body_end_out(soap);
		soap_envelope_end_out(soap);
	}
	if (soap_connect(soap, URL, action)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put_klhst_DelDomain(soap, &soap_tmp_klhst_DelDomain, "klhst-DelDomain", "")
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap_closesock(soap);
	soap_default_klhst_DelDomainResponse(soap, &r);
	if (soap_begin_recv(soap)
	 || soap_envelope_begin_in(soap)
	 || soap_recv_header(soap)
	 || soap_body_begin_in(soap))
		return soap_closesock(soap);
	soap_get_klhst_DelDomainResponse(soap, &r, "klhst-DelDomainResponse", "");
	if (soap->error)
	{	if (soap->error == SOAP_TAG_MISMATCH && soap->level == 2)
			return soap_recv_fault(soap);
		return soap_closesock(soap);
	}
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
#ifndef WITH_LEANER
	 || soap_resolve_attachments(soap)
#endif
	 || soap_end_recv(soap))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

SOAP_FMAC5 int SOAP_FMAC6 soap_call_klhst_AddHost(struct soap *soap, const char *URL, const char *action, param__params info, struct klhst_AddHostResponse &r)
{
	struct klhst_AddHost soap_tmp_klhst_AddHost;
	soap->encodingStyle = NULL;
	soap_tmp_klhst_AddHost.info=info;
	soap_begin(soap);
	soap_serializeheader(soap);
	soap_serialize_klhst_AddHost(soap, &soap_tmp_klhst_AddHost);
	soap_begin_count(soap);
	if (soap->mode & SOAP_IO_LENGTH)
	{	soap_envelope_begin_out(soap);
		soap_putheader(soap);
		soap_body_begin_out(soap);
		soap_put_klhst_AddHost(soap, &soap_tmp_klhst_AddHost, "klhst-AddHost", "");
		soap_body_end_out(soap);
		soap_envelope_end_out(soap);
	}
	if (soap_connect(soap, URL, action)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put_klhst_AddHost(soap, &soap_tmp_klhst_AddHost, "klhst-AddHost", "")
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap_closesock(soap);
	soap_default_klhst_AddHostResponse(soap, &r);
	if (soap_begin_recv(soap)
	 || soap_envelope_begin_in(soap)
	 || soap_recv_header(soap)
	 || soap_body_begin_in(soap))
		return soap_closesock(soap);
	soap_get_klhst_AddHostResponse(soap, &r, "klhst-AddHostResponse", "");
	if (soap->error)
	{	if (soap->error == SOAP_TAG_MISMATCH && soap->level == 2)
			return soap_recv_fault(soap);
		return soap_closesock(soap);
	}
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
#ifndef WITH_LEANER
	 || soap_resolve_attachments(soap)
#endif
	 || soap_end_recv(soap))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

SOAP_FMAC5 int SOAP_FMAC6 soap_call_klhst_DelHost(struct soap *soap, const char *URL, const char *action, wchar_t *name, struct klhst_DelHostResponse &r)
{
	struct klhst_DelHost soap_tmp_klhst_DelHost;
	soap->encodingStyle = NULL;
	soap_tmp_klhst_DelHost.name=name;
	soap_begin(soap);
	soap_serializeheader(soap);
	soap_serialize_klhst_DelHost(soap, &soap_tmp_klhst_DelHost);
	soap_begin_count(soap);
	if (soap->mode & SOAP_IO_LENGTH)
	{	soap_envelope_begin_out(soap);
		soap_putheader(soap);
		soap_body_begin_out(soap);
		soap_put_klhst_DelHost(soap, &soap_tmp_klhst_DelHost, "klhst-DelHost", "");
		soap_body_end_out(soap);
		soap_envelope_end_out(soap);
	}
	if (soap_connect(soap, URL, action)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put_klhst_DelHost(soap, &soap_tmp_klhst_DelHost, "klhst-DelHost", "")
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap_closesock(soap);
	soap_default_klhst_DelHostResponse(soap, &r);
	if (soap_begin_recv(soap)
	 || soap_envelope_begin_in(soap)
	 || soap_recv_header(soap)
	 || soap_body_begin_in(soap))
		return soap_closesock(soap);
	soap_get_klhst_DelHostResponse(soap, &r, "klhst-DelHostResponse", "");
	if (soap->error)
	{	if (soap->error == SOAP_TAG_MISMATCH && soap->level == 2)
			return soap_recv_fault(soap);
		return soap_closesock(soap);
	}
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
#ifndef WITH_LEANER
	 || soap_resolve_attachments(soap)
#endif
	 || soap_end_recv(soap))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

SOAP_FMAC5 int SOAP_FMAC6 soap_call_klhst_UpdateHost(struct soap *soap, const char *URL, const char *action, wchar_t *name, param__params info, struct klhst_UpdateHostResponse &r)
{
	struct klhst_UpdateHost soap_tmp_klhst_UpdateHost;
	soap->encodingStyle = NULL;
	soap_tmp_klhst_UpdateHost.name=name;
	soap_tmp_klhst_UpdateHost.info=info;
	soap_begin(soap);
	soap_serializeheader(soap);
	soap_serialize_klhst_UpdateHost(soap, &soap_tmp_klhst_UpdateHost);
	soap_begin_count(soap);
	if (soap->mode & SOAP_IO_LENGTH)
	{	soap_envelope_begin_out(soap);
		soap_putheader(soap);
		soap_body_begin_out(soap);
		soap_put_klhst_UpdateHost(soap, &soap_tmp_klhst_UpdateHost, "klhst-UpdateHost", "");
		soap_body_end_out(soap);
		soap_envelope_end_out(soap);
	}
	if (soap_connect(soap, URL, action)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put_klhst_UpdateHost(soap, &soap_tmp_klhst_UpdateHost, "klhst-UpdateHost", "")
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap_closesock(soap);
	soap_default_klhst_UpdateHostResponse(soap, &r);
	if (soap_begin_recv(soap)
	 || soap_envelope_begin_in(soap)
	 || soap_recv_header(soap)
	 || soap_body_begin_in(soap))
		return soap_closesock(soap);
	soap_get_klhst_UpdateHostResponse(soap, &r, "klhst-UpdateHostResponse", "");
	if (soap->error)
	{	if (soap->error == SOAP_TAG_MISMATCH && soap->level == 2)
			return soap_recv_fault(soap);
		return soap_closesock(soap);
	}
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
#ifndef WITH_LEANER
	 || soap_resolve_attachments(soap)
#endif
	 || soap_end_recv(soap))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

SOAP_FMAC5 int SOAP_FMAC6 soap_call_klhst_GetHostProducts(struct soap *soap, const char *URL, const char *action, wchar_t *name, struct klhst_GetHostProductsResponse &r)
{
	struct klhst_GetHostProducts soap_tmp_klhst_GetHostProducts;
	soap->encodingStyle = NULL;
	soap_tmp_klhst_GetHostProducts.name=name;
	soap_begin(soap);
	soap_serializeheader(soap);
	soap_serialize_klhst_GetHostProducts(soap, &soap_tmp_klhst_GetHostProducts);
	soap_begin_count(soap);
	if (soap->mode & SOAP_IO_LENGTH)
	{	soap_envelope_begin_out(soap);
		soap_putheader(soap);
		soap_body_begin_out(soap);
		soap_put_klhst_GetHostProducts(soap, &soap_tmp_klhst_GetHostProducts, "klhst-GetHostProducts", "");
		soap_body_end_out(soap);
		soap_envelope_end_out(soap);
	}
	if (soap_connect(soap, URL, action)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put_klhst_GetHostProducts(soap, &soap_tmp_klhst_GetHostProducts, "klhst-GetHostProducts", "")
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap_closesock(soap);
	soap_default_klhst_GetHostProductsResponse(soap, &r);
	if (soap_begin_recv(soap)
	 || soap_envelope_begin_in(soap)
	 || soap_recv_header(soap)
	 || soap_body_begin_in(soap))
		return soap_closesock(soap);
	soap_get_klhst_GetHostProductsResponse(soap, &r, "klhst-GetHostProductsResponse", "");
	if (soap->error)
	{	if (soap->error == SOAP_TAG_MISMATCH && soap->level == 2)
			return soap_recv_fault(soap);
		return soap_closesock(soap);
	}
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
#ifndef WITH_LEANER
	 || soap_resolve_attachments(soap)
#endif
	 || soap_end_recv(soap))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

SOAP_FMAC5 int SOAP_FMAC6 soap_call_klhst_SS_Read(struct soap *soap, const char *URL, const char *action, wchar_t *name, wchar_t *type, wchar_t *product, wchar_t *version, wchar_t *section, long timeout, struct klhst_SS_ReadResponse &r)
{
	struct klhst_SS_Read soap_tmp_klhst_SS_Read;
	soap->encodingStyle = NULL;
	soap_tmp_klhst_SS_Read.name=name;
	soap_tmp_klhst_SS_Read.type=type;
	soap_tmp_klhst_SS_Read.product=product;
	soap_tmp_klhst_SS_Read.version=version;
	soap_tmp_klhst_SS_Read.section=section;
	soap_tmp_klhst_SS_Read.timeout=timeout;
	soap_begin(soap);
	soap_serializeheader(soap);
	soap_serialize_klhst_SS_Read(soap, &soap_tmp_klhst_SS_Read);
	soap_begin_count(soap);
	if (soap->mode & SOAP_IO_LENGTH)
	{	soap_envelope_begin_out(soap);
		soap_putheader(soap);
		soap_body_begin_out(soap);
		soap_put_klhst_SS_Read(soap, &soap_tmp_klhst_SS_Read, "klhst-SS-Read", "");
		soap_body_end_out(soap);
		soap_envelope_end_out(soap);
	}
	if (soap_connect(soap, URL, action)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put_klhst_SS_Read(soap, &soap_tmp_klhst_SS_Read, "klhst-SS-Read", "")
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap_closesock(soap);
	soap_default_klhst_SS_ReadResponse(soap, &r);
	if (soap_begin_recv(soap)
	 || soap_envelope_begin_in(soap)
	 || soap_recv_header(soap)
	 || soap_body_begin_in(soap))
		return soap_closesock(soap);
	soap_get_klhst_SS_ReadResponse(soap, &r, "klhst-SS-ReadResponse", "");
	if (soap->error)
	{	if (soap->error == SOAP_TAG_MISMATCH && soap->level == 2)
			return soap_recv_fault(soap);
		return soap_closesock(soap);
	}
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
#ifndef WITH_LEANER
	 || soap_resolve_attachments(soap)
#endif
	 || soap_end_recv(soap))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

SOAP_FMAC5 int SOAP_FMAC6 soap_call_klhst_SS_Write(struct soap *soap, const char *URL, const char *action, wchar_t *name, wchar_t *type, wchar_t *product, wchar_t *version, wchar_t *section, long flags, param__params data, long timeout, struct klhst_SS_WriteResponse &r)
{
	struct klhst_SS_Write soap_tmp_klhst_SS_Write;
	soap->encodingStyle = NULL;
	soap_tmp_klhst_SS_Write.name=name;
	soap_tmp_klhst_SS_Write.type=type;
	soap_tmp_klhst_SS_Write.product=product;
	soap_tmp_klhst_SS_Write.version=version;
	soap_tmp_klhst_SS_Write.section=section;
	soap_tmp_klhst_SS_Write.flags=flags;
	soap_tmp_klhst_SS_Write.data=data;
	soap_tmp_klhst_SS_Write.timeout=timeout;
	soap_begin(soap);
	soap_serializeheader(soap);
	soap_serialize_klhst_SS_Write(soap, &soap_tmp_klhst_SS_Write);
	soap_begin_count(soap);
	if (soap->mode & SOAP_IO_LENGTH)
	{	soap_envelope_begin_out(soap);
		soap_putheader(soap);
		soap_body_begin_out(soap);
		soap_put_klhst_SS_Write(soap, &soap_tmp_klhst_SS_Write, "klhst-SS-Write", "");
		soap_body_end_out(soap);
		soap_envelope_end_out(soap);
	}
	if (soap_connect(soap, URL, action)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put_klhst_SS_Write(soap, &soap_tmp_klhst_SS_Write, "klhst-SS-Write", "")
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap_closesock(soap);
	soap_default_klhst_SS_WriteResponse(soap, &r);
	if (soap_begin_recv(soap)
	 || soap_envelope_begin_in(soap)
	 || soap_recv_header(soap)
	 || soap_body_begin_in(soap))
		return soap_closesock(soap);
	soap_get_klhst_SS_WriteResponse(soap, &r, "klhst-SS-WriteResponse", "");
	if (soap->error)
	{	if (soap->error == SOAP_TAG_MISMATCH && soap->level == 2)
			return soap_recv_fault(soap);
		return soap_closesock(soap);
	}
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
#ifndef WITH_LEANER
	 || soap_resolve_attachments(soap)
#endif
	 || soap_end_recv(soap))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

SOAP_FMAC5 int SOAP_FMAC6 soap_call_klhst_SS_CreateSection(struct soap *soap, const char *URL, const char *action, wchar_t *name, wchar_t *type, wchar_t *product, wchar_t *version, wchar_t *section, long timeout, struct klhst_SS_CreateSectionResponse &r)
{
	struct klhst_SS_CreateSection soap_tmp_klhst_SS_CreateSection;
	soap->encodingStyle = NULL;
	soap_tmp_klhst_SS_CreateSection.name=name;
	soap_tmp_klhst_SS_CreateSection.type=type;
	soap_tmp_klhst_SS_CreateSection.product=product;
	soap_tmp_klhst_SS_CreateSection.version=version;
	soap_tmp_klhst_SS_CreateSection.section=section;
	soap_tmp_klhst_SS_CreateSection.timeout=timeout;
	soap_begin(soap);
	soap_serializeheader(soap);
	soap_serialize_klhst_SS_CreateSection(soap, &soap_tmp_klhst_SS_CreateSection);
	soap_begin_count(soap);
	if (soap->mode & SOAP_IO_LENGTH)
	{	soap_envelope_begin_out(soap);
		soap_putheader(soap);
		soap_body_begin_out(soap);
		soap_put_klhst_SS_CreateSection(soap, &soap_tmp_klhst_SS_CreateSection, "klhst-SS-CreateSection", "");
		soap_body_end_out(soap);
		soap_envelope_end_out(soap);
	}
	if (soap_connect(soap, URL, action)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put_klhst_SS_CreateSection(soap, &soap_tmp_klhst_SS_CreateSection, "klhst-SS-CreateSection", "")
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap_closesock(soap);
	soap_default_klhst_SS_CreateSectionResponse(soap, &r);
	if (soap_begin_recv(soap)
	 || soap_envelope_begin_in(soap)
	 || soap_recv_header(soap)
	 || soap_body_begin_in(soap))
		return soap_closesock(soap);
	soap_get_klhst_SS_CreateSectionResponse(soap, &r, "klhst-SS-CreateSectionResponse", "");
	if (soap->error)
	{	if (soap->error == SOAP_TAG_MISMATCH && soap->level == 2)
			return soap_recv_fault(soap);
		return soap_closesock(soap);
	}
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
#ifndef WITH_LEANER
	 || soap_resolve_attachments(soap)
#endif
	 || soap_end_recv(soap))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

SOAP_FMAC5 int SOAP_FMAC6 soap_call_klhst_SS_DeleteSection(struct soap *soap, const char *URL, const char *action, wchar_t *name, wchar_t *type, wchar_t *product, wchar_t *version, wchar_t *section, long timeout, struct klhst_SS_DeleteSectionResponse &r)
{
	struct klhst_SS_DeleteSection soap_tmp_klhst_SS_DeleteSection;
	soap->encodingStyle = NULL;
	soap_tmp_klhst_SS_DeleteSection.name=name;
	soap_tmp_klhst_SS_DeleteSection.type=type;
	soap_tmp_klhst_SS_DeleteSection.product=product;
	soap_tmp_klhst_SS_DeleteSection.version=version;
	soap_tmp_klhst_SS_DeleteSection.section=section;
	soap_tmp_klhst_SS_DeleteSection.timeout=timeout;
	soap_begin(soap);
	soap_serializeheader(soap);
	soap_serialize_klhst_SS_DeleteSection(soap, &soap_tmp_klhst_SS_DeleteSection);
	soap_begin_count(soap);
	if (soap->mode & SOAP_IO_LENGTH)
	{	soap_envelope_begin_out(soap);
		soap_putheader(soap);
		soap_body_begin_out(soap);
		soap_put_klhst_SS_DeleteSection(soap, &soap_tmp_klhst_SS_DeleteSection, "klhst-SS-DeleteSection", "");
		soap_body_end_out(soap);
		soap_envelope_end_out(soap);
	}
	if (soap_connect(soap, URL, action)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put_klhst_SS_DeleteSection(soap, &soap_tmp_klhst_SS_DeleteSection, "klhst-SS-DeleteSection", "")
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap_closesock(soap);
	soap_default_klhst_SS_DeleteSectionResponse(soap, &r);
	if (soap_begin_recv(soap)
	 || soap_envelope_begin_in(soap)
	 || soap_recv_header(soap)
	 || soap_body_begin_in(soap))
		return soap_closesock(soap);
	soap_get_klhst_SS_DeleteSectionResponse(soap, &r, "klhst-SS-DeleteSectionResponse", "");
	if (soap->error)
	{	if (soap->error == SOAP_TAG_MISMATCH && soap->level == 2)
			return soap_recv_fault(soap);
		return soap_closesock(soap);
	}
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
#ifndef WITH_LEANER
	 || soap_resolve_attachments(soap)
#endif
	 || soap_end_recv(soap))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

SOAP_FMAC5 int SOAP_FMAC6 soap_call_klhst_SS_GetNames(struct soap *soap, const char *URL, const char *action, wchar_t *name, wchar_t *type, wchar_t *product, wchar_t *version, long timeout, struct klhst_SS_GetNamesResponse &r)
{
	struct klhst_SS_GetNames soap_tmp_klhst_SS_GetNames;
	soap->encodingStyle = NULL;
	soap_tmp_klhst_SS_GetNames.name=name;
	soap_tmp_klhst_SS_GetNames.type=type;
	soap_tmp_klhst_SS_GetNames.product=product;
	soap_tmp_klhst_SS_GetNames.version=version;
	soap_tmp_klhst_SS_GetNames.timeout=timeout;
	soap_begin(soap);
	soap_serializeheader(soap);
	soap_serialize_klhst_SS_GetNames(soap, &soap_tmp_klhst_SS_GetNames);
	soap_begin_count(soap);
	if (soap->mode & SOAP_IO_LENGTH)
	{	soap_envelope_begin_out(soap);
		soap_putheader(soap);
		soap_body_begin_out(soap);
		soap_put_klhst_SS_GetNames(soap, &soap_tmp_klhst_SS_GetNames, "klhst-SS-GetNames", "");
		soap_body_end_out(soap);
		soap_envelope_end_out(soap);
	}
	if (soap_connect(soap, URL, action)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put_klhst_SS_GetNames(soap, &soap_tmp_klhst_SS_GetNames, "klhst-SS-GetNames", "")
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap_closesock(soap);
	soap_default_klhst_SS_GetNamesResponse(soap, &r);
	if (soap_begin_recv(soap)
	 || soap_envelope_begin_in(soap)
	 || soap_recv_header(soap)
	 || soap_body_begin_in(soap))
		return soap_closesock(soap);
	soap_get_klhst_SS_GetNamesResponse(soap, &r, "klhst-SS-GetNamesResponse", "");
	if (soap->error)
	{	if (soap->error == SOAP_TAG_MISMATCH && soap->level == 2)
			return soap_recv_fault(soap);
		return soap_closesock(soap);
	}
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
#ifndef WITH_LEANER
	 || soap_resolve_attachments(soap)
#endif
	 || soap_end_recv(soap))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

SOAP_FMAC5 int SOAP_FMAC6 soap_call_klhst_CallGetRunTimeInfo(struct soap *soap, const char *URL, const char *action, wchar_t *name, param__params filter, struct klhst_CallGetRunTimeInfoResponse &r)
{
	struct klhst_CallGetRunTimeInfo soap_tmp_klhst_CallGetRunTimeInfo;
	soap->encodingStyle = NULL;
	soap_tmp_klhst_CallGetRunTimeInfo.name=name;
	soap_tmp_klhst_CallGetRunTimeInfo.filter=filter;
	soap_begin(soap);
	soap_serializeheader(soap);
	soap_serialize_klhst_CallGetRunTimeInfo(soap, &soap_tmp_klhst_CallGetRunTimeInfo);
	soap_begin_count(soap);
	if (soap->mode & SOAP_IO_LENGTH)
	{	soap_envelope_begin_out(soap);
		soap_putheader(soap);
		soap_body_begin_out(soap);
		soap_put_klhst_CallGetRunTimeInfo(soap, &soap_tmp_klhst_CallGetRunTimeInfo, "klhst-CallGetRunTimeInfo", "");
		soap_body_end_out(soap);
		soap_envelope_end_out(soap);
	}
	if (soap_connect(soap, URL, action)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put_klhst_CallGetRunTimeInfo(soap, &soap_tmp_klhst_CallGetRunTimeInfo, "klhst-CallGetRunTimeInfo", "")
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap_closesock(soap);
	soap_default_klhst_CallGetRunTimeInfoResponse(soap, &r);
	if (soap_begin_recv(soap)
	 || soap_envelope_begin_in(soap)
	 || soap_recv_header(soap)
	 || soap_body_begin_in(soap))
		return soap_closesock(soap);
	soap_get_klhst_CallGetRunTimeInfoResponse(soap, &r, "klhst-CallGetRunTimeInfoResponse", "");
	if (soap->error)
	{	if (soap->error == SOAP_TAG_MISMATCH && soap->level == 2)
			return soap_recv_fault(soap);
		return soap_closesock(soap);
	}
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
#ifndef WITH_LEANER
	 || soap_resolve_attachments(soap)
#endif
	 || soap_end_recv(soap))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

SOAP_FMAC5 int SOAP_FMAC6 soap_call_klhst_CallGetStaticInfo(struct soap *soap, const char *URL, const char *action, wchar_t *name, param__params filter, struct klhst_CallGetStaticInfoResponse &r)
{
	struct klhst_CallGetStaticInfo soap_tmp_klhst_CallGetStaticInfo;
	soap->encodingStyle = NULL;
	soap_tmp_klhst_CallGetStaticInfo.name=name;
	soap_tmp_klhst_CallGetStaticInfo.filter=filter;
	soap_begin(soap);
	soap_serializeheader(soap);
	soap_serialize_klhst_CallGetStaticInfo(soap, &soap_tmp_klhst_CallGetStaticInfo);
	soap_begin_count(soap);
	if (soap->mode & SOAP_IO_LENGTH)
	{	soap_envelope_begin_out(soap);
		soap_putheader(soap);
		soap_body_begin_out(soap);
		soap_put_klhst_CallGetStaticInfo(soap, &soap_tmp_klhst_CallGetStaticInfo, "klhst-CallGetStaticInfo", "");
		soap_body_end_out(soap);
		soap_envelope_end_out(soap);
	}
	if (soap_connect(soap, URL, action)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put_klhst_CallGetStaticInfo(soap, &soap_tmp_klhst_CallGetStaticInfo, "klhst-CallGetStaticInfo", "")
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap_closesock(soap);
	soap_default_klhst_CallGetStaticInfoResponse(soap, &r);
	if (soap_begin_recv(soap)
	 || soap_envelope_begin_in(soap)
	 || soap_recv_header(soap)
	 || soap_body_begin_in(soap))
		return soap_closesock(soap);
	soap_get_klhst_CallGetStaticInfoResponse(soap, &r, "klhst-CallGetStaticInfoResponse", "");
	if (soap->error)
	{	if (soap->error == SOAP_TAG_MISMATCH && soap->level == 2)
			return soap_recv_fault(soap);
		return soap_closesock(soap);
	}
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
#ifndef WITH_LEANER
	 || soap_resolve_attachments(soap)
#endif
	 || soap_end_recv(soap))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

SOAP_FMAC5 int SOAP_FMAC6 soap_call_klhst_CallGetStatistics(struct soap *soap, const char *URL, const char *action, wchar_t *name, param__params filter, struct klhst_CallGetStatisticsResponse &r)
{
	struct klhst_CallGetStatistics soap_tmp_klhst_CallGetStatistics;
	soap->encodingStyle = NULL;
	soap_tmp_klhst_CallGetStatistics.name=name;
	soap_tmp_klhst_CallGetStatistics.filter=filter;
	soap_begin(soap);
	soap_serializeheader(soap);
	soap_serialize_klhst_CallGetStatistics(soap, &soap_tmp_klhst_CallGetStatistics);
	soap_begin_count(soap);
	if (soap->mode & SOAP_IO_LENGTH)
	{	soap_envelope_begin_out(soap);
		soap_putheader(soap);
		soap_body_begin_out(soap);
		soap_put_klhst_CallGetStatistics(soap, &soap_tmp_klhst_CallGetStatistics, "klhst-CallGetStatistics", "");
		soap_body_end_out(soap);
		soap_envelope_end_out(soap);
	}
	if (soap_connect(soap, URL, action)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put_klhst_CallGetStatistics(soap, &soap_tmp_klhst_CallGetStatistics, "klhst-CallGetStatistics", "")
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap_closesock(soap);
	soap_default_klhst_CallGetStatisticsResponse(soap, &r);
	if (soap_begin_recv(soap)
	 || soap_envelope_begin_in(soap)
	 || soap_recv_header(soap)
	 || soap_body_begin_in(soap))
		return soap_closesock(soap);
	soap_get_klhst_CallGetStatisticsResponse(soap, &r, "klhst-CallGetStatisticsResponse", "");
	if (soap->error)
	{	if (soap->error == SOAP_TAG_MISMATCH && soap->level == 2)
			return soap_recv_fault(soap);
		return soap_closesock(soap);
	}
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
#ifndef WITH_LEANER
	 || soap_resolve_attachments(soap)
#endif
	 || soap_end_recv(soap))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

SOAP_FMAC5 int SOAP_FMAC6 soap_call_klhst_CallGetInstancePort(struct soap *soap, const char *URL, const char *action, wchar_t *name, wchar_t *product, wchar_t *version, wchar_t *component, wchar_t *instance, struct klhst_CallGetInstancePortResponse &r)
{
	struct klhst_CallGetInstancePort soap_tmp_klhst_CallGetInstancePort;
	soap->encodingStyle = NULL;
	soap_tmp_klhst_CallGetInstancePort.name=name;
	soap_tmp_klhst_CallGetInstancePort.product=product;
	soap_tmp_klhst_CallGetInstancePort.version=version;
	soap_tmp_klhst_CallGetInstancePort.component=component;
	soap_tmp_klhst_CallGetInstancePort.instance=instance;
	soap_begin(soap);
	soap_serializeheader(soap);
	soap_serialize_klhst_CallGetInstancePort(soap, &soap_tmp_klhst_CallGetInstancePort);
	soap_begin_count(soap);
	if (soap->mode & SOAP_IO_LENGTH)
	{	soap_envelope_begin_out(soap);
		soap_putheader(soap);
		soap_body_begin_out(soap);
		soap_put_klhst_CallGetInstancePort(soap, &soap_tmp_klhst_CallGetInstancePort, "klhst-CallGetInstancePort", "");
		soap_body_end_out(soap);
		soap_envelope_end_out(soap);
	}
	if (soap_connect(soap, URL, action)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put_klhst_CallGetInstancePort(soap, &soap_tmp_klhst_CallGetInstancePort, "klhst-CallGetInstancePort", "")
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap_closesock(soap);
	soap_default_klhst_CallGetInstancePortResponse(soap, &r);
	if (soap_begin_recv(soap)
	 || soap_envelope_begin_in(soap)
	 || soap_recv_header(soap)
	 || soap_body_begin_in(soap))
		return soap_closesock(soap);
	soap_get_klhst_CallGetInstancePortResponse(soap, &r, "klhst-CallGetInstancePortResponse", "");
	if (soap->error)
	{	if (soap->error == SOAP_TAG_MISMATCH && soap->level == 2)
			return soap_recv_fault(soap);
		return soap_closesock(soap);
	}
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
#ifndef WITH_LEANER
	 || soap_resolve_attachments(soap)
#endif
	 || soap_end_recv(soap))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

SOAP_FMAC5 int SOAP_FMAC6 soap_call_klhst_NotifyTask(struct soap *soap, const char *URL, const char *action, wchar_t *name, struct klhst_NotifyTaskResponse &r)
{
	struct klhst_NotifyTask soap_tmp_klhst_NotifyTask;
	soap->encodingStyle = NULL;
	soap_tmp_klhst_NotifyTask.name=name;
	soap_begin(soap);
	soap_serializeheader(soap);
	soap_serialize_klhst_NotifyTask(soap, &soap_tmp_klhst_NotifyTask);
	soap_begin_count(soap);
	if (soap->mode & SOAP_IO_LENGTH)
	{	soap_envelope_begin_out(soap);
		soap_putheader(soap);
		soap_body_begin_out(soap);
		soap_put_klhst_NotifyTask(soap, &soap_tmp_klhst_NotifyTask, "klhst-NotifyTask", "");
		soap_body_end_out(soap);
		soap_envelope_end_out(soap);
	}
	if (soap_connect(soap, URL, action)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put_klhst_NotifyTask(soap, &soap_tmp_klhst_NotifyTask, "klhst-NotifyTask", "")
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap_closesock(soap);
	soap_default_klhst_NotifyTaskResponse(soap, &r);
	if (soap_begin_recv(soap)
	 || soap_envelope_begin_in(soap)
	 || soap_recv_header(soap)
	 || soap_body_begin_in(soap))
		return soap_closesock(soap);
	soap_get_klhst_NotifyTaskResponse(soap, &r, "klhst-NotifyTaskResponse", "");
	if (soap->error)
	{	if (soap->error == SOAP_TAG_MISMATCH && soap->level == 2)
			return soap_recv_fault(soap);
		return soap_closesock(soap);
	}
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
#ifndef WITH_LEANER
	 || soap_resolve_attachments(soap)
#endif
	 || soap_end_recv(soap))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

SOAP_FMAC5 int SOAP_FMAC6 soap_call_klupdt_GetUpdatesInfo(struct soap *soap, const char *URL, const char *action, param__params filter, struct klupdt_GetUpdatesInfoResponse &r)
{
	struct klupdt_GetUpdatesInfo soap_tmp_klupdt_GetUpdatesInfo;
	soap->encodingStyle = NULL;
	soap_tmp_klupdt_GetUpdatesInfo.filter=filter;
	soap_begin(soap);
	soap_serializeheader(soap);
	soap_serialize_klupdt_GetUpdatesInfo(soap, &soap_tmp_klupdt_GetUpdatesInfo);
	soap_begin_count(soap);
	if (soap->mode & SOAP_IO_LENGTH)
	{	soap_envelope_begin_out(soap);
		soap_putheader(soap);
		soap_body_begin_out(soap);
		soap_put_klupdt_GetUpdatesInfo(soap, &soap_tmp_klupdt_GetUpdatesInfo, "klupdt-GetUpdatesInfo", "");
		soap_body_end_out(soap);
		soap_envelope_end_out(soap);
	}
	if (soap_connect(soap, URL, action)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put_klupdt_GetUpdatesInfo(soap, &soap_tmp_klupdt_GetUpdatesInfo, "klupdt-GetUpdatesInfo", "")
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap_closesock(soap);
	soap_default_klupdt_GetUpdatesInfoResponse(soap, &r);
	if (soap_begin_recv(soap)
	 || soap_envelope_begin_in(soap)
	 || soap_recv_header(soap)
	 || soap_body_begin_in(soap))
		return soap_closesock(soap);
	soap_get_klupdt_GetUpdatesInfoResponse(soap, &r, "klupdt-GetUpdatesInfoResponse", "");
	if (soap->error)
	{	if (soap->error == SOAP_TAG_MISMATCH && soap->level == 2)
			return soap_recv_fault(soap);
		return soap_closesock(soap);
	}
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
#ifndef WITH_LEANER
	 || soap_resolve_attachments(soap)
#endif
	 || soap_end_recv(soap))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

SOAP_FMAC5 int SOAP_FMAC6 soap_call_klupdt_SetBundleOptions(struct soap *soap, const char *URL, const char *action, param__params paramOptions, struct klupdt_SetBundleOptionsResponse &r)
{
	struct klupdt_SetBundleOptions soap_tmp_klupdt_SetBundleOptions;
	soap->encodingStyle = NULL;
	soap_tmp_klupdt_SetBundleOptions.paramOptions=paramOptions;
	soap_begin(soap);
	soap_serializeheader(soap);
	soap_serialize_klupdt_SetBundleOptions(soap, &soap_tmp_klupdt_SetBundleOptions);
	soap_begin_count(soap);
	if (soap->mode & SOAP_IO_LENGTH)
	{	soap_envelope_begin_out(soap);
		soap_putheader(soap);
		soap_body_begin_out(soap);
		soap_put_klupdt_SetBundleOptions(soap, &soap_tmp_klupdt_SetBundleOptions, "klupdt-SetBundleOptions", "");
		soap_body_end_out(soap);
		soap_envelope_end_out(soap);
	}
	if (soap_connect(soap, URL, action)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put_klupdt_SetBundleOptions(soap, &soap_tmp_klupdt_SetBundleOptions, "klupdt-SetBundleOptions", "")
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap_closesock(soap);
	soap_default_klupdt_SetBundleOptionsResponse(soap, &r);
	if (soap_begin_recv(soap)
	 || soap_envelope_begin_in(soap)
	 || soap_recv_header(soap)
	 || soap_body_begin_in(soap))
		return soap_closesock(soap);
	soap_get_klupdt_SetBundleOptionsResponse(soap, &r, "klupdt-SetBundleOptionsResponse", "");
	if (soap->error)
	{	if (soap->error == SOAP_TAG_MISMATCH && soap->level == 2)
			return soap_recv_fault(soap);
		return soap_closesock(soap);
	}
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
#ifndef WITH_LEANER
	 || soap_resolve_attachments(soap)
#endif
	 || soap_end_recv(soap))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

SOAP_FMAC5 int SOAP_FMAC6 soap_call_klupdt_SetGeneralOptions(struct soap *soap, const char *URL, const char *action, param__params paramOptions, struct klupdt_SetGeneralOptionsResponse &r)
{
	struct klupdt_SetGeneralOptions soap_tmp_klupdt_SetGeneralOptions;
	soap->encodingStyle = NULL;
	soap_tmp_klupdt_SetGeneralOptions.paramOptions=paramOptions;
	soap_begin(soap);
	soap_serializeheader(soap);
	soap_serialize_klupdt_SetGeneralOptions(soap, &soap_tmp_klupdt_SetGeneralOptions);
	soap_begin_count(soap);
	if (soap->mode & SOAP_IO_LENGTH)
	{	soap_envelope_begin_out(soap);
		soap_putheader(soap);
		soap_body_begin_out(soap);
		soap_put_klupdt_SetGeneralOptions(soap, &soap_tmp_klupdt_SetGeneralOptions, "klupdt-SetGeneralOptions", "");
		soap_body_end_out(soap);
		soap_envelope_end_out(soap);
	}
	if (soap_connect(soap, URL, action)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put_klupdt_SetGeneralOptions(soap, &soap_tmp_klupdt_SetGeneralOptions, "klupdt-SetGeneralOptions", "")
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap_closesock(soap);
	soap_default_klupdt_SetGeneralOptionsResponse(soap, &r);
	if (soap_begin_recv(soap)
	 || soap_envelope_begin_in(soap)
	 || soap_recv_header(soap)
	 || soap_body_begin_in(soap))
		return soap_closesock(soap);
	soap_get_klupdt_SetGeneralOptionsResponse(soap, &r, "klupdt-SetGeneralOptionsResponse", "");
	if (soap->error)
	{	if (soap->error == SOAP_TAG_MISMATCH && soap->level == 2)
			return soap_recv_fault(soap);
		return soap_closesock(soap);
	}
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
#ifndef WITH_LEANER
	 || soap_resolve_attachments(soap)
#endif
	 || soap_end_recv(soap))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

SOAP_FMAC5 int SOAP_FMAC6 soap_call_klupdt_GetGeneralOptions(struct soap *soap, const char *URL, const char *action, param__params data, struct klupdt_GetGeneralOptionsResponse &r)
{
	struct klupdt_GetGeneralOptions soap_tmp_klupdt_GetGeneralOptions;
	soap->encodingStyle = NULL;
	soap_tmp_klupdt_GetGeneralOptions.data=data;
	soap_begin(soap);
	soap_serializeheader(soap);
	soap_serialize_klupdt_GetGeneralOptions(soap, &soap_tmp_klupdt_GetGeneralOptions);
	soap_begin_count(soap);
	if (soap->mode & SOAP_IO_LENGTH)
	{	soap_envelope_begin_out(soap);
		soap_putheader(soap);
		soap_body_begin_out(soap);
		soap_put_klupdt_GetGeneralOptions(soap, &soap_tmp_klupdt_GetGeneralOptions, "klupdt-GetGeneralOptions", "");
		soap_body_end_out(soap);
		soap_envelope_end_out(soap);
	}
	if (soap_connect(soap, URL, action)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put_klupdt_GetGeneralOptions(soap, &soap_tmp_klupdt_GetGeneralOptions, "klupdt-GetGeneralOptions", "")
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap_closesock(soap);
	soap_default_klupdt_GetGeneralOptionsResponse(soap, &r);
	if (soap_begin_recv(soap)
	 || soap_envelope_begin_in(soap)
	 || soap_recv_header(soap)
	 || soap_body_begin_in(soap))
		return soap_closesock(soap);
	soap_get_klupdt_GetGeneralOptionsResponse(soap, &r, "klupdt-GetGeneralOptionsResponse", "");
	if (soap->error)
	{	if (soap->error == SOAP_TAG_MISMATCH && soap->level == 2)
			return soap_recv_fault(soap);
		return soap_closesock(soap);
	}
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
#ifndef WITH_LEANER
	 || soap_resolve_attachments(soap)
#endif
	 || soap_end_recv(soap))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

SOAP_FMAC5 int SOAP_FMAC6 soap_call_klupdt_GetAvailableUpdatesInfo(struct soap *soap, const char *URL, const char *action, wchar_t *wstrLocalization, struct klupdt_GetAvailableUpdatesInfoResponse &r)
{
	struct klupdt_GetAvailableUpdatesInfo soap_tmp_klupdt_GetAvailableUpdatesInfo;
	soap->encodingStyle = NULL;
	soap_tmp_klupdt_GetAvailableUpdatesInfo.wstrLocalization=wstrLocalization;
	soap_begin(soap);
	soap_serializeheader(soap);
	soap_serialize_klupdt_GetAvailableUpdatesInfo(soap, &soap_tmp_klupdt_GetAvailableUpdatesInfo);
	soap_begin_count(soap);
	if (soap->mode & SOAP_IO_LENGTH)
	{	soap_envelope_begin_out(soap);
		soap_putheader(soap);
		soap_body_begin_out(soap);
		soap_put_klupdt_GetAvailableUpdatesInfo(soap, &soap_tmp_klupdt_GetAvailableUpdatesInfo, "klupdt-GetAvailableUpdatesInfo", "");
		soap_body_end_out(soap);
		soap_envelope_end_out(soap);
	}
	if (soap_connect(soap, URL, action)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put_klupdt_GetAvailableUpdatesInfo(soap, &soap_tmp_klupdt_GetAvailableUpdatesInfo, "klupdt-GetAvailableUpdatesInfo", "")
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap_closesock(soap);
	soap_default_klupdt_GetAvailableUpdatesInfoResponse(soap, &r);
	if (soap_begin_recv(soap)
	 || soap_envelope_begin_in(soap)
	 || soap_recv_header(soap)
	 || soap_body_begin_in(soap))
		return soap_closesock(soap);
	soap_get_klupdt_GetAvailableUpdatesInfoResponse(soap, &r, "klupdt-GetAvailableUpdatesInfoResponse", "");
	if (soap->error)
	{	if (soap->error == SOAP_TAG_MISMATCH && soap->level == 2)
			return soap_recv_fault(soap);
		return soap_closesock(soap);
	}
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
#ifndef WITH_LEANER
	 || soap_resolve_attachments(soap)
#endif
	 || soap_end_recv(soap))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

SOAP_FMAC5 int SOAP_FMAC6 soap_call_klupdt_GetRequiedUpdatesInfo(struct soap *soap, const char *URL, const char *action, int nDummy, struct klupdt_GetRequiedUpdatesInfoResponse &r)
{
	struct klupdt_GetRequiedUpdatesInfo soap_tmp_klupdt_GetRequiedUpdatesInfo;
	soap->encodingStyle = NULL;
	soap_tmp_klupdt_GetRequiedUpdatesInfo.nDummy=nDummy;
	soap_begin(soap);
	soap_serializeheader(soap);
	soap_serialize_klupdt_GetRequiedUpdatesInfo(soap, &soap_tmp_klupdt_GetRequiedUpdatesInfo);
	soap_begin_count(soap);
	if (soap->mode & SOAP_IO_LENGTH)
	{	soap_envelope_begin_out(soap);
		soap_putheader(soap);
		soap_body_begin_out(soap);
		soap_put_klupdt_GetRequiedUpdatesInfo(soap, &soap_tmp_klupdt_GetRequiedUpdatesInfo, "klupdt-GetRequiedUpdatesInfo", "");
		soap_body_end_out(soap);
		soap_envelope_end_out(soap);
	}
	if (soap_connect(soap, URL, action)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put_klupdt_GetRequiedUpdatesInfo(soap, &soap_tmp_klupdt_GetRequiedUpdatesInfo, "klupdt-GetRequiedUpdatesInfo", "")
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap_closesock(soap);
	soap_default_klupdt_GetRequiedUpdatesInfoResponse(soap, &r);
	if (soap_begin_recv(soap)
	 || soap_envelope_begin_in(soap)
	 || soap_recv_header(soap)
	 || soap_body_begin_in(soap))
		return soap_closesock(soap);
	soap_get_klupdt_GetRequiedUpdatesInfoResponse(soap, &r, "klupdt-GetRequiedUpdatesInfoResponse", "");
	if (soap->error)
	{	if (soap->error == SOAP_TAG_MISMATCH && soap->level == 2)
			return soap_recv_fault(soap);
		return soap_closesock(soap);
	}
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
#ifndef WITH_LEANER
	 || soap_resolve_attachments(soap)
#endif
	 || soap_end_recv(soap))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

SOAP_FMAC5 int SOAP_FMAC6 soap_call_kllicsrv_GetKeysInfo(struct soap *soap, const char *URL, const char *action, klhst_wstrings fields, wchar_t *filter, long lTimeout, param__params options, struct kllicsrv_GetKeysInfoResponse &r)
{
	struct kllicsrv_GetKeysInfo soap_tmp_kllicsrv_GetKeysInfo;
	soap->encodingStyle = NULL;
	soap_tmp_kllicsrv_GetKeysInfo.fields=fields;
	soap_tmp_kllicsrv_GetKeysInfo.filter=filter;
	soap_tmp_kllicsrv_GetKeysInfo.lTimeout=lTimeout;
	soap_tmp_kllicsrv_GetKeysInfo.options=options;
	soap_begin(soap);
	soap_serializeheader(soap);
	soap_serialize_kllicsrv_GetKeysInfo(soap, &soap_tmp_kllicsrv_GetKeysInfo);
	soap_begin_count(soap);
	if (soap->mode & SOAP_IO_LENGTH)
	{	soap_envelope_begin_out(soap);
		soap_putheader(soap);
		soap_body_begin_out(soap);
		soap_put_kllicsrv_GetKeysInfo(soap, &soap_tmp_kllicsrv_GetKeysInfo, "kllicsrv-GetKeysInfo", "");
		soap_body_end_out(soap);
		soap_envelope_end_out(soap);
	}
	if (soap_connect(soap, URL, action)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put_kllicsrv_GetKeysInfo(soap, &soap_tmp_kllicsrv_GetKeysInfo, "kllicsrv-GetKeysInfo", "")
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap_closesock(soap);
	soap_default_kllicsrv_GetKeysInfoResponse(soap, &r);
	if (soap_begin_recv(soap)
	 || soap_envelope_begin_in(soap)
	 || soap_recv_header(soap)
	 || soap_body_begin_in(soap))
		return soap_closesock(soap);
	soap_get_kllicsrv_GetKeysInfoResponse(soap, &r, "kllicsrv-GetKeysInfoResponse", "");
	if (soap->error)
	{	if (soap->error == SOAP_TAG_MISMATCH && soap->level == 2)
			return soap_recv_fault(soap);
		return soap_closesock(soap);
	}
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
#ifndef WITH_LEANER
	 || soap_resolve_attachments(soap)
#endif
	 || soap_end_recv(soap))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

SOAP_FMAC5 int SOAP_FMAC6 soap_call_kllicsrv_GetKeyInfo(struct soap *soap, const char *URL, const char *action, klhst_wstrings fields, klhst_field_order_array fieldsToOrder, wchar_t *serial, long lTimeout, struct kllicsrv_GetKeyInfoResponse &r)
{
	struct kllicsrv_GetKeyInfo soap_tmp_kllicsrv_GetKeyInfo;
	soap->encodingStyle = NULL;
	soap_tmp_kllicsrv_GetKeyInfo.fields=fields;
	soap_tmp_kllicsrv_GetKeyInfo.fieldsToOrder=fieldsToOrder;
	soap_tmp_kllicsrv_GetKeyInfo.serial=serial;
	soap_tmp_kllicsrv_GetKeyInfo.lTimeout=lTimeout;
	soap_begin(soap);
	soap_serializeheader(soap);
	soap_serialize_kllicsrv_GetKeyInfo(soap, &soap_tmp_kllicsrv_GetKeyInfo);
	soap_begin_count(soap);
	if (soap->mode & SOAP_IO_LENGTH)
	{	soap_envelope_begin_out(soap);
		soap_putheader(soap);
		soap_body_begin_out(soap);
		soap_put_kllicsrv_GetKeyInfo(soap, &soap_tmp_kllicsrv_GetKeyInfo, "kllicsrv-GetKeyInfo", "");
		soap_body_end_out(soap);
		soap_envelope_end_out(soap);
	}
	if (soap_connect(soap, URL, action)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put_kllicsrv_GetKeyInfo(soap, &soap_tmp_kllicsrv_GetKeyInfo, "kllicsrv-GetKeyInfo", "")
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap_closesock(soap);
	soap_default_kllicsrv_GetKeyInfoResponse(soap, &r);
	if (soap_begin_recv(soap)
	 || soap_envelope_begin_in(soap)
	 || soap_recv_header(soap)
	 || soap_body_begin_in(soap))
		return soap_closesock(soap);
	soap_get_kllicsrv_GetKeyInfoResponse(soap, &r, "kllicsrv-GetKeyInfoResponse", "");
	if (soap->error)
	{	if (soap->error == SOAP_TAG_MISMATCH && soap->level == 2)
			return soap_recv_fault(soap);
		return soap_closesock(soap);
	}
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
#ifndef WITH_LEANER
	 || soap_resolve_attachments(soap)
#endif
	 || soap_end_recv(soap))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

SOAP_FMAC5 int SOAP_FMAC6 soap_call_kllicsrv_DeleteKeyInfo(struct soap *soap, const char *URL, const char *action, wchar_t *serial, struct kllicsrv_DeleteKeyInfoResponse &r)
{
	struct kllicsrv_DeleteKeyInfo soap_tmp_kllicsrv_DeleteKeyInfo;
	soap->encodingStyle = NULL;
	soap_tmp_kllicsrv_DeleteKeyInfo.serial=serial;
	soap_begin(soap);
	soap_serializeheader(soap);
	soap_serialize_kllicsrv_DeleteKeyInfo(soap, &soap_tmp_kllicsrv_DeleteKeyInfo);
	soap_begin_count(soap);
	if (soap->mode & SOAP_IO_LENGTH)
	{	soap_envelope_begin_out(soap);
		soap_putheader(soap);
		soap_body_begin_out(soap);
		soap_put_kllicsrv_DeleteKeyInfo(soap, &soap_tmp_kllicsrv_DeleteKeyInfo, "kllicsrv-DeleteKeyInfo", "");
		soap_body_end_out(soap);
		soap_envelope_end_out(soap);
	}
	if (soap_connect(soap, URL, action)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put_kllicsrv_DeleteKeyInfo(soap, &soap_tmp_kllicsrv_DeleteKeyInfo, "kllicsrv-DeleteKeyInfo", "")
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap_closesock(soap);
	soap_default_kllicsrv_DeleteKeyInfoResponse(soap, &r);
	if (soap_begin_recv(soap)
	 || soap_envelope_begin_in(soap)
	 || soap_recv_header(soap)
	 || soap_body_begin_in(soap))
		return soap_closesock(soap);
	soap_get_kllicsrv_DeleteKeyInfoResponse(soap, &r, "kllicsrv-DeleteKeyInfoResponse", "");
	if (soap->error)
	{	if (soap->error == SOAP_TAG_MISMATCH && soap->level == 2)
			return soap_recv_fault(soap);
		return soap_closesock(soap);
	}
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
#ifndef WITH_LEANER
	 || soap_resolve_attachments(soap)
#endif
	 || soap_end_recv(soap))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

SOAP_FMAC5 int SOAP_FMAC6 soap_call_kllicsrv_InstallKey(struct soap *soap, const char *URL, const char *action, param__params keyinfo, struct kllicsrv_InstallKeyResponse &r)
{
	struct kllicsrv_InstallKey soap_tmp_kllicsrv_InstallKey;
	soap->encodingStyle = NULL;
	soap_tmp_kllicsrv_InstallKey.keyinfo=keyinfo;
	soap_begin(soap);
	soap_serializeheader(soap);
	soap_serialize_kllicsrv_InstallKey(soap, &soap_tmp_kllicsrv_InstallKey);
	soap_begin_count(soap);
	if (soap->mode & SOAP_IO_LENGTH)
	{	soap_envelope_begin_out(soap);
		soap_putheader(soap);
		soap_body_begin_out(soap);
		soap_put_kllicsrv_InstallKey(soap, &soap_tmp_kllicsrv_InstallKey, "kllicsrv-InstallKey", "");
		soap_body_end_out(soap);
		soap_envelope_end_out(soap);
	}
	if (soap_connect(soap, URL, action)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put_kllicsrv_InstallKey(soap, &soap_tmp_kllicsrv_InstallKey, "kllicsrv-InstallKey", "")
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap_closesock(soap);
	soap_default_kllicsrv_InstallKeyResponse(soap, &r);
	if (soap_begin_recv(soap)
	 || soap_envelope_begin_in(soap)
	 || soap_recv_header(soap)
	 || soap_body_begin_in(soap))
		return soap_closesock(soap);
	soap_get_kllicsrv_InstallKeyResponse(soap, &r, "kllicsrv-InstallKeyResponse", "");
	if (soap->error)
	{	if (soap->error == SOAP_TAG_MISMATCH && soap->level == 2)
			return soap_recv_fault(soap);
		return soap_closesock(soap);
	}
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
#ifndef WITH_LEANER
	 || soap_resolve_attachments(soap)
#endif
	 || soap_end_recv(soap))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

SOAP_FMAC5 int SOAP_FMAC6 soap_call_kllicsrv_UninstallKey(struct soap *soap, const char *URL, const char *action, param__params keyinfo, struct kllicsrv_UninstallKeyResponse &r)
{
	struct kllicsrv_UninstallKey soap_tmp_kllicsrv_UninstallKey;
	soap->encodingStyle = NULL;
	soap_tmp_kllicsrv_UninstallKey.keyinfo=keyinfo;
	soap_begin(soap);
	soap_serializeheader(soap);
	soap_serialize_kllicsrv_UninstallKey(soap, &soap_tmp_kllicsrv_UninstallKey);
	soap_begin_count(soap);
	if (soap->mode & SOAP_IO_LENGTH)
	{	soap_envelope_begin_out(soap);
		soap_putheader(soap);
		soap_body_begin_out(soap);
		soap_put_kllicsrv_UninstallKey(soap, &soap_tmp_kllicsrv_UninstallKey, "kllicsrv-UninstallKey", "");
		soap_body_end_out(soap);
		soap_envelope_end_out(soap);
	}
	if (soap_connect(soap, URL, action)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put_kllicsrv_UninstallKey(soap, &soap_tmp_kllicsrv_UninstallKey, "kllicsrv-UninstallKey", "")
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap_closesock(soap);
	soap_default_kllicsrv_UninstallKeyResponse(soap, &r);
	if (soap_begin_recv(soap)
	 || soap_envelope_begin_in(soap)
	 || soap_recv_header(soap)
	 || soap_body_begin_in(soap))
		return soap_closesock(soap);
	soap_get_kllicsrv_UninstallKeyResponse(soap, &r, "kllicsrv-UninstallKeyResponse", "");
	if (soap->error)
	{	if (soap->error == SOAP_TAG_MISMATCH && soap->level == 2)
			return soap_recv_fault(soap);
		return soap_closesock(soap);
	}
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
#ifndef WITH_LEANER
	 || soap_resolve_attachments(soap)
#endif
	 || soap_end_recv(soap))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

SOAP_FMAC5 int SOAP_FMAC6 soap_call_kllicsrv_GetKeyData(struct soap *soap, const char *URL, const char *action, param__params indata, struct kllicsrv_GetKeyDataResponse &r)
{
	struct kllicsrv_GetKeyData soap_tmp_kllicsrv_GetKeyData;
	soap->encodingStyle = NULL;
	soap_tmp_kllicsrv_GetKeyData.indata=indata;
	soap_begin(soap);
	soap_serializeheader(soap);
	soap_serialize_kllicsrv_GetKeyData(soap, &soap_tmp_kllicsrv_GetKeyData);
	soap_begin_count(soap);
	if (soap->mode & SOAP_IO_LENGTH)
	{	soap_envelope_begin_out(soap);
		soap_putheader(soap);
		soap_body_begin_out(soap);
		soap_put_kllicsrv_GetKeyData(soap, &soap_tmp_kllicsrv_GetKeyData, "kllicsrv-GetKeyData", "");
		soap_body_end_out(soap);
		soap_envelope_end_out(soap);
	}
	if (soap_connect(soap, URL, action)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put_kllicsrv_GetKeyData(soap, &soap_tmp_kllicsrv_GetKeyData, "kllicsrv-GetKeyData", "")
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap_closesock(soap);
	soap_default_kllicsrv_GetKeyDataResponse(soap, &r);
	if (soap_begin_recv(soap)
	 || soap_envelope_begin_in(soap)
	 || soap_recv_header(soap)
	 || soap_body_begin_in(soap))
		return soap_closesock(soap);
	soap_get_kllicsrv_GetKeyDataResponse(soap, &r, "kllicsrv-GetKeyDataResponse", "");
	if (soap->error)
	{	if (soap->error == SOAP_TAG_MISMATCH && soap->level == 2)
			return soap_recv_fault(soap);
		return soap_closesock(soap);
	}
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
#ifndef WITH_LEANER
	 || soap_resolve_attachments(soap)
#endif
	 || soap_end_recv(soap))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

SOAP_FMAC5 int SOAP_FMAC6 soap_call_kllicsrv_AdjustFlexibleKey(struct soap *soap, const char *URL, const char *action, param__params keyinfo, struct kllicsrv_AdjustFlexibleKeyResponse &r)
{
	struct kllicsrv_AdjustFlexibleKey soap_tmp_kllicsrv_AdjustFlexibleKey;
	soap->encodingStyle = NULL;
	soap_tmp_kllicsrv_AdjustFlexibleKey.keyinfo=keyinfo;
	soap_begin(soap);
	soap_serializeheader(soap);
	soap_serialize_kllicsrv_AdjustFlexibleKey(soap, &soap_tmp_kllicsrv_AdjustFlexibleKey);
	soap_begin_count(soap);
	if (soap->mode & SOAP_IO_LENGTH)
	{	soap_envelope_begin_out(soap);
		soap_putheader(soap);
		soap_body_begin_out(soap);
		soap_put_kllicsrv_AdjustFlexibleKey(soap, &soap_tmp_kllicsrv_AdjustFlexibleKey, "kllicsrv-AdjustFlexibleKey", "");
		soap_body_end_out(soap);
		soap_envelope_end_out(soap);
	}
	if (soap_connect(soap, URL, action)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put_kllicsrv_AdjustFlexibleKey(soap, &soap_tmp_kllicsrv_AdjustFlexibleKey, "kllicsrv-AdjustFlexibleKey", "")
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap_closesock(soap);
	soap_default_kllicsrv_AdjustFlexibleKeyResponse(soap, &r);
	if (soap_begin_recv(soap)
	 || soap_envelope_begin_in(soap)
	 || soap_recv_header(soap)
	 || soap_body_begin_in(soap))
		return soap_closesock(soap);
	soap_get_kllicsrv_AdjustFlexibleKeyResponse(soap, &r, "kllicsrv-AdjustFlexibleKeyResponse", "");
	if (soap->error)
	{	if (soap->error == SOAP_TAG_MISMATCH && soap->level == 2)
			return soap_recv_fault(soap);
		return soap_closesock(soap);
	}
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
#ifndef WITH_LEANER
	 || soap_resolve_attachments(soap)
#endif
	 || soap_end_recv(soap))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

SOAP_FMAC5 int SOAP_FMAC6 soap_call_kllicsrv_EnumKeys(struct soap *soap, const char *URL, const char *action, klhst_wstrings fields, klhst_field_order_array fieldsToOrder, param__params options, long lTimeout, struct kllicsrv_EnumKeysResponse &r)
{
	struct kllicsrv_EnumKeys soap_tmp_kllicsrv_EnumKeys;
	soap->encodingStyle = NULL;
	soap_tmp_kllicsrv_EnumKeys.fields=fields;
	soap_tmp_kllicsrv_EnumKeys.fieldsToOrder=fieldsToOrder;
	soap_tmp_kllicsrv_EnumKeys.options=options;
	soap_tmp_kllicsrv_EnumKeys.lTimeout=lTimeout;
	soap_begin(soap);
	soap_serializeheader(soap);
	soap_serialize_kllicsrv_EnumKeys(soap, &soap_tmp_kllicsrv_EnumKeys);
	soap_begin_count(soap);
	if (soap->mode & SOAP_IO_LENGTH)
	{	soap_envelope_begin_out(soap);
		soap_putheader(soap);
		soap_body_begin_out(soap);
		soap_put_kllicsrv_EnumKeys(soap, &soap_tmp_kllicsrv_EnumKeys, "kllicsrv-EnumKeys", "");
		soap_body_end_out(soap);
		soap_envelope_end_out(soap);
	}
	if (soap_connect(soap, URL, action)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put_kllicsrv_EnumKeys(soap, &soap_tmp_kllicsrv_EnumKeys, "kllicsrv-EnumKeys", "")
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap_closesock(soap);
	soap_default_kllicsrv_EnumKeysResponse(soap, &r);
	if (soap_begin_recv(soap)
	 || soap_envelope_begin_in(soap)
	 || soap_recv_header(soap)
	 || soap_body_begin_in(soap))
		return soap_closesock(soap);
	soap_get_kllicsrv_EnumKeysResponse(soap, &r, "kllicsrv-EnumKeysResponse", "");
	if (soap->error)
	{	if (soap->error == SOAP_TAG_MISMATCH && soap->level == 2)
			return soap_recv_fault(soap);
		return soap_closesock(soap);
	}
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
#ifndef WITH_LEANER
	 || soap_resolve_attachments(soap)
#endif
	 || soap_end_recv(soap))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

SOAP_FMAC5 int SOAP_FMAC6 soap_call_klhst_MoveRulesAddRule(struct soap *soap, const char *URL, const char *action, param__params ruleinfo, struct klhst_MoveRulesAddRuleResponse &r)
{
	struct klhst_MoveRulesAddRule soap_tmp_klhst_MoveRulesAddRule;
	soap->encodingStyle = NULL;
	soap_tmp_klhst_MoveRulesAddRule.ruleinfo=ruleinfo;
	soap_begin(soap);
	soap_serializeheader(soap);
	soap_serialize_klhst_MoveRulesAddRule(soap, &soap_tmp_klhst_MoveRulesAddRule);
	soap_begin_count(soap);
	if (soap->mode & SOAP_IO_LENGTH)
	{	soap_envelope_begin_out(soap);
		soap_putheader(soap);
		soap_body_begin_out(soap);
		soap_put_klhst_MoveRulesAddRule(soap, &soap_tmp_klhst_MoveRulesAddRule, "klhst-MoveRulesAddRule", "");
		soap_body_end_out(soap);
		soap_envelope_end_out(soap);
	}
	if (soap_connect(soap, URL, action)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put_klhst_MoveRulesAddRule(soap, &soap_tmp_klhst_MoveRulesAddRule, "klhst-MoveRulesAddRule", "")
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap_closesock(soap);
	soap_default_klhst_MoveRulesAddRuleResponse(soap, &r);
	if (soap_begin_recv(soap)
	 || soap_envelope_begin_in(soap)
	 || soap_recv_header(soap)
	 || soap_body_begin_in(soap))
		return soap_closesock(soap);
	soap_get_klhst_MoveRulesAddRuleResponse(soap, &r, "klhst-MoveRulesAddRuleResponse", "");
	if (soap->error)
	{	if (soap->error == SOAP_TAG_MISMATCH && soap->level == 2)
			return soap_recv_fault(soap);
		return soap_closesock(soap);
	}
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
#ifndef WITH_LEANER
	 || soap_resolve_attachments(soap)
#endif
	 || soap_end_recv(soap))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

SOAP_FMAC5 int SOAP_FMAC6 soap_call_klhst_MoveRulesUpdateRule(struct soap *soap, const char *URL, const char *action, long nRule, param__params ruleinfo, struct klhst_MoveRulesUpdateRuleResponse &r)
{
	struct klhst_MoveRulesUpdateRule soap_tmp_klhst_MoveRulesUpdateRule;
	soap->encodingStyle = NULL;
	soap_tmp_klhst_MoveRulesUpdateRule.nRule=nRule;
	soap_tmp_klhst_MoveRulesUpdateRule.ruleinfo=ruleinfo;
	soap_begin(soap);
	soap_serializeheader(soap);
	soap_serialize_klhst_MoveRulesUpdateRule(soap, &soap_tmp_klhst_MoveRulesUpdateRule);
	soap_begin_count(soap);
	if (soap->mode & SOAP_IO_LENGTH)
	{	soap_envelope_begin_out(soap);
		soap_putheader(soap);
		soap_body_begin_out(soap);
		soap_put_klhst_MoveRulesUpdateRule(soap, &soap_tmp_klhst_MoveRulesUpdateRule, "klhst-MoveRulesUpdateRule", "");
		soap_body_end_out(soap);
		soap_envelope_end_out(soap);
	}
	if (soap_connect(soap, URL, action)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put_klhst_MoveRulesUpdateRule(soap, &soap_tmp_klhst_MoveRulesUpdateRule, "klhst-MoveRulesUpdateRule", "")
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap_closesock(soap);
	soap_default_klhst_MoveRulesUpdateRuleResponse(soap, &r);
	if (soap_begin_recv(soap)
	 || soap_envelope_begin_in(soap)
	 || soap_recv_header(soap)
	 || soap_body_begin_in(soap))
		return soap_closesock(soap);
	soap_get_klhst_MoveRulesUpdateRuleResponse(soap, &r, "klhst-MoveRulesUpdateRuleResponse", "");
	if (soap->error)
	{	if (soap->error == SOAP_TAG_MISMATCH && soap->level == 2)
			return soap_recv_fault(soap);
		return soap_closesock(soap);
	}
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
#ifndef WITH_LEANER
	 || soap_resolve_attachments(soap)
#endif
	 || soap_end_recv(soap))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

SOAP_FMAC5 int SOAP_FMAC6 soap_call_klhst_MoveRulesDeleteRule(struct soap *soap, const char *URL, const char *action, long nRule, struct klhst_MoveRulesDeleteRuleResponse &r)
{
	struct klhst_MoveRulesDeleteRule soap_tmp_klhst_MoveRulesDeleteRule;
	soap->encodingStyle = NULL;
	soap_tmp_klhst_MoveRulesDeleteRule.nRule=nRule;
	soap_begin(soap);
	soap_serializeheader(soap);
	soap_serialize_klhst_MoveRulesDeleteRule(soap, &soap_tmp_klhst_MoveRulesDeleteRule);
	soap_begin_count(soap);
	if (soap->mode & SOAP_IO_LENGTH)
	{	soap_envelope_begin_out(soap);
		soap_putheader(soap);
		soap_body_begin_out(soap);
		soap_put_klhst_MoveRulesDeleteRule(soap, &soap_tmp_klhst_MoveRulesDeleteRule, "klhst-MoveRulesDeleteRule", "");
		soap_body_end_out(soap);
		soap_envelope_end_out(soap);
	}
	if (soap_connect(soap, URL, action)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put_klhst_MoveRulesDeleteRule(soap, &soap_tmp_klhst_MoveRulesDeleteRule, "klhst-MoveRulesDeleteRule", "")
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap_closesock(soap);
	soap_default_klhst_MoveRulesDeleteRuleResponse(soap, &r);
	if (soap_begin_recv(soap)
	 || soap_envelope_begin_in(soap)
	 || soap_recv_header(soap)
	 || soap_body_begin_in(soap))
		return soap_closesock(soap);
	soap_get_klhst_MoveRulesDeleteRuleResponse(soap, &r, "klhst-MoveRulesDeleteRuleResponse", "");
	if (soap->error)
	{	if (soap->error == SOAP_TAG_MISMATCH && soap->level == 2)
			return soap_recv_fault(soap);
		return soap_closesock(soap);
	}
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
#ifndef WITH_LEANER
	 || soap_resolve_attachments(soap)
#endif
	 || soap_end_recv(soap))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

SOAP_FMAC5 int SOAP_FMAC6 soap_call_klhst_MoveRulesSetRulesOrder(struct soap *soap, const char *URL, const char *action, klhst_rule_order_array arr, struct klhst_MoveRulesSetRulesOrderResponse &r)
{
	struct klhst_MoveRulesSetRulesOrder soap_tmp_klhst_MoveRulesSetRulesOrder;
	soap->encodingStyle = NULL;
	soap_tmp_klhst_MoveRulesSetRulesOrder.arr=arr;
	soap_begin(soap);
	soap_serializeheader(soap);
	soap_serialize_klhst_MoveRulesSetRulesOrder(soap, &soap_tmp_klhst_MoveRulesSetRulesOrder);
	soap_begin_count(soap);
	if (soap->mode & SOAP_IO_LENGTH)
	{	soap_envelope_begin_out(soap);
		soap_putheader(soap);
		soap_body_begin_out(soap);
		soap_put_klhst_MoveRulesSetRulesOrder(soap, &soap_tmp_klhst_MoveRulesSetRulesOrder, "klhst-MoveRulesSetRulesOrder", "");
		soap_body_end_out(soap);
		soap_envelope_end_out(soap);
	}
	if (soap_connect(soap, URL, action)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put_klhst_MoveRulesSetRulesOrder(soap, &soap_tmp_klhst_MoveRulesSetRulesOrder, "klhst-MoveRulesSetRulesOrder", "")
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap_closesock(soap);
	soap_default_klhst_MoveRulesSetRulesOrderResponse(soap, &r);
	if (soap_begin_recv(soap)
	 || soap_envelope_begin_in(soap)
	 || soap_recv_header(soap)
	 || soap_body_begin_in(soap))
		return soap_closesock(soap);
	soap_get_klhst_MoveRulesSetRulesOrderResponse(soap, &r, "klhst-MoveRulesSetRulesOrderResponse", "");
	if (soap->error)
	{	if (soap->error == SOAP_TAG_MISMATCH && soap->level == 2)
			return soap_recv_fault(soap);
		return soap_closesock(soap);
	}
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
#ifndef WITH_LEANER
	 || soap_resolve_attachments(soap)
#endif
	 || soap_end_recv(soap))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

SOAP_FMAC5 int SOAP_FMAC6 soap_call_klhst_MoveRulesGetRule(struct soap *soap, const char *URL, const char *action, long nRule, struct klhst_MoveRulesGetRuleResponse &r)
{
	struct klhst_MoveRulesGetRule soap_tmp_klhst_MoveRulesGetRule;
	soap->encodingStyle = NULL;
	soap_tmp_klhst_MoveRulesGetRule.nRule=nRule;
	soap_begin(soap);
	soap_serializeheader(soap);
	soap_serialize_klhst_MoveRulesGetRule(soap, &soap_tmp_klhst_MoveRulesGetRule);
	soap_begin_count(soap);
	if (soap->mode & SOAP_IO_LENGTH)
	{	soap_envelope_begin_out(soap);
		soap_putheader(soap);
		soap_body_begin_out(soap);
		soap_put_klhst_MoveRulesGetRule(soap, &soap_tmp_klhst_MoveRulesGetRule, "klhst-MoveRulesGetRule", "");
		soap_body_end_out(soap);
		soap_envelope_end_out(soap);
	}
	if (soap_connect(soap, URL, action)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put_klhst_MoveRulesGetRule(soap, &soap_tmp_klhst_MoveRulesGetRule, "klhst-MoveRulesGetRule", "")
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap_closesock(soap);
	soap_default_klhst_MoveRulesGetRuleResponse(soap, &r);
	if (soap_begin_recv(soap)
	 || soap_envelope_begin_in(soap)
	 || soap_recv_header(soap)
	 || soap_body_begin_in(soap))
		return soap_closesock(soap);
	soap_get_klhst_MoveRulesGetRuleResponse(soap, &r, "klhst-MoveRulesGetRuleResponse", "");
	if (soap->error)
	{	if (soap->error == SOAP_TAG_MISMATCH && soap->level == 2)
			return soap_recv_fault(soap);
		return soap_closesock(soap);
	}
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
#ifndef WITH_LEANER
	 || soap_resolve_attachments(soap)
#endif
	 || soap_end_recv(soap))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

SOAP_FMAC5 int SOAP_FMAC6 soap_call_klhst_MoveRulesGetRules(struct soap *soap, const char *URL, const char *action, klhst_wstrings fields, struct klhst_MoveRulesGetRulesResponse &r)
{
	struct klhst_MoveRulesGetRules soap_tmp_klhst_MoveRulesGetRules;
	soap->encodingStyle = NULL;
	soap_tmp_klhst_MoveRulesGetRules.fields=fields;
	soap_begin(soap);
	soap_serializeheader(soap);
	soap_serialize_klhst_MoveRulesGetRules(soap, &soap_tmp_klhst_MoveRulesGetRules);
	soap_begin_count(soap);
	if (soap->mode & SOAP_IO_LENGTH)
	{	soap_envelope_begin_out(soap);
		soap_putheader(soap);
		soap_body_begin_out(soap);
		soap_put_klhst_MoveRulesGetRules(soap, &soap_tmp_klhst_MoveRulesGetRules, "klhst-MoveRulesGetRules", "");
		soap_body_end_out(soap);
		soap_envelope_end_out(soap);
	}
	if (soap_connect(soap, URL, action)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put_klhst_MoveRulesGetRules(soap, &soap_tmp_klhst_MoveRulesGetRules, "klhst-MoveRulesGetRules", "")
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap_closesock(soap);
	soap_default_klhst_MoveRulesGetRulesResponse(soap, &r);
	if (soap_begin_recv(soap)
	 || soap_envelope_begin_in(soap)
	 || soap_recv_header(soap)
	 || soap_body_begin_in(soap))
		return soap_closesock(soap);
	soap_get_klhst_MoveRulesGetRulesResponse(soap, &r, "klhst-MoveRulesGetRulesResponse", "");
	if (soap->error)
	{	if (soap->error == SOAP_TAG_MISMATCH && soap->level == 2)
			return soap_recv_fault(soap);
		return soap_closesock(soap);
	}
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
#ifndef WITH_LEANER
	 || soap_resolve_attachments(soap)
#endif
	 || soap_end_recv(soap))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

SOAP_FMAC5 int SOAP_FMAC6 soap_call_kldpns_AddDiapason(struct soap *soap, const char *URL, const char *action, param__params data, struct kldpns_AddDiapasonResponse &r)
{
	struct kldpns_AddDiapason soap_tmp_kldpns_AddDiapason;
	soap->encodingStyle = NULL;
	soap_tmp_kldpns_AddDiapason.data=data;
	soap_begin(soap);
	soap_serializeheader(soap);
	soap_serialize_kldpns_AddDiapason(soap, &soap_tmp_kldpns_AddDiapason);
	soap_begin_count(soap);
	if (soap->mode & SOAP_IO_LENGTH)
	{	soap_envelope_begin_out(soap);
		soap_putheader(soap);
		soap_body_begin_out(soap);
		soap_put_kldpns_AddDiapason(soap, &soap_tmp_kldpns_AddDiapason, "kldpns-AddDiapason", "");
		soap_body_end_out(soap);
		soap_envelope_end_out(soap);
	}
	if (soap_connect(soap, URL, action)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put_kldpns_AddDiapason(soap, &soap_tmp_kldpns_AddDiapason, "kldpns-AddDiapason", "")
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap_closesock(soap);
	soap_default_kldpns_AddDiapasonResponse(soap, &r);
	if (soap_begin_recv(soap)
	 || soap_envelope_begin_in(soap)
	 || soap_recv_header(soap)
	 || soap_body_begin_in(soap))
		return soap_closesock(soap);
	soap_get_kldpns_AddDiapasonResponse(soap, &r, "kldpns-AddDiapasonResponse", "");
	if (soap->error)
	{	if (soap->error == SOAP_TAG_MISMATCH && soap->level == 2)
			return soap_recv_fault(soap);
		return soap_closesock(soap);
	}
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
#ifndef WITH_LEANER
	 || soap_resolve_attachments(soap)
#endif
	 || soap_end_recv(soap))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

SOAP_FMAC5 int SOAP_FMAC6 soap_call_kldpns_UpdateDiapason(struct soap *soap, const char *URL, const char *action, long id, param__params data, struct kldpns_UpdateDiapasonResponse &r)
{
	struct kldpns_UpdateDiapason soap_tmp_kldpns_UpdateDiapason;
	soap->encodingStyle = NULL;
	soap_tmp_kldpns_UpdateDiapason.id=id;
	soap_tmp_kldpns_UpdateDiapason.data=data;
	soap_begin(soap);
	soap_serializeheader(soap);
	soap_serialize_kldpns_UpdateDiapason(soap, &soap_tmp_kldpns_UpdateDiapason);
	soap_begin_count(soap);
	if (soap->mode & SOAP_IO_LENGTH)
	{	soap_envelope_begin_out(soap);
		soap_putheader(soap);
		soap_body_begin_out(soap);
		soap_put_kldpns_UpdateDiapason(soap, &soap_tmp_kldpns_UpdateDiapason, "kldpns-UpdateDiapason", "");
		soap_body_end_out(soap);
		soap_envelope_end_out(soap);
	}
	if (soap_connect(soap, URL, action)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put_kldpns_UpdateDiapason(soap, &soap_tmp_kldpns_UpdateDiapason, "kldpns-UpdateDiapason", "")
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap_closesock(soap);
	soap_default_kldpns_UpdateDiapasonResponse(soap, &r);
	if (soap_begin_recv(soap)
	 || soap_envelope_begin_in(soap)
	 || soap_recv_header(soap)
	 || soap_body_begin_in(soap))
		return soap_closesock(soap);
	soap_get_kldpns_UpdateDiapasonResponse(soap, &r, "kldpns-UpdateDiapasonResponse", "");
	if (soap->error)
	{	if (soap->error == SOAP_TAG_MISMATCH && soap->level == 2)
			return soap_recv_fault(soap);
		return soap_closesock(soap);
	}
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
#ifndef WITH_LEANER
	 || soap_resolve_attachments(soap)
#endif
	 || soap_end_recv(soap))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

SOAP_FMAC5 int SOAP_FMAC6 soap_call_kldpns_RemoveDiapason(struct soap *soap, const char *URL, const char *action, long id, struct kldpns_RemoveDiapasonResponse &r)
{
	struct kldpns_RemoveDiapason soap_tmp_kldpns_RemoveDiapason;
	soap->encodingStyle = NULL;
	soap_tmp_kldpns_RemoveDiapason.id=id;
	soap_begin(soap);
	soap_serializeheader(soap);
	soap_serialize_kldpns_RemoveDiapason(soap, &soap_tmp_kldpns_RemoveDiapason);
	soap_begin_count(soap);
	if (soap->mode & SOAP_IO_LENGTH)
	{	soap_envelope_begin_out(soap);
		soap_putheader(soap);
		soap_body_begin_out(soap);
		soap_put_kldpns_RemoveDiapason(soap, &soap_tmp_kldpns_RemoveDiapason, "kldpns-RemoveDiapason", "");
		soap_body_end_out(soap);
		soap_envelope_end_out(soap);
	}
	if (soap_connect(soap, URL, action)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put_kldpns_RemoveDiapason(soap, &soap_tmp_kldpns_RemoveDiapason, "kldpns-RemoveDiapason", "")
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap_closesock(soap);
	soap_default_kldpns_RemoveDiapasonResponse(soap, &r);
	if (soap_begin_recv(soap)
	 || soap_envelope_begin_in(soap)
	 || soap_recv_header(soap)
	 || soap_body_begin_in(soap))
		return soap_closesock(soap);
	soap_get_kldpns_RemoveDiapasonResponse(soap, &r, "kldpns-RemoveDiapasonResponse", "");
	if (soap->error)
	{	if (soap->error == SOAP_TAG_MISMATCH && soap->level == 2)
			return soap_recv_fault(soap);
		return soap_closesock(soap);
	}
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
#ifndef WITH_LEANER
	 || soap_resolve_attachments(soap)
#endif
	 || soap_end_recv(soap))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

SOAP_FMAC5 int SOAP_FMAC6 soap_call_kldpns_GetDiapasons(struct soap *soap, const char *URL, const char *action, klhst_wstrings fields, long lTimeout, struct kldpns_GetDiapasonsResponse &r)
{
	struct kldpns_GetDiapasons soap_tmp_kldpns_GetDiapasons;
	soap->encodingStyle = NULL;
	soap_tmp_kldpns_GetDiapasons.fields=fields;
	soap_tmp_kldpns_GetDiapasons.lTimeout=lTimeout;
	soap_begin(soap);
	soap_serializeheader(soap);
	soap_serialize_kldpns_GetDiapasons(soap, &soap_tmp_kldpns_GetDiapasons);
	soap_begin_count(soap);
	if (soap->mode & SOAP_IO_LENGTH)
	{	soap_envelope_begin_out(soap);
		soap_putheader(soap);
		soap_body_begin_out(soap);
		soap_put_kldpns_GetDiapasons(soap, &soap_tmp_kldpns_GetDiapasons, "kldpns-GetDiapasons", "");
		soap_body_end_out(soap);
		soap_envelope_end_out(soap);
	}
	if (soap_connect(soap, URL, action)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put_kldpns_GetDiapasons(soap, &soap_tmp_kldpns_GetDiapasons, "kldpns-GetDiapasons", "")
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap_closesock(soap);
	soap_default_kldpns_GetDiapasonsResponse(soap, &r);
	if (soap_begin_recv(soap)
	 || soap_envelope_begin_in(soap)
	 || soap_recv_header(soap)
	 || soap_body_begin_in(soap))
		return soap_closesock(soap);
	soap_get_kldpns_GetDiapasonsResponse(soap, &r, "kldpns-GetDiapasonsResponse", "");
	if (soap->error)
	{	if (soap->error == SOAP_TAG_MISMATCH && soap->level == 2)
			return soap_recv_fault(soap);
		return soap_closesock(soap);
	}
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
#ifndef WITH_LEANER
	 || soap_resolve_attachments(soap)
#endif
	 || soap_end_recv(soap))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

SOAP_FMAC5 int SOAP_FMAC6 soap_call_kldpns_GetDiapason(struct soap *soap, const char *URL, const char *action, long id, klhst_wstrings fields, struct kldpns_GetDiapasonResponse &r)
{
	struct kldpns_GetDiapason soap_tmp_kldpns_GetDiapason;
	soap->encodingStyle = NULL;
	soap_tmp_kldpns_GetDiapason.id=id;
	soap_tmp_kldpns_GetDiapason.fields=fields;
	soap_begin(soap);
	soap_serializeheader(soap);
	soap_serialize_kldpns_GetDiapason(soap, &soap_tmp_kldpns_GetDiapason);
	soap_begin_count(soap);
	if (soap->mode & SOAP_IO_LENGTH)
	{	soap_envelope_begin_out(soap);
		soap_putheader(soap);
		soap_body_begin_out(soap);
		soap_put_kldpns_GetDiapason(soap, &soap_tmp_kldpns_GetDiapason, "kldpns-GetDiapason", "");
		soap_body_end_out(soap);
		soap_envelope_end_out(soap);
	}
	if (soap_connect(soap, URL, action)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put_kldpns_GetDiapason(soap, &soap_tmp_kldpns_GetDiapason, "kldpns-GetDiapason", "")
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap_closesock(soap);
	soap_default_kldpns_GetDiapasonResponse(soap, &r);
	if (soap_begin_recv(soap)
	 || soap_envelope_begin_in(soap)
	 || soap_recv_header(soap)
	 || soap_body_begin_in(soap))
		return soap_closesock(soap);
	soap_get_kldpns_GetDiapasonResponse(soap, &r, "kldpns-GetDiapasonResponse", "");
	if (soap->error)
	{	if (soap->error == SOAP_TAG_MISMATCH && soap->level == 2)
			return soap_recv_fault(soap);
		return soap_closesock(soap);
	}
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
#ifndef WITH_LEANER
	 || soap_resolve_attachments(soap)
#endif
	 || soap_end_recv(soap))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

SOAP_FMAC5 int SOAP_FMAC6 soap_call_kldpns_NotifyDpnsTask(struct soap *soap, const char *URL, const char *action, struct kldpns_NotifyDpnsTaskResponse &r)
{
	struct kldpns_NotifyDpnsTask soap_tmp_kldpns_NotifyDpnsTask;
	soap->encodingStyle = NULL;
	soap_begin(soap);
	soap_serializeheader(soap);
	soap_serialize_kldpns_NotifyDpnsTask(soap, &soap_tmp_kldpns_NotifyDpnsTask);
	soap_begin_count(soap);
	if (soap->mode & SOAP_IO_LENGTH)
	{	soap_envelope_begin_out(soap);
		soap_putheader(soap);
		soap_body_begin_out(soap);
		soap_put_kldpns_NotifyDpnsTask(soap, &soap_tmp_kldpns_NotifyDpnsTask, "kldpns-NotifyDpnsTask", "");
		soap_body_end_out(soap);
		soap_envelope_end_out(soap);
	}
	if (soap_connect(soap, URL, action)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put_kldpns_NotifyDpnsTask(soap, &soap_tmp_kldpns_NotifyDpnsTask, "kldpns-NotifyDpnsTask", "")
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap_closesock(soap);
	soap_default_kldpns_NotifyDpnsTaskResponse(soap, &r);
	if (soap_begin_recv(soap)
	 || soap_envelope_begin_in(soap)
	 || soap_recv_header(soap)
	 || soap_body_begin_in(soap))
		return soap_closesock(soap);
	soap_get_kldpns_NotifyDpnsTaskResponse(soap, &r, "kldpns-NotifyDpnsTaskResponse", "");
	if (soap->error)
	{	if (soap->error == SOAP_TAG_MISMATCH && soap->level == 2)
			return soap_recv_fault(soap);
		return soap_closesock(soap);
	}
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
#ifndef WITH_LEANER
	 || soap_resolve_attachments(soap)
#endif
	 || soap_end_recv(soap))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

SOAP_FMAC5 int SOAP_FMAC6 soap_call_klgrp_GetGroups(struct soap *soap, const char *URL, const char *action, long parent, long depth, struct klgrp_GetGroupsResponse &r)
{
	struct klgrp_GetGroups soap_tmp_klgrp_GetGroups;
	soap->encodingStyle = NULL;
	soap_tmp_klgrp_GetGroups.parent=parent;
	soap_tmp_klgrp_GetGroups.depth=depth;
	soap_begin(soap);
	soap_serializeheader(soap);
	soap_serialize_klgrp_GetGroups(soap, &soap_tmp_klgrp_GetGroups);
	soap_begin_count(soap);
	if (soap->mode & SOAP_IO_LENGTH)
	{	soap_envelope_begin_out(soap);
		soap_putheader(soap);
		soap_body_begin_out(soap);
		soap_put_klgrp_GetGroups(soap, &soap_tmp_klgrp_GetGroups, "klgrp-GetGroups", "");
		soap_body_end_out(soap);
		soap_envelope_end_out(soap);
	}
	if (soap_connect(soap, URL, action)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put_klgrp_GetGroups(soap, &soap_tmp_klgrp_GetGroups, "klgrp-GetGroups", "")
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap_closesock(soap);
	soap_default_klgrp_GetGroupsResponse(soap, &r);
	if (soap_begin_recv(soap)
	 || soap_envelope_begin_in(soap)
	 || soap_recv_header(soap)
	 || soap_body_begin_in(soap))
		return soap_closesock(soap);
	soap_get_klgrp_GetGroupsResponse(soap, &r, "klgrp-GetGroupsResponse", "");
	if (soap->error)
	{	if (soap->error == SOAP_TAG_MISMATCH && soap->level == 2)
			return soap_recv_fault(soap);
		return soap_closesock(soap);
	}
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
#ifndef WITH_LEANER
	 || soap_resolve_attachments(soap)
#endif
	 || soap_end_recv(soap))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

SOAP_FMAC5 int SOAP_FMAC6 soap_call_klgrp_GetUnassignedGroupId(struct soap *soap, const char *URL, const char *action, void *_, struct klgrp_GetUnassignedGroupIdResponse &r)
{
	struct klgrp_GetUnassignedGroupId soap_tmp_klgrp_GetUnassignedGroupId;
	soap->encodingStyle = NULL;
	soap_tmp_klgrp_GetUnassignedGroupId._=_;
	soap_begin(soap);
	soap_serializeheader(soap);
	soap_serialize_klgrp_GetUnassignedGroupId(soap, &soap_tmp_klgrp_GetUnassignedGroupId);
	soap_begin_count(soap);
	if (soap->mode & SOAP_IO_LENGTH)
	{	soap_envelope_begin_out(soap);
		soap_putheader(soap);
		soap_body_begin_out(soap);
		soap_put_klgrp_GetUnassignedGroupId(soap, &soap_tmp_klgrp_GetUnassignedGroupId, "klgrp-GetUnassignedGroupId", "");
		soap_body_end_out(soap);
		soap_envelope_end_out(soap);
	}
	if (soap_connect(soap, URL, action)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put_klgrp_GetUnassignedGroupId(soap, &soap_tmp_klgrp_GetUnassignedGroupId, "klgrp-GetUnassignedGroupId", "")
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap_closesock(soap);
	soap_default_klgrp_GetUnassignedGroupIdResponse(soap, &r);
	if (soap_begin_recv(soap)
	 || soap_envelope_begin_in(soap)
	 || soap_recv_header(soap)
	 || soap_body_begin_in(soap))
		return soap_closesock(soap);
	soap_get_klgrp_GetUnassignedGroupIdResponse(soap, &r, "klgrp-GetUnassignedGroupIdResponse", "");
	if (soap->error)
	{	if (soap->error == SOAP_TAG_MISMATCH && soap->level == 2)
			return soap_recv_fault(soap);
		return soap_closesock(soap);
	}
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
#ifndef WITH_LEANER
	 || soap_resolve_attachments(soap)
#endif
	 || soap_end_recv(soap))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

SOAP_FMAC5 int SOAP_FMAC6 soap_call_klgrp_GetGroupInfo(struct soap *soap, const char *URL, const char *action, long id, param__params info, struct klgrp_GetGroupInfoResponse &r)
{
	struct klgrp_GetGroupInfo soap_tmp_klgrp_GetGroupInfo;
	soap->encodingStyle = NULL;
	soap_tmp_klgrp_GetGroupInfo.id=id;
	soap_tmp_klgrp_GetGroupInfo.info=info;
	soap_begin(soap);
	soap_serializeheader(soap);
	soap_serialize_klgrp_GetGroupInfo(soap, &soap_tmp_klgrp_GetGroupInfo);
	soap_begin_count(soap);
	if (soap->mode & SOAP_IO_LENGTH)
	{	soap_envelope_begin_out(soap);
		soap_putheader(soap);
		soap_body_begin_out(soap);
		soap_put_klgrp_GetGroupInfo(soap, &soap_tmp_klgrp_GetGroupInfo, "klgrp-GetGroupInfo", "");
		soap_body_end_out(soap);
		soap_envelope_end_out(soap);
	}
	if (soap_connect(soap, URL, action)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put_klgrp_GetGroupInfo(soap, &soap_tmp_klgrp_GetGroupInfo, "klgrp-GetGroupInfo", "")
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap_closesock(soap);
	soap_default_klgrp_GetGroupInfoResponse(soap, &r);
	if (soap_begin_recv(soap)
	 || soap_envelope_begin_in(soap)
	 || soap_recv_header(soap)
	 || soap_body_begin_in(soap))
		return soap_closesock(soap);
	soap_get_klgrp_GetGroupInfoResponse(soap, &r, "klgrp-GetGroupInfoResponse", "");
	if (soap->error)
	{	if (soap->error == SOAP_TAG_MISMATCH && soap->level == 2)
			return soap_recv_fault(soap);
		return soap_closesock(soap);
	}
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
#ifndef WITH_LEANER
	 || soap_resolve_attachments(soap)
#endif
	 || soap_end_recv(soap))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

SOAP_FMAC5 int SOAP_FMAC6 soap_call_klgrp_AddGroup(struct soap *soap, const char *URL, const char *action, param__params info, struct klgrp_AddGroupResponse &r)
{
	struct klgrp_AddGroup soap_tmp_klgrp_AddGroup;
	soap->encodingStyle = NULL;
	soap_tmp_klgrp_AddGroup.info=info;
	soap_begin(soap);
	soap_serializeheader(soap);
	soap_serialize_klgrp_AddGroup(soap, &soap_tmp_klgrp_AddGroup);
	soap_begin_count(soap);
	if (soap->mode & SOAP_IO_LENGTH)
	{	soap_envelope_begin_out(soap);
		soap_putheader(soap);
		soap_body_begin_out(soap);
		soap_put_klgrp_AddGroup(soap, &soap_tmp_klgrp_AddGroup, "klgrp-AddGroup", "");
		soap_body_end_out(soap);
		soap_envelope_end_out(soap);
	}
	if (soap_connect(soap, URL, action)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put_klgrp_AddGroup(soap, &soap_tmp_klgrp_AddGroup, "klgrp-AddGroup", "")
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap_closesock(soap);
	soap_default_klgrp_AddGroupResponse(soap, &r);
	if (soap_begin_recv(soap)
	 || soap_envelope_begin_in(soap)
	 || soap_recv_header(soap)
	 || soap_body_begin_in(soap))
		return soap_closesock(soap);
	soap_get_klgrp_AddGroupResponse(soap, &r, "klgrp-AddGroupResponse", "");
	if (soap->error)
	{	if (soap->error == SOAP_TAG_MISMATCH && soap->level == 2)
			return soap_recv_fault(soap);
		return soap_closesock(soap);
	}
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
#ifndef WITH_LEANER
	 || soap_resolve_attachments(soap)
#endif
	 || soap_end_recv(soap))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

SOAP_FMAC5 int SOAP_FMAC6 soap_call_klgrp_DelGroup(struct soap *soap, const char *URL, const char *action, long id, struct klgrp_DelGroupResponse &r)
{
	struct klgrp_DelGroup soap_tmp_klgrp_DelGroup;
	soap->encodingStyle = NULL;
	soap_tmp_klgrp_DelGroup.id=id;
	soap_begin(soap);
	soap_serializeheader(soap);
	soap_serialize_klgrp_DelGroup(soap, &soap_tmp_klgrp_DelGroup);
	soap_begin_count(soap);
	if (soap->mode & SOAP_IO_LENGTH)
	{	soap_envelope_begin_out(soap);
		soap_putheader(soap);
		soap_body_begin_out(soap);
		soap_put_klgrp_DelGroup(soap, &soap_tmp_klgrp_DelGroup, "klgrp-DelGroup", "");
		soap_body_end_out(soap);
		soap_envelope_end_out(soap);
	}
	if (soap_connect(soap, URL, action)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put_klgrp_DelGroup(soap, &soap_tmp_klgrp_DelGroup, "klgrp-DelGroup", "")
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap_closesock(soap);
	soap_default_klgrp_DelGroupResponse(soap, &r);
	if (soap_begin_recv(soap)
	 || soap_envelope_begin_in(soap)
	 || soap_recv_header(soap)
	 || soap_body_begin_in(soap))
		return soap_closesock(soap);
	soap_get_klgrp_DelGroupResponse(soap, &r, "klgrp-DelGroupResponse", "");
	if (soap->error)
	{	if (soap->error == SOAP_TAG_MISMATCH && soap->level == 2)
			return soap_recv_fault(soap);
		return soap_closesock(soap);
	}
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
#ifndef WITH_LEANER
	 || soap_resolve_attachments(soap)
#endif
	 || soap_end_recv(soap))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

SOAP_FMAC5 int SOAP_FMAC6 soap_call_klgrp_UpdateGroup(struct soap *soap, const char *URL, const char *action, long id, param__params info, struct klgrp_UpdateGroupResponse &r)
{
	struct klgrp_UpdateGroup soap_tmp_klgrp_UpdateGroup;
	soap->encodingStyle = NULL;
	soap_tmp_klgrp_UpdateGroup.id=id;
	soap_tmp_klgrp_UpdateGroup.info=info;
	soap_begin(soap);
	soap_serializeheader(soap);
	soap_serialize_klgrp_UpdateGroup(soap, &soap_tmp_klgrp_UpdateGroup);
	soap_begin_count(soap);
	if (soap->mode & SOAP_IO_LENGTH)
	{	soap_envelope_begin_out(soap);
		soap_putheader(soap);
		soap_body_begin_out(soap);
		soap_put_klgrp_UpdateGroup(soap, &soap_tmp_klgrp_UpdateGroup, "klgrp-UpdateGroup", "");
		soap_body_end_out(soap);
		soap_envelope_end_out(soap);
	}
	if (soap_connect(soap, URL, action)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put_klgrp_UpdateGroup(soap, &soap_tmp_klgrp_UpdateGroup, "klgrp-UpdateGroup", "")
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap_closesock(soap);
	soap_default_klgrp_UpdateGroupResponse(soap, &r);
	if (soap_begin_recv(soap)
	 || soap_envelope_begin_in(soap)
	 || soap_recv_header(soap)
	 || soap_body_begin_in(soap))
		return soap_closesock(soap);
	soap_get_klgrp_UpdateGroupResponse(soap, &r, "klgrp-UpdateGroupResponse", "");
	if (soap->error)
	{	if (soap->error == SOAP_TAG_MISMATCH && soap->level == 2)
			return soap_recv_fault(soap);
		return soap_closesock(soap);
	}
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
#ifndef WITH_LEANER
	 || soap_resolve_attachments(soap)
#endif
	 || soap_end_recv(soap))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

SOAP_FMAC5 int SOAP_FMAC6 soap_call_klgrp_SetGroupHosts(struct soap *soap, const char *URL, const char *action, long id, param__params hosts, struct klgrp_SetGroupHostsResponse &r)
{
	struct klgrp_SetGroupHosts soap_tmp_klgrp_SetGroupHosts;
	soap->encodingStyle = NULL;
	soap_tmp_klgrp_SetGroupHosts.id=id;
	soap_tmp_klgrp_SetGroupHosts.hosts=hosts;
	soap_begin(soap);
	soap_serializeheader(soap);
	soap_serialize_klgrp_SetGroupHosts(soap, &soap_tmp_klgrp_SetGroupHosts);
	soap_begin_count(soap);
	if (soap->mode & SOAP_IO_LENGTH)
	{	soap_envelope_begin_out(soap);
		soap_putheader(soap);
		soap_body_begin_out(soap);
		soap_put_klgrp_SetGroupHosts(soap, &soap_tmp_klgrp_SetGroupHosts, "klgrp-SetGroupHosts", "");
		soap_body_end_out(soap);
		soap_envelope_end_out(soap);
	}
	if (soap_connect(soap, URL, action)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put_klgrp_SetGroupHosts(soap, &soap_tmp_klgrp_SetGroupHosts, "klgrp-SetGroupHosts", "")
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap_closesock(soap);
	soap_default_klgrp_SetGroupHostsResponse(soap, &r);
	if (soap_begin_recv(soap)
	 || soap_envelope_begin_in(soap)
	 || soap_recv_header(soap)
	 || soap_body_begin_in(soap))
		return soap_closesock(soap);
	soap_get_klgrp_SetGroupHostsResponse(soap, &r, "klgrp-SetGroupHostsResponse", "");
	if (soap->error)
	{	if (soap->error == SOAP_TAG_MISMATCH && soap->level == 2)
			return soap_recv_fault(soap);
		return soap_closesock(soap);
	}
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
#ifndef WITH_LEANER
	 || soap_resolve_attachments(soap)
#endif
	 || soap_end_recv(soap))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

SOAP_FMAC5 int SOAP_FMAC6 soap_call_klgrp_RemoveHosts(struct soap *soap, const char *URL, const char *action, klgrp_wstrings hosts, struct klgrp_RemoveHostsResponse &r)
{
	struct klgrp_RemoveHosts soap_tmp_klgrp_RemoveHosts;
	soap->encodingStyle = NULL;
	soap_tmp_klgrp_RemoveHosts.hosts=hosts;
	soap_begin(soap);
	soap_serializeheader(soap);
	soap_serialize_klgrp_RemoveHosts(soap, &soap_tmp_klgrp_RemoveHosts);
	soap_begin_count(soap);
	if (soap->mode & SOAP_IO_LENGTH)
	{	soap_envelope_begin_out(soap);
		soap_putheader(soap);
		soap_body_begin_out(soap);
		soap_put_klgrp_RemoveHosts(soap, &soap_tmp_klgrp_RemoveHosts, "klgrp-RemoveHosts", "");
		soap_body_end_out(soap);
		soap_envelope_end_out(soap);
	}
	if (soap_connect(soap, URL, action)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put_klgrp_RemoveHosts(soap, &soap_tmp_klgrp_RemoveHosts, "klgrp-RemoveHosts", "")
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap_closesock(soap);
	soap_default_klgrp_RemoveHostsResponse(soap, &r);
	if (soap_begin_recv(soap)
	 || soap_envelope_begin_in(soap)
	 || soap_recv_header(soap)
	 || soap_body_begin_in(soap))
		return soap_closesock(soap);
	soap_get_klgrp_RemoveHostsResponse(soap, &r, "klgrp-RemoveHostsResponse", "");
	if (soap->error)
	{	if (soap->error == SOAP_TAG_MISMATCH && soap->level == 2)
			return soap_recv_fault(soap);
		return soap_closesock(soap);
	}
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
#ifndef WITH_LEANER
	 || soap_resolve_attachments(soap)
#endif
	 || soap_end_recv(soap))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

SOAP_FMAC5 int SOAP_FMAC6 soap_call_klgrp_ResetGroupHostsIterator(struct soap *soap, const char *URL, const char *action, long id, klgrp_wstrings fields, long lifetime, struct klgrp_ResetGroupHostsIteratorResponse &r)
{
	struct klgrp_ResetGroupHostsIterator soap_tmp_klgrp_ResetGroupHostsIterator;
	soap->encodingStyle = NULL;
	soap_tmp_klgrp_ResetGroupHostsIterator.id=id;
	soap_tmp_klgrp_ResetGroupHostsIterator.fields=fields;
	soap_tmp_klgrp_ResetGroupHostsIterator.lifetime=lifetime;
	soap_begin(soap);
	soap_serializeheader(soap);
	soap_serialize_klgrp_ResetGroupHostsIterator(soap, &soap_tmp_klgrp_ResetGroupHostsIterator);
	soap_begin_count(soap);
	if (soap->mode & SOAP_IO_LENGTH)
	{	soap_envelope_begin_out(soap);
		soap_putheader(soap);
		soap_body_begin_out(soap);
		soap_put_klgrp_ResetGroupHostsIterator(soap, &soap_tmp_klgrp_ResetGroupHostsIterator, "klgrp-ResetGroupHostsIterator", "");
		soap_body_end_out(soap);
		soap_envelope_end_out(soap);
	}
	if (soap_connect(soap, URL, action)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put_klgrp_ResetGroupHostsIterator(soap, &soap_tmp_klgrp_ResetGroupHostsIterator, "klgrp-ResetGroupHostsIterator", "")
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap_closesock(soap);
	soap_default_klgrp_ResetGroupHostsIteratorResponse(soap, &r);
	if (soap_begin_recv(soap)
	 || soap_envelope_begin_in(soap)
	 || soap_recv_header(soap)
	 || soap_body_begin_in(soap))
		return soap_closesock(soap);
	soap_get_klgrp_ResetGroupHostsIteratorResponse(soap, &r, "klgrp-ResetGroupHostsIteratorResponse", "");
	if (soap->error)
	{	if (soap->error == SOAP_TAG_MISMATCH && soap->level == 2)
			return soap_recv_fault(soap);
		return soap_closesock(soap);
	}
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
#ifndef WITH_LEANER
	 || soap_resolve_attachments(soap)
#endif
	 || soap_end_recv(soap))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

SOAP_FMAC5 int SOAP_FMAC6 soap_call_klgrp_ReleaseGroupHostsIterator(struct soap *soap, const char *URL, const char *action, wchar_t *it, struct klgrp_ReleaseGroupHostsIteratorResponse &r)
{
	struct klgrp_ReleaseGroupHostsIterator soap_tmp_klgrp_ReleaseGroupHostsIterator;
	soap->encodingStyle = NULL;
	soap_tmp_klgrp_ReleaseGroupHostsIterator.it=it;
	soap_begin(soap);
	soap_serializeheader(soap);
	soap_serialize_klgrp_ReleaseGroupHostsIterator(soap, &soap_tmp_klgrp_ReleaseGroupHostsIterator);
	soap_begin_count(soap);
	if (soap->mode & SOAP_IO_LENGTH)
	{	soap_envelope_begin_out(soap);
		soap_putheader(soap);
		soap_body_begin_out(soap);
		soap_put_klgrp_ReleaseGroupHostsIterator(soap, &soap_tmp_klgrp_ReleaseGroupHostsIterator, "klgrp-ReleaseGroupHostsIterator", "");
		soap_body_end_out(soap);
		soap_envelope_end_out(soap);
	}
	if (soap_connect(soap, URL, action)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put_klgrp_ReleaseGroupHostsIterator(soap, &soap_tmp_klgrp_ReleaseGroupHostsIterator, "klgrp-ReleaseGroupHostsIterator", "")
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap_closesock(soap);
	soap_default_klgrp_ReleaseGroupHostsIteratorResponse(soap, &r);
	if (soap_begin_recv(soap)
	 || soap_envelope_begin_in(soap)
	 || soap_recv_header(soap)
	 || soap_body_begin_in(soap))
		return soap_closesock(soap);
	soap_get_klgrp_ReleaseGroupHostsIteratorResponse(soap, &r, "klgrp-ReleaseGroupHostsIteratorResponse", "");
	if (soap->error)
	{	if (soap->error == SOAP_TAG_MISMATCH && soap->level == 2)
			return soap_recv_fault(soap);
		return soap_closesock(soap);
	}
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
#ifndef WITH_LEANER
	 || soap_resolve_attachments(soap)
#endif
	 || soap_end_recv(soap))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

SOAP_FMAC5 int SOAP_FMAC6 soap_call_klgrp_GetNextGroupHost(struct soap *soap, const char *URL, const char *action, wchar_t *it, long nCount, struct klgrp_GetNextGroupHostResponse &r)
{
	struct klgrp_GetNextGroupHost soap_tmp_klgrp_GetNextGroupHost;
	soap->encodingStyle = NULL;
	soap_tmp_klgrp_GetNextGroupHost.it=it;
	soap_tmp_klgrp_GetNextGroupHost.nCount=nCount;
	soap_begin(soap);
	soap_serializeheader(soap);
	soap_serialize_klgrp_GetNextGroupHost(soap, &soap_tmp_klgrp_GetNextGroupHost);
	soap_begin_count(soap);
	if (soap->mode & SOAP_IO_LENGTH)
	{	soap_envelope_begin_out(soap);
		soap_putheader(soap);
		soap_body_begin_out(soap);
		soap_put_klgrp_GetNextGroupHost(soap, &soap_tmp_klgrp_GetNextGroupHost, "klgrp-GetNextGroupHost", "");
		soap_body_end_out(soap);
		soap_envelope_end_out(soap);
	}
	if (soap_connect(soap, URL, action)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put_klgrp_GetNextGroupHost(soap, &soap_tmp_klgrp_GetNextGroupHost, "klgrp-GetNextGroupHost", "")
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap_closesock(soap);
	soap_default_klgrp_GetNextGroupHostResponse(soap, &r);
	if (soap_begin_recv(soap)
	 || soap_envelope_begin_in(soap)
	 || soap_recv_header(soap)
	 || soap_body_begin_in(soap))
		return soap_closesock(soap);
	soap_get_klgrp_GetNextGroupHostResponse(soap, &r, "klgrp-GetNextGroupHostResponse", "");
	if (soap->error)
	{	if (soap->error == SOAP_TAG_MISMATCH && soap->level == 2)
			return soap_recv_fault(soap);
		return soap_closesock(soap);
	}
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
#ifndef WITH_LEANER
	 || soap_resolve_attachments(soap)
#endif
	 || soap_end_recv(soap))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

SOAP_FMAC5 int SOAP_FMAC6 soap_call_klgrp_FindHosts(struct soap *soap, const char *URL, const char *action, wchar_t *wstrFilter, klgrp_wstrings arrFields, klgrp_field_order_array arrFieldsToOrder, param__params params, long lTimeout, wchar_t *wstrRequestId, struct klgrp_FindHostsResponse &r)
{
	struct klgrp_FindHosts soap_tmp_klgrp_FindHosts;
	soap->encodingStyle = NULL;
	soap_tmp_klgrp_FindHosts.wstrFilter=wstrFilter;
	soap_tmp_klgrp_FindHosts.arrFields=arrFields;
	soap_tmp_klgrp_FindHosts.arrFieldsToOrder=arrFieldsToOrder;
	soap_tmp_klgrp_FindHosts.params=params;
	soap_tmp_klgrp_FindHosts.lTimeout=lTimeout;
	soap_tmp_klgrp_FindHosts.wstrRequestId=wstrRequestId;
	soap_begin(soap);
	soap_serializeheader(soap);
	soap_serialize_klgrp_FindHosts(soap, &soap_tmp_klgrp_FindHosts);
	soap_begin_count(soap);
	if (soap->mode & SOAP_IO_LENGTH)
	{	soap_envelope_begin_out(soap);
		soap_putheader(soap);
		soap_body_begin_out(soap);
		soap_put_klgrp_FindHosts(soap, &soap_tmp_klgrp_FindHosts, "klgrp-FindHosts", "");
		soap_body_end_out(soap);
		soap_envelope_end_out(soap);
	}
	if (soap_connect(soap, URL, action)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put_klgrp_FindHosts(soap, &soap_tmp_klgrp_FindHosts, "klgrp-FindHosts", "")
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap_closesock(soap);
	soap_default_klgrp_FindHostsResponse(soap, &r);
	if (soap_begin_recv(soap)
	 || soap_envelope_begin_in(soap)
	 || soap_recv_header(soap)
	 || soap_body_begin_in(soap))
		return soap_closesock(soap);
	soap_get_klgrp_FindHostsResponse(soap, &r, "klgrp-FindHostsResponse", "");
	if (soap->error)
	{	if (soap->error == SOAP_TAG_MISMATCH && soap->level == 2)
			return soap_recv_fault(soap);
		return soap_closesock(soap);
	}
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
#ifndef WITH_LEANER
	 || soap_resolve_attachments(soap)
#endif
	 || soap_end_recv(soap))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

SOAP_FMAC5 int SOAP_FMAC6 soap_call_klgrp_FindHostsCancel(struct soap *soap, const char *URL, const char *action, wchar_t *wstrRequestId, struct klgrp_FindHostsCancelResponse &r)
{
	struct klgrp_FindHostsCancel soap_tmp_klgrp_FindHostsCancel;
	soap->encodingStyle = NULL;
	soap_tmp_klgrp_FindHostsCancel.wstrRequestId=wstrRequestId;
	soap_begin(soap);
	soap_serializeheader(soap);
	soap_serialize_klgrp_FindHostsCancel(soap, &soap_tmp_klgrp_FindHostsCancel);
	soap_begin_count(soap);
	if (soap->mode & SOAP_IO_LENGTH)
	{	soap_envelope_begin_out(soap);
		soap_putheader(soap);
		soap_body_begin_out(soap);
		soap_put_klgrp_FindHostsCancel(soap, &soap_tmp_klgrp_FindHostsCancel, "klgrp-FindHostsCancel", "");
		soap_body_end_out(soap);
		soap_envelope_end_out(soap);
	}
	if (soap_connect(soap, URL, action)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put_klgrp_FindHostsCancel(soap, &soap_tmp_klgrp_FindHostsCancel, "klgrp-FindHostsCancel", "")
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap_closesock(soap);
	soap_default_klgrp_FindHostsCancelResponse(soap, &r);
	if (soap_begin_recv(soap)
	 || soap_envelope_begin_in(soap)
	 || soap_recv_header(soap)
	 || soap_body_begin_in(soap))
		return soap_closesock(soap);
	soap_get_klgrp_FindHostsCancelResponse(soap, &r, "klgrp-FindHostsCancelResponse", "");
	if (soap->error)
	{	if (soap->error == SOAP_TAG_MISMATCH && soap->level == 2)
			return soap_recv_fault(soap);
		return soap_closesock(soap);
	}
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
#ifndef WITH_LEANER
	 || soap_resolve_attachments(soap)
#endif
	 || soap_end_recv(soap))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

SOAP_FMAC5 int SOAP_FMAC6 soap_call_klgrp_FindHostsGetAccessor(struct soap *soap, const char *URL, const char *action, wchar_t *wstrRequestId, struct klgrp_FindHostsGetAccessorResponse &r)
{
	struct klgrp_FindHostsGetAccessor soap_tmp_klgrp_FindHostsGetAccessor;
	soap->encodingStyle = NULL;
	soap_tmp_klgrp_FindHostsGetAccessor.wstrRequestId=wstrRequestId;
	soap_begin(soap);
	soap_serializeheader(soap);
	soap_serialize_klgrp_FindHostsGetAccessor(soap, &soap_tmp_klgrp_FindHostsGetAccessor);
	soap_begin_count(soap);
	if (soap->mode & SOAP_IO_LENGTH)
	{	soap_envelope_begin_out(soap);
		soap_putheader(soap);
		soap_body_begin_out(soap);
		soap_put_klgrp_FindHostsGetAccessor(soap, &soap_tmp_klgrp_FindHostsGetAccessor, "klgrp-FindHostsGetAccessor", "");
		soap_body_end_out(soap);
		soap_envelope_end_out(soap);
	}
	if (soap_connect(soap, URL, action)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put_klgrp_FindHostsGetAccessor(soap, &soap_tmp_klgrp_FindHostsGetAccessor, "klgrp-FindHostsGetAccessor", "")
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap_closesock(soap);
	soap_default_klgrp_FindHostsGetAccessorResponse(soap, &r);
	if (soap_begin_recv(soap)
	 || soap_envelope_begin_in(soap)
	 || soap_recv_header(soap)
	 || soap_body_begin_in(soap))
		return soap_closesock(soap);
	soap_get_klgrp_FindHostsGetAccessorResponse(soap, &r, "klgrp-FindHostsGetAccessorResponse", "");
	if (soap->error)
	{	if (soap->error == SOAP_TAG_MISMATCH && soap->level == 2)
			return soap_recv_fault(soap);
		return soap_closesock(soap);
	}
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
#ifndef WITH_LEANER
	 || soap_resolve_attachments(soap)
#endif
	 || soap_end_recv(soap))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

SOAP_FMAC5 int SOAP_FMAC6 soap_call_klgrp_GetSuperGroupId(struct soap *soap, const char *URL, const char *action, void *_, struct klgrp_GetSuperGroupIdResponse &r)
{
	struct klgrp_GetSuperGroupId soap_tmp_klgrp_GetSuperGroupId;
	soap->encodingStyle = NULL;
	soap_tmp_klgrp_GetSuperGroupId._=_;
	soap_begin(soap);
	soap_serializeheader(soap);
	soap_serialize_klgrp_GetSuperGroupId(soap, &soap_tmp_klgrp_GetSuperGroupId);
	soap_begin_count(soap);
	if (soap->mode & SOAP_IO_LENGTH)
	{	soap_envelope_begin_out(soap);
		soap_putheader(soap);
		soap_body_begin_out(soap);
		soap_put_klgrp_GetSuperGroupId(soap, &soap_tmp_klgrp_GetSuperGroupId, "klgrp-GetSuperGroupId", "");
		soap_body_end_out(soap);
		soap_envelope_end_out(soap);
	}
	if (soap_connect(soap, URL, action)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put_klgrp_GetSuperGroupId(soap, &soap_tmp_klgrp_GetSuperGroupId, "klgrp-GetSuperGroupId", "")
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap_closesock(soap);
	soap_default_klgrp_GetSuperGroupIdResponse(soap, &r);
	if (soap_begin_recv(soap)
	 || soap_envelope_begin_in(soap)
	 || soap_recv_header(soap)
	 || soap_body_begin_in(soap))
		return soap_closesock(soap);
	soap_get_klgrp_GetSuperGroupIdResponse(soap, &r, "klgrp-GetSuperGroupIdResponse", "");
	if (soap->error)
	{	if (soap->error == SOAP_TAG_MISMATCH && soap->level == 2)
			return soap_recv_fault(soap);
		return soap_closesock(soap);
	}
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
#ifndef WITH_LEANER
	 || soap_resolve_attachments(soap)
#endif
	 || soap_end_recv(soap))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

SOAP_FMAC5 int SOAP_FMAC6 soap_call_klgrp_FindGroups(struct soap *soap, const char *URL, const char *action, wchar_t *wstrFilter, klgrp_wstrings arrFields, klgrp_field_order_array arrFieldsToOrder, param__params params, long lTimeout, wchar_t *wstrRequestId, struct klgrp_FindGroupsResponse &r)
{
	struct klgrp_FindGroups soap_tmp_klgrp_FindGroups;
	soap->encodingStyle = NULL;
	soap_tmp_klgrp_FindGroups.wstrFilter=wstrFilter;
	soap_tmp_klgrp_FindGroups.arrFields=arrFields;
	soap_tmp_klgrp_FindGroups.arrFieldsToOrder=arrFieldsToOrder;
	soap_tmp_klgrp_FindGroups.params=params;
	soap_tmp_klgrp_FindGroups.lTimeout=lTimeout;
	soap_tmp_klgrp_FindGroups.wstrRequestId=wstrRequestId;
	soap_begin(soap);
	soap_serializeheader(soap);
	soap_serialize_klgrp_FindGroups(soap, &soap_tmp_klgrp_FindGroups);
	soap_begin_count(soap);
	if (soap->mode & SOAP_IO_LENGTH)
	{	soap_envelope_begin_out(soap);
		soap_putheader(soap);
		soap_body_begin_out(soap);
		soap_put_klgrp_FindGroups(soap, &soap_tmp_klgrp_FindGroups, "klgrp-FindGroups", "");
		soap_body_end_out(soap);
		soap_envelope_end_out(soap);
	}
	if (soap_connect(soap, URL, action)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put_klgrp_FindGroups(soap, &soap_tmp_klgrp_FindGroups, "klgrp-FindGroups", "")
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap_closesock(soap);
	soap_default_klgrp_FindGroupsResponse(soap, &r);
	if (soap_begin_recv(soap)
	 || soap_envelope_begin_in(soap)
	 || soap_recv_header(soap)
	 || soap_body_begin_in(soap))
		return soap_closesock(soap);
	soap_get_klgrp_FindGroupsResponse(soap, &r, "klgrp-FindGroupsResponse", "");
	if (soap->error)
	{	if (soap->error == SOAP_TAG_MISMATCH && soap->level == 2)
			return soap_recv_fault(soap);
		return soap_closesock(soap);
	}
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
#ifndef WITH_LEANER
	 || soap_resolve_attachments(soap)
#endif
	 || soap_end_recv(soap))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

SOAP_FMAC5 int SOAP_FMAC6 soap_call_klpol_GetPolicyCommonData(struct soap *soap, const char *URL, const char *action, long nGroupId, long nExpectedServerVersion, struct klpol_GetPolicyCommonDataResponse &r)
{
	struct klpol_GetPolicyCommonData soap_tmp_klpol_GetPolicyCommonData;
	soap->encodingStyle = NULL;
	soap_tmp_klpol_GetPolicyCommonData.nGroupId=nGroupId;
	soap_tmp_klpol_GetPolicyCommonData.nExpectedServerVersion=nExpectedServerVersion;
	soap_begin(soap);
	soap_serializeheader(soap);
	soap_serialize_klpol_GetPolicyCommonData(soap, &soap_tmp_klpol_GetPolicyCommonData);
	soap_begin_count(soap);
	if (soap->mode & SOAP_IO_LENGTH)
	{	soap_envelope_begin_out(soap);
		soap_putheader(soap);
		soap_body_begin_out(soap);
		soap_put_klpol_GetPolicyCommonData(soap, &soap_tmp_klpol_GetPolicyCommonData, "klpol-GetPolicyCommonData", "");
		soap_body_end_out(soap);
		soap_envelope_end_out(soap);
	}
	if (soap_connect(soap, URL, action)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put_klpol_GetPolicyCommonData(soap, &soap_tmp_klpol_GetPolicyCommonData, "klpol-GetPolicyCommonData", "")
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap_closesock(soap);
	soap_default_klpol_GetPolicyCommonDataResponse(soap, &r);
	if (soap_begin_recv(soap)
	 || soap_envelope_begin_in(soap)
	 || soap_recv_header(soap)
	 || soap_body_begin_in(soap))
		return soap_closesock(soap);
	soap_get_klpol_GetPolicyCommonDataResponse(soap, &r, "klpol-GetPolicyCommonDataResponse", "");
	if (soap->error)
	{	if (soap->error == SOAP_TAG_MISMATCH && soap->level == 2)
			return soap_recv_fault(soap);
		return soap_closesock(soap);
	}
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
#ifndef WITH_LEANER
	 || soap_resolve_attachments(soap)
#endif
	 || soap_end_recv(soap))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

SOAP_FMAC5 int SOAP_FMAC6 soap_call_klpol_GetAllAcivePoliciesForGroup(struct soap *soap, const char *URL, const char *action, long nGroupId, struct klpol_GetAllAcivePoliciesForGroupResponse &r)
{
	struct klpol_GetAllAcivePoliciesForGroup soap_tmp_klpol_GetAllAcivePoliciesForGroup;
	soap->encodingStyle = NULL;
	soap_tmp_klpol_GetAllAcivePoliciesForGroup.nGroupId=nGroupId;
	soap_begin(soap);
	soap_serializeheader(soap);
	soap_serialize_klpol_GetAllAcivePoliciesForGroup(soap, &soap_tmp_klpol_GetAllAcivePoliciesForGroup);
	soap_begin_count(soap);
	if (soap->mode & SOAP_IO_LENGTH)
	{	soap_envelope_begin_out(soap);
		soap_putheader(soap);
		soap_body_begin_out(soap);
		soap_put_klpol_GetAllAcivePoliciesForGroup(soap, &soap_tmp_klpol_GetAllAcivePoliciesForGroup, "klpol-GetAllAcivePoliciesForGroup", "");
		soap_body_end_out(soap);
		soap_envelope_end_out(soap);
	}
	if (soap_connect(soap, URL, action)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put_klpol_GetAllAcivePoliciesForGroup(soap, &soap_tmp_klpol_GetAllAcivePoliciesForGroup, "klpol-GetAllAcivePoliciesForGroup", "")
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap_closesock(soap);
	soap_default_klpol_GetAllAcivePoliciesForGroupResponse(soap, &r);
	if (soap_begin_recv(soap)
	 || soap_envelope_begin_in(soap)
	 || soap_recv_header(soap)
	 || soap_body_begin_in(soap))
		return soap_closesock(soap);
	soap_get_klpol_GetAllAcivePoliciesForGroupResponse(soap, &r, "klpol-GetAllAcivePoliciesForGroupResponse", "");
	if (soap->error)
	{	if (soap->error == SOAP_TAG_MISMATCH && soap->level == 2)
			return soap_recv_fault(soap);
		return soap_closesock(soap);
	}
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
#ifndef WITH_LEANER
	 || soap_resolve_attachments(soap)
#endif
	 || soap_end_recv(soap))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

SOAP_FMAC5 int SOAP_FMAC6 soap_call_klpol_GetSinglePolicyCommonData(struct soap *soap, const char *URL, const char *action, long policyId, struct klpol_GetSinglePolicyCommonDataResponse &r)
{
	struct klpol_GetSinglePolicyCommonData soap_tmp_klpol_GetSinglePolicyCommonData;
	soap->encodingStyle = NULL;
	soap_tmp_klpol_GetSinglePolicyCommonData.policyId=policyId;
	soap_begin(soap);
	soap_serializeheader(soap);
	soap_serialize_klpol_GetSinglePolicyCommonData(soap, &soap_tmp_klpol_GetSinglePolicyCommonData);
	soap_begin_count(soap);
	if (soap->mode & SOAP_IO_LENGTH)
	{	soap_envelope_begin_out(soap);
		soap_putheader(soap);
		soap_body_begin_out(soap);
		soap_put_klpol_GetSinglePolicyCommonData(soap, &soap_tmp_klpol_GetSinglePolicyCommonData, "klpol-GetSinglePolicyCommonData", "");
		soap_body_end_out(soap);
		soap_envelope_end_out(soap);
	}
	if (soap_connect(soap, URL, action)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put_klpol_GetSinglePolicyCommonData(soap, &soap_tmp_klpol_GetSinglePolicyCommonData, "klpol-GetSinglePolicyCommonData", "")
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap_closesock(soap);
	soap_default_klpol_GetSinglePolicyCommonDataResponse(soap, &r);
	if (soap_begin_recv(soap)
	 || soap_envelope_begin_in(soap)
	 || soap_recv_header(soap)
	 || soap_body_begin_in(soap))
		return soap_closesock(soap);
	soap_get_klpol_GetSinglePolicyCommonDataResponse(soap, &r, "klpol-GetSinglePolicyCommonDataResponse", "");
	if (soap->error)
	{	if (soap->error == SOAP_TAG_MISMATCH && soap->level == 2)
			return soap_recv_fault(soap);
		return soap_closesock(soap);
	}
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
#ifndef WITH_LEANER
	 || soap_resolve_attachments(soap)
#endif
	 || soap_end_recv(soap))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

SOAP_FMAC5 int SOAP_FMAC6 soap_call_klpol_AddPolicy(struct soap *soap, const char *URL, const char *action, long nGroupId, struct klpol_policy_common_data policy, struct klpol_AddPolicyResponse &r)
{
	struct klpol_AddPolicy soap_tmp_klpol_AddPolicy;
	soap->encodingStyle = NULL;
	soap_tmp_klpol_AddPolicy.nGroupId=nGroupId;
	soap_tmp_klpol_AddPolicy.policy=policy;
	soap_begin(soap);
	soap_serializeheader(soap);
	soap_serialize_klpol_AddPolicy(soap, &soap_tmp_klpol_AddPolicy);
	soap_begin_count(soap);
	if (soap->mode & SOAP_IO_LENGTH)
	{	soap_envelope_begin_out(soap);
		soap_putheader(soap);
		soap_body_begin_out(soap);
		soap_put_klpol_AddPolicy(soap, &soap_tmp_klpol_AddPolicy, "klpol-AddPolicy", "");
		soap_body_end_out(soap);
		soap_envelope_end_out(soap);
	}
	if (soap_connect(soap, URL, action)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put_klpol_AddPolicy(soap, &soap_tmp_klpol_AddPolicy, "klpol-AddPolicy", "")
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap_closesock(soap);
	soap_default_klpol_AddPolicyResponse(soap, &r);
	if (soap_begin_recv(soap)
	 || soap_envelope_begin_in(soap)
	 || soap_recv_header(soap)
	 || soap_body_begin_in(soap))
		return soap_closesock(soap);
	soap_get_klpol_AddPolicyResponse(soap, &r, "klpol-AddPolicyResponse", "");
	if (soap->error)
	{	if (soap->error == SOAP_TAG_MISMATCH && soap->level == 2)
			return soap_recv_fault(soap);
		return soap_closesock(soap);
	}
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
#ifndef WITH_LEANER
	 || soap_resolve_attachments(soap)
#endif
	 || soap_end_recv(soap))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

SOAP_FMAC5 int SOAP_FMAC6 soap_call_klpol_UpdatePolicyCommonData(struct soap *soap, const char *URL, const char *action, struct klpol_policy_common_data policy, struct klpol_UpdatePolicyCommonDataResponse &r)
{
	struct klpol_UpdatePolicyCommonData soap_tmp_klpol_UpdatePolicyCommonData;
	soap->encodingStyle = NULL;
	soap_tmp_klpol_UpdatePolicyCommonData.policy=policy;
	soap_begin(soap);
	soap_serializeheader(soap);
	soap_serialize_klpol_UpdatePolicyCommonData(soap, &soap_tmp_klpol_UpdatePolicyCommonData);
	soap_begin_count(soap);
	if (soap->mode & SOAP_IO_LENGTH)
	{	soap_envelope_begin_out(soap);
		soap_putheader(soap);
		soap_body_begin_out(soap);
		soap_put_klpol_UpdatePolicyCommonData(soap, &soap_tmp_klpol_UpdatePolicyCommonData, "klpol-UpdatePolicyCommonData", "");
		soap_body_end_out(soap);
		soap_envelope_end_out(soap);
	}
	if (soap_connect(soap, URL, action)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put_klpol_UpdatePolicyCommonData(soap, &soap_tmp_klpol_UpdatePolicyCommonData, "klpol-UpdatePolicyCommonData", "")
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap_closesock(soap);
	soap_default_klpol_UpdatePolicyCommonDataResponse(soap, &r);
	if (soap_begin_recv(soap)
	 || soap_envelope_begin_in(soap)
	 || soap_recv_header(soap)
	 || soap_body_begin_in(soap))
		return soap_closesock(soap);
	soap_get_klpol_UpdatePolicyCommonDataResponse(soap, &r, "klpol-UpdatePolicyCommonDataResponse", "");
	if (soap->error)
	{	if (soap->error == SOAP_TAG_MISMATCH && soap->level == 2)
			return soap_recv_fault(soap);
		return soap_closesock(soap);
	}
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
#ifndef WITH_LEANER
	 || soap_resolve_attachments(soap)
#endif
	 || soap_end_recv(soap))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

SOAP_FMAC5 int SOAP_FMAC6 soap_call_klpol_DeletePolicy(struct soap *soap, const char *URL, const char *action, long policyId, struct klpol_DeletePolicyResponse &r)
{
	struct klpol_DeletePolicy soap_tmp_klpol_DeletePolicy;
	soap->encodingStyle = NULL;
	soap_tmp_klpol_DeletePolicy.policyId=policyId;
	soap_begin(soap);
	soap_serializeheader(soap);
	soap_serialize_klpol_DeletePolicy(soap, &soap_tmp_klpol_DeletePolicy);
	soap_begin_count(soap);
	if (soap->mode & SOAP_IO_LENGTH)
	{	soap_envelope_begin_out(soap);
		soap_putheader(soap);
		soap_body_begin_out(soap);
		soap_put_klpol_DeletePolicy(soap, &soap_tmp_klpol_DeletePolicy, "klpol-DeletePolicy", "");
		soap_body_end_out(soap);
		soap_envelope_end_out(soap);
	}
	if (soap_connect(soap, URL, action)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put_klpol_DeletePolicy(soap, &soap_tmp_klpol_DeletePolicy, "klpol-DeletePolicy", "")
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap_closesock(soap);
	soap_default_klpol_DeletePolicyResponse(soap, &r);
	if (soap_begin_recv(soap)
	 || soap_envelope_begin_in(soap)
	 || soap_recv_header(soap)
	 || soap_body_begin_in(soap))
		return soap_closesock(soap);
	soap_get_klpol_DeletePolicyResponse(soap, &r, "klpol-DeletePolicyResponse", "");
	if (soap->error)
	{	if (soap->error == SOAP_TAG_MISMATCH && soap->level == 2)
			return soap_recv_fault(soap);
		return soap_closesock(soap);
	}
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
#ifndef WITH_LEANER
	 || soap_resolve_attachments(soap)
#endif
	 || soap_end_recv(soap))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

SOAP_FMAC5 int SOAP_FMAC6 soap_call_klpol_CopyPolicyEx(struct soap *soap, const char *URL, const char *action, long policyId, long nNewGroupId, bool bDeleteOrigin, struct klpol_CopyPolicyExResponse &r)
{
	struct klpol_CopyPolicyEx soap_tmp_klpol_CopyPolicyEx;
	soap->encodingStyle = NULL;
	soap_tmp_klpol_CopyPolicyEx.policyId=policyId;
	soap_tmp_klpol_CopyPolicyEx.nNewGroupId=nNewGroupId;
	soap_tmp_klpol_CopyPolicyEx.bDeleteOrigin=bDeleteOrigin;
	soap_begin(soap);
	soap_serializeheader(soap);
	soap_serialize_klpol_CopyPolicyEx(soap, &soap_tmp_klpol_CopyPolicyEx);
	soap_begin_count(soap);
	if (soap->mode & SOAP_IO_LENGTH)
	{	soap_envelope_begin_out(soap);
		soap_putheader(soap);
		soap_body_begin_out(soap);
		soap_put_klpol_CopyPolicyEx(soap, &soap_tmp_klpol_CopyPolicyEx, "klpol-CopyPolicyEx", "");
		soap_body_end_out(soap);
		soap_envelope_end_out(soap);
	}
	if (soap_connect(soap, URL, action)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put_klpol_CopyPolicyEx(soap, &soap_tmp_klpol_CopyPolicyEx, "klpol-CopyPolicyEx", "")
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap_closesock(soap);
	soap_default_klpol_CopyPolicyExResponse(soap, &r);
	if (soap_begin_recv(soap)
	 || soap_envelope_begin_in(soap)
	 || soap_recv_header(soap)
	 || soap_body_begin_in(soap))
		return soap_closesock(soap);
	soap_get_klpol_CopyPolicyExResponse(soap, &r, "klpol-CopyPolicyExResponse", "");
	if (soap->error)
	{	if (soap->error == SOAP_TAG_MISMATCH && soap->level == 2)
			return soap_recv_fault(soap);
		return soap_closesock(soap);
	}
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
#ifndef WITH_LEANER
	 || soap_resolve_attachments(soap)
#endif
	 || soap_end_recv(soap))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

SOAP_FMAC5 int SOAP_FMAC6 soap_call_klpol_GetSSProxyID(struct soap *soap, const char *URL, const char *action, long policyId, long nTimeout, struct klpol_GetSSProxyIDResponse &r)
{
	struct klpol_GetSSProxyID soap_tmp_klpol_GetSSProxyID;
	soap->encodingStyle = NULL;
	soap_tmp_klpol_GetSSProxyID.policyId=policyId;
	soap_tmp_klpol_GetSSProxyID.nTimeout=nTimeout;
	soap_begin(soap);
	soap_serializeheader(soap);
	soap_serialize_klpol_GetSSProxyID(soap, &soap_tmp_klpol_GetSSProxyID);
	soap_begin_count(soap);
	if (soap->mode & SOAP_IO_LENGTH)
	{	soap_envelope_begin_out(soap);
		soap_putheader(soap);
		soap_body_begin_out(soap);
		soap_put_klpol_GetSSProxyID(soap, &soap_tmp_klpol_GetSSProxyID, "klpol-GetSSProxyID", "");
		soap_body_end_out(soap);
		soap_envelope_end_out(soap);
	}
	if (soap_connect(soap, URL, action)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put_klpol_GetSSProxyID(soap, &soap_tmp_klpol_GetSSProxyID, "klpol-GetSSProxyID", "")
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap_closesock(soap);
	soap_default_klpol_GetSSProxyIDResponse(soap, &r);
	if (soap_begin_recv(soap)
	 || soap_envelope_begin_in(soap)
	 || soap_recv_header(soap)
	 || soap_body_begin_in(soap))
		return soap_closesock(soap);
	soap_get_klpol_GetSSProxyIDResponse(soap, &r, "klpol-GetSSProxyIDResponse", "");
	if (soap->error)
	{	if (soap->error == SOAP_TAG_MISMATCH && soap->level == 2)
			return soap_recv_fault(soap);
		return soap_closesock(soap);
	}
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
#ifndef WITH_LEANER
	 || soap_resolve_attachments(soap)
#endif
	 || soap_end_recv(soap))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

SOAP_FMAC5 int SOAP_FMAC6 soap_call_klpol_ModifySettings(struct soap *soap, const char *URL, const char *action, long policyId, struct klpol_ModifySettingsResponse &r)
{
	struct klpol_ModifySettings soap_tmp_klpol_ModifySettings;
	soap->encodingStyle = NULL;
	soap_tmp_klpol_ModifySettings.policyId=policyId;
	soap_begin(soap);
	soap_serializeheader(soap);
	soap_serialize_klpol_ModifySettings(soap, &soap_tmp_klpol_ModifySettings);
	soap_begin_count(soap);
	if (soap->mode & SOAP_IO_LENGTH)
	{	soap_envelope_begin_out(soap);
		soap_putheader(soap);
		soap_body_begin_out(soap);
		soap_put_klpol_ModifySettings(soap, &soap_tmp_klpol_ModifySettings, "klpol-ModifySettings", "");
		soap_body_end_out(soap);
		soap_envelope_end_out(soap);
	}
	if (soap_connect(soap, URL, action)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put_klpol_ModifySettings(soap, &soap_tmp_klpol_ModifySettings, "klpol-ModifySettings", "")
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap_closesock(soap);
	soap_default_klpol_ModifySettingsResponse(soap, &r);
	if (soap_begin_recv(soap)
	 || soap_envelope_begin_in(soap)
	 || soap_recv_header(soap)
	 || soap_body_begin_in(soap))
		return soap_closesock(soap);
	soap_get_klpol_ModifySettingsResponse(soap, &r, "klpol-ModifySettingsResponse", "");
	if (soap->error)
	{	if (soap->error == SOAP_TAG_MISMATCH && soap->level == 2)
			return soap_recv_fault(soap);
		return soap_closesock(soap);
	}
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
#ifndef WITH_LEANER
	 || soap_resolve_attachments(soap)
#endif
	 || soap_end_recv(soap))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

SOAP_FMAC5 int SOAP_FMAC6 soap_call_klpol_MakePolicyActive(struct soap *soap, const char *URL, const char *action, long policyId, bool bActive, struct klpol_MakePolicyActiveResponse &r)
{
	struct klpol_MakePolicyActive soap_tmp_klpol_MakePolicyActive;
	soap->encodingStyle = NULL;
	soap_tmp_klpol_MakePolicyActive.policyId=policyId;
	soap_tmp_klpol_MakePolicyActive.bActive=bActive;
	soap_begin(soap);
	soap_serializeheader(soap);
	soap_serialize_klpol_MakePolicyActive(soap, &soap_tmp_klpol_MakePolicyActive);
	soap_begin_count(soap);
	if (soap->mode & SOAP_IO_LENGTH)
	{	soap_envelope_begin_out(soap);
		soap_putheader(soap);
		soap_body_begin_out(soap);
		soap_put_klpol_MakePolicyActive(soap, &soap_tmp_klpol_MakePolicyActive, "klpol-MakePolicyActive", "");
		soap_body_end_out(soap);
		soap_envelope_end_out(soap);
	}
	if (soap_connect(soap, URL, action)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put_klpol_MakePolicyActive(soap, &soap_tmp_klpol_MakePolicyActive, "klpol-MakePolicyActive", "")
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap_closesock(soap);
	soap_default_klpol_MakePolicyActiveResponse(soap, &r);
	if (soap_begin_recv(soap)
	 || soap_envelope_begin_in(soap)
	 || soap_recv_header(soap)
	 || soap_body_begin_in(soap))
		return soap_closesock(soap);
	soap_get_klpol_MakePolicyActiveResponse(soap, &r, "klpol-MakePolicyActiveResponse", "");
	if (soap->error)
	{	if (soap->error == SOAP_TAG_MISMATCH && soap->level == 2)
			return soap_recv_fault(soap);
		return soap_closesock(soap);
	}
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
#ifndef WITH_LEANER
	 || soap_resolve_attachments(soap)
#endif
	 || soap_end_recv(soap))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

SOAP_FMAC5 int SOAP_FMAC6 soap_call_klpol_MakePolicyRoaming(struct soap *soap, const char *URL, const char *action, long policyId, struct klpol_MakePolicyRoamingResponse &r)
{
	struct klpol_MakePolicyRoaming soap_tmp_klpol_MakePolicyRoaming;
	soap->encodingStyle = NULL;
	soap_tmp_klpol_MakePolicyRoaming.policyId=policyId;
	soap_begin(soap);
	soap_serializeheader(soap);
	soap_serialize_klpol_MakePolicyRoaming(soap, &soap_tmp_klpol_MakePolicyRoaming);
	soap_begin_count(soap);
	if (soap->mode & SOAP_IO_LENGTH)
	{	soap_envelope_begin_out(soap);
		soap_putheader(soap);
		soap_body_begin_out(soap);
		soap_put_klpol_MakePolicyRoaming(soap, &soap_tmp_klpol_MakePolicyRoaming, "klpol-MakePolicyRoaming", "");
		soap_body_end_out(soap);
		soap_envelope_end_out(soap);
	}
	if (soap_connect(soap, URL, action)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put_klpol_MakePolicyRoaming(soap, &soap_tmp_klpol_MakePolicyRoaming, "klpol-MakePolicyRoaming", "")
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap_closesock(soap);
	soap_default_klpol_MakePolicyRoamingResponse(soap, &r);
	if (soap_begin_recv(soap)
	 || soap_envelope_begin_in(soap)
	 || soap_recv_header(soap)
	 || soap_body_begin_in(soap))
		return soap_closesock(soap);
	soap_get_klpol_MakePolicyRoamingResponse(soap, &r, "klpol-MakePolicyRoamingResponse", "");
	if (soap->error)
	{	if (soap->error == SOAP_TAG_MISMATCH && soap->level == 2)
			return soap_recv_fault(soap);
		return soap_closesock(soap);
	}
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
#ifndef WITH_LEANER
	 || soap_resolve_attachments(soap)
#endif
	 || soap_end_recv(soap))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

SOAP_FMAC5 int SOAP_FMAC6 soap_call_klpol_GetPoliciesForGroup(struct soap *soap, const char *URL, const char *action, long nGroupId, long nExpectedServerVersion, struct klpol_GetPoliciesForGroupResponse &r)
{
	struct klpol_GetPoliciesForGroup soap_tmp_klpol_GetPoliciesForGroup;
	soap->encodingStyle = NULL;
	soap_tmp_klpol_GetPoliciesForGroup.nGroupId=nGroupId;
	soap_tmp_klpol_GetPoliciesForGroup.nExpectedServerVersion=nExpectedServerVersion;
	soap_begin(soap);
	soap_serializeheader(soap);
	soap_serialize_klpol_GetPoliciesForGroup(soap, &soap_tmp_klpol_GetPoliciesForGroup);
	soap_begin_count(soap);
	if (soap->mode & SOAP_IO_LENGTH)
	{	soap_envelope_begin_out(soap);
		soap_putheader(soap);
		soap_body_begin_out(soap);
		soap_put_klpol_GetPoliciesForGroup(soap, &soap_tmp_klpol_GetPoliciesForGroup, "klpol-GetPoliciesForGroup", "");
		soap_body_end_out(soap);
		soap_envelope_end_out(soap);
	}
	if (soap_connect(soap, URL, action)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put_klpol_GetPoliciesForGroup(soap, &soap_tmp_klpol_GetPoliciesForGroup, "klpol-GetPoliciesForGroup", "")
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap_closesock(soap);
	soap_default_klpol_GetPoliciesForGroupResponse(soap, &r);
	if (soap_begin_recv(soap)
	 || soap_envelope_begin_in(soap)
	 || soap_recv_header(soap)
	 || soap_body_begin_in(soap))
		return soap_closesock(soap);
	soap_get_klpol_GetPoliciesForGroupResponse(soap, &r, "klpol-GetPoliciesForGroupResponse", "");
	if (soap->error)
	{	if (soap->error == SOAP_TAG_MISMATCH && soap->level == 2)
			return soap_recv_fault(soap);
		return soap_closesock(soap);
	}
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
#ifndef WITH_LEANER
	 || soap_resolve_attachments(soap)
#endif
	 || soap_end_recv(soap))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

SOAP_FMAC5 int SOAP_FMAC6 soap_call_klpol_CopyOrMovePolicy(struct soap *soap, const char *URL, const char *action, long policyId, long nNewGroupId, bool bDeleteOrigin, struct klpol_policy_common_data data, struct klpol_CopyOrMovePolicyResponse &r)
{
	struct klpol_CopyOrMovePolicy soap_tmp_klpol_CopyOrMovePolicy;
	soap->encodingStyle = NULL;
	soap_tmp_klpol_CopyOrMovePolicy.policyId=policyId;
	soap_tmp_klpol_CopyOrMovePolicy.nNewGroupId=nNewGroupId;
	soap_tmp_klpol_CopyOrMovePolicy.bDeleteOrigin=bDeleteOrigin;
	soap_tmp_klpol_CopyOrMovePolicy.data=data;
	soap_begin(soap);
	soap_serializeheader(soap);
	soap_serialize_klpol_CopyOrMovePolicy(soap, &soap_tmp_klpol_CopyOrMovePolicy);
	soap_begin_count(soap);
	if (soap->mode & SOAP_IO_LENGTH)
	{	soap_envelope_begin_out(soap);
		soap_putheader(soap);
		soap_body_begin_out(soap);
		soap_put_klpol_CopyOrMovePolicy(soap, &soap_tmp_klpol_CopyOrMovePolicy, "klpol-CopyOrMovePolicy", "");
		soap_body_end_out(soap);
		soap_envelope_end_out(soap);
	}
	if (soap_connect(soap, URL, action)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put_klpol_CopyOrMovePolicy(soap, &soap_tmp_klpol_CopyOrMovePolicy, "klpol-CopyOrMovePolicy", "")
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap_closesock(soap);
	soap_default_klpol_CopyOrMovePolicyResponse(soap, &r);
	if (soap_begin_recv(soap)
	 || soap_envelope_begin_in(soap)
	 || soap_recv_header(soap)
	 || soap_body_begin_in(soap))
		return soap_closesock(soap);
	soap_get_klpol_CopyOrMovePolicyResponse(soap, &r, "klpol-CopyOrMovePolicyResponse", "");
	if (soap->error)
	{	if (soap->error == SOAP_TAG_MISMATCH && soap->level == 2)
			return soap_recv_fault(soap);
		return soap_closesock(soap);
	}
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
#ifndef WITH_LEANER
	 || soap_resolve_attachments(soap)
#endif
	 || soap_end_recv(soap))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

SOAP_FMAC5 int SOAP_FMAC6 soap_call_klpol_SetOutbreakPolicy(struct soap *soap, const char *URL, const char *action, klpol_polici_ids vec_policies, struct klpol_SetOutbreakPolicyResponse &r)
{
	struct klpol_SetOutbreakPolicy soap_tmp_klpol_SetOutbreakPolicy;
	soap->encodingStyle = NULL;
	soap_tmp_klpol_SetOutbreakPolicy.vec_policies=vec_policies;
	soap_begin(soap);
	soap_serializeheader(soap);
	soap_serialize_klpol_SetOutbreakPolicy(soap, &soap_tmp_klpol_SetOutbreakPolicy);
	soap_begin_count(soap);
	if (soap->mode & SOAP_IO_LENGTH)
	{	soap_envelope_begin_out(soap);
		soap_putheader(soap);
		soap_body_begin_out(soap);
		soap_put_klpol_SetOutbreakPolicy(soap, &soap_tmp_klpol_SetOutbreakPolicy, "klpol-SetOutbreakPolicy", "");
		soap_body_end_out(soap);
		soap_envelope_end_out(soap);
	}
	if (soap_connect(soap, URL, action)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put_klpol_SetOutbreakPolicy(soap, &soap_tmp_klpol_SetOutbreakPolicy, "klpol-SetOutbreakPolicy", "")
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap_closesock(soap);
	soap_default_klpol_SetOutbreakPolicyResponse(soap, &r);
	if (soap_begin_recv(soap)
	 || soap_envelope_begin_in(soap)
	 || soap_recv_header(soap)
	 || soap_body_begin_in(soap))
		return soap_closesock(soap);
	soap_get_klpol_SetOutbreakPolicyResponse(soap, &r, "klpol-SetOutbreakPolicyResponse", "");
	if (soap->error)
	{	if (soap->error == SOAP_TAG_MISMATCH && soap->level == 2)
			return soap_recv_fault(soap);
		return soap_closesock(soap);
	}
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
#ifndef WITH_LEANER
	 || soap_resolve_attachments(soap)
#endif
	 || soap_end_recv(soap))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

SOAP_FMAC5 int SOAP_FMAC6 soap_call_klpol_GetOutbreakPolicy(struct soap *soap, const char *URL, const char *action, struct klpol_GetOutbreakPolicyResponse &r)
{
	struct klpol_GetOutbreakPolicy soap_tmp_klpol_GetOutbreakPolicy;
	soap->encodingStyle = NULL;
	soap_begin(soap);
	soap_serializeheader(soap);
	soap_serialize_klpol_GetOutbreakPolicy(soap, &soap_tmp_klpol_GetOutbreakPolicy);
	soap_begin_count(soap);
	if (soap->mode & SOAP_IO_LENGTH)
	{	soap_envelope_begin_out(soap);
		soap_putheader(soap);
		soap_body_begin_out(soap);
		soap_put_klpol_GetOutbreakPolicy(soap, &soap_tmp_klpol_GetOutbreakPolicy, "klpol-GetOutbreakPolicy", "");
		soap_body_end_out(soap);
		soap_envelope_end_out(soap);
	}
	if (soap_connect(soap, URL, action)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put_klpol_GetOutbreakPolicy(soap, &soap_tmp_klpol_GetOutbreakPolicy, "klpol-GetOutbreakPolicy", "")
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap_closesock(soap);
	soap_default_klpol_GetOutbreakPolicyResponse(soap, &r);
	if (soap_begin_recv(soap)
	 || soap_envelope_begin_in(soap)
	 || soap_recv_header(soap)
	 || soap_body_begin_in(soap))
		return soap_closesock(soap);
	soap_get_klpol_GetOutbreakPolicyResponse(soap, &r, "klpol-GetOutbreakPolicyResponse", "");
	if (soap->error)
	{	if (soap->error == SOAP_TAG_MISMATCH && soap->level == 2)
			return soap_recv_fault(soap);
		return soap_closesock(soap);
	}
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
#ifndef WITH_LEANER
	 || soap_resolve_attachments(soap)
#endif
	 || soap_end_recv(soap))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

SOAP_FMAC5 int SOAP_FMAC6 soap_call_klpol_SetOutbreakPolicy2(struct soap *soap, const char *URL, const char *action, param__params data, struct klpol_SetOutbreakPolicy2Response &r)
{
	struct klpol_SetOutbreakPolicy2 soap_tmp_klpol_SetOutbreakPolicy2;
	soap->encodingStyle = NULL;
	soap_tmp_klpol_SetOutbreakPolicy2.data=data;
	soap_begin(soap);
	soap_serializeheader(soap);
	soap_serialize_klpol_SetOutbreakPolicy2(soap, &soap_tmp_klpol_SetOutbreakPolicy2);
	soap_begin_count(soap);
	if (soap->mode & SOAP_IO_LENGTH)
	{	soap_envelope_begin_out(soap);
		soap_putheader(soap);
		soap_body_begin_out(soap);
		soap_put_klpol_SetOutbreakPolicy2(soap, &soap_tmp_klpol_SetOutbreakPolicy2, "klpol-SetOutbreakPolicy2", "");
		soap_body_end_out(soap);
		soap_envelope_end_out(soap);
	}
	if (soap_connect(soap, URL, action)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put_klpol_SetOutbreakPolicy2(soap, &soap_tmp_klpol_SetOutbreakPolicy2, "klpol-SetOutbreakPolicy2", "")
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap_closesock(soap);
	soap_default_klpol_SetOutbreakPolicy2Response(soap, &r);
	if (soap_begin_recv(soap)
	 || soap_envelope_begin_in(soap)
	 || soap_recv_header(soap)
	 || soap_body_begin_in(soap))
		return soap_closesock(soap);
	soap_get_klpol_SetOutbreakPolicy2Response(soap, &r, "klpol-SetOutbreakPolicy2Response", "");
	if (soap->error)
	{	if (soap->error == SOAP_TAG_MISMATCH && soap->level == 2)
			return soap_recv_fault(soap);
		return soap_closesock(soap);
	}
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
#ifndef WITH_LEANER
	 || soap_resolve_attachments(soap)
#endif
	 || soap_end_recv(soap))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

SOAP_FMAC5 int SOAP_FMAC6 soap_call_klpol_GetOutbreakPolicy2(struct soap *soap, const char *URL, const char *action, struct klpol_GetOutbreakPolicy2Response &r)
{
	struct klpol_GetOutbreakPolicy2 soap_tmp_klpol_GetOutbreakPolicy2;
	soap->encodingStyle = NULL;
	soap_begin(soap);
	soap_serializeheader(soap);
	soap_serialize_klpol_GetOutbreakPolicy2(soap, &soap_tmp_klpol_GetOutbreakPolicy2);
	soap_begin_count(soap);
	if (soap->mode & SOAP_IO_LENGTH)
	{	soap_envelope_begin_out(soap);
		soap_putheader(soap);
		soap_body_begin_out(soap);
		soap_put_klpol_GetOutbreakPolicy2(soap, &soap_tmp_klpol_GetOutbreakPolicy2, "klpol-GetOutbreakPolicy2", "");
		soap_body_end_out(soap);
		soap_envelope_end_out(soap);
	}
	if (soap_connect(soap, URL, action)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put_klpol_GetOutbreakPolicy2(soap, &soap_tmp_klpol_GetOutbreakPolicy2, "klpol-GetOutbreakPolicy2", "")
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap_closesock(soap);
	soap_default_klpol_GetOutbreakPolicy2Response(soap, &r);
	if (soap_begin_recv(soap)
	 || soap_envelope_begin_in(soap)
	 || soap_recv_header(soap)
	 || soap_body_begin_in(soap))
		return soap_closesock(soap);
	soap_get_klpol_GetOutbreakPolicy2Response(soap, &r, "klpol-GetOutbreakPolicy2Response", "");
	if (soap->error)
	{	if (soap->error == SOAP_TAG_MISMATCH && soap->level == 2)
			return soap_recv_fault(soap);
		return soap_closesock(soap);
	}
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
#ifndef WITH_LEANER
	 || soap_resolve_attachments(soap)
#endif
	 || soap_end_recv(soap))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

SOAP_FMAC5 int SOAP_FMAC6 soap_call_klprssp_SS_Read(struct soap *soap, const char *URL, const char *action, wchar_t *storage_descr, wchar_t *name, wchar_t *version, wchar_t *section, struct klprssp_SS_ReadResponse &r)
{
	struct klprssp_SS_Read soap_tmp_klprssp_SS_Read;
	soap->encodingStyle = NULL;
	soap_tmp_klprssp_SS_Read.storage_descr=storage_descr;
	soap_tmp_klprssp_SS_Read.name=name;
	soap_tmp_klprssp_SS_Read.version=version;
	soap_tmp_klprssp_SS_Read.section=section;
	soap_begin(soap);
	soap_serializeheader(soap);
	soap_serialize_klprssp_SS_Read(soap, &soap_tmp_klprssp_SS_Read);
	soap_begin_count(soap);
	if (soap->mode & SOAP_IO_LENGTH)
	{	soap_envelope_begin_out(soap);
		soap_putheader(soap);
		soap_body_begin_out(soap);
		soap_put_klprssp_SS_Read(soap, &soap_tmp_klprssp_SS_Read, "klprssp-SS-Read", "");
		soap_body_end_out(soap);
		soap_envelope_end_out(soap);
	}
	if (soap_connect(soap, URL, action)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put_klprssp_SS_Read(soap, &soap_tmp_klprssp_SS_Read, "klprssp-SS-Read", "")
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap_closesock(soap);
	soap_default_klprssp_SS_ReadResponse(soap, &r);
	if (soap_begin_recv(soap)
	 || soap_envelope_begin_in(soap)
	 || soap_recv_header(soap)
	 || soap_body_begin_in(soap))
		return soap_closesock(soap);
	soap_get_klprssp_SS_ReadResponse(soap, &r, "klprssp-SS-ReadResponse", "");
	if (soap->error)
	{	if (soap->error == SOAP_TAG_MISMATCH && soap->level == 2)
			return soap_recv_fault(soap);
		return soap_closesock(soap);
	}
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
#ifndef WITH_LEANER
	 || soap_resolve_attachments(soap)
#endif
	 || soap_end_recv(soap))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

SOAP_FMAC5 int SOAP_FMAC6 soap_call_klprssp_SS_Write(struct soap *soap, const char *URL, const char *action, wchar_t *storage_descr, wchar_t *name, wchar_t *version, wchar_t *section, param__params data, long operation_type, struct klprssp_SS_WriteResponse &r)
{
	struct klprssp_SS_Write soap_tmp_klprssp_SS_Write;
	soap->encodingStyle = NULL;
	soap_tmp_klprssp_SS_Write.storage_descr=storage_descr;
	soap_tmp_klprssp_SS_Write.name=name;
	soap_tmp_klprssp_SS_Write.version=version;
	soap_tmp_klprssp_SS_Write.section=section;
	soap_tmp_klprssp_SS_Write.data=data;
	soap_tmp_klprssp_SS_Write.operation_type=operation_type;
	soap_begin(soap);
	soap_serializeheader(soap);
	soap_serialize_klprssp_SS_Write(soap, &soap_tmp_klprssp_SS_Write);
	soap_begin_count(soap);
	if (soap->mode & SOAP_IO_LENGTH)
	{	soap_envelope_begin_out(soap);
		soap_putheader(soap);
		soap_body_begin_out(soap);
		soap_put_klprssp_SS_Write(soap, &soap_tmp_klprssp_SS_Write, "klprssp-SS-Write", "");
		soap_body_end_out(soap);
		soap_envelope_end_out(soap);
	}
	if (soap_connect(soap, URL, action)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put_klprssp_SS_Write(soap, &soap_tmp_klprssp_SS_Write, "klprssp-SS-Write", "")
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap_closesock(soap);
	soap_default_klprssp_SS_WriteResponse(soap, &r);
	if (soap_begin_recv(soap)
	 || soap_envelope_begin_in(soap)
	 || soap_recv_header(soap)
	 || soap_body_begin_in(soap))
		return soap_closesock(soap);
	soap_get_klprssp_SS_WriteResponse(soap, &r, "klprssp-SS-WriteResponse", "");
	if (soap->error)
	{	if (soap->error == SOAP_TAG_MISMATCH && soap->level == 2)
			return soap_recv_fault(soap);
		return soap_closesock(soap);
	}
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
#ifndef WITH_LEANER
	 || soap_resolve_attachments(soap)
#endif
	 || soap_end_recv(soap))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

SOAP_FMAC5 int SOAP_FMAC6 soap_call_klprssp_SS_SectionOperation(struct soap *soap, const char *URL, const char *action, wchar_t *storage_descr, wchar_t *name, wchar_t *version, wchar_t *section, long operation_type, struct klprssp_SS_SectionOperationResponse &r)
{
	struct klprssp_SS_SectionOperation soap_tmp_klprssp_SS_SectionOperation;
	soap->encodingStyle = NULL;
	soap_tmp_klprssp_SS_SectionOperation.storage_descr=storage_descr;
	soap_tmp_klprssp_SS_SectionOperation.name=name;
	soap_tmp_klprssp_SS_SectionOperation.version=version;
	soap_tmp_klprssp_SS_SectionOperation.section=section;
	soap_tmp_klprssp_SS_SectionOperation.operation_type=operation_type;
	soap_begin(soap);
	soap_serializeheader(soap);
	soap_serialize_klprssp_SS_SectionOperation(soap, &soap_tmp_klprssp_SS_SectionOperation);
	soap_begin_count(soap);
	if (soap->mode & SOAP_IO_LENGTH)
	{	soap_envelope_begin_out(soap);
		soap_putheader(soap);
		soap_body_begin_out(soap);
		soap_put_klprssp_SS_SectionOperation(soap, &soap_tmp_klprssp_SS_SectionOperation, "klprssp-SS-SectionOperation", "");
		soap_body_end_out(soap);
		soap_envelope_end_out(soap);
	}
	if (soap_connect(soap, URL, action)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put_klprssp_SS_SectionOperation(soap, &soap_tmp_klprssp_SS_SectionOperation, "klprssp-SS-SectionOperation", "")
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap_closesock(soap);
	soap_default_klprssp_SS_SectionOperationResponse(soap, &r);
	if (soap_begin_recv(soap)
	 || soap_envelope_begin_in(soap)
	 || soap_recv_header(soap)
	 || soap_body_begin_in(soap))
		return soap_closesock(soap);
	soap_get_klprssp_SS_SectionOperationResponse(soap, &r, "klprssp-SS-SectionOperationResponse", "");
	if (soap->error)
	{	if (soap->error == SOAP_TAG_MISMATCH && soap->level == 2)
			return soap_recv_fault(soap);
		return soap_closesock(soap);
	}
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
#ifndef WITH_LEANER
	 || soap_resolve_attachments(soap)
#endif
	 || soap_end_recv(soap))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

SOAP_FMAC5 int SOAP_FMAC6 soap_call_klprssp_SS_GetNames(struct soap *soap, const char *URL, const char *action, wchar_t *storage_descr, wchar_t *name, wchar_t *version, struct klprssp_SS_GetNamesResponse &r)
{
	struct klprssp_SS_GetNames soap_tmp_klprssp_SS_GetNames;
	soap->encodingStyle = NULL;
	soap_tmp_klprssp_SS_GetNames.storage_descr=storage_descr;
	soap_tmp_klprssp_SS_GetNames.name=name;
	soap_tmp_klprssp_SS_GetNames.version=version;
	soap_begin(soap);
	soap_serializeheader(soap);
	soap_serialize_klprssp_SS_GetNames(soap, &soap_tmp_klprssp_SS_GetNames);
	soap_begin_count(soap);
	if (soap->mode & SOAP_IO_LENGTH)
	{	soap_envelope_begin_out(soap);
		soap_putheader(soap);
		soap_body_begin_out(soap);
		soap_put_klprssp_SS_GetNames(soap, &soap_tmp_klprssp_SS_GetNames, "klprssp-SS-GetNames", "");
		soap_body_end_out(soap);
		soap_envelope_end_out(soap);
	}
	if (soap_connect(soap, URL, action)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put_klprssp_SS_GetNames(soap, &soap_tmp_klprssp_SS_GetNames, "klprssp-SS-GetNames", "")
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap_closesock(soap);
	soap_default_klprssp_SS_GetNamesResponse(soap, &r);
	if (soap_begin_recv(soap)
	 || soap_envelope_begin_in(soap)
	 || soap_recv_header(soap)
	 || soap_body_begin_in(soap))
		return soap_closesock(soap);
	soap_get_klprssp_SS_GetNamesResponse(soap, &r, "klprssp-SS-GetNamesResponse", "");
	if (soap->error)
	{	if (soap->error == SOAP_TAG_MISMATCH && soap->level == 2)
			return soap_recv_fault(soap);
		return soap_closesock(soap);
	}
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
#ifndef WITH_LEANER
	 || soap_resolve_attachments(soap)
#endif
	 || soap_end_recv(soap))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

SOAP_FMAC5 int SOAP_FMAC6 soap_call_klprssp_SS_ApplyChanges(struct soap *soap, const char *URL, const char *action, wchar_t *storage_descr, struct klprssp_SS_ApplyChangesResponse &r)
{
	struct klprssp_SS_ApplyChanges soap_tmp_klprssp_SS_ApplyChanges;
	soap->encodingStyle = NULL;
	soap_tmp_klprssp_SS_ApplyChanges.storage_descr=storage_descr;
	soap_begin(soap);
	soap_serializeheader(soap);
	soap_serialize_klprssp_SS_ApplyChanges(soap, &soap_tmp_klprssp_SS_ApplyChanges);
	soap_begin_count(soap);
	if (soap->mode & SOAP_IO_LENGTH)
	{	soap_envelope_begin_out(soap);
		soap_putheader(soap);
		soap_body_begin_out(soap);
		soap_put_klprssp_SS_ApplyChanges(soap, &soap_tmp_klprssp_SS_ApplyChanges, "klprssp-SS-ApplyChanges", "");
		soap_body_end_out(soap);
		soap_envelope_end_out(soap);
	}
	if (soap_connect(soap, URL, action)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put_klprssp_SS_ApplyChanges(soap, &soap_tmp_klprssp_SS_ApplyChanges, "klprssp-SS-ApplyChanges", "")
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap_closesock(soap);
	soap_default_klprssp_SS_ApplyChangesResponse(soap, &r);
	if (soap_begin_recv(soap)
	 || soap_envelope_begin_in(soap)
	 || soap_recv_header(soap)
	 || soap_body_begin_in(soap))
		return soap_closesock(soap);
	soap_get_klprssp_SS_ApplyChangesResponse(soap, &r, "klprssp-SS-ApplyChangesResponse", "");
	if (soap->error)
	{	if (soap->error == SOAP_TAG_MISMATCH && soap->level == 2)
			return soap_recv_fault(soap);
		return soap_closesock(soap);
	}
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
#ifndef WITH_LEANER
	 || soap_resolve_attachments(soap)
#endif
	 || soap_end_recv(soap))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

SOAP_FMAC5 int SOAP_FMAC6 soap_call_klprssp_ReleaseSS(struct soap *soap, const char *URL, const char *action, wchar_t *storage_descr, struct klprssp_ReleaseSSResponse &r)
{
	struct klprssp_ReleaseSS soap_tmp_klprssp_ReleaseSS;
	soap->encodingStyle = NULL;
	soap_tmp_klprssp_ReleaseSS.storage_descr=storage_descr;
	soap_begin(soap);
	soap_serializeheader(soap);
	soap_serialize_klprssp_ReleaseSS(soap, &soap_tmp_klprssp_ReleaseSS);
	soap_begin_count(soap);
	if (soap->mode & SOAP_IO_LENGTH)
	{	soap_envelope_begin_out(soap);
		soap_putheader(soap);
		soap_body_begin_out(soap);
		soap_put_klprssp_ReleaseSS(soap, &soap_tmp_klprssp_ReleaseSS, "klprssp-ReleaseSS", "");
		soap_body_end_out(soap);
		soap_envelope_end_out(soap);
	}
	if (soap_connect(soap, URL, action)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put_klprssp_ReleaseSS(soap, &soap_tmp_klprssp_ReleaseSS, "klprssp-ReleaseSS", "")
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap_closesock(soap);
	soap_default_klprssp_ReleaseSSResponse(soap, &r);
	if (soap_begin_recv(soap)
	 || soap_envelope_begin_in(soap)
	 || soap_recv_header(soap)
	 || soap_body_begin_in(soap))
		return soap_closesock(soap);
	soap_get_klprssp_ReleaseSSResponse(soap, &r, "klprssp-ReleaseSSResponse", "");
	if (soap->error)
	{	if (soap->error == SOAP_TAG_MISMATCH && soap->level == 2)
			return soap_recv_fault(soap);
		return soap_closesock(soap);
	}
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
#ifndef WITH_LEANER
	 || soap_resolve_attachments(soap)
#endif
	 || soap_end_recv(soap))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

SOAP_FMAC5 int SOAP_FMAC6 soap_call_adhst_GetChildComputers(struct soap *soap, const char *URL, const char *action, long idOU, klhst_wstrings fields, long lTimeout, struct adhst_GetChildComputersResponse &r)
{
	struct adhst_GetChildComputers soap_tmp_adhst_GetChildComputers;
	soap->encodingStyle = NULL;
	soap_tmp_adhst_GetChildComputers.idOU=idOU;
	soap_tmp_adhst_GetChildComputers.fields=fields;
	soap_tmp_adhst_GetChildComputers.lTimeout=lTimeout;
	soap_begin(soap);
	soap_serializeheader(soap);
	soap_serialize_adhst_GetChildComputers(soap, &soap_tmp_adhst_GetChildComputers);
	soap_begin_count(soap);
	if (soap->mode & SOAP_IO_LENGTH)
	{	soap_envelope_begin_out(soap);
		soap_putheader(soap);
		soap_body_begin_out(soap);
		soap_put_adhst_GetChildComputers(soap, &soap_tmp_adhst_GetChildComputers, "adhst-GetChildComputers", "");
		soap_body_end_out(soap);
		soap_envelope_end_out(soap);
	}
	if (soap_connect(soap, URL, action)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put_adhst_GetChildComputers(soap, &soap_tmp_adhst_GetChildComputers, "adhst-GetChildComputers", "")
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap_closesock(soap);
	soap_default_adhst_GetChildComputersResponse(soap, &r);
	if (soap_begin_recv(soap)
	 || soap_envelope_begin_in(soap)
	 || soap_recv_header(soap)
	 || soap_body_begin_in(soap))
		return soap_closesock(soap);
	soap_get_adhst_GetChildComputersResponse(soap, &r, "adhst-GetChildComputersResponse", "");
	if (soap->error)
	{	if (soap->error == SOAP_TAG_MISMATCH && soap->level == 2)
			return soap_recv_fault(soap);
		return soap_closesock(soap);
	}
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
#ifndef WITH_LEANER
	 || soap_resolve_attachments(soap)
#endif
	 || soap_end_recv(soap))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

SOAP_FMAC5 int SOAP_FMAC6 soap_call_adhst_GetChildOUs(struct soap *soap, const char *URL, const char *action, long idOU, klhst_wstrings fields, long lTimeout, struct adhst_GetChildOUsResponse &r)
{
	struct adhst_GetChildOUs soap_tmp_adhst_GetChildOUs;
	soap->encodingStyle = NULL;
	soap_tmp_adhst_GetChildOUs.idOU=idOU;
	soap_tmp_adhst_GetChildOUs.fields=fields;
	soap_tmp_adhst_GetChildOUs.lTimeout=lTimeout;
	soap_begin(soap);
	soap_serializeheader(soap);
	soap_serialize_adhst_GetChildOUs(soap, &soap_tmp_adhst_GetChildOUs);
	soap_begin_count(soap);
	if (soap->mode & SOAP_IO_LENGTH)
	{	soap_envelope_begin_out(soap);
		soap_putheader(soap);
		soap_body_begin_out(soap);
		soap_put_adhst_GetChildOUs(soap, &soap_tmp_adhst_GetChildOUs, "adhst-GetChildOUs", "");
		soap_body_end_out(soap);
		soap_envelope_end_out(soap);
	}
	if (soap_connect(soap, URL, action)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put_adhst_GetChildOUs(soap, &soap_tmp_adhst_GetChildOUs, "adhst-GetChildOUs", "")
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap_closesock(soap);
	soap_default_adhst_GetChildOUsResponse(soap, &r);
	if (soap_begin_recv(soap)
	 || soap_envelope_begin_in(soap)
	 || soap_recv_header(soap)
	 || soap_body_begin_in(soap))
		return soap_closesock(soap);
	soap_get_adhst_GetChildOUsResponse(soap, &r, "adhst-GetChildOUsResponse", "");
	if (soap->error)
	{	if (soap->error == SOAP_TAG_MISMATCH && soap->level == 2)
			return soap_recv_fault(soap);
		return soap_closesock(soap);
	}
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
#ifndef WITH_LEANER
	 || soap_resolve_attachments(soap)
#endif
	 || soap_end_recv(soap))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

SOAP_FMAC5 int SOAP_FMAC6 soap_call_adhst_GetOU(struct soap *soap, const char *URL, const char *action, long idOU, klhst_wstrings fields, struct adhst_GetOUResponse &r)
{
	struct adhst_GetOU soap_tmp_adhst_GetOU;
	soap->encodingStyle = NULL;
	soap_tmp_adhst_GetOU.idOU=idOU;
	soap_tmp_adhst_GetOU.fields=fields;
	soap_begin(soap);
	soap_serializeheader(soap);
	soap_serialize_adhst_GetOU(soap, &soap_tmp_adhst_GetOU);
	soap_begin_count(soap);
	if (soap->mode & SOAP_IO_LENGTH)
	{	soap_envelope_begin_out(soap);
		soap_putheader(soap);
		soap_body_begin_out(soap);
		soap_put_adhst_GetOU(soap, &soap_tmp_adhst_GetOU, "adhst-GetOU", "");
		soap_body_end_out(soap);
		soap_envelope_end_out(soap);
	}
	if (soap_connect(soap, URL, action)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put_adhst_GetOU(soap, &soap_tmp_adhst_GetOU, "adhst-GetOU", "")
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap_closesock(soap);
	soap_default_adhst_GetOUResponse(soap, &r);
	if (soap_begin_recv(soap)
	 || soap_envelope_begin_in(soap)
	 || soap_recv_header(soap)
	 || soap_body_begin_in(soap))
		return soap_closesock(soap);
	soap_get_adhst_GetOUResponse(soap, &r, "adhst-GetOUResponse", "");
	if (soap->error)
	{	if (soap->error == SOAP_TAG_MISMATCH && soap->level == 2)
			return soap_recv_fault(soap);
		return soap_closesock(soap);
	}
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
#ifndef WITH_LEANER
	 || soap_resolve_attachments(soap)
#endif
	 || soap_end_recv(soap))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

SOAP_FMAC5 int SOAP_FMAC6 soap_call_adhst_UpdateOU(struct soap *soap, const char *URL, const char *action, long idOU, param__params parData, struct adhst_UpdateOUResponse &r)
{
	struct adhst_UpdateOU soap_tmp_adhst_UpdateOU;
	soap->encodingStyle = NULL;
	soap_tmp_adhst_UpdateOU.idOU=idOU;
	soap_tmp_adhst_UpdateOU.parData=parData;
	soap_begin(soap);
	soap_serializeheader(soap);
	soap_serialize_adhst_UpdateOU(soap, &soap_tmp_adhst_UpdateOU);
	soap_begin_count(soap);
	if (soap->mode & SOAP_IO_LENGTH)
	{	soap_envelope_begin_out(soap);
		soap_putheader(soap);
		soap_body_begin_out(soap);
		soap_put_adhst_UpdateOU(soap, &soap_tmp_adhst_UpdateOU, "adhst-UpdateOU", "");
		soap_body_end_out(soap);
		soap_envelope_end_out(soap);
	}
	if (soap_connect(soap, URL, action)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put_adhst_UpdateOU(soap, &soap_tmp_adhst_UpdateOU, "adhst-UpdateOU", "")
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap_closesock(soap);
	soap_default_adhst_UpdateOUResponse(soap, &r);
	if (soap_begin_recv(soap)
	 || soap_envelope_begin_in(soap)
	 || soap_recv_header(soap)
	 || soap_body_begin_in(soap))
		return soap_closesock(soap);
	soap_get_adhst_UpdateOUResponse(soap, &r, "adhst-UpdateOUResponse", "");
	if (soap->error)
	{	if (soap->error == SOAP_TAG_MISMATCH && soap->level == 2)
			return soap_recv_fault(soap);
		return soap_closesock(soap);
	}
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
#ifndef WITH_LEANER
	 || soap_resolve_attachments(soap)
#endif
	 || soap_end_recv(soap))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

SOAP_FMAC5 int SOAP_FMAC6 soap_call_klgsyn_GetNextItems(struct soap *soap, const char *URL, const char *action, wchar_t *wstrIterator, long nCount, struct klgsyn_GetNextItemsResponse &r)
{
	struct klgsyn_GetNextItems soap_tmp_klgsyn_GetNextItems;
	soap->encodingStyle = NULL;
	soap_tmp_klgsyn_GetNextItems.wstrIterator=wstrIterator;
	soap_tmp_klgsyn_GetNextItems.nCount=nCount;
	soap_begin(soap);
	soap_serializeheader(soap);
	soap_serialize_klgsyn_GetNextItems(soap, &soap_tmp_klgsyn_GetNextItems);
	soap_begin_count(soap);
	if (soap->mode & SOAP_IO_LENGTH)
	{	soap_envelope_begin_out(soap);
		soap_putheader(soap);
		soap_body_begin_out(soap);
		soap_put_klgsyn_GetNextItems(soap, &soap_tmp_klgsyn_GetNextItems, "klgsyn-GetNextItems", "");
		soap_body_end_out(soap);
		soap_envelope_end_out(soap);
	}
	if (soap_connect(soap, URL, action)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put_klgsyn_GetNextItems(soap, &soap_tmp_klgsyn_GetNextItems, "klgsyn-GetNextItems", "")
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap_closesock(soap);
	soap_default_klgsyn_GetNextItemsResponse(soap, &r);
	if (soap_begin_recv(soap)
	 || soap_envelope_begin_in(soap)
	 || soap_recv_header(soap)
	 || soap_body_begin_in(soap))
		return soap_closesock(soap);
	soap_get_klgsyn_GetNextItemsResponse(soap, &r, "klgsyn-GetNextItemsResponse", "");
	if (soap->error)
	{	if (soap->error == SOAP_TAG_MISMATCH && soap->level == 2)
			return soap_recv_fault(soap);
		return soap_closesock(soap);
	}
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
#ifndef WITH_LEANER
	 || soap_resolve_attachments(soap)
#endif
	 || soap_end_recv(soap))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

SOAP_FMAC5 int SOAP_FMAC6 soap_call_klgsyn_ReleaseIterator(struct soap *soap, const char *URL, const char *action, wchar_t *wstrIterator, struct klgsyn_ReleaseIteratorResponse &r)
{
	struct klgsyn_ReleaseIterator soap_tmp_klgsyn_ReleaseIterator;
	soap->encodingStyle = NULL;
	soap_tmp_klgsyn_ReleaseIterator.wstrIterator=wstrIterator;
	soap_begin(soap);
	soap_serializeheader(soap);
	soap_serialize_klgsyn_ReleaseIterator(soap, &soap_tmp_klgsyn_ReleaseIterator);
	soap_begin_count(soap);
	if (soap->mode & SOAP_IO_LENGTH)
	{	soap_envelope_begin_out(soap);
		soap_putheader(soap);
		soap_body_begin_out(soap);
		soap_put_klgsyn_ReleaseIterator(soap, &soap_tmp_klgsyn_ReleaseIterator, "klgsyn-ReleaseIterator", "");
		soap_body_end_out(soap);
		soap_envelope_end_out(soap);
	}
	if (soap_connect(soap, URL, action)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put_klgsyn_ReleaseIterator(soap, &soap_tmp_klgsyn_ReleaseIterator, "klgsyn-ReleaseIterator", "")
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap_closesock(soap);
	soap_default_klgsyn_ReleaseIteratorResponse(soap, &r);
	if (soap_begin_recv(soap)
	 || soap_envelope_begin_in(soap)
	 || soap_recv_header(soap)
	 || soap_body_begin_in(soap))
		return soap_closesock(soap);
	soap_get_klgsyn_ReleaseIteratorResponse(soap, &r, "klgsyn-ReleaseIteratorResponse", "");
	if (soap->error)
	{	if (soap->error == SOAP_TAG_MISMATCH && soap->level == 2)
			return soap_recv_fault(soap);
		return soap_closesock(soap);
	}
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
#ifndef WITH_LEANER
	 || soap_resolve_attachments(soap)
#endif
	 || soap_end_recv(soap))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

SOAP_FMAC5 int SOAP_FMAC6 soap_call_klgsyn_AddSyncObjG(struct soap *soap, const char *URL, const char *action, wchar_t *szwName, wchar_t *wstrSyncObjPath, long nDirection, long lGroup, long lElapse, bool bCutoffChildren, struct klgsyn_AddSyncObjGResponse &r)
{
	struct klgsyn_AddSyncObjG soap_tmp_klgsyn_AddSyncObjG;
	soap->encodingStyle = NULL;
	soap_tmp_klgsyn_AddSyncObjG.szwName=szwName;
	soap_tmp_klgsyn_AddSyncObjG.wstrSyncObjPath=wstrSyncObjPath;
	soap_tmp_klgsyn_AddSyncObjG.nDirection=nDirection;
	soap_tmp_klgsyn_AddSyncObjG.lGroup=lGroup;
	soap_tmp_klgsyn_AddSyncObjG.lElapse=lElapse;
	soap_tmp_klgsyn_AddSyncObjG.bCutoffChildren=bCutoffChildren;
	soap_begin(soap);
	soap_serializeheader(soap);
	soap_serialize_klgsyn_AddSyncObjG(soap, &soap_tmp_klgsyn_AddSyncObjG);
	soap_begin_count(soap);
	if (soap->mode & SOAP_IO_LENGTH)
	{	soap_envelope_begin_out(soap);
		soap_putheader(soap);
		soap_body_begin_out(soap);
		soap_put_klgsyn_AddSyncObjG(soap, &soap_tmp_klgsyn_AddSyncObjG, "klgsyn-AddSyncObjG", "");
		soap_body_end_out(soap);
		soap_envelope_end_out(soap);
	}
	if (soap_connect(soap, URL, action)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put_klgsyn_AddSyncObjG(soap, &soap_tmp_klgsyn_AddSyncObjG, "klgsyn-AddSyncObjG", "")
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap_closesock(soap);
	soap_default_klgsyn_AddSyncObjGResponse(soap, &r);
	if (soap_begin_recv(soap)
	 || soap_envelope_begin_in(soap)
	 || soap_recv_header(soap)
	 || soap_body_begin_in(soap))
		return soap_closesock(soap);
	soap_get_klgsyn_AddSyncObjGResponse(soap, &r, "klgsyn-AddSyncObjGResponse", "");
	if (soap->error)
	{	if (soap->error == SOAP_TAG_MISMATCH && soap->level == 2)
			return soap_recv_fault(soap);
		return soap_closesock(soap);
	}
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
#ifndef WITH_LEANER
	 || soap_resolve_attachments(soap)
#endif
	 || soap_end_recv(soap))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

SOAP_FMAC5 int SOAP_FMAC6 soap_call_klgsyn_AddSyncObjH(struct soap *soap, const char *URL, const char *action, wchar_t *szwName, wchar_t *wstrSyncObjPath, long nDirection, klgsyn_hostids arrHosts, long lElapse, struct klgsyn_AddSyncObjHResponse &r)
{
	struct klgsyn_AddSyncObjH soap_tmp_klgsyn_AddSyncObjH;
	soap->encodingStyle = NULL;
	soap_tmp_klgsyn_AddSyncObjH.szwName=szwName;
	soap_tmp_klgsyn_AddSyncObjH.wstrSyncObjPath=wstrSyncObjPath;
	soap_tmp_klgsyn_AddSyncObjH.nDirection=nDirection;
	soap_tmp_klgsyn_AddSyncObjH.arrHosts=arrHosts;
	soap_tmp_klgsyn_AddSyncObjH.lElapse=lElapse;
	soap_begin(soap);
	soap_serializeheader(soap);
	soap_serialize_klgsyn_AddSyncObjH(soap, &soap_tmp_klgsyn_AddSyncObjH);
	soap_begin_count(soap);
	if (soap->mode & SOAP_IO_LENGTH)
	{	soap_envelope_begin_out(soap);
		soap_putheader(soap);
		soap_body_begin_out(soap);
		soap_put_klgsyn_AddSyncObjH(soap, &soap_tmp_klgsyn_AddSyncObjH, "klgsyn-AddSyncObjH", "");
		soap_body_end_out(soap);
		soap_envelope_end_out(soap);
	}
	if (soap_connect(soap, URL, action)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put_klgsyn_AddSyncObjH(soap, &soap_tmp_klgsyn_AddSyncObjH, "klgsyn-AddSyncObjH", "")
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap_closesock(soap);
	soap_default_klgsyn_AddSyncObjHResponse(soap, &r);
	if (soap_begin_recv(soap)
	 || soap_envelope_begin_in(soap)
	 || soap_recv_header(soap)
	 || soap_body_begin_in(soap))
		return soap_closesock(soap);
	soap_get_klgsyn_AddSyncObjHResponse(soap, &r, "klgsyn-AddSyncObjHResponse", "");
	if (soap->error)
	{	if (soap->error == SOAP_TAG_MISMATCH && soap->level == 2)
			return soap_recv_fault(soap);
		return soap_closesock(soap);
	}
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
#ifndef WITH_LEANER
	 || soap_resolve_attachments(soap)
#endif
	 || soap_end_recv(soap))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

SOAP_FMAC5 int SOAP_FMAC6 soap_call_klgsyn_GetSyncInfo(struct soap *soap, const char *URL, const char *action, long lSync, klgsyn_wstrings arrFields, struct klgsyn_GetSyncInfoResponse &r)
{
	struct klgsyn_GetSyncInfo soap_tmp_klgsyn_GetSyncInfo;
	soap->encodingStyle = NULL;
	soap_tmp_klgsyn_GetSyncInfo.lSync=lSync;
	soap_tmp_klgsyn_GetSyncInfo.arrFields=arrFields;
	soap_begin(soap);
	soap_serializeheader(soap);
	soap_serialize_klgsyn_GetSyncInfo(soap, &soap_tmp_klgsyn_GetSyncInfo);
	soap_begin_count(soap);
	if (soap->mode & SOAP_IO_LENGTH)
	{	soap_envelope_begin_out(soap);
		soap_putheader(soap);
		soap_body_begin_out(soap);
		soap_put_klgsyn_GetSyncInfo(soap, &soap_tmp_klgsyn_GetSyncInfo, "klgsyn-GetSyncInfo", "");
		soap_body_end_out(soap);
		soap_envelope_end_out(soap);
	}
	if (soap_connect(soap, URL, action)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put_klgsyn_GetSyncInfo(soap, &soap_tmp_klgsyn_GetSyncInfo, "klgsyn-GetSyncInfo", "")
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap_closesock(soap);
	soap_default_klgsyn_GetSyncInfoResponse(soap, &r);
	if (soap_begin_recv(soap)
	 || soap_envelope_begin_in(soap)
	 || soap_recv_header(soap)
	 || soap_body_begin_in(soap))
		return soap_closesock(soap);
	soap_get_klgsyn_GetSyncInfoResponse(soap, &r, "klgsyn-GetSyncInfoResponse", "");
	if (soap->error)
	{	if (soap->error == SOAP_TAG_MISMATCH && soap->level == 2)
			return soap_recv_fault(soap);
		return soap_closesock(soap);
	}
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
#ifndef WITH_LEANER
	 || soap_resolve_attachments(soap)
#endif
	 || soap_end_recv(soap))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

SOAP_FMAC5 int SOAP_FMAC6 soap_call_klgsyn_RemoveSyncObj(struct soap *soap, const char *URL, const char *action, long lSync, struct klgsyn_RemoveSyncObjResponse &r)
{
	struct klgsyn_RemoveSyncObj soap_tmp_klgsyn_RemoveSyncObj;
	soap->encodingStyle = NULL;
	soap_tmp_klgsyn_RemoveSyncObj.lSync=lSync;
	soap_begin(soap);
	soap_serializeheader(soap);
	soap_serialize_klgsyn_RemoveSyncObj(soap, &soap_tmp_klgsyn_RemoveSyncObj);
	soap_begin_count(soap);
	if (soap->mode & SOAP_IO_LENGTH)
	{	soap_envelope_begin_out(soap);
		soap_putheader(soap);
		soap_body_begin_out(soap);
		soap_put_klgsyn_RemoveSyncObj(soap, &soap_tmp_klgsyn_RemoveSyncObj, "klgsyn-RemoveSyncObj", "");
		soap_body_end_out(soap);
		soap_envelope_end_out(soap);
	}
	if (soap_connect(soap, URL, action)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put_klgsyn_RemoveSyncObj(soap, &soap_tmp_klgsyn_RemoveSyncObj, "klgsyn-RemoveSyncObj", "")
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap_closesock(soap);
	soap_default_klgsyn_RemoveSyncObjResponse(soap, &r);
	if (soap_begin_recv(soap)
	 || soap_envelope_begin_in(soap)
	 || soap_recv_header(soap)
	 || soap_body_begin_in(soap))
		return soap_closesock(soap);
	soap_get_klgsyn_RemoveSyncObjResponse(soap, &r, "klgsyn-RemoveSyncObjResponse", "");
	if (soap->error)
	{	if (soap->error == SOAP_TAG_MISMATCH && soap->level == 2)
			return soap_recv_fault(soap);
		return soap_closesock(soap);
	}
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
#ifndef WITH_LEANER
	 || soap_resolve_attachments(soap)
#endif
	 || soap_end_recv(soap))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

SOAP_FMAC5 int SOAP_FMAC6 soap_call_klgsyn_GetSyncHostsInfo(struct soap *soap, const char *URL, const char *action, long lSync, klgsyn_wstrings arrFields, long lTimeout, struct klgsyn_GetSyncHostsInfoResponse &r)
{
	struct klgsyn_GetSyncHostsInfo soap_tmp_klgsyn_GetSyncHostsInfo;
	soap->encodingStyle = NULL;
	soap_tmp_klgsyn_GetSyncHostsInfo.lSync=lSync;
	soap_tmp_klgsyn_GetSyncHostsInfo.arrFields=arrFields;
	soap_tmp_klgsyn_GetSyncHostsInfo.lTimeout=lTimeout;
	soap_begin(soap);
	soap_serializeheader(soap);
	soap_serialize_klgsyn_GetSyncHostsInfo(soap, &soap_tmp_klgsyn_GetSyncHostsInfo);
	soap_begin_count(soap);
	if (soap->mode & SOAP_IO_LENGTH)
	{	soap_envelope_begin_out(soap);
		soap_putheader(soap);
		soap_body_begin_out(soap);
		soap_put_klgsyn_GetSyncHostsInfo(soap, &soap_tmp_klgsyn_GetSyncHostsInfo, "klgsyn-GetSyncHostsInfo", "");
		soap_body_end_out(soap);
		soap_envelope_end_out(soap);
	}
	if (soap_connect(soap, URL, action)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put_klgsyn_GetSyncHostsInfo(soap, &soap_tmp_klgsyn_GetSyncHostsInfo, "klgsyn-GetSyncHostsInfo", "")
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap_closesock(soap);
	soap_default_klgsyn_GetSyncHostsInfoResponse(soap, &r);
	if (soap_begin_recv(soap)
	 || soap_envelope_begin_in(soap)
	 || soap_recv_header(soap)
	 || soap_body_begin_in(soap))
		return soap_closesock(soap);
	soap_get_klgsyn_GetSyncHostsInfoResponse(soap, &r, "klgsyn-GetSyncHostsInfoResponse", "");
	if (soap->error)
	{	if (soap->error == SOAP_TAG_MISMATCH && soap->level == 2)
			return soap_recv_fault(soap);
		return soap_closesock(soap);
	}
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
#ifndef WITH_LEANER
	 || soap_resolve_attachments(soap)
#endif
	 || soap_end_recv(soap))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

SOAP_FMAC5 int SOAP_FMAC6 soap_call_klgsyn_FindHosts(struct soap *soap, const char *URL, const char *action, long lSync, wchar_t *wstrFilter, klgsyn_wstrings arrFields, long lTimeout, struct klgsyn_FindHostsResponse &r)
{
	struct klgsyn_FindHosts soap_tmp_klgsyn_FindHosts;
	soap->encodingStyle = NULL;
	soap_tmp_klgsyn_FindHosts.lSync=lSync;
	soap_tmp_klgsyn_FindHosts.wstrFilter=wstrFilter;
	soap_tmp_klgsyn_FindHosts.arrFields=arrFields;
	soap_tmp_klgsyn_FindHosts.lTimeout=lTimeout;
	soap_begin(soap);
	soap_serializeheader(soap);
	soap_serialize_klgsyn_FindHosts(soap, &soap_tmp_klgsyn_FindHosts);
	soap_begin_count(soap);
	if (soap->mode & SOAP_IO_LENGTH)
	{	soap_envelope_begin_out(soap);
		soap_putheader(soap);
		soap_body_begin_out(soap);
		soap_put_klgsyn_FindHosts(soap, &soap_tmp_klgsyn_FindHosts, "klgsyn-FindHosts", "");
		soap_body_end_out(soap);
		soap_envelope_end_out(soap);
	}
	if (soap_connect(soap, URL, action)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put_klgsyn_FindHosts(soap, &soap_tmp_klgsyn_FindHosts, "klgsyn-FindHosts", "")
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap_closesock(soap);
	soap_default_klgsyn_FindHostsResponse(soap, &r);
	if (soap_begin_recv(soap)
	 || soap_envelope_begin_in(soap)
	 || soap_recv_header(soap)
	 || soap_body_begin_in(soap))
		return soap_closesock(soap);
	soap_get_klgsyn_FindHostsResponse(soap, &r, "klgsyn-FindHostsResponse", "");
	if (soap->error)
	{	if (soap->error == SOAP_TAG_MISMATCH && soap->level == 2)
			return soap_recv_fault(soap);
		return soap_closesock(soap);
	}
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
#ifndef WITH_LEANER
	 || soap_resolve_attachments(soap)
#endif
	 || soap_end_recv(soap))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

SOAP_FMAC5 int SOAP_FMAC6 soap_call_klgsyn_GetSyncHostsInfo2(struct soap *soap, const char *URL, const char *action, long lSync, klgsyn_wstrings arrFields, klgsyn_field_order_array arrFieldsToOrder, long lTimeout, struct klgsyn_GetSyncHostsInfo2Response &r)
{
	struct klgsyn_GetSyncHostsInfo2 soap_tmp_klgsyn_GetSyncHostsInfo2;
	soap->encodingStyle = NULL;
	soap_tmp_klgsyn_GetSyncHostsInfo2.lSync=lSync;
	soap_tmp_klgsyn_GetSyncHostsInfo2.arrFields=arrFields;
	soap_tmp_klgsyn_GetSyncHostsInfo2.arrFieldsToOrder=arrFieldsToOrder;
	soap_tmp_klgsyn_GetSyncHostsInfo2.lTimeout=lTimeout;
	soap_begin(soap);
	soap_serializeheader(soap);
	soap_serialize_klgsyn_GetSyncHostsInfo2(soap, &soap_tmp_klgsyn_GetSyncHostsInfo2);
	soap_begin_count(soap);
	if (soap->mode & SOAP_IO_LENGTH)
	{	soap_envelope_begin_out(soap);
		soap_putheader(soap);
		soap_body_begin_out(soap);
		soap_put_klgsyn_GetSyncHostsInfo2(soap, &soap_tmp_klgsyn_GetSyncHostsInfo2, "klgsyn-GetSyncHostsInfo2", "");
		soap_body_end_out(soap);
		soap_envelope_end_out(soap);
	}
	if (soap_connect(soap, URL, action)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put_klgsyn_GetSyncHostsInfo2(soap, &soap_tmp_klgsyn_GetSyncHostsInfo2, "klgsyn-GetSyncHostsInfo2", "")
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap_closesock(soap);
	soap_default_klgsyn_GetSyncHostsInfo2Response(soap, &r);
	if (soap_begin_recv(soap)
	 || soap_envelope_begin_in(soap)
	 || soap_recv_header(soap)
	 || soap_body_begin_in(soap))
		return soap_closesock(soap);
	soap_get_klgsyn_GetSyncHostsInfo2Response(soap, &r, "klgsyn-GetSyncHostsInfo2Response", "");
	if (soap->error)
	{	if (soap->error == SOAP_TAG_MISMATCH && soap->level == 2)
			return soap_recv_fault(soap);
		return soap_closesock(soap);
	}
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
#ifndef WITH_LEANER
	 || soap_resolve_attachments(soap)
#endif
	 || soap_end_recv(soap))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

SOAP_FMAC5 int SOAP_FMAC6 soap_call_klgsyn_FindHosts2(struct soap *soap, const char *URL, const char *action, long lSync, wchar_t *wstrFilter, klgsyn_wstrings arrFields, klgsyn_field_order_array arrFieldsToOrder, long lTimeout, struct klgsyn_FindHosts2Response &r)
{
	struct klgsyn_FindHosts2 soap_tmp_klgsyn_FindHosts2;
	soap->encodingStyle = NULL;
	soap_tmp_klgsyn_FindHosts2.lSync=lSync;
	soap_tmp_klgsyn_FindHosts2.wstrFilter=wstrFilter;
	soap_tmp_klgsyn_FindHosts2.arrFields=arrFields;
	soap_tmp_klgsyn_FindHosts2.arrFieldsToOrder=arrFieldsToOrder;
	soap_tmp_klgsyn_FindHosts2.lTimeout=lTimeout;
	soap_begin(soap);
	soap_serializeheader(soap);
	soap_serialize_klgsyn_FindHosts2(soap, &soap_tmp_klgsyn_FindHosts2);
	soap_begin_count(soap);
	if (soap->mode & SOAP_IO_LENGTH)
	{	soap_envelope_begin_out(soap);
		soap_putheader(soap);
		soap_body_begin_out(soap);
		soap_put_klgsyn_FindHosts2(soap, &soap_tmp_klgsyn_FindHosts2, "klgsyn-FindHosts2", "");
		soap_body_end_out(soap);
		soap_envelope_end_out(soap);
	}
	if (soap_connect(soap, URL, action)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put_klgsyn_FindHosts2(soap, &soap_tmp_klgsyn_FindHosts2, "klgsyn-FindHosts2", "")
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap_closesock(soap);
	soap_default_klgsyn_FindHosts2Response(soap, &r);
	if (soap_begin_recv(soap)
	 || soap_envelope_begin_in(soap)
	 || soap_recv_header(soap)
	 || soap_body_begin_in(soap))
		return soap_closesock(soap);
	soap_get_klgsyn_FindHosts2Response(soap, &r, "klgsyn-FindHosts2Response", "");
	if (soap->error)
	{	if (soap->error == SOAP_TAG_MISMATCH && soap->level == 2)
			return soap_recv_fault(soap);
		return soap_closesock(soap);
	}
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
#ifndef WITH_LEANER
	 || soap_resolve_attachments(soap)
#endif
	 || soap_end_recv(soap))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

SOAP_FMAC5 int SOAP_FMAC6 soap_call_klgsyn_GetItemsCount(struct soap *soap, const char *URL, const char *action, wchar_t *wstrAccessor, struct klgsyn_GetItemsCountResponse &r)
{
	struct klgsyn_GetItemsCount soap_tmp_klgsyn_GetItemsCount;
	soap->encodingStyle = NULL;
	soap_tmp_klgsyn_GetItemsCount.wstrAccessor=wstrAccessor;
	soap_begin(soap);
	soap_serializeheader(soap);
	soap_serialize_klgsyn_GetItemsCount(soap, &soap_tmp_klgsyn_GetItemsCount);
	soap_begin_count(soap);
	if (soap->mode & SOAP_IO_LENGTH)
	{	soap_envelope_begin_out(soap);
		soap_putheader(soap);
		soap_body_begin_out(soap);
		soap_put_klgsyn_GetItemsCount(soap, &soap_tmp_klgsyn_GetItemsCount, "klgsyn-GetItemsCount", "");
		soap_body_end_out(soap);
		soap_envelope_end_out(soap);
	}
	if (soap_connect(soap, URL, action)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put_klgsyn_GetItemsCount(soap, &soap_tmp_klgsyn_GetItemsCount, "klgsyn-GetItemsCount", "")
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap_closesock(soap);
	soap_default_klgsyn_GetItemsCountResponse(soap, &r);
	if (soap_begin_recv(soap)
	 || soap_envelope_begin_in(soap)
	 || soap_recv_header(soap)
	 || soap_body_begin_in(soap))
		return soap_closesock(soap);
	soap_get_klgsyn_GetItemsCountResponse(soap, &r, "klgsyn-GetItemsCountResponse", "");
	if (soap->error)
	{	if (soap->error == SOAP_TAG_MISMATCH && soap->level == 2)
			return soap_recv_fault(soap);
		return soap_closesock(soap);
	}
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
#ifndef WITH_LEANER
	 || soap_resolve_attachments(soap)
#endif
	 || soap_end_recv(soap))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

SOAP_FMAC5 int SOAP_FMAC6 soap_call_klgsyn_GetItemsChunk(struct soap *soap, const char *URL, const char *action, wchar_t *wstrAccessor, long nStart, long nCount, struct klgsyn_GetItemsChunkResponse &r)
{
	struct klgsyn_GetItemsChunk soap_tmp_klgsyn_GetItemsChunk;
	soap->encodingStyle = NULL;
	soap_tmp_klgsyn_GetItemsChunk.wstrAccessor=wstrAccessor;
	soap_tmp_klgsyn_GetItemsChunk.nStart=nStart;
	soap_tmp_klgsyn_GetItemsChunk.nCount=nCount;
	soap_begin(soap);
	soap_serializeheader(soap);
	soap_serialize_klgsyn_GetItemsChunk(soap, &soap_tmp_klgsyn_GetItemsChunk);
	soap_begin_count(soap);
	if (soap->mode & SOAP_IO_LENGTH)
	{	soap_envelope_begin_out(soap);
		soap_putheader(soap);
		soap_body_begin_out(soap);
		soap_put_klgsyn_GetItemsChunk(soap, &soap_tmp_klgsyn_GetItemsChunk, "klgsyn-GetItemsChunk", "");
		soap_body_end_out(soap);
		soap_envelope_end_out(soap);
	}
	if (soap_connect(soap, URL, action)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put_klgsyn_GetItemsChunk(soap, &soap_tmp_klgsyn_GetItemsChunk, "klgsyn-GetItemsChunk", "")
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap_closesock(soap);
	soap_default_klgsyn_GetItemsChunkResponse(soap, &r);
	if (soap_begin_recv(soap)
	 || soap_envelope_begin_in(soap)
	 || soap_recv_header(soap)
	 || soap_body_begin_in(soap))
		return soap_closesock(soap);
	soap_get_klgsyn_GetItemsChunkResponse(soap, &r, "klgsyn-GetItemsChunkResponse", "");
	if (soap->error)
	{	if (soap->error == SOAP_TAG_MISMATCH && soap->level == 2)
			return soap_recv_fault(soap);
		return soap_closesock(soap);
	}
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
#ifndef WITH_LEANER
	 || soap_resolve_attachments(soap)
#endif
	 || soap_end_recv(soap))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

SOAP_FMAC5 int SOAP_FMAC6 soap_call_klgsyn_ReleaseChunkAccessor(struct soap *soap, const char *URL, const char *action, wchar_t *wstrAccessor, struct klgsyn_ReleaseChunkAccessorResponse &r)
{
	struct klgsyn_ReleaseChunkAccessor soap_tmp_klgsyn_ReleaseChunkAccessor;
	soap->encodingStyle = NULL;
	soap_tmp_klgsyn_ReleaseChunkAccessor.wstrAccessor=wstrAccessor;
	soap_begin(soap);
	soap_serializeheader(soap);
	soap_serialize_klgsyn_ReleaseChunkAccessor(soap, &soap_tmp_klgsyn_ReleaseChunkAccessor);
	soap_begin_count(soap);
	if (soap->mode & SOAP_IO_LENGTH)
	{	soap_envelope_begin_out(soap);
		soap_putheader(soap);
		soap_body_begin_out(soap);
		soap_put_klgsyn_ReleaseChunkAccessor(soap, &soap_tmp_klgsyn_ReleaseChunkAccessor, "klgsyn-ReleaseChunkAccessor", "");
		soap_body_end_out(soap);
		soap_envelope_end_out(soap);
	}
	if (soap_connect(soap, URL, action)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put_klgsyn_ReleaseChunkAccessor(soap, &soap_tmp_klgsyn_ReleaseChunkAccessor, "klgsyn-ReleaseChunkAccessor", "")
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap_closesock(soap);
	soap_default_klgsyn_ReleaseChunkAccessorResponse(soap, &r);
	if (soap_begin_recv(soap)
	 || soap_envelope_begin_in(soap)
	 || soap_recv_header(soap)
	 || soap_body_begin_in(soap))
		return soap_closesock(soap);
	soap_get_klgsyn_ReleaseChunkAccessorResponse(soap, &r, "klgsyn-ReleaseChunkAccessorResponse", "");
	if (soap->error)
	{	if (soap->error == SOAP_TAG_MISMATCH && soap->level == 2)
			return soap_recv_fault(soap);
		return soap_closesock(soap);
	}
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
#ifndef WITH_LEANER
	 || soap_resolve_attachments(soap)
#endif
	 || soap_end_recv(soap))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

SOAP_FMAC5 int SOAP_FMAC6 soap_call_kltsk_ForbidTaskForGroup(struct soap *soap, const char *URL, const char *action, long nGroupId, long nTaskId, struct kltsk_ForbidTaskForGroupResponse &r)
{
	struct kltsk_ForbidTaskForGroup soap_tmp_kltsk_ForbidTaskForGroup;
	soap->encodingStyle = NULL;
	soap_tmp_kltsk_ForbidTaskForGroup.nGroupId=nGroupId;
	soap_tmp_kltsk_ForbidTaskForGroup.nTaskId=nTaskId;
	soap_begin(soap);
	soap_serializeheader(soap);
	soap_serialize_kltsk_ForbidTaskForGroup(soap, &soap_tmp_kltsk_ForbidTaskForGroup);
	soap_begin_count(soap);
	if (soap->mode & SOAP_IO_LENGTH)
	{	soap_envelope_begin_out(soap);
		soap_putheader(soap);
		soap_body_begin_out(soap);
		soap_put_kltsk_ForbidTaskForGroup(soap, &soap_tmp_kltsk_ForbidTaskForGroup, "kltsk-ForbidTaskForGroup", "");
		soap_body_end_out(soap);
		soap_envelope_end_out(soap);
	}
	if (soap_connect(soap, URL, action)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put_kltsk_ForbidTaskForGroup(soap, &soap_tmp_kltsk_ForbidTaskForGroup, "kltsk-ForbidTaskForGroup", "")
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap_closesock(soap);
	soap_default_kltsk_ForbidTaskForGroupResponse(soap, &r);
	if (soap_begin_recv(soap)
	 || soap_envelope_begin_in(soap)
	 || soap_recv_header(soap)
	 || soap_body_begin_in(soap))
		return soap_closesock(soap);
	soap_get_kltsk_ForbidTaskForGroupResponse(soap, &r, "kltsk-ForbidTaskForGroupResponse", "");
	if (soap->error)
	{	if (soap->error == SOAP_TAG_MISMATCH && soap->level == 2)
			return soap_recv_fault(soap);
		return soap_closesock(soap);
	}
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
#ifndef WITH_LEANER
	 || soap_resolve_attachments(soap)
#endif
	 || soap_end_recv(soap))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

SOAP_FMAC5 int SOAP_FMAC6 soap_call_kltsk_RunTaskNow(struct soap *soap, const char *URL, const char *action, long nTaskId, wchar_t *wstrDomainName, wchar_t *wstrHostName, bool bEvenIfAlreadySucceeded, struct kltsk_RunTaskNowResponse &r)
{
	struct kltsk_RunTaskNow soap_tmp_kltsk_RunTaskNow;
	soap->encodingStyle = NULL;
	soap_tmp_kltsk_RunTaskNow.nTaskId=nTaskId;
	soap_tmp_kltsk_RunTaskNow.wstrDomainName=wstrDomainName;
	soap_tmp_kltsk_RunTaskNow.wstrHostName=wstrHostName;
	soap_tmp_kltsk_RunTaskNow.bEvenIfAlreadySucceeded=bEvenIfAlreadySucceeded;
	soap_begin(soap);
	soap_serializeheader(soap);
	soap_serialize_kltsk_RunTaskNow(soap, &soap_tmp_kltsk_RunTaskNow);
	soap_begin_count(soap);
	if (soap->mode & SOAP_IO_LENGTH)
	{	soap_envelope_begin_out(soap);
		soap_putheader(soap);
		soap_body_begin_out(soap);
		soap_put_kltsk_RunTaskNow(soap, &soap_tmp_kltsk_RunTaskNow, "kltsk-RunTaskNow", "");
		soap_body_end_out(soap);
		soap_envelope_end_out(soap);
	}
	if (soap_connect(soap, URL, action)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put_kltsk_RunTaskNow(soap, &soap_tmp_kltsk_RunTaskNow, "kltsk-RunTaskNow", "")
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap_closesock(soap);
	soap_default_kltsk_RunTaskNowResponse(soap, &r);
	if (soap_begin_recv(soap)
	 || soap_envelope_begin_in(soap)
	 || soap_recv_header(soap)
	 || soap_body_begin_in(soap))
		return soap_closesock(soap);
	soap_get_kltsk_RunTaskNowResponse(soap, &r, "kltsk-RunTaskNowResponse", "");
	if (soap->error)
	{	if (soap->error == SOAP_TAG_MISMATCH && soap->level == 2)
			return soap_recv_fault(soap);
		return soap_closesock(soap);
	}
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
#ifndef WITH_LEANER
	 || soap_resolve_attachments(soap)
#endif
	 || soap_end_recv(soap))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

SOAP_FMAC5 int SOAP_FMAC6 soap_call_kltsk_SuspendTask(struct soap *soap, const char *URL, const char *action, long nTaskId, struct kltsk_SuspendTaskResponse &r)
{
	struct kltsk_SuspendTask soap_tmp_kltsk_SuspendTask;
	soap->encodingStyle = NULL;
	soap_tmp_kltsk_SuspendTask.nTaskId=nTaskId;
	soap_begin(soap);
	soap_serializeheader(soap);
	soap_serialize_kltsk_SuspendTask(soap, &soap_tmp_kltsk_SuspendTask);
	soap_begin_count(soap);
	if (soap->mode & SOAP_IO_LENGTH)
	{	soap_envelope_begin_out(soap);
		soap_putheader(soap);
		soap_body_begin_out(soap);
		soap_put_kltsk_SuspendTask(soap, &soap_tmp_kltsk_SuspendTask, "kltsk-SuspendTask", "");
		soap_body_end_out(soap);
		soap_envelope_end_out(soap);
	}
	if (soap_connect(soap, URL, action)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put_kltsk_SuspendTask(soap, &soap_tmp_kltsk_SuspendTask, "kltsk-SuspendTask", "")
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap_closesock(soap);
	soap_default_kltsk_SuspendTaskResponse(soap, &r);
	if (soap_begin_recv(soap)
	 || soap_envelope_begin_in(soap)
	 || soap_recv_header(soap)
	 || soap_body_begin_in(soap))
		return soap_closesock(soap);
	soap_get_kltsk_SuspendTaskResponse(soap, &r, "kltsk-SuspendTaskResponse", "");
	if (soap->error)
	{	if (soap->error == SOAP_TAG_MISMATCH && soap->level == 2)
			return soap_recv_fault(soap);
		return soap_closesock(soap);
	}
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
#ifndef WITH_LEANER
	 || soap_resolve_attachments(soap)
#endif
	 || soap_end_recv(soap))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

SOAP_FMAC5 int SOAP_FMAC6 soap_call_kltsk_ResumeTask(struct soap *soap, const char *URL, const char *action, long nTaskId, struct kltsk_ResumeTaskResponse &r)
{
	struct kltsk_ResumeTask soap_tmp_kltsk_ResumeTask;
	soap->encodingStyle = NULL;
	soap_tmp_kltsk_ResumeTask.nTaskId=nTaskId;
	soap_begin(soap);
	soap_serializeheader(soap);
	soap_serialize_kltsk_ResumeTask(soap, &soap_tmp_kltsk_ResumeTask);
	soap_begin_count(soap);
	if (soap->mode & SOAP_IO_LENGTH)
	{	soap_envelope_begin_out(soap);
		soap_putheader(soap);
		soap_body_begin_out(soap);
		soap_put_kltsk_ResumeTask(soap, &soap_tmp_kltsk_ResumeTask, "kltsk-ResumeTask", "");
		soap_body_end_out(soap);
		soap_envelope_end_out(soap);
	}
	if (soap_connect(soap, URL, action)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put_kltsk_ResumeTask(soap, &soap_tmp_kltsk_ResumeTask, "kltsk-ResumeTask", "")
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap_closesock(soap);
	soap_default_kltsk_ResumeTaskResponse(soap, &r);
	if (soap_begin_recv(soap)
	 || soap_envelope_begin_in(soap)
	 || soap_recv_header(soap)
	 || soap_body_begin_in(soap))
		return soap_closesock(soap);
	soap_get_kltsk_ResumeTaskResponse(soap, &r, "kltsk-ResumeTaskResponse", "");
	if (soap->error)
	{	if (soap->error == SOAP_TAG_MISMATCH && soap->level == 2)
			return soap_recv_fault(soap);
		return soap_closesock(soap);
	}
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
#ifndef WITH_LEANER
	 || soap_resolve_attachments(soap)
#endif
	 || soap_end_recv(soap))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

SOAP_FMAC5 int SOAP_FMAC6 soap_call_kltsk_CancelTask(struct soap *soap, const char *URL, const char *action, long nTaskId, struct kltsk_CancelTaskResponse &r)
{
	struct kltsk_CancelTask soap_tmp_kltsk_CancelTask;
	soap->encodingStyle = NULL;
	soap_tmp_kltsk_CancelTask.nTaskId=nTaskId;
	soap_begin(soap);
	soap_serializeheader(soap);
	soap_serialize_kltsk_CancelTask(soap, &soap_tmp_kltsk_CancelTask);
	soap_begin_count(soap);
	if (soap->mode & SOAP_IO_LENGTH)
	{	soap_envelope_begin_out(soap);
		soap_putheader(soap);
		soap_body_begin_out(soap);
		soap_put_kltsk_CancelTask(soap, &soap_tmp_kltsk_CancelTask, "kltsk-CancelTask", "");
		soap_body_end_out(soap);
		soap_envelope_end_out(soap);
	}
	if (soap_connect(soap, URL, action)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put_kltsk_CancelTask(soap, &soap_tmp_kltsk_CancelTask, "kltsk-CancelTask", "")
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap_closesock(soap);
	soap_default_kltsk_CancelTaskResponse(soap, &r);
	if (soap_begin_recv(soap)
	 || soap_envelope_begin_in(soap)
	 || soap_recv_header(soap)
	 || soap_body_begin_in(soap))
		return soap_closesock(soap);
	soap_get_kltsk_CancelTaskResponse(soap, &r, "kltsk-CancelTaskResponse", "");
	if (soap->error)
	{	if (soap->error == SOAP_TAG_MISMATCH && soap->level == 2)
			return soap_recv_fault(soap);
		return soap_closesock(soap);
	}
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
#ifndef WITH_LEANER
	 || soap_resolve_attachments(soap)
#endif
	 || soap_end_recv(soap))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

SOAP_FMAC5 int SOAP_FMAC6 soap_call_kltsk_ResetTasksIterator(struct soap *soap, const char *URL, const char *action, long nGroupId, bool bGroupIdSignificant, struct kltsk_component_id compIdFilter, wchar_t *taskName, bool bIncludeSupergroups, struct kltsk_ResetTasksIteratorResponse &r)
{
	struct kltsk_ResetTasksIterator soap_tmp_kltsk_ResetTasksIterator;
	soap->encodingStyle = NULL;
	soap_tmp_kltsk_ResetTasksIterator.nGroupId=nGroupId;
	soap_tmp_kltsk_ResetTasksIterator.bGroupIdSignificant=bGroupIdSignificant;
	soap_tmp_kltsk_ResetTasksIterator.compIdFilter=compIdFilter;
	soap_tmp_kltsk_ResetTasksIterator.taskName=taskName;
	soap_tmp_kltsk_ResetTasksIterator.bIncludeSupergroups=bIncludeSupergroups;
	soap_begin(soap);
	soap_serializeheader(soap);
	soap_serialize_kltsk_ResetTasksIterator(soap, &soap_tmp_kltsk_ResetTasksIterator);
	soap_begin_count(soap);
	if (soap->mode & SOAP_IO_LENGTH)
	{	soap_envelope_begin_out(soap);
		soap_putheader(soap);
		soap_body_begin_out(soap);
		soap_put_kltsk_ResetTasksIterator(soap, &soap_tmp_kltsk_ResetTasksIterator, "kltsk-ResetTasksIterator", "");
		soap_body_end_out(soap);
		soap_envelope_end_out(soap);
	}
	if (soap_connect(soap, URL, action)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put_kltsk_ResetTasksIterator(soap, &soap_tmp_kltsk_ResetTasksIterator, "kltsk-ResetTasksIterator", "")
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap_closesock(soap);
	soap_default_kltsk_ResetTasksIteratorResponse(soap, &r);
	if (soap_begin_recv(soap)
	 || soap_envelope_begin_in(soap)
	 || soap_recv_header(soap)
	 || soap_body_begin_in(soap))
		return soap_closesock(soap);
	soap_get_kltsk_ResetTasksIteratorResponse(soap, &r, "kltsk-ResetTasksIteratorResponse", "");
	if (soap->error)
	{	if (soap->error == SOAP_TAG_MISMATCH && soap->level == 2)
			return soap_recv_fault(soap);
		return soap_closesock(soap);
	}
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
#ifndef WITH_LEANER
	 || soap_resolve_attachments(soap)
#endif
	 || soap_end_recv(soap))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

SOAP_FMAC5 int SOAP_FMAC6 soap_call_kltsk_GetNextTask(struct soap *soap, const char *URL, const char *action, wchar_t *iteratorId, struct kltsk_GetNextTaskResponse &r)
{
	struct kltsk_GetNextTask soap_tmp_kltsk_GetNextTask;
	soap->encodingStyle = NULL;
	soap_tmp_kltsk_GetNextTask.iteratorId=iteratorId;
	soap_begin(soap);
	soap_serializeheader(soap);
	soap_serialize_kltsk_GetNextTask(soap, &soap_tmp_kltsk_GetNextTask);
	soap_begin_count(soap);
	if (soap->mode & SOAP_IO_LENGTH)
	{	soap_envelope_begin_out(soap);
		soap_putheader(soap);
		soap_body_begin_out(soap);
		soap_put_kltsk_GetNextTask(soap, &soap_tmp_kltsk_GetNextTask, "kltsk-GetNextTask", "");
		soap_body_end_out(soap);
		soap_envelope_end_out(soap);
	}
	if (soap_connect(soap, URL, action)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put_kltsk_GetNextTask(soap, &soap_tmp_kltsk_GetNextTask, "kltsk-GetNextTask", "")
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap_closesock(soap);
	soap_default_kltsk_GetNextTaskResponse(soap, &r);
	if (soap_begin_recv(soap)
	 || soap_envelope_begin_in(soap)
	 || soap_recv_header(soap)
	 || soap_body_begin_in(soap))
		return soap_closesock(soap);
	soap_get_kltsk_GetNextTaskResponse(soap, &r, "kltsk-GetNextTaskResponse", "");
	if (soap->error)
	{	if (soap->error == SOAP_TAG_MISMATCH && soap->level == 2)
			return soap_recv_fault(soap);
		return soap_closesock(soap);
	}
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
#ifndef WITH_LEANER
	 || soap_resolve_attachments(soap)
#endif
	 || soap_end_recv(soap))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

SOAP_FMAC5 int SOAP_FMAC6 soap_call_kltsk_GetTaskByID(struct soap *soap, const char *URL, const char *action, long nTaskId, struct kltsk_GetTaskByIDResponse &r)
{
	struct kltsk_GetTaskByID soap_tmp_kltsk_GetTaskByID;
	soap->encodingStyle = NULL;
	soap_tmp_kltsk_GetTaskByID.nTaskId=nTaskId;
	soap_begin(soap);
	soap_serializeheader(soap);
	soap_serialize_kltsk_GetTaskByID(soap, &soap_tmp_kltsk_GetTaskByID);
	soap_begin_count(soap);
	if (soap->mode & SOAP_IO_LENGTH)
	{	soap_envelope_begin_out(soap);
		soap_putheader(soap);
		soap_body_begin_out(soap);
		soap_put_kltsk_GetTaskByID(soap, &soap_tmp_kltsk_GetTaskByID, "kltsk-GetTaskByID", "");
		soap_body_end_out(soap);
		soap_envelope_end_out(soap);
	}
	if (soap_connect(soap, URL, action)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put_kltsk_GetTaskByID(soap, &soap_tmp_kltsk_GetTaskByID, "kltsk-GetTaskByID", "")
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap_closesock(soap);
	soap_default_kltsk_GetTaskByIDResponse(soap, &r);
	if (soap_begin_recv(soap)
	 || soap_envelope_begin_in(soap)
	 || soap_recv_header(soap)
	 || soap_body_begin_in(soap))
		return soap_closesock(soap);
	soap_get_kltsk_GetTaskByIDResponse(soap, &r, "kltsk-GetTaskByIDResponse", "");
	if (soap->error)
	{	if (soap->error == SOAP_TAG_MISMATCH && soap->level == 2)
			return soap_recv_fault(soap);
		return soap_closesock(soap);
	}
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
#ifndef WITH_LEANER
	 || soap_resolve_attachments(soap)
#endif
	 || soap_end_recv(soap))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

SOAP_FMAC5 int SOAP_FMAC6 soap_call_kltsk_GetTaskStatistics(struct soap *soap, const char *URL, const char *action, long nTaskId, struct kltsk_GetTaskStatisticsResponse &r)
{
	struct kltsk_GetTaskStatistics soap_tmp_kltsk_GetTaskStatistics;
	soap->encodingStyle = NULL;
	soap_tmp_kltsk_GetTaskStatistics.nTaskId=nTaskId;
	soap_begin(soap);
	soap_serializeheader(soap);
	soap_serialize_kltsk_GetTaskStatistics(soap, &soap_tmp_kltsk_GetTaskStatistics);
	soap_begin_count(soap);
	if (soap->mode & SOAP_IO_LENGTH)
	{	soap_envelope_begin_out(soap);
		soap_putheader(soap);
		soap_body_begin_out(soap);
		soap_put_kltsk_GetTaskStatistics(soap, &soap_tmp_kltsk_GetTaskStatistics, "kltsk-GetTaskStatistics", "");
		soap_body_end_out(soap);
		soap_envelope_end_out(soap);
	}
	if (soap_connect(soap, URL, action)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put_kltsk_GetTaskStatistics(soap, &soap_tmp_kltsk_GetTaskStatistics, "kltsk-GetTaskStatistics", "")
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap_closesock(soap);
	soap_default_kltsk_GetTaskStatisticsResponse(soap, &r);
	if (soap_begin_recv(soap)
	 || soap_envelope_begin_in(soap)
	 || soap_recv_header(soap)
	 || soap_body_begin_in(soap))
		return soap_closesock(soap);
	soap_get_kltsk_GetTaskStatisticsResponse(soap, &r, "kltsk-GetTaskStatisticsResponse", "");
	if (soap->error)
	{	if (soap->error == SOAP_TAG_MISMATCH && soap->level == 2)
			return soap_recv_fault(soap);
		return soap_closesock(soap);
	}
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
#ifndef WITH_LEANER
	 || soap_resolve_attachments(soap)
#endif
	 || soap_end_recv(soap))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

SOAP_FMAC5 int SOAP_FMAC6 soap_call_kltsk_AddTask(struct soap *soap, const char *URL, const char *action, long nGroupId, bool bGroupIdSignificant, param__params parTaskData, struct kltsk_AddTaskResponse &r)
{
	struct kltsk_AddTask soap_tmp_kltsk_AddTask;
	soap->encodingStyle = NULL;
	soap_tmp_kltsk_AddTask.nGroupId=nGroupId;
	soap_tmp_kltsk_AddTask.bGroupIdSignificant=bGroupIdSignificant;
	soap_tmp_kltsk_AddTask.parTaskData=parTaskData;
	soap_begin(soap);
	soap_serializeheader(soap);
	soap_serialize_kltsk_AddTask(soap, &soap_tmp_kltsk_AddTask);
	soap_begin_count(soap);
	if (soap->mode & SOAP_IO_LENGTH)
	{	soap_envelope_begin_out(soap);
		soap_putheader(soap);
		soap_body_begin_out(soap);
		soap_put_kltsk_AddTask(soap, &soap_tmp_kltsk_AddTask, "kltsk-AddTask", "");
		soap_body_end_out(soap);
		soap_envelope_end_out(soap);
	}
	if (soap_connect(soap, URL, action)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put_kltsk_AddTask(soap, &soap_tmp_kltsk_AddTask, "kltsk-AddTask", "")
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap_closesock(soap);
	soap_default_kltsk_AddTaskResponse(soap, &r);
	if (soap_begin_recv(soap)
	 || soap_envelope_begin_in(soap)
	 || soap_recv_header(soap)
	 || soap_body_begin_in(soap))
		return soap_closesock(soap);
	soap_get_kltsk_AddTaskResponse(soap, &r, "kltsk-AddTaskResponse", "");
	if (soap->error)
	{	if (soap->error == SOAP_TAG_MISMATCH && soap->level == 2)
			return soap_recv_fault(soap);
		return soap_closesock(soap);
	}
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
#ifndef WITH_LEANER
	 || soap_resolve_attachments(soap)
#endif
	 || soap_end_recv(soap))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

SOAP_FMAC5 int SOAP_FMAC6 soap_call_kltsk_UpdateTask(struct soap *soap, const char *URL, const char *action, long nTaskId, param__params parTaskData, struct kltsk_UpdateTaskResponse &r)
{
	struct kltsk_UpdateTask soap_tmp_kltsk_UpdateTask;
	soap->encodingStyle = NULL;
	soap_tmp_kltsk_UpdateTask.nTaskId=nTaskId;
	soap_tmp_kltsk_UpdateTask.parTaskData=parTaskData;
	soap_begin(soap);
	soap_serializeheader(soap);
	soap_serialize_kltsk_UpdateTask(soap, &soap_tmp_kltsk_UpdateTask);
	soap_begin_count(soap);
	if (soap->mode & SOAP_IO_LENGTH)
	{	soap_envelope_begin_out(soap);
		soap_putheader(soap);
		soap_body_begin_out(soap);
		soap_put_kltsk_UpdateTask(soap, &soap_tmp_kltsk_UpdateTask, "kltsk-UpdateTask", "");
		soap_body_end_out(soap);
		soap_envelope_end_out(soap);
	}
	if (soap_connect(soap, URL, action)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put_kltsk_UpdateTask(soap, &soap_tmp_kltsk_UpdateTask, "kltsk-UpdateTask", "")
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap_closesock(soap);
	soap_default_kltsk_UpdateTaskResponse(soap, &r);
	if (soap_begin_recv(soap)
	 || soap_envelope_begin_in(soap)
	 || soap_recv_header(soap)
	 || soap_body_begin_in(soap))
		return soap_closesock(soap);
	soap_get_kltsk_UpdateTaskResponse(soap, &r, "kltsk-UpdateTaskResponse", "");
	if (soap->error)
	{	if (soap->error == SOAP_TAG_MISMATCH && soap->level == 2)
			return soap_recv_fault(soap);
		return soap_closesock(soap);
	}
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
#ifndef WITH_LEANER
	 || soap_resolve_attachments(soap)
#endif
	 || soap_end_recv(soap))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

SOAP_FMAC5 int SOAP_FMAC6 soap_call_kltsk_DeleteTask(struct soap *soap, const char *URL, const char *action, long nTaskId, struct kltsk_DeleteTaskResponse &r)
{
	struct kltsk_DeleteTask soap_tmp_kltsk_DeleteTask;
	soap->encodingStyle = NULL;
	soap_tmp_kltsk_DeleteTask.nTaskId=nTaskId;
	soap_begin(soap);
	soap_serializeheader(soap);
	soap_serialize_kltsk_DeleteTask(soap, &soap_tmp_kltsk_DeleteTask);
	soap_begin_count(soap);
	if (soap->mode & SOAP_IO_LENGTH)
	{	soap_envelope_begin_out(soap);
		soap_putheader(soap);
		soap_body_begin_out(soap);
		soap_put_kltsk_DeleteTask(soap, &soap_tmp_kltsk_DeleteTask, "kltsk-DeleteTask", "");
		soap_body_end_out(soap);
		soap_envelope_end_out(soap);
	}
	if (soap_connect(soap, URL, action)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put_kltsk_DeleteTask(soap, &soap_tmp_kltsk_DeleteTask, "kltsk-DeleteTask", "")
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap_closesock(soap);
	soap_default_kltsk_DeleteTaskResponse(soap, &r);
	if (soap_begin_recv(soap)
	 || soap_envelope_begin_in(soap)
	 || soap_recv_header(soap)
	 || soap_body_begin_in(soap))
		return soap_closesock(soap);
	soap_get_kltsk_DeleteTaskResponse(soap, &r, "kltsk-DeleteTaskResponse", "");
	if (soap->error)
	{	if (soap->error == SOAP_TAG_MISMATCH && soap->level == 2)
			return soap_recv_fault(soap);
		return soap_closesock(soap);
	}
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
#ifndef WITH_LEANER
	 || soap_resolve_attachments(soap)
#endif
	 || soap_end_recv(soap))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

SOAP_FMAC5 int SOAP_FMAC6 soap_call_kltsk_SetTaskStartEvent(struct soap *soap, const char *URL, const char *action, long nTaskId, struct kltsk_component_id compIdFilter, wchar_t *eventType, param__params bodyFilter, struct kltsk_SetTaskStartEventResponse &r)
{
	struct kltsk_SetTaskStartEvent soap_tmp_kltsk_SetTaskStartEvent;
	soap->encodingStyle = NULL;
	soap_tmp_kltsk_SetTaskStartEvent.nTaskId=nTaskId;
	soap_tmp_kltsk_SetTaskStartEvent.compIdFilter=compIdFilter;
	soap_tmp_kltsk_SetTaskStartEvent.eventType=eventType;
	soap_tmp_kltsk_SetTaskStartEvent.bodyFilter=bodyFilter;
	soap_begin(soap);
	soap_serializeheader(soap);
	soap_serialize_kltsk_SetTaskStartEvent(soap, &soap_tmp_kltsk_SetTaskStartEvent);
	soap_begin_count(soap);
	if (soap->mode & SOAP_IO_LENGTH)
	{	soap_envelope_begin_out(soap);
		soap_putheader(soap);
		soap_body_begin_out(soap);
		soap_put_kltsk_SetTaskStartEvent(soap, &soap_tmp_kltsk_SetTaskStartEvent, "kltsk-SetTaskStartEvent", "");
		soap_body_end_out(soap);
		soap_envelope_end_out(soap);
	}
	if (soap_connect(soap, URL, action)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put_kltsk_SetTaskStartEvent(soap, &soap_tmp_kltsk_SetTaskStartEvent, "kltsk-SetTaskStartEvent", "")
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap_closesock(soap);
	soap_default_kltsk_SetTaskStartEventResponse(soap, &r);
	if (soap_begin_recv(soap)
	 || soap_envelope_begin_in(soap)
	 || soap_recv_header(soap)
	 || soap_body_begin_in(soap))
		return soap_closesock(soap);
	soap_get_kltsk_SetTaskStartEventResponse(soap, &r, "kltsk-SetTaskStartEventResponse", "");
	if (soap->error)
	{	if (soap->error == SOAP_TAG_MISMATCH && soap->level == 2)
			return soap_recv_fault(soap);
		return soap_closesock(soap);
	}
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
#ifndef WITH_LEANER
	 || soap_resolve_attachments(soap)
#endif
	 || soap_end_recv(soap))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

SOAP_FMAC5 int SOAP_FMAC6 soap_call_kltsk_GetTaskStartEvent(struct soap *soap, const char *URL, const char *action, long nTaskId, struct kltsk_GetTaskStartEventResponse &r)
{
	struct kltsk_GetTaskStartEvent soap_tmp_kltsk_GetTaskStartEvent;
	soap->encodingStyle = NULL;
	soap_tmp_kltsk_GetTaskStartEvent.nTaskId=nTaskId;
	soap_begin(soap);
	soap_serializeheader(soap);
	soap_serialize_kltsk_GetTaskStartEvent(soap, &soap_tmp_kltsk_GetTaskStartEvent);
	soap_begin_count(soap);
	if (soap->mode & SOAP_IO_LENGTH)
	{	soap_envelope_begin_out(soap);
		soap_putheader(soap);
		soap_body_begin_out(soap);
		soap_put_kltsk_GetTaskStartEvent(soap, &soap_tmp_kltsk_GetTaskStartEvent, "kltsk-GetTaskStartEvent", "");
		soap_body_end_out(soap);
		soap_envelope_end_out(soap);
	}
	if (soap_connect(soap, URL, action)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put_kltsk_GetTaskStartEvent(soap, &soap_tmp_kltsk_GetTaskStartEvent, "kltsk-GetTaskStartEvent", "")
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap_closesock(soap);
	soap_default_kltsk_GetTaskStartEventResponse(soap, &r);
	if (soap_begin_recv(soap)
	 || soap_envelope_begin_in(soap)
	 || soap_recv_header(soap)
	 || soap_body_begin_in(soap))
		return soap_closesock(soap);
	soap_get_kltsk_GetTaskStartEventResponse(soap, &r, "kltsk-GetTaskStartEventResponse", "");
	if (soap->error)
	{	if (soap->error == SOAP_TAG_MISMATCH && soap->level == 2)
			return soap_recv_fault(soap);
		return soap_closesock(soap);
	}
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
#ifndef WITH_LEANER
	 || soap_resolve_attachments(soap)
#endif
	 || soap_end_recv(soap))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

SOAP_FMAC5 int SOAP_FMAC6 soap_call_kltsk_ResetHostIteratorForTaskStatus(struct soap *soap, const char *URL, const char *action, wchar_t *wstrTaskId, wchar_t *wstrDomainName, wchar_t *wstrHostName, kltsk_wstring_array arrFields, long hsHostStateMask, long nLifetime, struct kltsk_ResetHostIteratorForTaskStatusResponse &r)
{
	struct kltsk_ResetHostIteratorForTaskStatus soap_tmp_kltsk_ResetHostIteratorForTaskStatus;
	soap->encodingStyle = NULL;
	soap_tmp_kltsk_ResetHostIteratorForTaskStatus.wstrTaskId=wstrTaskId;
	soap_tmp_kltsk_ResetHostIteratorForTaskStatus.wstrDomainName=wstrDomainName;
	soap_tmp_kltsk_ResetHostIteratorForTaskStatus.wstrHostName=wstrHostName;
	soap_tmp_kltsk_ResetHostIteratorForTaskStatus.arrFields=arrFields;
	soap_tmp_kltsk_ResetHostIteratorForTaskStatus.hsHostStateMask=hsHostStateMask;
	soap_tmp_kltsk_ResetHostIteratorForTaskStatus.nLifetime=nLifetime;
	soap_begin(soap);
	soap_serializeheader(soap);
	soap_serialize_kltsk_ResetHostIteratorForTaskStatus(soap, &soap_tmp_kltsk_ResetHostIteratorForTaskStatus);
	soap_begin_count(soap);
	if (soap->mode & SOAP_IO_LENGTH)
	{	soap_envelope_begin_out(soap);
		soap_putheader(soap);
		soap_body_begin_out(soap);
		soap_put_kltsk_ResetHostIteratorForTaskStatus(soap, &soap_tmp_kltsk_ResetHostIteratorForTaskStatus, "kltsk-ResetHostIteratorForTaskStatus", "");
		soap_body_end_out(soap);
		soap_envelope_end_out(soap);
	}
	if (soap_connect(soap, URL, action)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put_kltsk_ResetHostIteratorForTaskStatus(soap, &soap_tmp_kltsk_ResetHostIteratorForTaskStatus, "kltsk-ResetHostIteratorForTaskStatus", "")
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap_closesock(soap);
	soap_default_kltsk_ResetHostIteratorForTaskStatusResponse(soap, &r);
	if (soap_begin_recv(soap)
	 || soap_envelope_begin_in(soap)
	 || soap_recv_header(soap)
	 || soap_body_begin_in(soap))
		return soap_closesock(soap);
	soap_get_kltsk_ResetHostIteratorForTaskStatusResponse(soap, &r, "kltsk-ResetHostIteratorForTaskStatusResponse", "");
	if (soap->error)
	{	if (soap->error == SOAP_TAG_MISMATCH && soap->level == 2)
			return soap_recv_fault(soap);
		return soap_closesock(soap);
	}
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
#ifndef WITH_LEANER
	 || soap_resolve_attachments(soap)
#endif
	 || soap_end_recv(soap))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

SOAP_FMAC5 int SOAP_FMAC6 soap_call_kltsk_GetNextHostStatus(struct soap *soap, const char *URL, const char *action, wchar_t *iteratorId, long nCount, struct kltsk_GetNextHostStatusResponse &r)
{
	struct kltsk_GetNextHostStatus soap_tmp_kltsk_GetNextHostStatus;
	soap->encodingStyle = NULL;
	soap_tmp_kltsk_GetNextHostStatus.iteratorId=iteratorId;
	soap_tmp_kltsk_GetNextHostStatus.nCount=nCount;
	soap_begin(soap);
	soap_serializeheader(soap);
	soap_serialize_kltsk_GetNextHostStatus(soap, &soap_tmp_kltsk_GetNextHostStatus);
	soap_begin_count(soap);
	if (soap->mode & SOAP_IO_LENGTH)
	{	soap_envelope_begin_out(soap);
		soap_putheader(soap);
		soap_body_begin_out(soap);
		soap_put_kltsk_GetNextHostStatus(soap, &soap_tmp_kltsk_GetNextHostStatus, "kltsk-GetNextHostStatus", "");
		soap_body_end_out(soap);
		soap_envelope_end_out(soap);
	}
	if (soap_connect(soap, URL, action)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put_kltsk_GetNextHostStatus(soap, &soap_tmp_kltsk_GetNextHostStatus, "kltsk-GetNextHostStatus", "")
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap_closesock(soap);
	soap_default_kltsk_GetNextHostStatusResponse(soap, &r);
	if (soap_begin_recv(soap)
	 || soap_envelope_begin_in(soap)
	 || soap_recv_header(soap)
	 || soap_body_begin_in(soap))
		return soap_closesock(soap);
	soap_get_kltsk_GetNextHostStatusResponse(soap, &r, "kltsk-GetNextHostStatusResponse", "");
	if (soap->error)
	{	if (soap->error == SOAP_TAG_MISMATCH && soap->level == 2)
			return soap_recv_fault(soap);
		return soap_closesock(soap);
	}
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
#ifndef WITH_LEANER
	 || soap_resolve_attachments(soap)
#endif
	 || soap_end_recv(soap))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

SOAP_FMAC5 int SOAP_FMAC6 soap_call_kltsk_ResetHostIteratorForTaskStatusEx(struct soap *soap, const char *URL, const char *action, wchar_t *wstrTaskId, wchar_t *wstrDomainName, wchar_t *wstrHostName, kltsk_wstring_array arrFields, kltsk_field_order_array arrFiledsToOrder, long hsHostStateMask, long nLifetime, struct kltsk_ResetHostIteratorForTaskStatusExResponse &r)
{
	struct kltsk_ResetHostIteratorForTaskStatusEx soap_tmp_kltsk_ResetHostIteratorForTaskStatusEx;
	soap->encodingStyle = NULL;
	soap_tmp_kltsk_ResetHostIteratorForTaskStatusEx.wstrTaskId=wstrTaskId;
	soap_tmp_kltsk_ResetHostIteratorForTaskStatusEx.wstrDomainName=wstrDomainName;
	soap_tmp_kltsk_ResetHostIteratorForTaskStatusEx.wstrHostName=wstrHostName;
	soap_tmp_kltsk_ResetHostIteratorForTaskStatusEx.arrFields=arrFields;
	soap_tmp_kltsk_ResetHostIteratorForTaskStatusEx.arrFiledsToOrder=arrFiledsToOrder;
	soap_tmp_kltsk_ResetHostIteratorForTaskStatusEx.hsHostStateMask=hsHostStateMask;
	soap_tmp_kltsk_ResetHostIteratorForTaskStatusEx.nLifetime=nLifetime;
	soap_begin(soap);
	soap_serializeheader(soap);
	soap_serialize_kltsk_ResetHostIteratorForTaskStatusEx(soap, &soap_tmp_kltsk_ResetHostIteratorForTaskStatusEx);
	soap_begin_count(soap);
	if (soap->mode & SOAP_IO_LENGTH)
	{	soap_envelope_begin_out(soap);
		soap_putheader(soap);
		soap_body_begin_out(soap);
		soap_put_kltsk_ResetHostIteratorForTaskStatusEx(soap, &soap_tmp_kltsk_ResetHostIteratorForTaskStatusEx, "kltsk-ResetHostIteratorForTaskStatusEx", "");
		soap_body_end_out(soap);
		soap_envelope_end_out(soap);
	}
	if (soap_connect(soap, URL, action)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put_kltsk_ResetHostIteratorForTaskStatusEx(soap, &soap_tmp_kltsk_ResetHostIteratorForTaskStatusEx, "kltsk-ResetHostIteratorForTaskStatusEx", "")
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap_closesock(soap);
	soap_default_kltsk_ResetHostIteratorForTaskStatusExResponse(soap, &r);
	if (soap_begin_recv(soap)
	 || soap_envelope_begin_in(soap)
	 || soap_recv_header(soap)
	 || soap_body_begin_in(soap))
		return soap_closesock(soap);
	soap_get_kltsk_ResetHostIteratorForTaskStatusExResponse(soap, &r, "kltsk-ResetHostIteratorForTaskStatusExResponse", "");
	if (soap->error)
	{	if (soap->error == SOAP_TAG_MISMATCH && soap->level == 2)
			return soap_recv_fault(soap);
		return soap_closesock(soap);
	}
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
#ifndef WITH_LEANER
	 || soap_resolve_attachments(soap)
#endif
	 || soap_end_recv(soap))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

SOAP_FMAC5 int SOAP_FMAC6 soap_call_kltsk_GetHostStatusRecordsCount(struct soap *soap, const char *URL, const char *action, wchar_t *iteratorId, struct kltsk_GetHostStatusRecordsCountResponse &r)
{
	struct kltsk_GetHostStatusRecordsCount soap_tmp_kltsk_GetHostStatusRecordsCount;
	soap->encodingStyle = NULL;
	soap_tmp_kltsk_GetHostStatusRecordsCount.iteratorId=iteratorId;
	soap_begin(soap);
	soap_serializeheader(soap);
	soap_serialize_kltsk_GetHostStatusRecordsCount(soap, &soap_tmp_kltsk_GetHostStatusRecordsCount);
	soap_begin_count(soap);
	if (soap->mode & SOAP_IO_LENGTH)
	{	soap_envelope_begin_out(soap);
		soap_putheader(soap);
		soap_body_begin_out(soap);
		soap_put_kltsk_GetHostStatusRecordsCount(soap, &soap_tmp_kltsk_GetHostStatusRecordsCount, "kltsk-GetHostStatusRecordsCount", "");
		soap_body_end_out(soap);
		soap_envelope_end_out(soap);
	}
	if (soap_connect(soap, URL, action)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put_kltsk_GetHostStatusRecordsCount(soap, &soap_tmp_kltsk_GetHostStatusRecordsCount, "kltsk-GetHostStatusRecordsCount", "")
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap_closesock(soap);
	soap_default_kltsk_GetHostStatusRecordsCountResponse(soap, &r);
	if (soap_begin_recv(soap)
	 || soap_envelope_begin_in(soap)
	 || soap_recv_header(soap)
	 || soap_body_begin_in(soap))
		return soap_closesock(soap);
	soap_get_kltsk_GetHostStatusRecordsCountResponse(soap, &r, "kltsk-GetHostStatusRecordsCountResponse", "");
	if (soap->error)
	{	if (soap->error == SOAP_TAG_MISMATCH && soap->level == 2)
			return soap_recv_fault(soap);
		return soap_closesock(soap);
	}
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
#ifndef WITH_LEANER
	 || soap_resolve_attachments(soap)
#endif
	 || soap_end_recv(soap))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

SOAP_FMAC5 int SOAP_FMAC6 soap_call_kltsk_GetHostStatusRecordRange(struct soap *soap, const char *URL, const char *action, wchar_t *iteratorId, long nStart, long nEnd, struct kltsk_GetHostStatusRecordRangeResponse &r)
{
	struct kltsk_GetHostStatusRecordRange soap_tmp_kltsk_GetHostStatusRecordRange;
	soap->encodingStyle = NULL;
	soap_tmp_kltsk_GetHostStatusRecordRange.iteratorId=iteratorId;
	soap_tmp_kltsk_GetHostStatusRecordRange.nStart=nStart;
	soap_tmp_kltsk_GetHostStatusRecordRange.nEnd=nEnd;
	soap_begin(soap);
	soap_serializeheader(soap);
	soap_serialize_kltsk_GetHostStatusRecordRange(soap, &soap_tmp_kltsk_GetHostStatusRecordRange);
	soap_begin_count(soap);
	if (soap->mode & SOAP_IO_LENGTH)
	{	soap_envelope_begin_out(soap);
		soap_putheader(soap);
		soap_body_begin_out(soap);
		soap_put_kltsk_GetHostStatusRecordRange(soap, &soap_tmp_kltsk_GetHostStatusRecordRange, "kltsk-GetHostStatusRecordRange", "");
		soap_body_end_out(soap);
		soap_envelope_end_out(soap);
	}
	if (soap_connect(soap, URL, action)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put_kltsk_GetHostStatusRecordRange(soap, &soap_tmp_kltsk_GetHostStatusRecordRange, "kltsk-GetHostStatusRecordRange", "")
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap_closesock(soap);
	soap_default_kltsk_GetHostStatusRecordRangeResponse(soap, &r);
	if (soap_begin_recv(soap)
	 || soap_envelope_begin_in(soap)
	 || soap_recv_header(soap)
	 || soap_body_begin_in(soap))
		return soap_closesock(soap);
	soap_get_kltsk_GetHostStatusRecordRangeResponse(soap, &r, "kltsk-GetHostStatusRecordRangeResponse", "");
	if (soap->error)
	{	if (soap->error == SOAP_TAG_MISMATCH && soap->level == 2)
			return soap_recv_fault(soap);
		return soap_closesock(soap);
	}
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
#ifndef WITH_LEANER
	 || soap_resolve_attachments(soap)
#endif
	 || soap_end_recv(soap))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

SOAP_FMAC5 int SOAP_FMAC6 soap_call_kltsk_GetAllTasksOfHost(struct soap *soap, const char *URL, const char *action, wchar_t *wstrDomainName, wchar_t *wstrHostName, struct kltsk_GetAllTasksOfHostResponse &r)
{
	struct kltsk_GetAllTasksOfHost soap_tmp_kltsk_GetAllTasksOfHost;
	soap->encodingStyle = NULL;
	soap_tmp_kltsk_GetAllTasksOfHost.wstrDomainName=wstrDomainName;
	soap_tmp_kltsk_GetAllTasksOfHost.wstrHostName=wstrHostName;
	soap_begin(soap);
	soap_serializeheader(soap);
	soap_serialize_kltsk_GetAllTasksOfHost(soap, &soap_tmp_kltsk_GetAllTasksOfHost);
	soap_begin_count(soap);
	if (soap->mode & SOAP_IO_LENGTH)
	{	soap_envelope_begin_out(soap);
		soap_putheader(soap);
		soap_body_begin_out(soap);
		soap_put_kltsk_GetAllTasksOfHost(soap, &soap_tmp_kltsk_GetAllTasksOfHost, "kltsk-GetAllTasksOfHost", "");
		soap_body_end_out(soap);
		soap_envelope_end_out(soap);
	}
	if (soap_connect(soap, URL, action)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put_kltsk_GetAllTasksOfHost(soap, &soap_tmp_kltsk_GetAllTasksOfHost, "kltsk-GetAllTasksOfHost", "")
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap_closesock(soap);
	soap_default_kltsk_GetAllTasksOfHostResponse(soap, &r);
	if (soap_begin_recv(soap)
	 || soap_envelope_begin_in(soap)
	 || soap_recv_header(soap)
	 || soap_body_begin_in(soap))
		return soap_closesock(soap);
	soap_get_kltsk_GetAllTasksOfHostResponse(soap, &r, "kltsk-GetAllTasksOfHostResponse", "");
	if (soap->error)
	{	if (soap->error == SOAP_TAG_MISMATCH && soap->level == 2)
			return soap_recv_fault(soap);
		return soap_closesock(soap);
	}
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
#ifndef WITH_LEANER
	 || soap_resolve_attachments(soap)
#endif
	 || soap_end_recv(soap))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

SOAP_FMAC5 int SOAP_FMAC6 soap_call_kltsk_GetTaskGroup(struct soap *soap, const char *URL, const char *action, long nTaskId, struct kltsk_GetTaskGroupResponse &r)
{
	struct kltsk_GetTaskGroup soap_tmp_kltsk_GetTaskGroup;
	soap->encodingStyle = NULL;
	soap_tmp_kltsk_GetTaskGroup.nTaskId=nTaskId;
	soap_begin(soap);
	soap_serializeheader(soap);
	soap_serialize_kltsk_GetTaskGroup(soap, &soap_tmp_kltsk_GetTaskGroup);
	soap_begin_count(soap);
	if (soap->mode & SOAP_IO_LENGTH)
	{	soap_envelope_begin_out(soap);
		soap_putheader(soap);
		soap_body_begin_out(soap);
		soap_put_kltsk_GetTaskGroup(soap, &soap_tmp_kltsk_GetTaskGroup, "kltsk-GetTaskGroup", "");
		soap_body_end_out(soap);
		soap_envelope_end_out(soap);
	}
	if (soap_connect(soap, URL, action)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put_kltsk_GetTaskGroup(soap, &soap_tmp_kltsk_GetTaskGroup, "kltsk-GetTaskGroup", "")
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap_closesock(soap);
	soap_default_kltsk_GetTaskGroupResponse(soap, &r);
	if (soap_begin_recv(soap)
	 || soap_envelope_begin_in(soap)
	 || soap_recv_header(soap)
	 || soap_body_begin_in(soap))
		return soap_closesock(soap);
	soap_get_kltsk_GetTaskGroupResponse(soap, &r, "kltsk-GetTaskGroupResponse", "");
	if (soap->error)
	{	if (soap->error == SOAP_TAG_MISMATCH && soap->level == 2)
			return soap_recv_fault(soap);
		return soap_closesock(soap);
	}
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
#ifndef WITH_LEANER
	 || soap_resolve_attachments(soap)
#endif
	 || soap_end_recv(soap))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

SOAP_FMAC5 int SOAP_FMAC6 soap_call_klpkg_GetPackages(struct soap *soap, const char *URL, const char *action, void *_, struct klpkg_GetPackagesResponse &r)
{
	struct klpkg_GetPackages soap_tmp_klpkg_GetPackages;
	soap->encodingStyle = NULL;
	soap_tmp_klpkg_GetPackages._=_;
	soap_begin(soap);
	soap_serializeheader(soap);
	soap_serialize_klpkg_GetPackages(soap, &soap_tmp_klpkg_GetPackages);
	soap_begin_count(soap);
	if (soap->mode & SOAP_IO_LENGTH)
	{	soap_envelope_begin_out(soap);
		soap_putheader(soap);
		soap_body_begin_out(soap);
		soap_put_klpkg_GetPackages(soap, &soap_tmp_klpkg_GetPackages, "klpkg-GetPackages", "");
		soap_body_end_out(soap);
		soap_envelope_end_out(soap);
	}
	if (soap_connect(soap, URL, action)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put_klpkg_GetPackages(soap, &soap_tmp_klpkg_GetPackages, "klpkg-GetPackages", "")
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap_closesock(soap);
	soap_default_klpkg_GetPackagesResponse(soap, &r);
	if (soap_begin_recv(soap)
	 || soap_envelope_begin_in(soap)
	 || soap_recv_header(soap)
	 || soap_body_begin_in(soap))
		return soap_closesock(soap);
	soap_get_klpkg_GetPackagesResponse(soap, &r, "klpkg-GetPackagesResponse", "");
	if (soap->error)
	{	if (soap->error == SOAP_TAG_MISMATCH && soap->level == 2)
			return soap_recv_fault(soap);
		return soap_closesock(soap);
	}
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
#ifndef WITH_LEANER
	 || soap_resolve_attachments(soap)
#endif
	 || soap_end_recv(soap))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

SOAP_FMAC5 int SOAP_FMAC6 soap_call_klpkg_RenamePackage(struct soap *soap, const char *URL, const char *action, long nPackageId, wchar_t *wstrNewPackageName, struct klpkg_RenamePackageResponse &r)
{
	struct klpkg_RenamePackage soap_tmp_klpkg_RenamePackage;
	soap->encodingStyle = NULL;
	soap_tmp_klpkg_RenamePackage.nPackageId=nPackageId;
	soap_tmp_klpkg_RenamePackage.wstrNewPackageName=wstrNewPackageName;
	soap_begin(soap);
	soap_serializeheader(soap);
	soap_serialize_klpkg_RenamePackage(soap, &soap_tmp_klpkg_RenamePackage);
	soap_begin_count(soap);
	if (soap->mode & SOAP_IO_LENGTH)
	{	soap_envelope_begin_out(soap);
		soap_putheader(soap);
		soap_body_begin_out(soap);
		soap_put_klpkg_RenamePackage(soap, &soap_tmp_klpkg_RenamePackage, "klpkg-RenamePackage", "");
		soap_body_end_out(soap);
		soap_envelope_end_out(soap);
	}
	if (soap_connect(soap, URL, action)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put_klpkg_RenamePackage(soap, &soap_tmp_klpkg_RenamePackage, "klpkg-RenamePackage", "")
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap_closesock(soap);
	soap_default_klpkg_RenamePackageResponse(soap, &r);
	if (soap_begin_recv(soap)
	 || soap_envelope_begin_in(soap)
	 || soap_recv_header(soap)
	 || soap_body_begin_in(soap))
		return soap_closesock(soap);
	soap_get_klpkg_RenamePackageResponse(soap, &r, "klpkg-RenamePackageResponse", "");
	if (soap->error)
	{	if (soap->error == SOAP_TAG_MISMATCH && soap->level == 2)
			return soap_recv_fault(soap);
		return soap_closesock(soap);
	}
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
#ifndef WITH_LEANER
	 || soap_resolve_attachments(soap)
#endif
	 || soap_end_recv(soap))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

SOAP_FMAC5 int SOAP_FMAC6 soap_call_klpkg_GetIntranetFolderForNewPackage(struct soap *soap, const char *URL, const char *action, wchar_t *wstrProductName, wchar_t *wstrProductVersion, struct klpkg_GetIntranetFolderForNewPackageResponse &r)
{
	struct klpkg_GetIntranetFolderForNewPackage soap_tmp_klpkg_GetIntranetFolderForNewPackage;
	soap->encodingStyle = NULL;
	soap_tmp_klpkg_GetIntranetFolderForNewPackage.wstrProductName=wstrProductName;
	soap_tmp_klpkg_GetIntranetFolderForNewPackage.wstrProductVersion=wstrProductVersion;
	soap_begin(soap);
	soap_serializeheader(soap);
	soap_serialize_klpkg_GetIntranetFolderForNewPackage(soap, &soap_tmp_klpkg_GetIntranetFolderForNewPackage);
	soap_begin_count(soap);
	if (soap->mode & SOAP_IO_LENGTH)
	{	soap_envelope_begin_out(soap);
		soap_putheader(soap);
		soap_body_begin_out(soap);
		soap_put_klpkg_GetIntranetFolderForNewPackage(soap, &soap_tmp_klpkg_GetIntranetFolderForNewPackage, "klpkg-GetIntranetFolderForNewPackage", "");
		soap_body_end_out(soap);
		soap_envelope_end_out(soap);
	}
	if (soap_connect(soap, URL, action)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put_klpkg_GetIntranetFolderForNewPackage(soap, &soap_tmp_klpkg_GetIntranetFolderForNewPackage, "klpkg-GetIntranetFolderForNewPackage", "")
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap_closesock(soap);
	soap_default_klpkg_GetIntranetFolderForNewPackageResponse(soap, &r);
	if (soap_begin_recv(soap)
	 || soap_envelope_begin_in(soap)
	 || soap_recv_header(soap)
	 || soap_body_begin_in(soap))
		return soap_closesock(soap);
	soap_get_klpkg_GetIntranetFolderForNewPackageResponse(soap, &r, "klpkg-GetIntranetFolderForNewPackageResponse", "");
	if (soap->error)
	{	if (soap->error == SOAP_TAG_MISMATCH && soap->level == 2)
			return soap_recv_fault(soap);
		return soap_closesock(soap);
	}
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
#ifndef WITH_LEANER
	 || soap_resolve_attachments(soap)
#endif
	 || soap_end_recv(soap))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

SOAP_FMAC5 int SOAP_FMAC6 soap_call_klpkg_RecordNewPackage(struct soap *soap, const char *URL, const char *action, wchar_t *wstrName, wchar_t *wstrFolder, wchar_t *wstrProductName, wchar_t *wstrProductVersion, wchar_t *wstrProductDisplName, wchar_t *wstrProductDisplVersion, struct klpkg_RecordNewPackageResponse &r)
{
	struct klpkg_RecordNewPackage soap_tmp_klpkg_RecordNewPackage;
	soap->encodingStyle = NULL;
	soap_tmp_klpkg_RecordNewPackage.wstrName=wstrName;
	soap_tmp_klpkg_RecordNewPackage.wstrFolder=wstrFolder;
	soap_tmp_klpkg_RecordNewPackage.wstrProductName=wstrProductName;
	soap_tmp_klpkg_RecordNewPackage.wstrProductVersion=wstrProductVersion;
	soap_tmp_klpkg_RecordNewPackage.wstrProductDisplName=wstrProductDisplName;
	soap_tmp_klpkg_RecordNewPackage.wstrProductDisplVersion=wstrProductDisplVersion;
	soap_begin(soap);
	soap_serializeheader(soap);
	soap_serialize_klpkg_RecordNewPackage(soap, &soap_tmp_klpkg_RecordNewPackage);
	soap_begin_count(soap);
	if (soap->mode & SOAP_IO_LENGTH)
	{	soap_envelope_begin_out(soap);
		soap_putheader(soap);
		soap_body_begin_out(soap);
		soap_put_klpkg_RecordNewPackage(soap, &soap_tmp_klpkg_RecordNewPackage, "klpkg-RecordNewPackage", "");
		soap_body_end_out(soap);
		soap_envelope_end_out(soap);
	}
	if (soap_connect(soap, URL, action)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put_klpkg_RecordNewPackage(soap, &soap_tmp_klpkg_RecordNewPackage, "klpkg-RecordNewPackage", "")
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap_closesock(soap);
	soap_default_klpkg_RecordNewPackageResponse(soap, &r);
	if (soap_begin_recv(soap)
	 || soap_envelope_begin_in(soap)
	 || soap_recv_header(soap)
	 || soap_body_begin_in(soap))
		return soap_closesock(soap);
	soap_get_klpkg_RecordNewPackageResponse(soap, &r, "klpkg-RecordNewPackageResponse", "");
	if (soap->error)
	{	if (soap->error == SOAP_TAG_MISMATCH && soap->level == 2)
			return soap_recv_fault(soap);
		return soap_closesock(soap);
	}
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
#ifndef WITH_LEANER
	 || soap_resolve_attachments(soap)
#endif
	 || soap_end_recv(soap))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

SOAP_FMAC5 int SOAP_FMAC6 soap_call_klpkg_RemovePackage(struct soap *soap, const char *URL, const char *action, long nPackageId, struct klpkg_RemovePackageResponse &r)
{
	struct klpkg_RemovePackage soap_tmp_klpkg_RemovePackage;
	soap->encodingStyle = NULL;
	soap_tmp_klpkg_RemovePackage.nPackageId=nPackageId;
	soap_begin(soap);
	soap_serializeheader(soap);
	soap_serialize_klpkg_RemovePackage(soap, &soap_tmp_klpkg_RemovePackage);
	soap_begin_count(soap);
	if (soap->mode & SOAP_IO_LENGTH)
	{	soap_envelope_begin_out(soap);
		soap_putheader(soap);
		soap_body_begin_out(soap);
		soap_put_klpkg_RemovePackage(soap, &soap_tmp_klpkg_RemovePackage, "klpkg-RemovePackage", "");
		soap_body_end_out(soap);
		soap_envelope_end_out(soap);
	}
	if (soap_connect(soap, URL, action)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put_klpkg_RemovePackage(soap, &soap_tmp_klpkg_RemovePackage, "klpkg-RemovePackage", "")
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap_closesock(soap);
	soap_default_klpkg_RemovePackageResponse(soap, &r);
	if (soap_begin_recv(soap)
	 || soap_envelope_begin_in(soap)
	 || soap_recv_header(soap)
	 || soap_body_begin_in(soap))
		return soap_closesock(soap);
	soap_get_klpkg_RemovePackageResponse(soap, &r, "klpkg-RemovePackageResponse", "");
	if (soap->error)
	{	if (soap->error == SOAP_TAG_MISMATCH && soap->level == 2)
			return soap_recv_fault(soap);
		return soap_closesock(soap);
	}
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
#ifndef WITH_LEANER
	 || soap_resolve_attachments(soap)
#endif
	 || soap_end_recv(soap))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

SOAP_FMAC5 int SOAP_FMAC6 soap_call_klpkg_GetIntranetFolderForPackage(struct soap *soap, const char *URL, const char *action, long nPackageId, struct klpkg_GetIntranetFolderForPackageResponse &r)
{
	struct klpkg_GetIntranetFolderForPackage soap_tmp_klpkg_GetIntranetFolderForPackage;
	soap->encodingStyle = NULL;
	soap_tmp_klpkg_GetIntranetFolderForPackage.nPackageId=nPackageId;
	soap_begin(soap);
	soap_serializeheader(soap);
	soap_serialize_klpkg_GetIntranetFolderForPackage(soap, &soap_tmp_klpkg_GetIntranetFolderForPackage);
	soap_begin_count(soap);
	if (soap->mode & SOAP_IO_LENGTH)
	{	soap_envelope_begin_out(soap);
		soap_putheader(soap);
		soap_body_begin_out(soap);
		soap_put_klpkg_GetIntranetFolderForPackage(soap, &soap_tmp_klpkg_GetIntranetFolderForPackage, "klpkg-GetIntranetFolderForPackage", "");
		soap_body_end_out(soap);
		soap_envelope_end_out(soap);
	}
	if (soap_connect(soap, URL, action)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put_klpkg_GetIntranetFolderForPackage(soap, &soap_tmp_klpkg_GetIntranetFolderForPackage, "klpkg-GetIntranetFolderForPackage", "")
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap_closesock(soap);
	soap_default_klpkg_GetIntranetFolderForPackageResponse(soap, &r);
	if (soap_begin_recv(soap)
	 || soap_envelope_begin_in(soap)
	 || soap_recv_header(soap)
	 || soap_body_begin_in(soap))
		return soap_closesock(soap);
	soap_get_klpkg_GetIntranetFolderForPackageResponse(soap, &r, "klpkg-GetIntranetFolderForPackageResponse", "");
	if (soap->error)
	{	if (soap->error == SOAP_TAG_MISMATCH && soap->level == 2)
			return soap_recv_fault(soap);
		return soap_closesock(soap);
	}
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
#ifndef WITH_LEANER
	 || soap_resolve_attachments(soap)
#endif
	 || soap_end_recv(soap))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

SOAP_FMAC5 int SOAP_FMAC6 soap_call_klpkg_SS_Read(struct soap *soap, const char *URL, const char *action, wchar_t *storage_descr, wchar_t *name, wchar_t *version, wchar_t *section, long timeout, struct klpkg_SS_ReadResponse &r)
{
	struct klpkg_SS_Read soap_tmp_klpkg_SS_Read;
	soap->encodingStyle = NULL;
	soap_tmp_klpkg_SS_Read.storage_descr=storage_descr;
	soap_tmp_klpkg_SS_Read.name=name;
	soap_tmp_klpkg_SS_Read.version=version;
	soap_tmp_klpkg_SS_Read.section=section;
	soap_tmp_klpkg_SS_Read.timeout=timeout;
	soap_begin(soap);
	soap_serializeheader(soap);
	soap_serialize_klpkg_SS_Read(soap, &soap_tmp_klpkg_SS_Read);
	soap_begin_count(soap);
	if (soap->mode & SOAP_IO_LENGTH)
	{	soap_envelope_begin_out(soap);
		soap_putheader(soap);
		soap_body_begin_out(soap);
		soap_put_klpkg_SS_Read(soap, &soap_tmp_klpkg_SS_Read, "klpkg-SS-Read", "");
		soap_body_end_out(soap);
		soap_envelope_end_out(soap);
	}
	if (soap_connect(soap, URL, action)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put_klpkg_SS_Read(soap, &soap_tmp_klpkg_SS_Read, "klpkg-SS-Read", "")
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap_closesock(soap);
	soap_default_klpkg_SS_ReadResponse(soap, &r);
	if (soap_begin_recv(soap)
	 || soap_envelope_begin_in(soap)
	 || soap_recv_header(soap)
	 || soap_body_begin_in(soap))
		return soap_closesock(soap);
	soap_get_klpkg_SS_ReadResponse(soap, &r, "klpkg-SS-ReadResponse", "");
	if (soap->error)
	{	if (soap->error == SOAP_TAG_MISMATCH && soap->level == 2)
			return soap_recv_fault(soap);
		return soap_closesock(soap);
	}
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
#ifndef WITH_LEANER
	 || soap_resolve_attachments(soap)
#endif
	 || soap_end_recv(soap))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

SOAP_FMAC5 int SOAP_FMAC6 soap_call_klpkg_SS_Write(struct soap *soap, const char *URL, const char *action, wchar_t *storage_descr, wchar_t *name, wchar_t *version, wchar_t *section, param__params data, long timeout, long operation_type, struct klpkg_SS_WriteResponse &r)
{
	struct klpkg_SS_Write soap_tmp_klpkg_SS_Write;
	soap->encodingStyle = NULL;
	soap_tmp_klpkg_SS_Write.storage_descr=storage_descr;
	soap_tmp_klpkg_SS_Write.name=name;
	soap_tmp_klpkg_SS_Write.version=version;
	soap_tmp_klpkg_SS_Write.section=section;
	soap_tmp_klpkg_SS_Write.data=data;
	soap_tmp_klpkg_SS_Write.timeout=timeout;
	soap_tmp_klpkg_SS_Write.operation_type=operation_type;
	soap_begin(soap);
	soap_serializeheader(soap);
	soap_serialize_klpkg_SS_Write(soap, &soap_tmp_klpkg_SS_Write);
	soap_begin_count(soap);
	if (soap->mode & SOAP_IO_LENGTH)
	{	soap_envelope_begin_out(soap);
		soap_putheader(soap);
		soap_body_begin_out(soap);
		soap_put_klpkg_SS_Write(soap, &soap_tmp_klpkg_SS_Write, "klpkg-SS-Write", "");
		soap_body_end_out(soap);
		soap_envelope_end_out(soap);
	}
	if (soap_connect(soap, URL, action)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put_klpkg_SS_Write(soap, &soap_tmp_klpkg_SS_Write, "klpkg-SS-Write", "")
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap_closesock(soap);
	soap_default_klpkg_SS_WriteResponse(soap, &r);
	if (soap_begin_recv(soap)
	 || soap_envelope_begin_in(soap)
	 || soap_recv_header(soap)
	 || soap_body_begin_in(soap))
		return soap_closesock(soap);
	soap_get_klpkg_SS_WriteResponse(soap, &r, "klpkg-SS-WriteResponse", "");
	if (soap->error)
	{	if (soap->error == SOAP_TAG_MISMATCH && soap->level == 2)
			return soap_recv_fault(soap);
		return soap_closesock(soap);
	}
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
#ifndef WITH_LEANER
	 || soap_resolve_attachments(soap)
#endif
	 || soap_end_recv(soap))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

SOAP_FMAC5 int SOAP_FMAC6 soap_call_klpkg_SS_SectionOpearation(struct soap *soap, const char *URL, const char *action, wchar_t *storage_descr, wchar_t *name, wchar_t *version, wchar_t *section, long timeout, long operation_type, struct klpkg_SS_SectionOpearationResponse &r)
{
	struct klpkg_SS_SectionOpearation soap_tmp_klpkg_SS_SectionOpearation;
	soap->encodingStyle = NULL;
	soap_tmp_klpkg_SS_SectionOpearation.storage_descr=storage_descr;
	soap_tmp_klpkg_SS_SectionOpearation.name=name;
	soap_tmp_klpkg_SS_SectionOpearation.version=version;
	soap_tmp_klpkg_SS_SectionOpearation.section=section;
	soap_tmp_klpkg_SS_SectionOpearation.timeout=timeout;
	soap_tmp_klpkg_SS_SectionOpearation.operation_type=operation_type;
	soap_begin(soap);
	soap_serializeheader(soap);
	soap_serialize_klpkg_SS_SectionOpearation(soap, &soap_tmp_klpkg_SS_SectionOpearation);
	soap_begin_count(soap);
	if (soap->mode & SOAP_IO_LENGTH)
	{	soap_envelope_begin_out(soap);
		soap_putheader(soap);
		soap_body_begin_out(soap);
		soap_put_klpkg_SS_SectionOpearation(soap, &soap_tmp_klpkg_SS_SectionOpearation, "klpkg-SS-SectionOpearation", "");
		soap_body_end_out(soap);
		soap_envelope_end_out(soap);
	}
	if (soap_connect(soap, URL, action)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put_klpkg_SS_SectionOpearation(soap, &soap_tmp_klpkg_SS_SectionOpearation, "klpkg-SS-SectionOpearation", "")
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap_closesock(soap);
	soap_default_klpkg_SS_SectionOpearationResponse(soap, &r);
	if (soap_begin_recv(soap)
	 || soap_envelope_begin_in(soap)
	 || soap_recv_header(soap)
	 || soap_body_begin_in(soap))
		return soap_closesock(soap);
	soap_get_klpkg_SS_SectionOpearationResponse(soap, &r, "klpkg-SS-SectionOpearationResponse", "");
	if (soap->error)
	{	if (soap->error == SOAP_TAG_MISMATCH && soap->level == 2)
			return soap_recv_fault(soap);
		return soap_closesock(soap);
	}
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
#ifndef WITH_LEANER
	 || soap_resolve_attachments(soap)
#endif
	 || soap_end_recv(soap))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

SOAP_FMAC5 int SOAP_FMAC6 soap_call_klpkg_SS_GetNames(struct soap *soap, const char *URL, const char *action, wchar_t *storage_descr, wchar_t *name, wchar_t *version, long timeout, struct klpkg_SS_GetNamesResponse &r)
{
	struct klpkg_SS_GetNames soap_tmp_klpkg_SS_GetNames;
	soap->encodingStyle = NULL;
	soap_tmp_klpkg_SS_GetNames.storage_descr=storage_descr;
	soap_tmp_klpkg_SS_GetNames.name=name;
	soap_tmp_klpkg_SS_GetNames.version=version;
	soap_tmp_klpkg_SS_GetNames.timeout=timeout;
	soap_begin(soap);
	soap_serializeheader(soap);
	soap_serialize_klpkg_SS_GetNames(soap, &soap_tmp_klpkg_SS_GetNames);
	soap_begin_count(soap);
	if (soap->mode & SOAP_IO_LENGTH)
	{	soap_envelope_begin_out(soap);
		soap_putheader(soap);
		soap_body_begin_out(soap);
		soap_put_klpkg_SS_GetNames(soap, &soap_tmp_klpkg_SS_GetNames, "klpkg-SS-GetNames", "");
		soap_body_end_out(soap);
		soap_envelope_end_out(soap);
	}
	if (soap_connect(soap, URL, action)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put_klpkg_SS_GetNames(soap, &soap_tmp_klpkg_SS_GetNames, "klpkg-SS-GetNames", "")
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap_closesock(soap);
	soap_default_klpkg_SS_GetNamesResponse(soap, &r);
	if (soap_begin_recv(soap)
	 || soap_envelope_begin_in(soap)
	 || soap_recv_header(soap)
	 || soap_body_begin_in(soap))
		return soap_closesock(soap);
	soap_get_klpkg_SS_GetNamesResponse(soap, &r, "klpkg-SS-GetNamesResponse", "");
	if (soap->error)
	{	if (soap->error == SOAP_TAG_MISMATCH && soap->level == 2)
			return soap_recv_fault(soap);
		return soap_closesock(soap);
	}
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
#ifndef WITH_LEANER
	 || soap_resolve_attachments(soap)
#endif
	 || soap_end_recv(soap))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

SOAP_FMAC5 int SOAP_FMAC6 soap_call_klpkg_RemovePackage2(struct soap *soap, const char *URL, const char *action, long nPackageId, struct klpkg_RemovePackage2Response &r)
{
	struct klpkg_RemovePackage2 soap_tmp_klpkg_RemovePackage2;
	soap->encodingStyle = NULL;
	soap_tmp_klpkg_RemovePackage2.nPackageId=nPackageId;
	soap_begin(soap);
	soap_serializeheader(soap);
	soap_serialize_klpkg_RemovePackage2(soap, &soap_tmp_klpkg_RemovePackage2);
	soap_begin_count(soap);
	if (soap->mode & SOAP_IO_LENGTH)
	{	soap_envelope_begin_out(soap);
		soap_putheader(soap);
		soap_body_begin_out(soap);
		soap_put_klpkg_RemovePackage2(soap, &soap_tmp_klpkg_RemovePackage2, "klpkg-RemovePackage2", "");
		soap_body_end_out(soap);
		soap_envelope_end_out(soap);
	}
	if (soap_connect(soap, URL, action)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put_klpkg_RemovePackage2(soap, &soap_tmp_klpkg_RemovePackage2, "klpkg-RemovePackage2", "")
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap_closesock(soap);
	soap_default_klpkg_RemovePackage2Response(soap, &r);
	if (soap_begin_recv(soap)
	 || soap_envelope_begin_in(soap)
	 || soap_recv_header(soap)
	 || soap_body_begin_in(soap))
		return soap_closesock(soap);
	soap_get_klpkg_RemovePackage2Response(soap, &r, "klpkg-RemovePackage2Response", "");
	if (soap->error)
	{	if (soap->error == SOAP_TAG_MISMATCH && soap->level == 2)
			return soap_recv_fault(soap);
		return soap_closesock(soap);
	}
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
#ifndef WITH_LEANER
	 || soap_resolve_attachments(soap)
#endif
	 || soap_end_recv(soap))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

SOAP_FMAC5 int SOAP_FMAC6 soap_call_klpkg_GetLoginScript(struct soap *soap, const char *URL, const char *action, long nPackageId, wchar_t *wstrTaskId, struct klpkg_GetLoginScriptResponse &r)
{
	struct klpkg_GetLoginScript soap_tmp_klpkg_GetLoginScript;
	soap->encodingStyle = NULL;
	soap_tmp_klpkg_GetLoginScript.nPackageId=nPackageId;
	soap_tmp_klpkg_GetLoginScript.wstrTaskId=wstrTaskId;
	soap_begin(soap);
	soap_serializeheader(soap);
	soap_serialize_klpkg_GetLoginScript(soap, &soap_tmp_klpkg_GetLoginScript);
	soap_begin_count(soap);
	if (soap->mode & SOAP_IO_LENGTH)
	{	soap_envelope_begin_out(soap);
		soap_putheader(soap);
		soap_body_begin_out(soap);
		soap_put_klpkg_GetLoginScript(soap, &soap_tmp_klpkg_GetLoginScript, "klpkg-GetLoginScript", "");
		soap_body_end_out(soap);
		soap_envelope_end_out(soap);
	}
	if (soap_connect(soap, URL, action)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put_klpkg_GetLoginScript(soap, &soap_tmp_klpkg_GetLoginScript, "klpkg-GetLoginScript", "")
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap_closesock(soap);
	soap_default_klpkg_GetLoginScriptResponse(soap, &r);
	if (soap_begin_recv(soap)
	 || soap_envelope_begin_in(soap)
	 || soap_recv_header(soap)
	 || soap_body_begin_in(soap))
		return soap_closesock(soap);
	soap_get_klpkg_GetLoginScriptResponse(soap, &r, "klpkg-GetLoginScriptResponse", "");
	if (soap->error)
	{	if (soap->error == SOAP_TAG_MISMATCH && soap->level == 2)
			return soap_recv_fault(soap);
		return soap_closesock(soap);
	}
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
#ifndef WITH_LEANER
	 || soap_resolve_attachments(soap)
#endif
	 || soap_end_recv(soap))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

SOAP_FMAC5 int SOAP_FMAC6 soap_call_klpkg_SetRebootOptions(struct soap *soap, const char *URL, const char *action, long nPackageId, bool bRebootImmediately, bool bAskForReboot, long nAskForRebootPeriodInMin, long nForceRebootTimeInMin, wchar_t *wstrAskRebootMsgText, struct klpkg_SetRebootOptionsResponse &r)
{
	struct klpkg_SetRebootOptions soap_tmp_klpkg_SetRebootOptions;
	soap->encodingStyle = NULL;
	soap_tmp_klpkg_SetRebootOptions.nPackageId=nPackageId;
	soap_tmp_klpkg_SetRebootOptions.bRebootImmediately=bRebootImmediately;
	soap_tmp_klpkg_SetRebootOptions.bAskForReboot=bAskForReboot;
	soap_tmp_klpkg_SetRebootOptions.nAskForRebootPeriodInMin=nAskForRebootPeriodInMin;
	soap_tmp_klpkg_SetRebootOptions.nForceRebootTimeInMin=nForceRebootTimeInMin;
	soap_tmp_klpkg_SetRebootOptions.wstrAskRebootMsgText=wstrAskRebootMsgText;
	soap_begin(soap);
	soap_serializeheader(soap);
	soap_serialize_klpkg_SetRebootOptions(soap, &soap_tmp_klpkg_SetRebootOptions);
	soap_begin_count(soap);
	if (soap->mode & SOAP_IO_LENGTH)
	{	soap_envelope_begin_out(soap);
		soap_putheader(soap);
		soap_body_begin_out(soap);
		soap_put_klpkg_SetRebootOptions(soap, &soap_tmp_klpkg_SetRebootOptions, "klpkg-SetRebootOptions", "");
		soap_body_end_out(soap);
		soap_envelope_end_out(soap);
	}
	if (soap_connect(soap, URL, action)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put_klpkg_SetRebootOptions(soap, &soap_tmp_klpkg_SetRebootOptions, "klpkg-SetRebootOptions", "")
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap_closesock(soap);
	soap_default_klpkg_SetRebootOptionsResponse(soap, &r);
	if (soap_begin_recv(soap)
	 || soap_envelope_begin_in(soap)
	 || soap_recv_header(soap)
	 || soap_body_begin_in(soap))
		return soap_closesock(soap);
	soap_get_klpkg_SetRebootOptionsResponse(soap, &r, "klpkg-SetRebootOptionsResponse", "");
	if (soap->error)
	{	if (soap->error == SOAP_TAG_MISMATCH && soap->level == 2)
			return soap_recv_fault(soap);
		return soap_closesock(soap);
	}
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
#ifndef WITH_LEANER
	 || soap_resolve_attachments(soap)
#endif
	 || soap_end_recv(soap))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

SOAP_FMAC5 int SOAP_FMAC6 soap_call_klpkg_GetRebootOptions(struct soap *soap, const char *URL, const char *action, long nPackageId, struct klpkg_GetRebootOptionsResponse &r)
{
	struct klpkg_GetRebootOptions soap_tmp_klpkg_GetRebootOptions;
	soap->encodingStyle = NULL;
	soap_tmp_klpkg_GetRebootOptions.nPackageId=nPackageId;
	soap_begin(soap);
	soap_serializeheader(soap);
	soap_serialize_klpkg_GetRebootOptions(soap, &soap_tmp_klpkg_GetRebootOptions);
	soap_begin_count(soap);
	if (soap->mode & SOAP_IO_LENGTH)
	{	soap_envelope_begin_out(soap);
		soap_putheader(soap);
		soap_body_begin_out(soap);
		soap_put_klpkg_GetRebootOptions(soap, &soap_tmp_klpkg_GetRebootOptions, "klpkg-GetRebootOptions", "");
		soap_body_end_out(soap);
		soap_envelope_end_out(soap);
	}
	if (soap_connect(soap, URL, action)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put_klpkg_GetRebootOptions(soap, &soap_tmp_klpkg_GetRebootOptions, "klpkg-GetRebootOptions", "")
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap_closesock(soap);
	soap_default_klpkg_GetRebootOptionsResponse(soap, &r);
	if (soap_begin_recv(soap)
	 || soap_envelope_begin_in(soap)
	 || soap_recv_header(soap)
	 || soap_body_begin_in(soap))
		return soap_closesock(soap);
	soap_get_klpkg_GetRebootOptionsResponse(soap, &r, "klpkg-GetRebootOptionsResponse", "");
	if (soap->error)
	{	if (soap->error == SOAP_TAG_MISMATCH && soap->level == 2)
			return soap_recv_fault(soap);
		return soap_closesock(soap);
	}
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
#ifndef WITH_LEANER
	 || soap_resolve_attachments(soap)
#endif
	 || soap_end_recv(soap))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

SOAP_FMAC5 int SOAP_FMAC6 soap_call_klpkg_RecordNewPackage2(struct soap *soap, const char *URL, const char *action, wchar_t *wstrName, wchar_t *wstrFileId, wchar_t *wstrProductName, wchar_t *wstrProductVersion, wchar_t *wstrProductDisplName, wchar_t *wstrProductDisplVersion, struct klpkg_RecordNewPackage2Response &r)
{
	struct klpkg_RecordNewPackage2 soap_tmp_klpkg_RecordNewPackage2;
	soap->encodingStyle = NULL;
	soap_tmp_klpkg_RecordNewPackage2.wstrName=wstrName;
	soap_tmp_klpkg_RecordNewPackage2.wstrFileId=wstrFileId;
	soap_tmp_klpkg_RecordNewPackage2.wstrProductName=wstrProductName;
	soap_tmp_klpkg_RecordNewPackage2.wstrProductVersion=wstrProductVersion;
	soap_tmp_klpkg_RecordNewPackage2.wstrProductDisplName=wstrProductDisplName;
	soap_tmp_klpkg_RecordNewPackage2.wstrProductDisplVersion=wstrProductDisplVersion;
	soap_begin(soap);
	soap_serializeheader(soap);
	soap_serialize_klpkg_RecordNewPackage2(soap, &soap_tmp_klpkg_RecordNewPackage2);
	soap_begin_count(soap);
	if (soap->mode & SOAP_IO_LENGTH)
	{	soap_envelope_begin_out(soap);
		soap_putheader(soap);
		soap_body_begin_out(soap);
		soap_put_klpkg_RecordNewPackage2(soap, &soap_tmp_klpkg_RecordNewPackage2, "klpkg-RecordNewPackage2", "");
		soap_body_end_out(soap);
		soap_envelope_end_out(soap);
	}
	if (soap_connect(soap, URL, action)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put_klpkg_RecordNewPackage2(soap, &soap_tmp_klpkg_RecordNewPackage2, "klpkg-RecordNewPackage2", "")
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap_closesock(soap);
	soap_default_klpkg_RecordNewPackage2Response(soap, &r);
	if (soap_begin_recv(soap)
	 || soap_envelope_begin_in(soap)
	 || soap_recv_header(soap)
	 || soap_body_begin_in(soap))
		return soap_closesock(soap);
	soap_get_klpkg_RecordNewPackage2Response(soap, &r, "klpkg-RecordNewPackage2Response", "");
	if (soap->error)
	{	if (soap->error == SOAP_TAG_MISMATCH && soap->level == 2)
			return soap_recv_fault(soap);
		return soap_closesock(soap);
	}
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
#ifndef WITH_LEANER
	 || soap_resolve_attachments(soap)
#endif
	 || soap_end_recv(soap))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

SOAP_FMAC5 int SOAP_FMAC6 soap_call_klpkg_GetLicenseKey(struct soap *soap, const char *URL, const char *action, long nPackageId, struct klpkg_GetLicenseKeyResponse &r)
{
	struct klpkg_GetLicenseKey soap_tmp_klpkg_GetLicenseKey;
	soap->encodingStyle = NULL;
	soap_tmp_klpkg_GetLicenseKey.nPackageId=nPackageId;
	soap_begin(soap);
	soap_serializeheader(soap);
	soap_serialize_klpkg_GetLicenseKey(soap, &soap_tmp_klpkg_GetLicenseKey);
	soap_begin_count(soap);
	if (soap->mode & SOAP_IO_LENGTH)
	{	soap_envelope_begin_out(soap);
		soap_putheader(soap);
		soap_body_begin_out(soap);
		soap_put_klpkg_GetLicenseKey(soap, &soap_tmp_klpkg_GetLicenseKey, "klpkg-GetLicenseKey", "");
		soap_body_end_out(soap);
		soap_envelope_end_out(soap);
	}
	if (soap_connect(soap, URL, action)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put_klpkg_GetLicenseKey(soap, &soap_tmp_klpkg_GetLicenseKey, "klpkg-GetLicenseKey", "")
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap_closesock(soap);
	soap_default_klpkg_GetLicenseKeyResponse(soap, &r);
	if (soap_begin_recv(soap)
	 || soap_envelope_begin_in(soap)
	 || soap_recv_header(soap)
	 || soap_body_begin_in(soap))
		return soap_closesock(soap);
	soap_get_klpkg_GetLicenseKeyResponse(soap, &r, "klpkg-GetLicenseKeyResponse", "");
	if (soap->error)
	{	if (soap->error == SOAP_TAG_MISMATCH && soap->level == 2)
			return soap_recv_fault(soap);
		return soap_closesock(soap);
	}
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
#ifndef WITH_LEANER
	 || soap_resolve_attachments(soap)
#endif
	 || soap_end_recv(soap))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

SOAP_FMAC5 int SOAP_FMAC6 soap_call_klpkg_SetLicenseKey(struct soap *soap, const char *URL, const char *action, long nPackageId, wchar_t *wstrKeyFileName, xsd__hexBinary data, bool bRemoveExisting, struct klpkg_SetLicenseKeyResponse &r)
{
	struct klpkg_SetLicenseKey soap_tmp_klpkg_SetLicenseKey;
	soap->encodingStyle = NULL;
	soap_tmp_klpkg_SetLicenseKey.nPackageId=nPackageId;
	soap_tmp_klpkg_SetLicenseKey.wstrKeyFileName=wstrKeyFileName;
	soap_tmp_klpkg_SetLicenseKey.data=data;
	soap_tmp_klpkg_SetLicenseKey.bRemoveExisting=bRemoveExisting;
	soap_begin(soap);
	soap_serializeheader(soap);
	soap_serialize_klpkg_SetLicenseKey(soap, &soap_tmp_klpkg_SetLicenseKey);
	soap_begin_count(soap);
	if (soap->mode & SOAP_IO_LENGTH)
	{	soap_envelope_begin_out(soap);
		soap_putheader(soap);
		soap_body_begin_out(soap);
		soap_put_klpkg_SetLicenseKey(soap, &soap_tmp_klpkg_SetLicenseKey, "klpkg-SetLicenseKey", "");
		soap_body_end_out(soap);
		soap_envelope_end_out(soap);
	}
	if (soap_connect(soap, URL, action)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put_klpkg_SetLicenseKey(soap, &soap_tmp_klpkg_SetLicenseKey, "klpkg-SetLicenseKey", "")
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap_closesock(soap);
	soap_default_klpkg_SetLicenseKeyResponse(soap, &r);
	if (soap_begin_recv(soap)
	 || soap_envelope_begin_in(soap)
	 || soap_recv_header(soap)
	 || soap_body_begin_in(soap))
		return soap_closesock(soap);
	soap_get_klpkg_SetLicenseKeyResponse(soap, &r, "klpkg-SetLicenseKeyResponse", "");
	if (soap->error)
	{	if (soap->error == SOAP_TAG_MISMATCH && soap->level == 2)
			return soap_recv_fault(soap);
		return soap_closesock(soap);
	}
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
#ifndef WITH_LEANER
	 || soap_resolve_attachments(soap)
#endif
	 || soap_end_recv(soap))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

SOAP_FMAC5 int SOAP_FMAC6 soap_call_klpkg_ReadPkgCfgFile(struct soap *soap, const char *URL, const char *action, long nPackageId, wchar_t *wstrFileRelativePath, struct klpkg_ReadPkgCfgFileResponse &r)
{
	struct klpkg_ReadPkgCfgFile soap_tmp_klpkg_ReadPkgCfgFile;
	soap->encodingStyle = NULL;
	soap_tmp_klpkg_ReadPkgCfgFile.nPackageId=nPackageId;
	soap_tmp_klpkg_ReadPkgCfgFile.wstrFileRelativePath=wstrFileRelativePath;
	soap_begin(soap);
	soap_serializeheader(soap);
	soap_serialize_klpkg_ReadPkgCfgFile(soap, &soap_tmp_klpkg_ReadPkgCfgFile);
	soap_begin_count(soap);
	if (soap->mode & SOAP_IO_LENGTH)
	{	soap_envelope_begin_out(soap);
		soap_putheader(soap);
		soap_body_begin_out(soap);
		soap_put_klpkg_ReadPkgCfgFile(soap, &soap_tmp_klpkg_ReadPkgCfgFile, "klpkg-ReadPkgCfgFile", "");
		soap_body_end_out(soap);
		soap_envelope_end_out(soap);
	}
	if (soap_connect(soap, URL, action)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put_klpkg_ReadPkgCfgFile(soap, &soap_tmp_klpkg_ReadPkgCfgFile, "klpkg-ReadPkgCfgFile", "")
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap_closesock(soap);
	soap_default_klpkg_ReadPkgCfgFileResponse(soap, &r);
	if (soap_begin_recv(soap)
	 || soap_envelope_begin_in(soap)
	 || soap_recv_header(soap)
	 || soap_body_begin_in(soap))
		return soap_closesock(soap);
	soap_get_klpkg_ReadPkgCfgFileResponse(soap, &r, "klpkg-ReadPkgCfgFileResponse", "");
	if (soap->error)
	{	if (soap->error == SOAP_TAG_MISMATCH && soap->level == 2)
			return soap_recv_fault(soap);
		return soap_closesock(soap);
	}
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
#ifndef WITH_LEANER
	 || soap_resolve_attachments(soap)
#endif
	 || soap_end_recv(soap))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

SOAP_FMAC5 int SOAP_FMAC6 soap_call_klpkg_WritePkgCfgFile(struct soap *soap, const char *URL, const char *action, long nPackageId, wchar_t *wstrFileRelativePath, xsd__hexBinary data, struct klpkg_WritePkgCfgFileResponse &r)
{
	struct klpkg_WritePkgCfgFile soap_tmp_klpkg_WritePkgCfgFile;
	soap->encodingStyle = NULL;
	soap_tmp_klpkg_WritePkgCfgFile.nPackageId=nPackageId;
	soap_tmp_klpkg_WritePkgCfgFile.wstrFileRelativePath=wstrFileRelativePath;
	soap_tmp_klpkg_WritePkgCfgFile.data=data;
	soap_begin(soap);
	soap_serializeheader(soap);
	soap_serialize_klpkg_WritePkgCfgFile(soap, &soap_tmp_klpkg_WritePkgCfgFile);
	soap_begin_count(soap);
	if (soap->mode & SOAP_IO_LENGTH)
	{	soap_envelope_begin_out(soap);
		soap_putheader(soap);
		soap_body_begin_out(soap);
		soap_put_klpkg_WritePkgCfgFile(soap, &soap_tmp_klpkg_WritePkgCfgFile, "klpkg-WritePkgCfgFile", "");
		soap_body_end_out(soap);
		soap_envelope_end_out(soap);
	}
	if (soap_connect(soap, URL, action)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put_klpkg_WritePkgCfgFile(soap, &soap_tmp_klpkg_WritePkgCfgFile, "klpkg-WritePkgCfgFile", "")
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap_closesock(soap);
	soap_default_klpkg_WritePkgCfgFileResponse(soap, &r);
	if (soap_begin_recv(soap)
	 || soap_envelope_begin_in(soap)
	 || soap_recv_header(soap)
	 || soap_body_begin_in(soap))
		return soap_closesock(soap);
	soap_get_klpkg_WritePkgCfgFileResponse(soap, &r, "klpkg-WritePkgCfgFileResponse", "");
	if (soap->error)
	{	if (soap->error == SOAP_TAG_MISMATCH && soap->level == 2)
			return soap_recv_fault(soap);
		return soap_closesock(soap);
	}
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
#ifndef WITH_LEANER
	 || soap_resolve_attachments(soap)
#endif
	 || soap_end_recv(soap))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

SOAP_FMAC5 int SOAP_FMAC6 soap_call_klpkg_ReadKpdFile(struct soap *soap, const char *URL, const char *action, long nPackageId, struct klpkg_ReadKpdFileResponse &r)
{
	struct klpkg_ReadKpdFile soap_tmp_klpkg_ReadKpdFile;
	soap->encodingStyle = NULL;
	soap_tmp_klpkg_ReadKpdFile.nPackageId=nPackageId;
	soap_begin(soap);
	soap_serializeheader(soap);
	soap_serialize_klpkg_ReadKpdFile(soap, &soap_tmp_klpkg_ReadKpdFile);
	soap_begin_count(soap);
	if (soap->mode & SOAP_IO_LENGTH)
	{	soap_envelope_begin_out(soap);
		soap_putheader(soap);
		soap_body_begin_out(soap);
		soap_put_klpkg_ReadKpdFile(soap, &soap_tmp_klpkg_ReadKpdFile, "klpkg-ReadKpdFile", "");
		soap_body_end_out(soap);
		soap_envelope_end_out(soap);
	}
	if (soap_connect(soap, URL, action)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put_klpkg_ReadKpdFile(soap, &soap_tmp_klpkg_ReadKpdFile, "klpkg-ReadKpdFile", "")
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap_closesock(soap);
	soap_default_klpkg_ReadKpdFileResponse(soap, &r);
	if (soap_begin_recv(soap)
	 || soap_envelope_begin_in(soap)
	 || soap_recv_header(soap)
	 || soap_body_begin_in(soap))
		return soap_closesock(soap);
	soap_get_klpkg_ReadKpdFileResponse(soap, &r, "klpkg-ReadKpdFileResponse", "");
	if (soap->error)
	{	if (soap->error == SOAP_TAG_MISMATCH && soap->level == 2)
			return soap_recv_fault(soap);
		return soap_closesock(soap);
	}
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
#ifndef WITH_LEANER
	 || soap_resolve_attachments(soap)
#endif
	 || soap_end_recv(soap))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

SOAP_FMAC5 int SOAP_FMAC6 soap_call_klpkg_GetKpdProfileString(struct soap *soap, const char *URL, const char *action, long nPackageId, wchar_t *wstrSection, wchar_t *wstrKey, wchar_t *wstrDefault, struct klpkg_GetKpdProfileStringResponse &r)
{
	struct klpkg_GetKpdProfileString soap_tmp_klpkg_GetKpdProfileString;
	soap->encodingStyle = NULL;
	soap_tmp_klpkg_GetKpdProfileString.nPackageId=nPackageId;
	soap_tmp_klpkg_GetKpdProfileString.wstrSection=wstrSection;
	soap_tmp_klpkg_GetKpdProfileString.wstrKey=wstrKey;
	soap_tmp_klpkg_GetKpdProfileString.wstrDefault=wstrDefault;
	soap_begin(soap);
	soap_serializeheader(soap);
	soap_serialize_klpkg_GetKpdProfileString(soap, &soap_tmp_klpkg_GetKpdProfileString);
	soap_begin_count(soap);
	if (soap->mode & SOAP_IO_LENGTH)
	{	soap_envelope_begin_out(soap);
		soap_putheader(soap);
		soap_body_begin_out(soap);
		soap_put_klpkg_GetKpdProfileString(soap, &soap_tmp_klpkg_GetKpdProfileString, "klpkg-GetKpdProfileString", "");
		soap_body_end_out(soap);
		soap_envelope_end_out(soap);
	}
	if (soap_connect(soap, URL, action)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put_klpkg_GetKpdProfileString(soap, &soap_tmp_klpkg_GetKpdProfileString, "klpkg-GetKpdProfileString", "")
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap_closesock(soap);
	soap_default_klpkg_GetKpdProfileStringResponse(soap, &r);
	if (soap_begin_recv(soap)
	 || soap_envelope_begin_in(soap)
	 || soap_recv_header(soap)
	 || soap_body_begin_in(soap))
		return soap_closesock(soap);
	soap_get_klpkg_GetKpdProfileStringResponse(soap, &r, "klpkg-GetKpdProfileStringResponse", "");
	if (soap->error)
	{	if (soap->error == SOAP_TAG_MISMATCH && soap->level == 2)
			return soap_recv_fault(soap);
		return soap_closesock(soap);
	}
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
#ifndef WITH_LEANER
	 || soap_resolve_attachments(soap)
#endif
	 || soap_end_recv(soap))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

SOAP_FMAC5 int SOAP_FMAC6 soap_call_klpkg_WriteKpdProfileString(struct soap *soap, const char *URL, const char *action, long nPackageId, wchar_t *wstrSection, wchar_t *wstrKey, wchar_t *wstrValue, struct klpkg_WriteKpdProfileStringResponse &r)
{
	struct klpkg_WriteKpdProfileString soap_tmp_klpkg_WriteKpdProfileString;
	soap->encodingStyle = NULL;
	soap_tmp_klpkg_WriteKpdProfileString.nPackageId=nPackageId;
	soap_tmp_klpkg_WriteKpdProfileString.wstrSection=wstrSection;
	soap_tmp_klpkg_WriteKpdProfileString.wstrKey=wstrKey;
	soap_tmp_klpkg_WriteKpdProfileString.wstrValue=wstrValue;
	soap_begin(soap);
	soap_serializeheader(soap);
	soap_serialize_klpkg_WriteKpdProfileString(soap, &soap_tmp_klpkg_WriteKpdProfileString);
	soap_begin_count(soap);
	if (soap->mode & SOAP_IO_LENGTH)
	{	soap_envelope_begin_out(soap);
		soap_putheader(soap);
		soap_body_begin_out(soap);
		soap_put_klpkg_WriteKpdProfileString(soap, &soap_tmp_klpkg_WriteKpdProfileString, "klpkg-WriteKpdProfileString", "");
		soap_body_end_out(soap);
		soap_envelope_end_out(soap);
	}
	if (soap_connect(soap, URL, action)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put_klpkg_WriteKpdProfileString(soap, &soap_tmp_klpkg_WriteKpdProfileString, "klpkg-WriteKpdProfileString", "")
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap_closesock(soap);
	soap_default_klpkg_WriteKpdProfileStringResponse(soap, &r);
	if (soap_begin_recv(soap)
	 || soap_envelope_begin_in(soap)
	 || soap_recv_header(soap)
	 || soap_body_begin_in(soap))
		return soap_closesock(soap);
	soap_get_klpkg_WriteKpdProfileStringResponse(soap, &r, "klpkg-WriteKpdProfileStringResponse", "");
	if (soap->error)
	{	if (soap->error == SOAP_TAG_MISMATCH && soap->level == 2)
			return soap_recv_fault(soap);
		return soap_closesock(soap);
	}
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
#ifndef WITH_LEANER
	 || soap_resolve_attachments(soap)
#endif
	 || soap_end_recv(soap))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

SOAP_FMAC5 int SOAP_FMAC6 soap_call_klpkg_SetRebootOptionsEx(struct soap *soap, const char *URL, const char *action, long nPackageId, bool bRebootImmediately, bool bAskForReboot, long nAskForRebootPeriodInMin, long nForceRebootTimeInMin, wchar_t *wstrAskRebootMsgText, bool bForceAppsClosed, param__params parParams, struct klpkg_SetRebootOptionsExResponse &r)
{
	struct klpkg_SetRebootOptionsEx soap_tmp_klpkg_SetRebootOptionsEx;
	soap->encodingStyle = NULL;
	soap_tmp_klpkg_SetRebootOptionsEx.nPackageId=nPackageId;
	soap_tmp_klpkg_SetRebootOptionsEx.bRebootImmediately=bRebootImmediately;
	soap_tmp_klpkg_SetRebootOptionsEx.bAskForReboot=bAskForReboot;
	soap_tmp_klpkg_SetRebootOptionsEx.nAskForRebootPeriodInMin=nAskForRebootPeriodInMin;
	soap_tmp_klpkg_SetRebootOptionsEx.nForceRebootTimeInMin=nForceRebootTimeInMin;
	soap_tmp_klpkg_SetRebootOptionsEx.wstrAskRebootMsgText=wstrAskRebootMsgText;
	soap_tmp_klpkg_SetRebootOptionsEx.bForceAppsClosed=bForceAppsClosed;
	soap_tmp_klpkg_SetRebootOptionsEx.parParams=parParams;
	soap_begin(soap);
	soap_serializeheader(soap);
	soap_serialize_klpkg_SetRebootOptionsEx(soap, &soap_tmp_klpkg_SetRebootOptionsEx);
	soap_begin_count(soap);
	if (soap->mode & SOAP_IO_LENGTH)
	{	soap_envelope_begin_out(soap);
		soap_putheader(soap);
		soap_body_begin_out(soap);
		soap_put_klpkg_SetRebootOptionsEx(soap, &soap_tmp_klpkg_SetRebootOptionsEx, "klpkg-SetRebootOptionsEx", "");
		soap_body_end_out(soap);
		soap_envelope_end_out(soap);
	}
	if (soap_connect(soap, URL, action)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put_klpkg_SetRebootOptionsEx(soap, &soap_tmp_klpkg_SetRebootOptionsEx, "klpkg-SetRebootOptionsEx", "")
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap_closesock(soap);
	soap_default_klpkg_SetRebootOptionsExResponse(soap, &r);
	if (soap_begin_recv(soap)
	 || soap_envelope_begin_in(soap)
	 || soap_recv_header(soap)
	 || soap_body_begin_in(soap))
		return soap_closesock(soap);
	soap_get_klpkg_SetRebootOptionsExResponse(soap, &r, "klpkg-SetRebootOptionsExResponse", "");
	if (soap->error)
	{	if (soap->error == SOAP_TAG_MISMATCH && soap->level == 2)
			return soap_recv_fault(soap);
		return soap_closesock(soap);
	}
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
#ifndef WITH_LEANER
	 || soap_resolve_attachments(soap)
#endif
	 || soap_end_recv(soap))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

SOAP_FMAC5 int SOAP_FMAC6 soap_call_klpkg_GetRebootOptionsEx(struct soap *soap, const char *URL, const char *action, long nPackageId, struct klpkg_GetRebootOptionsExResponse &r)
{
	struct klpkg_GetRebootOptionsEx soap_tmp_klpkg_GetRebootOptionsEx;
	soap->encodingStyle = NULL;
	soap_tmp_klpkg_GetRebootOptionsEx.nPackageId=nPackageId;
	soap_begin(soap);
	soap_serializeheader(soap);
	soap_serialize_klpkg_GetRebootOptionsEx(soap, &soap_tmp_klpkg_GetRebootOptionsEx);
	soap_begin_count(soap);
	if (soap->mode & SOAP_IO_LENGTH)
	{	soap_envelope_begin_out(soap);
		soap_putheader(soap);
		soap_body_begin_out(soap);
		soap_put_klpkg_GetRebootOptionsEx(soap, &soap_tmp_klpkg_GetRebootOptionsEx, "klpkg-GetRebootOptionsEx", "");
		soap_body_end_out(soap);
		soap_envelope_end_out(soap);
	}
	if (soap_connect(soap, URL, action)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put_klpkg_GetRebootOptionsEx(soap, &soap_tmp_klpkg_GetRebootOptionsEx, "klpkg-GetRebootOptionsEx", "")
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap_closesock(soap);
	soap_default_klpkg_GetRebootOptionsExResponse(soap, &r);
	if (soap_begin_recv(soap)
	 || soap_envelope_begin_in(soap)
	 || soap_recv_header(soap)
	 || soap_body_begin_in(soap))
		return soap_closesock(soap);
	soap_get_klpkg_GetRebootOptionsExResponse(soap, &r, "klpkg-GetRebootOptionsExResponse", "");
	if (soap->error)
	{	if (soap->error == SOAP_TAG_MISMATCH && soap->level == 2)
			return soap_recv_fault(soap);
		return soap_closesock(soap);
	}
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
#ifndef WITH_LEANER
	 || soap_resolve_attachments(soap)
#endif
	 || soap_end_recv(soap))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

SOAP_FMAC5 int SOAP_FMAC6 soap_call_klpkg_RecordNewPackageAsync(struct soap *soap, const char *URL, const char *action, wchar_t *wstrName, wchar_t *wstrFolder, wchar_t *wstrProductName, wchar_t *wstrProductVersion, wchar_t *wstrProductDisplName, wchar_t *wstrProductDisplVersion, wchar_t *wstrRequestId, struct klpkg_RecordNewPackageAsyncResponse &r)
{
	struct klpkg_RecordNewPackageAsync soap_tmp_klpkg_RecordNewPackageAsync;
	soap->encodingStyle = NULL;
	soap_tmp_klpkg_RecordNewPackageAsync.wstrName=wstrName;
	soap_tmp_klpkg_RecordNewPackageAsync.wstrFolder=wstrFolder;
	soap_tmp_klpkg_RecordNewPackageAsync.wstrProductName=wstrProductName;
	soap_tmp_klpkg_RecordNewPackageAsync.wstrProductVersion=wstrProductVersion;
	soap_tmp_klpkg_RecordNewPackageAsync.wstrProductDisplName=wstrProductDisplName;
	soap_tmp_klpkg_RecordNewPackageAsync.wstrProductDisplVersion=wstrProductDisplVersion;
	soap_tmp_klpkg_RecordNewPackageAsync.wstrRequestId=wstrRequestId;
	soap_begin(soap);
	soap_serializeheader(soap);
	soap_serialize_klpkg_RecordNewPackageAsync(soap, &soap_tmp_klpkg_RecordNewPackageAsync);
	soap_begin_count(soap);
	if (soap->mode & SOAP_IO_LENGTH)
	{	soap_envelope_begin_out(soap);
		soap_putheader(soap);
		soap_body_begin_out(soap);
		soap_put_klpkg_RecordNewPackageAsync(soap, &soap_tmp_klpkg_RecordNewPackageAsync, "klpkg-RecordNewPackageAsync", "");
		soap_body_end_out(soap);
		soap_envelope_end_out(soap);
	}
	if (soap_connect(soap, URL, action)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put_klpkg_RecordNewPackageAsync(soap, &soap_tmp_klpkg_RecordNewPackageAsync, "klpkg-RecordNewPackageAsync", "")
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap_closesock(soap);
	soap_default_klpkg_RecordNewPackageAsyncResponse(soap, &r);
	if (soap_begin_recv(soap)
	 || soap_envelope_begin_in(soap)
	 || soap_recv_header(soap)
	 || soap_body_begin_in(soap))
		return soap_closesock(soap);
	soap_get_klpkg_RecordNewPackageAsyncResponse(soap, &r, "klpkg-RecordNewPackageAsyncResponse", "");
	if (soap->error)
	{	if (soap->error == SOAP_TAG_MISMATCH && soap->level == 2)
			return soap_recv_fault(soap);
		return soap_closesock(soap);
	}
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
#ifndef WITH_LEANER
	 || soap_resolve_attachments(soap)
#endif
	 || soap_end_recv(soap))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

SOAP_FMAC5 int SOAP_FMAC6 soap_call_klpkg_GetPackageInfo(struct soap *soap, const char *URL, const char *action, long nPackageId, struct klpkg_GetPackageInfoResponse &r)
{
	struct klpkg_GetPackageInfo soap_tmp_klpkg_GetPackageInfo;
	soap->encodingStyle = NULL;
	soap_tmp_klpkg_GetPackageInfo.nPackageId=nPackageId;
	soap_begin(soap);
	soap_serializeheader(soap);
	soap_serialize_klpkg_GetPackageInfo(soap, &soap_tmp_klpkg_GetPackageInfo);
	soap_begin_count(soap);
	if (soap->mode & SOAP_IO_LENGTH)
	{	soap_envelope_begin_out(soap);
		soap_putheader(soap);
		soap_body_begin_out(soap);
		soap_put_klpkg_GetPackageInfo(soap, &soap_tmp_klpkg_GetPackageInfo, "klpkg-GetPackageInfo", "");
		soap_body_end_out(soap);
		soap_envelope_end_out(soap);
	}
	if (soap_connect(soap, URL, action)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put_klpkg_GetPackageInfo(soap, &soap_tmp_klpkg_GetPackageInfo, "klpkg-GetPackageInfo", "")
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap_closesock(soap);
	soap_default_klpkg_GetPackageInfoResponse(soap, &r);
	if (soap_begin_recv(soap)
	 || soap_envelope_begin_in(soap)
	 || soap_recv_header(soap)
	 || soap_body_begin_in(soap))
		return soap_closesock(soap);
	soap_get_klpkg_GetPackageInfoResponse(soap, &r, "klpkg-GetPackageInfoResponse", "");
	if (soap->error)
	{	if (soap->error == SOAP_TAG_MISMATCH && soap->level == 2)
			return soap_recv_fault(soap);
		return soap_closesock(soap);
	}
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
#ifndef WITH_LEANER
	 || soap_resolve_attachments(soap)
#endif
	 || soap_end_recv(soap))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

SOAP_FMAC5 int SOAP_FMAC6 soap_call_klpkg_GetIncompatibleAppsInfo(struct soap *soap, const char *URL, const char *action, long nPackageId, struct klpkg_GetIncompatibleAppsInfoResponse &r)
{
	struct klpkg_GetIncompatibleAppsInfo soap_tmp_klpkg_GetIncompatibleAppsInfo;
	soap->encodingStyle = NULL;
	soap_tmp_klpkg_GetIncompatibleAppsInfo.nPackageId=nPackageId;
	soap_begin(soap);
	soap_serializeheader(soap);
	soap_serialize_klpkg_GetIncompatibleAppsInfo(soap, &soap_tmp_klpkg_GetIncompatibleAppsInfo);
	soap_begin_count(soap);
	if (soap->mode & SOAP_IO_LENGTH)
	{	soap_envelope_begin_out(soap);
		soap_putheader(soap);
		soap_body_begin_out(soap);
		soap_put_klpkg_GetIncompatibleAppsInfo(soap, &soap_tmp_klpkg_GetIncompatibleAppsInfo, "klpkg-GetIncompatibleAppsInfo", "");
		soap_body_end_out(soap);
		soap_envelope_end_out(soap);
	}
	if (soap_connect(soap, URL, action)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put_klpkg_GetIncompatibleAppsInfo(soap, &soap_tmp_klpkg_GetIncompatibleAppsInfo, "klpkg-GetIncompatibleAppsInfo", "")
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap_closesock(soap);
	soap_default_klpkg_GetIncompatibleAppsInfoResponse(soap, &r);
	if (soap_begin_recv(soap)
	 || soap_envelope_begin_in(soap)
	 || soap_recv_header(soap)
	 || soap_body_begin_in(soap))
		return soap_closesock(soap);
	soap_get_klpkg_GetIncompatibleAppsInfoResponse(soap, &r, "klpkg-GetIncompatibleAppsInfoResponse", "");
	if (soap->error)
	{	if (soap->error == SOAP_TAG_MISMATCH && soap->level == 2)
			return soap_recv_fault(soap);
		return soap_closesock(soap);
	}
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
#ifndef WITH_LEANER
	 || soap_resolve_attachments(soap)
#endif
	 || soap_end_recv(soap))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

SOAP_FMAC5 int SOAP_FMAC6 soap_call_klpkg_SetRemoveIncompatibleApps(struct soap *soap, const char *URL, const char *action, long nPackageId, bool bRemoveIncompatibleApps, struct klpkg_SetRemoveIncompatibleAppsResponse &r)
{
	struct klpkg_SetRemoveIncompatibleApps soap_tmp_klpkg_SetRemoveIncompatibleApps;
	soap->encodingStyle = NULL;
	soap_tmp_klpkg_SetRemoveIncompatibleApps.nPackageId=nPackageId;
	soap_tmp_klpkg_SetRemoveIncompatibleApps.bRemoveIncompatibleApps=bRemoveIncompatibleApps;
	soap_begin(soap);
	soap_serializeheader(soap);
	soap_serialize_klpkg_SetRemoveIncompatibleApps(soap, &soap_tmp_klpkg_SetRemoveIncompatibleApps);
	soap_begin_count(soap);
	if (soap->mode & SOAP_IO_LENGTH)
	{	soap_envelope_begin_out(soap);
		soap_putheader(soap);
		soap_body_begin_out(soap);
		soap_put_klpkg_SetRemoveIncompatibleApps(soap, &soap_tmp_klpkg_SetRemoveIncompatibleApps, "klpkg-SetRemoveIncompatibleApps", "");
		soap_body_end_out(soap);
		soap_envelope_end_out(soap);
	}
	if (soap_connect(soap, URL, action)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put_klpkg_SetRemoveIncompatibleApps(soap, &soap_tmp_klpkg_SetRemoveIncompatibleApps, "klpkg-SetRemoveIncompatibleApps", "")
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap_closesock(soap);
	soap_default_klpkg_SetRemoveIncompatibleAppsResponse(soap, &r);
	if (soap_begin_recv(soap)
	 || soap_envelope_begin_in(soap)
	 || soap_recv_header(soap)
	 || soap_body_begin_in(soap))
		return soap_closesock(soap);
	soap_get_klpkg_SetRemoveIncompatibleAppsResponse(soap, &r, "klpkg-SetRemoveIncompatibleAppsResponse", "");
	if (soap->error)
	{	if (soap->error == SOAP_TAG_MISMATCH && soap->level == 2)
			return soap_recv_fault(soap);
		return soap_closesock(soap);
	}
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
#ifndef WITH_LEANER
	 || soap_resolve_attachments(soap)
#endif
	 || soap_end_recv(soap))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

SOAP_FMAC5 int SOAP_FMAC6 soap_call_klrpt_GetReportTypes(struct soap *soap, const char *URL, const char *action, void *_, struct klrpt_GetReportTypesResponse &r)
{
	struct klrpt_GetReportTypes soap_tmp_klrpt_GetReportTypes;
	soap->encodingStyle = NULL;
	soap_tmp_klrpt_GetReportTypes._=_;
	soap_begin(soap);
	soap_serializeheader(soap);
	soap_serialize_klrpt_GetReportTypes(soap, &soap_tmp_klrpt_GetReportTypes);
	soap_begin_count(soap);
	if (soap->mode & SOAP_IO_LENGTH)
	{	soap_envelope_begin_out(soap);
		soap_putheader(soap);
		soap_body_begin_out(soap);
		soap_put_klrpt_GetReportTypes(soap, &soap_tmp_klrpt_GetReportTypes, "klrpt-GetReportTypes", "");
		soap_body_end_out(soap);
		soap_envelope_end_out(soap);
	}
	if (soap_connect(soap, URL, action)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put_klrpt_GetReportTypes(soap, &soap_tmp_klrpt_GetReportTypes, "klrpt-GetReportTypes", "")
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap_closesock(soap);
	soap_default_klrpt_GetReportTypesResponse(soap, &r);
	if (soap_begin_recv(soap)
	 || soap_envelope_begin_in(soap)
	 || soap_recv_header(soap)
	 || soap_body_begin_in(soap))
		return soap_closesock(soap);
	soap_get_klrpt_GetReportTypesResponse(soap, &r, "klrpt-GetReportTypesResponse", "");
	if (soap->error)
	{	if (soap->error == SOAP_TAG_MISMATCH && soap->level == 2)
			return soap_recv_fault(soap);
		return soap_closesock(soap);
	}
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
#ifndef WITH_LEANER
	 || soap_resolve_attachments(soap)
#endif
	 || soap_end_recv(soap))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

SOAP_FMAC5 int SOAP_FMAC6 soap_call_klrpt_GetReportTypeDetailedData(struct soap *soap, const char *URL, const char *action, long reportType, struct klrpt_GetReportTypeDetailedDataResponse &r)
{
	struct klrpt_GetReportTypeDetailedData soap_tmp_klrpt_GetReportTypeDetailedData;
	soap->encodingStyle = NULL;
	soap_tmp_klrpt_GetReportTypeDetailedData.reportType=reportType;
	soap_begin(soap);
	soap_serializeheader(soap);
	soap_serialize_klrpt_GetReportTypeDetailedData(soap, &soap_tmp_klrpt_GetReportTypeDetailedData);
	soap_begin_count(soap);
	if (soap->mode & SOAP_IO_LENGTH)
	{	soap_envelope_begin_out(soap);
		soap_putheader(soap);
		soap_body_begin_out(soap);
		soap_put_klrpt_GetReportTypeDetailedData(soap, &soap_tmp_klrpt_GetReportTypeDetailedData, "klrpt-GetReportTypeDetailedData", "");
		soap_body_end_out(soap);
		soap_envelope_end_out(soap);
	}
	if (soap_connect(soap, URL, action)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put_klrpt_GetReportTypeDetailedData(soap, &soap_tmp_klrpt_GetReportTypeDetailedData, "klrpt-GetReportTypeDetailedData", "")
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap_closesock(soap);
	soap_default_klrpt_GetReportTypeDetailedDataResponse(soap, &r);
	if (soap_begin_recv(soap)
	 || soap_envelope_begin_in(soap)
	 || soap_recv_header(soap)
	 || soap_body_begin_in(soap))
		return soap_closesock(soap);
	soap_get_klrpt_GetReportTypeDetailedDataResponse(soap, &r, "klrpt-GetReportTypeDetailedDataResponse", "");
	if (soap->error)
	{	if (soap->error == SOAP_TAG_MISMATCH && soap->level == 2)
			return soap_recv_fault(soap);
		return soap_closesock(soap);
	}
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
#ifndef WITH_LEANER
	 || soap_resolve_attachments(soap)
#endif
	 || soap_end_recv(soap))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

SOAP_FMAC5 int SOAP_FMAC6 soap_call_klrpt_GetReportIds(struct soap *soap, const char *URL, const char *action, void *_, struct klrpt_GetReportIdsResponse &r)
{
	struct klrpt_GetReportIds soap_tmp_klrpt_GetReportIds;
	soap->encodingStyle = NULL;
	soap_tmp_klrpt_GetReportIds._=_;
	soap_begin(soap);
	soap_serializeheader(soap);
	soap_serialize_klrpt_GetReportIds(soap, &soap_tmp_klrpt_GetReportIds);
	soap_begin_count(soap);
	if (soap->mode & SOAP_IO_LENGTH)
	{	soap_envelope_begin_out(soap);
		soap_putheader(soap);
		soap_body_begin_out(soap);
		soap_put_klrpt_GetReportIds(soap, &soap_tmp_klrpt_GetReportIds, "klrpt-GetReportIds", "");
		soap_body_end_out(soap);
		soap_envelope_end_out(soap);
	}
	if (soap_connect(soap, URL, action)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put_klrpt_GetReportIds(soap, &soap_tmp_klrpt_GetReportIds, "klrpt-GetReportIds", "")
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap_closesock(soap);
	soap_default_klrpt_GetReportIdsResponse(soap, &r);
	if (soap_begin_recv(soap)
	 || soap_envelope_begin_in(soap)
	 || soap_recv_header(soap)
	 || soap_body_begin_in(soap))
		return soap_closesock(soap);
	soap_get_klrpt_GetReportIdsResponse(soap, &r, "klrpt-GetReportIdsResponse", "");
	if (soap->error)
	{	if (soap->error == SOAP_TAG_MISMATCH && soap->level == 2)
			return soap_recv_fault(soap);
		return soap_closesock(soap);
	}
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
#ifndef WITH_LEANER
	 || soap_resolve_attachments(soap)
#endif
	 || soap_end_recv(soap))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

SOAP_FMAC5 int SOAP_FMAC6 soap_call_klrpt_GetReports(struct soap *soap, const char *URL, const char *action, void *_, struct klrpt_GetReportsResponse &r)
{
	struct klrpt_GetReports soap_tmp_klrpt_GetReports;
	soap->encodingStyle = NULL;
	soap_tmp_klrpt_GetReports._=_;
	soap_begin(soap);
	soap_serializeheader(soap);
	soap_serialize_klrpt_GetReports(soap, &soap_tmp_klrpt_GetReports);
	soap_begin_count(soap);
	if (soap->mode & SOAP_IO_LENGTH)
	{	soap_envelope_begin_out(soap);
		soap_putheader(soap);
		soap_body_begin_out(soap);
		soap_put_klrpt_GetReports(soap, &soap_tmp_klrpt_GetReports, "klrpt-GetReports", "");
		soap_body_end_out(soap);
		soap_envelope_end_out(soap);
	}
	if (soap_connect(soap, URL, action)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put_klrpt_GetReports(soap, &soap_tmp_klrpt_GetReports, "klrpt-GetReports", "")
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap_closesock(soap);
	soap_default_klrpt_GetReportsResponse(soap, &r);
	if (soap_begin_recv(soap)
	 || soap_envelope_begin_in(soap)
	 || soap_recv_header(soap)
	 || soap_body_begin_in(soap))
		return soap_closesock(soap);
	soap_get_klrpt_GetReportsResponse(soap, &r, "klrpt-GetReportsResponse", "");
	if (soap->error)
	{	if (soap->error == SOAP_TAG_MISMATCH && soap->level == 2)
			return soap_recv_fault(soap);
		return soap_closesock(soap);
	}
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
#ifndef WITH_LEANER
	 || soap_resolve_attachments(soap)
#endif
	 || soap_end_recv(soap))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

SOAP_FMAC5 int SOAP_FMAC6 soap_call_klrpt_GetReportCommonData(struct soap *soap, const char *URL, const char *action, long reportId, struct klrpt_GetReportCommonDataResponse &r)
{
	struct klrpt_GetReportCommonData soap_tmp_klrpt_GetReportCommonData;
	soap->encodingStyle = NULL;
	soap_tmp_klrpt_GetReportCommonData.reportId=reportId;
	soap_begin(soap);
	soap_serializeheader(soap);
	soap_serialize_klrpt_GetReportCommonData(soap, &soap_tmp_klrpt_GetReportCommonData);
	soap_begin_count(soap);
	if (soap->mode & SOAP_IO_LENGTH)
	{	soap_envelope_begin_out(soap);
		soap_putheader(soap);
		soap_body_begin_out(soap);
		soap_put_klrpt_GetReportCommonData(soap, &soap_tmp_klrpt_GetReportCommonData, "klrpt-GetReportCommonData", "");
		soap_body_end_out(soap);
		soap_envelope_end_out(soap);
	}
	if (soap_connect(soap, URL, action)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put_klrpt_GetReportCommonData(soap, &soap_tmp_klrpt_GetReportCommonData, "klrpt-GetReportCommonData", "")
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap_closesock(soap);
	soap_default_klrpt_GetReportCommonDataResponse(soap, &r);
	if (soap_begin_recv(soap)
	 || soap_envelope_begin_in(soap)
	 || soap_recv_header(soap)
	 || soap_body_begin_in(soap))
		return soap_closesock(soap);
	soap_get_klrpt_GetReportCommonDataResponse(soap, &r, "klrpt-GetReportCommonDataResponse", "");
	if (soap->error)
	{	if (soap->error == SOAP_TAG_MISMATCH && soap->level == 2)
			return soap_recv_fault(soap);
		return soap_closesock(soap);
	}
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
#ifndef WITH_LEANER
	 || soap_resolve_attachments(soap)
#endif
	 || soap_end_recv(soap))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

SOAP_FMAC5 int SOAP_FMAC6 soap_call_klrpt_GetReportDetailedData(struct soap *soap, const char *URL, const char *action, long reportId, struct klrpt_GetReportDetailedDataResponse &r)
{
	struct klrpt_GetReportDetailedData soap_tmp_klrpt_GetReportDetailedData;
	soap->encodingStyle = NULL;
	soap_tmp_klrpt_GetReportDetailedData.reportId=reportId;
	soap_begin(soap);
	soap_serializeheader(soap);
	soap_serialize_klrpt_GetReportDetailedData(soap, &soap_tmp_klrpt_GetReportDetailedData);
	soap_begin_count(soap);
	if (soap->mode & SOAP_IO_LENGTH)
	{	soap_envelope_begin_out(soap);
		soap_putheader(soap);
		soap_body_begin_out(soap);
		soap_put_klrpt_GetReportDetailedData(soap, &soap_tmp_klrpt_GetReportDetailedData, "klrpt-GetReportDetailedData", "");
		soap_body_end_out(soap);
		soap_envelope_end_out(soap);
	}
	if (soap_connect(soap, URL, action)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put_klrpt_GetReportDetailedData(soap, &soap_tmp_klrpt_GetReportDetailedData, "klrpt-GetReportDetailedData", "")
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap_closesock(soap);
	soap_default_klrpt_GetReportDetailedDataResponse(soap, &r);
	if (soap_begin_recv(soap)
	 || soap_envelope_begin_in(soap)
	 || soap_recv_header(soap)
	 || soap_body_begin_in(soap))
		return soap_closesock(soap);
	soap_get_klrpt_GetReportDetailedDataResponse(soap, &r, "klrpt-GetReportDetailedDataResponse", "");
	if (soap->error)
	{	if (soap->error == SOAP_TAG_MISMATCH && soap->level == 2)
			return soap_recv_fault(soap);
		return soap_closesock(soap);
	}
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
#ifndef WITH_LEANER
	 || soap_resolve_attachments(soap)
#endif
	 || soap_end_recv(soap))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

SOAP_FMAC5 int SOAP_FMAC6 soap_call_klrpt_AddReport(struct soap *soap, const char *URL, const char *action, struct klrpt_common commonData, struct klrpt_details details, struct klrpt_AddReportResponse &r)
{
	struct klrpt_AddReport soap_tmp_klrpt_AddReport;
	soap->encodingStyle = NULL;
	soap_tmp_klrpt_AddReport.commonData=commonData;
	soap_tmp_klrpt_AddReport.details=details;
	soap_begin(soap);
	soap_serializeheader(soap);
	soap_serialize_klrpt_AddReport(soap, &soap_tmp_klrpt_AddReport);
	soap_begin_count(soap);
	if (soap->mode & SOAP_IO_LENGTH)
	{	soap_envelope_begin_out(soap);
		soap_putheader(soap);
		soap_body_begin_out(soap);
		soap_put_klrpt_AddReport(soap, &soap_tmp_klrpt_AddReport, "klrpt-AddReport", "");
		soap_body_end_out(soap);
		soap_envelope_end_out(soap);
	}
	if (soap_connect(soap, URL, action)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put_klrpt_AddReport(soap, &soap_tmp_klrpt_AddReport, "klrpt-AddReport", "")
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap_closesock(soap);
	soap_default_klrpt_AddReportResponse(soap, &r);
	if (soap_begin_recv(soap)
	 || soap_envelope_begin_in(soap)
	 || soap_recv_header(soap)
	 || soap_body_begin_in(soap))
		return soap_closesock(soap);
	soap_get_klrpt_AddReportResponse(soap, &r, "klrpt-AddReportResponse", "");
	if (soap->error)
	{	if (soap->error == SOAP_TAG_MISMATCH && soap->level == 2)
			return soap_recv_fault(soap);
		return soap_closesock(soap);
	}
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
#ifndef WITH_LEANER
	 || soap_resolve_attachments(soap)
#endif
	 || soap_end_recv(soap))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

SOAP_FMAC5 int SOAP_FMAC6 soap_call_klrpt_UpdateReport(struct soap *soap, const char *URL, const char *action, struct klrpt_common commonData, struct klrpt_details details, struct klrpt_UpdateReportResponse &r)
{
	struct klrpt_UpdateReport soap_tmp_klrpt_UpdateReport;
	soap->encodingStyle = NULL;
	soap_tmp_klrpt_UpdateReport.commonData=commonData;
	soap_tmp_klrpt_UpdateReport.details=details;
	soap_begin(soap);
	soap_serializeheader(soap);
	soap_serialize_klrpt_UpdateReport(soap, &soap_tmp_klrpt_UpdateReport);
	soap_begin_count(soap);
	if (soap->mode & SOAP_IO_LENGTH)
	{	soap_envelope_begin_out(soap);
		soap_putheader(soap);
		soap_body_begin_out(soap);
		soap_put_klrpt_UpdateReport(soap, &soap_tmp_klrpt_UpdateReport, "klrpt-UpdateReport", "");
		soap_body_end_out(soap);
		soap_envelope_end_out(soap);
	}
	if (soap_connect(soap, URL, action)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put_klrpt_UpdateReport(soap, &soap_tmp_klrpt_UpdateReport, "klrpt-UpdateReport", "")
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap_closesock(soap);
	soap_default_klrpt_UpdateReportResponse(soap, &r);
	if (soap_begin_recv(soap)
	 || soap_envelope_begin_in(soap)
	 || soap_recv_header(soap)
	 || soap_body_begin_in(soap))
		return soap_closesock(soap);
	soap_get_klrpt_UpdateReportResponse(soap, &r, "klrpt-UpdateReportResponse", "");
	if (soap->error)
	{	if (soap->error == SOAP_TAG_MISMATCH && soap->level == 2)
			return soap_recv_fault(soap);
		return soap_closesock(soap);
	}
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
#ifndef WITH_LEANER
	 || soap_resolve_attachments(soap)
#endif
	 || soap_end_recv(soap))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

SOAP_FMAC5 int SOAP_FMAC6 soap_call_klrpt_DeleteReport(struct soap *soap, const char *URL, const char *action, long reportId, struct klrpt_DeleteReportResponse &r)
{
	struct klrpt_DeleteReport soap_tmp_klrpt_DeleteReport;
	soap->encodingStyle = NULL;
	soap_tmp_klrpt_DeleteReport.reportId=reportId;
	soap_begin(soap);
	soap_serializeheader(soap);
	soap_serialize_klrpt_DeleteReport(soap, &soap_tmp_klrpt_DeleteReport);
	soap_begin_count(soap);
	if (soap->mode & SOAP_IO_LENGTH)
	{	soap_envelope_begin_out(soap);
		soap_putheader(soap);
		soap_body_begin_out(soap);
		soap_put_klrpt_DeleteReport(soap, &soap_tmp_klrpt_DeleteReport, "klrpt-DeleteReport", "");
		soap_body_end_out(soap);
		soap_envelope_end_out(soap);
	}
	if (soap_connect(soap, URL, action)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put_klrpt_DeleteReport(soap, &soap_tmp_klrpt_DeleteReport, "klrpt-DeleteReport", "")
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap_closesock(soap);
	soap_default_klrpt_DeleteReportResponse(soap, &r);
	if (soap_begin_recv(soap)
	 || soap_envelope_begin_in(soap)
	 || soap_recv_header(soap)
	 || soap_body_begin_in(soap))
		return soap_closesock(soap);
	soap_get_klrpt_DeleteReportResponse(soap, &r, "klrpt-DeleteReportResponse", "");
	if (soap->error)
	{	if (soap->error == SOAP_TAG_MISMATCH && soap->level == 2)
			return soap_recv_fault(soap);
		return soap_closesock(soap);
	}
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
#ifndef WITH_LEANER
	 || soap_resolve_attachments(soap)
#endif
	 || soap_end_recv(soap))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

SOAP_FMAC5 int SOAP_FMAC6 soap_call_klrpt_ExecuteReport(struct soap *soap, const char *URL, const char *action, long reportId, struct klrpt_input input, struct klrpt_ExecuteReportResponse &r)
{
	struct klrpt_ExecuteReport soap_tmp_klrpt_ExecuteReport;
	soap->encodingStyle = NULL;
	soap_tmp_klrpt_ExecuteReport.reportId=reportId;
	soap_tmp_klrpt_ExecuteReport.input=input;
	soap_begin(soap);
	soap_serializeheader(soap);
	soap_serialize_klrpt_ExecuteReport(soap, &soap_tmp_klrpt_ExecuteReport);
	soap_begin_count(soap);
	if (soap->mode & SOAP_IO_LENGTH)
	{	soap_envelope_begin_out(soap);
		soap_putheader(soap);
		soap_body_begin_out(soap);
		soap_put_klrpt_ExecuteReport(soap, &soap_tmp_klrpt_ExecuteReport, "klrpt-ExecuteReport", "");
		soap_body_end_out(soap);
		soap_envelope_end_out(soap);
	}
	if (soap_connect(soap, URL, action)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put_klrpt_ExecuteReport(soap, &soap_tmp_klrpt_ExecuteReport, "klrpt-ExecuteReport", "")
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap_closesock(soap);
	soap_default_klrpt_ExecuteReportResponse(soap, &r);
	if (soap_begin_recv(soap)
	 || soap_envelope_begin_in(soap)
	 || soap_recv_header(soap)
	 || soap_body_begin_in(soap))
		return soap_closesock(soap);
	soap_get_klrpt_ExecuteReportResponse(soap, &r, "klrpt-ExecuteReportResponse", "");
	if (soap->error)
	{	if (soap->error == SOAP_TAG_MISMATCH && soap->level == 2)
			return soap_recv_fault(soap);
		return soap_closesock(soap);
	}
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
#ifndef WITH_LEANER
	 || soap_resolve_attachments(soap)
#endif
	 || soap_end_recv(soap))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

SOAP_FMAC5 int SOAP_FMAC6 soap_call_klrpt_GetConstantOutputForReportType(struct soap *soap, const char *URL, const char *action, long reportType, long xmlTargetType, struct klrpt_GetConstantOutputForReportTypeResponse &r)
{
	struct klrpt_GetConstantOutputForReportType soap_tmp_klrpt_GetConstantOutputForReportType;
	soap->encodingStyle = NULL;
	soap_tmp_klrpt_GetConstantOutputForReportType.reportType=reportType;
	soap_tmp_klrpt_GetConstantOutputForReportType.xmlTargetType=xmlTargetType;
	soap_begin(soap);
	soap_serializeheader(soap);
	soap_serialize_klrpt_GetConstantOutputForReportType(soap, &soap_tmp_klrpt_GetConstantOutputForReportType);
	soap_begin_count(soap);
	if (soap->mode & SOAP_IO_LENGTH)
	{	soap_envelope_begin_out(soap);
		soap_putheader(soap);
		soap_body_begin_out(soap);
		soap_put_klrpt_GetConstantOutputForReportType(soap, &soap_tmp_klrpt_GetConstantOutputForReportType, "klrpt-GetConstantOutputForReportType", "");
		soap_body_end_out(soap);
		soap_envelope_end_out(soap);
	}
	if (soap_connect(soap, URL, action)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put_klrpt_GetConstantOutputForReportType(soap, &soap_tmp_klrpt_GetConstantOutputForReportType, "klrpt-GetConstantOutputForReportType", "")
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap_closesock(soap);
	soap_default_klrpt_GetConstantOutputForReportTypeResponse(soap, &r);
	if (soap_begin_recv(soap)
	 || soap_envelope_begin_in(soap)
	 || soap_recv_header(soap)
	 || soap_body_begin_in(soap))
		return soap_closesock(soap);
	soap_get_klrpt_GetConstantOutputForReportTypeResponse(soap, &r, "klrpt-GetConstantOutputForReportTypeResponse", "");
	if (soap->error)
	{	if (soap->error == SOAP_TAG_MISMATCH && soap->level == 2)
			return soap_recv_fault(soap);
		return soap_closesock(soap);
	}
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
#ifndef WITH_LEANER
	 || soap_resolve_attachments(soap)
#endif
	 || soap_end_recv(soap))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

SOAP_FMAC5 int SOAP_FMAC6 soap_call_klrpt_CreateDefaultReportData(struct soap *soap, const char *URL, const char *action, long reportType, struct klrpt_CreateDefaultReportDataResponse &r)
{
	struct klrpt_CreateDefaultReportData soap_tmp_klrpt_CreateDefaultReportData;
	soap->encodingStyle = NULL;
	soap_tmp_klrpt_CreateDefaultReportData.reportType=reportType;
	soap_begin(soap);
	soap_serializeheader(soap);
	soap_serialize_klrpt_CreateDefaultReportData(soap, &soap_tmp_klrpt_CreateDefaultReportData);
	soap_begin_count(soap);
	if (soap->mode & SOAP_IO_LENGTH)
	{	soap_envelope_begin_out(soap);
		soap_putheader(soap);
		soap_body_begin_out(soap);
		soap_put_klrpt_CreateDefaultReportData(soap, &soap_tmp_klrpt_CreateDefaultReportData, "klrpt-CreateDefaultReportData", "");
		soap_body_end_out(soap);
		soap_envelope_end_out(soap);
	}
	if (soap_connect(soap, URL, action)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put_klrpt_CreateDefaultReportData(soap, &soap_tmp_klrpt_CreateDefaultReportData, "klrpt-CreateDefaultReportData", "")
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap_closesock(soap);
	soap_default_klrpt_CreateDefaultReportDataResponse(soap, &r);
	if (soap_begin_recv(soap)
	 || soap_envelope_begin_in(soap)
	 || soap_recv_header(soap)
	 || soap_body_begin_in(soap))
		return soap_closesock(soap);
	soap_get_klrpt_CreateDefaultReportDataResponse(soap, &r, "klrpt-CreateDefaultReportDataResponse", "");
	if (soap->error)
	{	if (soap->error == SOAP_TAG_MISMATCH && soap->level == 2)
			return soap_recv_fault(soap);
		return soap_closesock(soap);
	}
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
#ifndef WITH_LEANER
	 || soap_resolve_attachments(soap)
#endif
	 || soap_end_recv(soap))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

SOAP_FMAC5 int SOAP_FMAC6 soap_call_klrpt_ExecuteReportAsync(struct soap *soap, const char *URL, const char *action, long reportId, wchar_t *wstrAsyncRequestId, struct klrpt_input input, struct klrpt_ExecuteReportAsyncResponse &r)
{
	struct klrpt_ExecuteReportAsync soap_tmp_klrpt_ExecuteReportAsync;
	soap->encodingStyle = NULL;
	soap_tmp_klrpt_ExecuteReportAsync.reportId=reportId;
	soap_tmp_klrpt_ExecuteReportAsync.wstrAsyncRequestId=wstrAsyncRequestId;
	soap_tmp_klrpt_ExecuteReportAsync.input=input;
	soap_begin(soap);
	soap_serializeheader(soap);
	soap_serialize_klrpt_ExecuteReportAsync(soap, &soap_tmp_klrpt_ExecuteReportAsync);
	soap_begin_count(soap);
	if (soap->mode & SOAP_IO_LENGTH)
	{	soap_envelope_begin_out(soap);
		soap_putheader(soap);
		soap_body_begin_out(soap);
		soap_put_klrpt_ExecuteReportAsync(soap, &soap_tmp_klrpt_ExecuteReportAsync, "klrpt-ExecuteReportAsync", "");
		soap_body_end_out(soap);
		soap_envelope_end_out(soap);
	}
	if (soap_connect(soap, URL, action)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put_klrpt_ExecuteReportAsync(soap, &soap_tmp_klrpt_ExecuteReportAsync, "klrpt-ExecuteReportAsync", "")
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap_closesock(soap);
	soap_default_klrpt_ExecuteReportAsyncResponse(soap, &r);
	if (soap_begin_recv(soap)
	 || soap_envelope_begin_in(soap)
	 || soap_recv_header(soap)
	 || soap_body_begin_in(soap))
		return soap_closesock(soap);
	soap_get_klrpt_ExecuteReportAsyncResponse(soap, &r, "klrpt-ExecuteReportAsyncResponse", "");
	if (soap->error)
	{	if (soap->error == SOAP_TAG_MISMATCH && soap->level == 2)
			return soap_recv_fault(soap);
		return soap_closesock(soap);
	}
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
#ifndef WITH_LEANER
	 || soap_resolve_attachments(soap)
#endif
	 || soap_end_recv(soap))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

SOAP_FMAC5 int SOAP_FMAC6 soap_call_klrpt_ExecuteReportAsyncCancel(struct soap *soap, const char *URL, const char *action, wchar_t *wstrAsyncRequestId, struct klrpt_ExecuteReportAsyncCancelResponse &r)
{
	struct klrpt_ExecuteReportAsyncCancel soap_tmp_klrpt_ExecuteReportAsyncCancel;
	soap->encodingStyle = NULL;
	soap_tmp_klrpt_ExecuteReportAsyncCancel.wstrAsyncRequestId=wstrAsyncRequestId;
	soap_begin(soap);
	soap_serializeheader(soap);
	soap_serialize_klrpt_ExecuteReportAsyncCancel(soap, &soap_tmp_klrpt_ExecuteReportAsyncCancel);
	soap_begin_count(soap);
	if (soap->mode & SOAP_IO_LENGTH)
	{	soap_envelope_begin_out(soap);
		soap_putheader(soap);
		soap_body_begin_out(soap);
		soap_put_klrpt_ExecuteReportAsyncCancel(soap, &soap_tmp_klrpt_ExecuteReportAsyncCancel, "klrpt-ExecuteReportAsyncCancel", "");
		soap_body_end_out(soap);
		soap_envelope_end_out(soap);
	}
	if (soap_connect(soap, URL, action)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put_klrpt_ExecuteReportAsyncCancel(soap, &soap_tmp_klrpt_ExecuteReportAsyncCancel, "klrpt-ExecuteReportAsyncCancel", "")
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap_closesock(soap);
	soap_default_klrpt_ExecuteReportAsyncCancelResponse(soap, &r);
	if (soap_begin_recv(soap)
	 || soap_envelope_begin_in(soap)
	 || soap_recv_header(soap)
	 || soap_body_begin_in(soap))
		return soap_closesock(soap);
	soap_get_klrpt_ExecuteReportAsyncCancelResponse(soap, &r, "klrpt-ExecuteReportAsyncCancelResponse", "");
	if (soap->error)
	{	if (soap->error == SOAP_TAG_MISMATCH && soap->level == 2)
			return soap_recv_fault(soap);
		return soap_closesock(soap);
	}
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
#ifndef WITH_LEANER
	 || soap_resolve_attachments(soap)
#endif
	 || soap_end_recv(soap))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

SOAP_FMAC5 int SOAP_FMAC6 soap_call_klrpt_ExecuteReportAsyncGetData(struct soap *soap, const char *URL, const char *action, wchar_t *wstrAsyncRequestId, long nMaxDataChunkSize, struct klrpt_ExecuteReportAsyncGetDataResponse &r)
{
	struct klrpt_ExecuteReportAsyncGetData soap_tmp_klrpt_ExecuteReportAsyncGetData;
	soap->encodingStyle = NULL;
	soap_tmp_klrpt_ExecuteReportAsyncGetData.wstrAsyncRequestId=wstrAsyncRequestId;
	soap_tmp_klrpt_ExecuteReportAsyncGetData.nMaxDataChunkSize=nMaxDataChunkSize;
	soap_begin(soap);
	soap_serializeheader(soap);
	soap_serialize_klrpt_ExecuteReportAsyncGetData(soap, &soap_tmp_klrpt_ExecuteReportAsyncGetData);
	soap_begin_count(soap);
	if (soap->mode & SOAP_IO_LENGTH)
	{	soap_envelope_begin_out(soap);
		soap_putheader(soap);
		soap_body_begin_out(soap);
		soap_put_klrpt_ExecuteReportAsyncGetData(soap, &soap_tmp_klrpt_ExecuteReportAsyncGetData, "klrpt-ExecuteReportAsyncGetData", "");
		soap_body_end_out(soap);
		soap_envelope_end_out(soap);
	}
	if (soap_connect(soap, URL, action)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put_klrpt_ExecuteReportAsyncGetData(soap, &soap_tmp_klrpt_ExecuteReportAsyncGetData, "klrpt-ExecuteReportAsyncGetData", "")
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap_closesock(soap);
	soap_default_klrpt_ExecuteReportAsyncGetDataResponse(soap, &r);
	if (soap_begin_recv(soap)
	 || soap_envelope_begin_in(soap)
	 || soap_recv_header(soap)
	 || soap_body_begin_in(soap))
		return soap_closesock(soap);
	soap_get_klrpt_ExecuteReportAsyncGetDataResponse(soap, &r, "klrpt-ExecuteReportAsyncGetDataResponse", "");
	if (soap->error)
	{	if (soap->error == SOAP_TAG_MISMATCH && soap->level == 2)
			return soap_recv_fault(soap);
		return soap_closesock(soap);
	}
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
#ifndef WITH_LEANER
	 || soap_resolve_attachments(soap)
#endif
	 || soap_end_recv(soap))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

SOAP_FMAC5 int SOAP_FMAC6 soap_call_klrpt_ExecuteSlaveReportAsync(struct soap *soap, const char *URL, const char *action, struct klrpt_common commonData, struct klrpt_details details, param__params paramLocalData, wchar_t *wstrAsyncRequestId, long nTimeoutInSec, struct klrpt_ExecuteSlaveReportAsyncResponse &r)
{
	struct klrpt_ExecuteSlaveReportAsync soap_tmp_klrpt_ExecuteSlaveReportAsync;
	soap->encodingStyle = NULL;
	soap_tmp_klrpt_ExecuteSlaveReportAsync.commonData=commonData;
	soap_tmp_klrpt_ExecuteSlaveReportAsync.details=details;
	soap_tmp_klrpt_ExecuteSlaveReportAsync.paramLocalData=paramLocalData;
	soap_tmp_klrpt_ExecuteSlaveReportAsync.wstrAsyncRequestId=wstrAsyncRequestId;
	soap_tmp_klrpt_ExecuteSlaveReportAsync.nTimeoutInSec=nTimeoutInSec;
	soap_begin(soap);
	soap_serializeheader(soap);
	soap_serialize_klrpt_ExecuteSlaveReportAsync(soap, &soap_tmp_klrpt_ExecuteSlaveReportAsync);
	soap_begin_count(soap);
	if (soap->mode & SOAP_IO_LENGTH)
	{	soap_envelope_begin_out(soap);
		soap_putheader(soap);
		soap_body_begin_out(soap);
		soap_put_klrpt_ExecuteSlaveReportAsync(soap, &soap_tmp_klrpt_ExecuteSlaveReportAsync, "klrpt-ExecuteSlaveReportAsync", "");
		soap_body_end_out(soap);
		soap_envelope_end_out(soap);
	}
	if (soap_connect(soap, URL, action)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put_klrpt_ExecuteSlaveReportAsync(soap, &soap_tmp_klrpt_ExecuteSlaveReportAsync, "klrpt-ExecuteSlaveReportAsync", "")
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap_closesock(soap);
	soap_default_klrpt_ExecuteSlaveReportAsyncResponse(soap, &r);
	if (soap_begin_recv(soap)
	 || soap_envelope_begin_in(soap)
	 || soap_recv_header(soap)
	 || soap_body_begin_in(soap))
		return soap_closesock(soap);
	soap_get_klrpt_ExecuteSlaveReportAsyncResponse(soap, &r, "klrpt-ExecuteSlaveReportAsyncResponse", "");
	if (soap->error)
	{	if (soap->error == SOAP_TAG_MISMATCH && soap->level == 2)
			return soap_recv_fault(soap);
		return soap_closesock(soap);
	}
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
#ifndef WITH_LEANER
	 || soap_resolve_attachments(soap)
#endif
	 || soap_end_recv(soap))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

SOAP_FMAC5 int SOAP_FMAC6 soap_call_klrpt_ExecuteSlaveReportAsyncCancel(struct soap *soap, const char *URL, const char *action, wchar_t *wstrAsyncRequestId, struct klrpt_ExecuteSlaveReportAsyncCancelResponse &r)
{
	struct klrpt_ExecuteSlaveReportAsyncCancel soap_tmp_klrpt_ExecuteSlaveReportAsyncCancel;
	soap->encodingStyle = NULL;
	soap_tmp_klrpt_ExecuteSlaveReportAsyncCancel.wstrAsyncRequestId=wstrAsyncRequestId;
	soap_begin(soap);
	soap_serializeheader(soap);
	soap_serialize_klrpt_ExecuteSlaveReportAsyncCancel(soap, &soap_tmp_klrpt_ExecuteSlaveReportAsyncCancel);
	soap_begin_count(soap);
	if (soap->mode & SOAP_IO_LENGTH)
	{	soap_envelope_begin_out(soap);
		soap_putheader(soap);
		soap_body_begin_out(soap);
		soap_put_klrpt_ExecuteSlaveReportAsyncCancel(soap, &soap_tmp_klrpt_ExecuteSlaveReportAsyncCancel, "klrpt-ExecuteSlaveReportAsyncCancel", "");
		soap_body_end_out(soap);
		soap_envelope_end_out(soap);
	}
	if (soap_connect(soap, URL, action)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put_klrpt_ExecuteSlaveReportAsyncCancel(soap, &soap_tmp_klrpt_ExecuteSlaveReportAsyncCancel, "klrpt-ExecuteSlaveReportAsyncCancel", "")
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap_closesock(soap);
	soap_default_klrpt_ExecuteSlaveReportAsyncCancelResponse(soap, &r);
	if (soap_begin_recv(soap)
	 || soap_envelope_begin_in(soap)
	 || soap_recv_header(soap)
	 || soap_body_begin_in(soap))
		return soap_closesock(soap);
	soap_get_klrpt_ExecuteSlaveReportAsyncCancelResponse(soap, &r, "klrpt-ExecuteSlaveReportAsyncCancelResponse", "");
	if (soap->error)
	{	if (soap->error == SOAP_TAG_MISMATCH && soap->level == 2)
			return soap_recv_fault(soap);
		return soap_closesock(soap);
	}
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
#ifndef WITH_LEANER
	 || soap_resolve_attachments(soap)
#endif
	 || soap_end_recv(soap))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

SOAP_FMAC5 int SOAP_FMAC6 soap_call_klrpt_ExecuteSlaveReportAsyncGetData(struct soap *soap, const char *URL, const char *action, wchar_t *wstrAsyncRequestId, long nRecordsCount, struct klrpt_ExecuteSlaveReportAsyncGetDataResponse &r)
{
	struct klrpt_ExecuteSlaveReportAsyncGetData soap_tmp_klrpt_ExecuteSlaveReportAsyncGetData;
	soap->encodingStyle = NULL;
	soap_tmp_klrpt_ExecuteSlaveReportAsyncGetData.wstrAsyncRequestId=wstrAsyncRequestId;
	soap_tmp_klrpt_ExecuteSlaveReportAsyncGetData.nRecordsCount=nRecordsCount;
	soap_begin(soap);
	soap_serializeheader(soap);
	soap_serialize_klrpt_ExecuteSlaveReportAsyncGetData(soap, &soap_tmp_klrpt_ExecuteSlaveReportAsyncGetData);
	soap_begin_count(soap);
	if (soap->mode & SOAP_IO_LENGTH)
	{	soap_envelope_begin_out(soap);
		soap_putheader(soap);
		soap_body_begin_out(soap);
		soap_put_klrpt_ExecuteSlaveReportAsyncGetData(soap, &soap_tmp_klrpt_ExecuteSlaveReportAsyncGetData, "klrpt-ExecuteSlaveReportAsyncGetData", "");
		soap_body_end_out(soap);
		soap_envelope_end_out(soap);
	}
	if (soap_connect(soap, URL, action)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put_klrpt_ExecuteSlaveReportAsyncGetData(soap, &soap_tmp_klrpt_ExecuteSlaveReportAsyncGetData, "klrpt-ExecuteSlaveReportAsyncGetData", "")
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap_closesock(soap);
	soap_default_klrpt_ExecuteSlaveReportAsyncGetDataResponse(soap, &r);
	if (soap_begin_recv(soap)
	 || soap_envelope_begin_in(soap)
	 || soap_recv_header(soap)
	 || soap_body_begin_in(soap))
		return soap_closesock(soap);
	soap_get_klrpt_ExecuteSlaveReportAsyncGetDataResponse(soap, &r, "klrpt-ExecuteSlaveReportAsyncGetDataResponse", "");
	if (soap->error)
	{	if (soap->error == SOAP_TAG_MISMATCH && soap->level == 2)
			return soap_recv_fault(soap);
		return soap_closesock(soap);
	}
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
#ifndef WITH_LEANER
	 || soap_resolve_attachments(soap)
#endif
	 || soap_end_recv(soap))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

SOAP_FMAC5 int SOAP_FMAC6 soap_call_klrpt_RequestStatisticsData(struct soap *soap, const char *URL, const char *action, param__params paramRequestParams, wchar_t *wstrRequestId, struct klrpt_RequestStatisticsDataResponse &r)
{
	struct klrpt_RequestStatisticsData soap_tmp_klrpt_RequestStatisticsData;
	soap->encodingStyle = NULL;
	soap_tmp_klrpt_RequestStatisticsData.paramRequestParams=paramRequestParams;
	soap_tmp_klrpt_RequestStatisticsData.wstrRequestId=wstrRequestId;
	soap_begin(soap);
	soap_serializeheader(soap);
	soap_serialize_klrpt_RequestStatisticsData(soap, &soap_tmp_klrpt_RequestStatisticsData);
	soap_begin_count(soap);
	if (soap->mode & SOAP_IO_LENGTH)
	{	soap_envelope_begin_out(soap);
		soap_putheader(soap);
		soap_body_begin_out(soap);
		soap_put_klrpt_RequestStatisticsData(soap, &soap_tmp_klrpt_RequestStatisticsData, "klrpt-RequestStatisticsData", "");
		soap_body_end_out(soap);
		soap_envelope_end_out(soap);
	}
	if (soap_connect(soap, URL, action)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put_klrpt_RequestStatisticsData(soap, &soap_tmp_klrpt_RequestStatisticsData, "klrpt-RequestStatisticsData", "")
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap_closesock(soap);
	soap_default_klrpt_RequestStatisticsDataResponse(soap, &r);
	if (soap_begin_recv(soap)
	 || soap_envelope_begin_in(soap)
	 || soap_recv_header(soap)
	 || soap_body_begin_in(soap))
		return soap_closesock(soap);
	soap_get_klrpt_RequestStatisticsDataResponse(soap, &r, "klrpt-RequestStatisticsDataResponse", "");
	if (soap->error)
	{	if (soap->error == SOAP_TAG_MISMATCH && soap->level == 2)
			return soap_recv_fault(soap);
		return soap_closesock(soap);
	}
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
#ifndef WITH_LEANER
	 || soap_resolve_attachments(soap)
#endif
	 || soap_end_recv(soap))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

SOAP_FMAC5 int SOAP_FMAC6 soap_call_klrpt_CancelStatisticsRequest(struct soap *soap, const char *URL, const char *action, wchar_t *wstrRequestId, struct klrpt_CancelStatisticsRequestResponse &r)
{
	struct klrpt_CancelStatisticsRequest soap_tmp_klrpt_CancelStatisticsRequest;
	soap->encodingStyle = NULL;
	soap_tmp_klrpt_CancelStatisticsRequest.wstrRequestId=wstrRequestId;
	soap_begin(soap);
	soap_serializeheader(soap);
	soap_serialize_klrpt_CancelStatisticsRequest(soap, &soap_tmp_klrpt_CancelStatisticsRequest);
	soap_begin_count(soap);
	if (soap->mode & SOAP_IO_LENGTH)
	{	soap_envelope_begin_out(soap);
		soap_putheader(soap);
		soap_body_begin_out(soap);
		soap_put_klrpt_CancelStatisticsRequest(soap, &soap_tmp_klrpt_CancelStatisticsRequest, "klrpt-CancelStatisticsRequest", "");
		soap_body_end_out(soap);
		soap_envelope_end_out(soap);
	}
	if (soap_connect(soap, URL, action)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put_klrpt_CancelStatisticsRequest(soap, &soap_tmp_klrpt_CancelStatisticsRequest, "klrpt-CancelStatisticsRequest", "")
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap_closesock(soap);
	soap_default_klrpt_CancelStatisticsRequestResponse(soap, &r);
	if (soap_begin_recv(soap)
	 || soap_envelope_begin_in(soap)
	 || soap_recv_header(soap)
	 || soap_body_begin_in(soap))
		return soap_closesock(soap);
	soap_get_klrpt_CancelStatisticsRequestResponse(soap, &r, "klrpt-CancelStatisticsRequestResponse", "");
	if (soap->error)
	{	if (soap->error == SOAP_TAG_MISMATCH && soap->level == 2)
			return soap_recv_fault(soap);
		return soap_closesock(soap);
	}
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
#ifndef WITH_LEANER
	 || soap_resolve_attachments(soap)
#endif
	 || soap_end_recv(soap))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

SOAP_FMAC5 int SOAP_FMAC6 soap_call_klrpt_GetStatisticsData(struct soap *soap, const char *URL, const char *action, wchar_t *wstrRequestId, struct klrpt_GetStatisticsDataResponse &r)
{
	struct klrpt_GetStatisticsData soap_tmp_klrpt_GetStatisticsData;
	soap->encodingStyle = NULL;
	soap_tmp_klrpt_GetStatisticsData.wstrRequestId=wstrRequestId;
	soap_begin(soap);
	soap_serializeheader(soap);
	soap_serialize_klrpt_GetStatisticsData(soap, &soap_tmp_klrpt_GetStatisticsData);
	soap_begin_count(soap);
	if (soap->mode & SOAP_IO_LENGTH)
	{	soap_envelope_begin_out(soap);
		soap_putheader(soap);
		soap_body_begin_out(soap);
		soap_put_klrpt_GetStatisticsData(soap, &soap_tmp_klrpt_GetStatisticsData, "klrpt-GetStatisticsData", "");
		soap_body_end_out(soap);
		soap_envelope_end_out(soap);
	}
	if (soap_connect(soap, URL, action)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put_klrpt_GetStatisticsData(soap, &soap_tmp_klrpt_GetStatisticsData, "klrpt-GetStatisticsData", "")
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap_closesock(soap);
	soap_default_klrpt_GetStatisticsDataResponse(soap, &r);
	if (soap_begin_recv(soap)
	 || soap_envelope_begin_in(soap)
	 || soap_recv_header(soap)
	 || soap_body_begin_in(soap))
		return soap_closesock(soap);
	soap_get_klrpt_GetStatisticsDataResponse(soap, &r, "klrpt-GetStatisticsDataResponse", "");
	if (soap->error)
	{	if (soap->error == SOAP_TAG_MISMATCH && soap->level == 2)
			return soap_recv_fault(soap);
		return soap_closesock(soap);
	}
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
#ifndef WITH_LEANER
	 || soap_resolve_attachments(soap)
#endif
	 || soap_end_recv(soap))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

SOAP_FMAC5 int SOAP_FMAC6 soap_call_klrpt_GetFilterSettings(struct soap *soap, const char *URL, const char *action, long reportType, struct klrpt_GetFilterSettingsResponse &r)
{
	struct klrpt_GetFilterSettings soap_tmp_klrpt_GetFilterSettings;
	soap->encodingStyle = NULL;
	soap_tmp_klrpt_GetFilterSettings.reportType=reportType;
	soap_begin(soap);
	soap_serializeheader(soap);
	soap_serialize_klrpt_GetFilterSettings(soap, &soap_tmp_klrpt_GetFilterSettings);
	soap_begin_count(soap);
	if (soap->mode & SOAP_IO_LENGTH)
	{	soap_envelope_begin_out(soap);
		soap_putheader(soap);
		soap_body_begin_out(soap);
		soap_put_klrpt_GetFilterSettings(soap, &soap_tmp_klrpt_GetFilterSettings, "klrpt-GetFilterSettings", "");
		soap_body_end_out(soap);
		soap_envelope_end_out(soap);
	}
	if (soap_connect(soap, URL, action)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put_klrpt_GetFilterSettings(soap, &soap_tmp_klrpt_GetFilterSettings, "klrpt-GetFilterSettings", "")
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap_closesock(soap);
	soap_default_klrpt_GetFilterSettingsResponse(soap, &r);
	if (soap_begin_recv(soap)
	 || soap_envelope_begin_in(soap)
	 || soap_recv_header(soap)
	 || soap_body_begin_in(soap))
		return soap_closesock(soap);
	soap_get_klrpt_GetFilterSettingsResponse(soap, &r, "klrpt-GetFilterSettingsResponse", "");
	if (soap->error)
	{	if (soap->error == SOAP_TAG_MISMATCH && soap->level == 2)
			return soap_recv_fault(soap);
		return soap_closesock(soap);
	}
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
#ifndef WITH_LEANER
	 || soap_resolve_attachments(soap)
#endif
	 || soap_end_recv(soap))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

SOAP_FMAC5 int SOAP_FMAC6 soap_call_klrpt_ExecuteReportAsyncCancelWaitingForSlaves(struct soap *soap, const char *URL, const char *action, wchar_t *wstrAsyncRequestId, struct klrpt_ExecuteReportAsyncCancelWaitingForSlavesResponse &r)
{
	struct klrpt_ExecuteReportAsyncCancelWaitingForSlaves soap_tmp_klrpt_ExecuteReportAsyncCancelWaitingForSlaves;
	soap->encodingStyle = NULL;
	soap_tmp_klrpt_ExecuteReportAsyncCancelWaitingForSlaves.wstrAsyncRequestId=wstrAsyncRequestId;
	soap_begin(soap);
	soap_serializeheader(soap);
	soap_serialize_klrpt_ExecuteReportAsyncCancelWaitingForSlaves(soap, &soap_tmp_klrpt_ExecuteReportAsyncCancelWaitingForSlaves);
	soap_begin_count(soap);
	if (soap->mode & SOAP_IO_LENGTH)
	{	soap_envelope_begin_out(soap);
		soap_putheader(soap);
		soap_body_begin_out(soap);
		soap_put_klrpt_ExecuteReportAsyncCancelWaitingForSlaves(soap, &soap_tmp_klrpt_ExecuteReportAsyncCancelWaitingForSlaves, "klrpt-ExecuteReportAsyncCancelWaitingForSlaves", "");
		soap_body_end_out(soap);
		soap_envelope_end_out(soap);
	}
	if (soap_connect(soap, URL, action)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put_klrpt_ExecuteReportAsyncCancelWaitingForSlaves(soap, &soap_tmp_klrpt_ExecuteReportAsyncCancelWaitingForSlaves, "klrpt-ExecuteReportAsyncCancelWaitingForSlaves", "")
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap_closesock(soap);
	soap_default_klrpt_ExecuteReportAsyncCancelWaitingForSlavesResponse(soap, &r);
	if (soap_begin_recv(soap)
	 || soap_envelope_begin_in(soap)
	 || soap_recv_header(soap)
	 || soap_body_begin_in(soap))
		return soap_closesock(soap);
	soap_get_klrpt_ExecuteReportAsyncCancelWaitingForSlavesResponse(soap, &r, "klrpt-ExecuteReportAsyncCancelWaitingForSlavesResponse", "");
	if (soap->error)
	{	if (soap->error == SOAP_TAG_MISMATCH && soap->level == 2)
			return soap_recv_fault(soap);
		return soap_closesock(soap);
	}
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
#ifndef WITH_LEANER
	 || soap_resolve_attachments(soap)
#endif
	 || soap_end_recv(soap))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

SOAP_FMAC5 int SOAP_FMAC6 soap_call_klrpt_ResetStatisticsData(struct soap *soap, const char *URL, const char *action, param__params paramRequestParams, struct klrpt_ResetStatisticsDataResponse &r)
{
	struct klrpt_ResetStatisticsData soap_tmp_klrpt_ResetStatisticsData;
	soap->encodingStyle = NULL;
	soap_tmp_klrpt_ResetStatisticsData.paramRequestParams=paramRequestParams;
	soap_begin(soap);
	soap_serializeheader(soap);
	soap_serialize_klrpt_ResetStatisticsData(soap, &soap_tmp_klrpt_ResetStatisticsData);
	soap_begin_count(soap);
	if (soap->mode & SOAP_IO_LENGTH)
	{	soap_envelope_begin_out(soap);
		soap_putheader(soap);
		soap_body_begin_out(soap);
		soap_put_klrpt_ResetStatisticsData(soap, &soap_tmp_klrpt_ResetStatisticsData, "klrpt-ResetStatisticsData", "");
		soap_body_end_out(soap);
		soap_envelope_end_out(soap);
	}
	if (soap_connect(soap, URL, action)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put_klrpt_ResetStatisticsData(soap, &soap_tmp_klrpt_ResetStatisticsData, "klrpt-ResetStatisticsData", "")
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap_closesock(soap);
	soap_default_klrpt_ResetStatisticsDataResponse(soap, &r);
	if (soap_begin_recv(soap)
	 || soap_envelope_begin_in(soap)
	 || soap_recv_header(soap)
	 || soap_body_begin_in(soap))
		return soap_closesock(soap);
	soap_get_klrpt_ResetStatisticsDataResponse(soap, &r, "klrpt-ResetStatisticsDataResponse", "");
	if (soap->error)
	{	if (soap->error == SOAP_TAG_MISMATCH && soap->level == 2)
			return soap_recv_fault(soap);
		return soap_closesock(soap);
	}
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
#ifndef WITH_LEANER
	 || soap_resolve_attachments(soap)
#endif
	 || soap_end_recv(soap))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

SOAP_FMAC5 int SOAP_FMAC6 soap_call_klsrvh_GetChildServers(struct soap *soap, const char *URL, const char *action, long nGroupId, struct klsrvh_GetChildServersResponse &r)
{
	struct klsrvh_GetChildServers soap_tmp_klsrvh_GetChildServers;
	soap->encodingStyle = NULL;
	soap_tmp_klsrvh_GetChildServers.nGroupId=nGroupId;
	soap_begin(soap);
	soap_serializeheader(soap);
	soap_serialize_klsrvh_GetChildServers(soap, &soap_tmp_klsrvh_GetChildServers);
	soap_begin_count(soap);
	if (soap->mode & SOAP_IO_LENGTH)
	{	soap_envelope_begin_out(soap);
		soap_putheader(soap);
		soap_body_begin_out(soap);
		soap_put_klsrvh_GetChildServers(soap, &soap_tmp_klsrvh_GetChildServers, "klsrvh-GetChildServers", "");
		soap_body_end_out(soap);
		soap_envelope_end_out(soap);
	}
	if (soap_connect(soap, URL, action)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put_klsrvh_GetChildServers(soap, &soap_tmp_klsrvh_GetChildServers, "klsrvh-GetChildServers", "")
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap_closesock(soap);
	soap_default_klsrvh_GetChildServersResponse(soap, &r);
	if (soap_begin_recv(soap)
	 || soap_envelope_begin_in(soap)
	 || soap_recv_header(soap)
	 || soap_body_begin_in(soap))
		return soap_closesock(soap);
	soap_get_klsrvh_GetChildServersResponse(soap, &r, "klsrvh-GetChildServersResponse", "");
	if (soap->error)
	{	if (soap->error == SOAP_TAG_MISMATCH && soap->level == 2)
			return soap_recv_fault(soap);
		return soap_closesock(soap);
	}
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
#ifndef WITH_LEANER
	 || soap_resolve_attachments(soap)
#endif
	 || soap_end_recv(soap))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

SOAP_FMAC5 int SOAP_FMAC6 soap_call_klsrvh_GetServerInfo(struct soap *soap, const char *URL, const char *action, long nId, klsrvh_wstrings fields, struct klsrvh_GetServerInfoResponse &r)
{
	struct klsrvh_GetServerInfo soap_tmp_klsrvh_GetServerInfo;
	soap->encodingStyle = NULL;
	soap_tmp_klsrvh_GetServerInfo.nId=nId;
	soap_tmp_klsrvh_GetServerInfo.fields=fields;
	soap_begin(soap);
	soap_serializeheader(soap);
	soap_serialize_klsrvh_GetServerInfo(soap, &soap_tmp_klsrvh_GetServerInfo);
	soap_begin_count(soap);
	if (soap->mode & SOAP_IO_LENGTH)
	{	soap_envelope_begin_out(soap);
		soap_putheader(soap);
		soap_body_begin_out(soap);
		soap_put_klsrvh_GetServerInfo(soap, &soap_tmp_klsrvh_GetServerInfo, "klsrvh-GetServerInfo", "");
		soap_body_end_out(soap);
		soap_envelope_end_out(soap);
	}
	if (soap_connect(soap, URL, action)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put_klsrvh_GetServerInfo(soap, &soap_tmp_klsrvh_GetServerInfo, "klsrvh-GetServerInfo", "")
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap_closesock(soap);
	soap_default_klsrvh_GetServerInfoResponse(soap, &r);
	if (soap_begin_recv(soap)
	 || soap_envelope_begin_in(soap)
	 || soap_recv_header(soap)
	 || soap_body_begin_in(soap))
		return soap_closesock(soap);
	soap_get_klsrvh_GetServerInfoResponse(soap, &r, "klsrvh-GetServerInfoResponse", "");
	if (soap->error)
	{	if (soap->error == SOAP_TAG_MISMATCH && soap->level == 2)
			return soap_recv_fault(soap);
		return soap_closesock(soap);
	}
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
#ifndef WITH_LEANER
	 || soap_resolve_attachments(soap)
#endif
	 || soap_end_recv(soap))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

SOAP_FMAC5 int SOAP_FMAC6 soap_call_klsrvh_RegisterServer(struct soap *soap, const char *URL, const char *action, param__params baseInfo, param__params addInfo, struct klsrvh_RegisterServerResponse &r)
{
	struct klsrvh_RegisterServer soap_tmp_klsrvh_RegisterServer;
	soap->encodingStyle = NULL;
	soap_tmp_klsrvh_RegisterServer.baseInfo=baseInfo;
	soap_tmp_klsrvh_RegisterServer.addInfo=addInfo;
	soap_begin(soap);
	soap_serializeheader(soap);
	soap_serialize_klsrvh_RegisterServer(soap, &soap_tmp_klsrvh_RegisterServer);
	soap_begin_count(soap);
	if (soap->mode & SOAP_IO_LENGTH)
	{	soap_envelope_begin_out(soap);
		soap_putheader(soap);
		soap_body_begin_out(soap);
		soap_put_klsrvh_RegisterServer(soap, &soap_tmp_klsrvh_RegisterServer, "klsrvh-RegisterServer", "");
		soap_body_end_out(soap);
		soap_envelope_end_out(soap);
	}
	if (soap_connect(soap, URL, action)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put_klsrvh_RegisterServer(soap, &soap_tmp_klsrvh_RegisterServer, "klsrvh-RegisterServer", "")
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap_closesock(soap);
	soap_default_klsrvh_RegisterServerResponse(soap, &r);
	if (soap_begin_recv(soap)
	 || soap_envelope_begin_in(soap)
	 || soap_recv_header(soap)
	 || soap_body_begin_in(soap))
		return soap_closesock(soap);
	soap_get_klsrvh_RegisterServerResponse(soap, &r, "klsrvh-RegisterServerResponse", "");
	if (soap->error)
	{	if (soap->error == SOAP_TAG_MISMATCH && soap->level == 2)
			return soap_recv_fault(soap);
		return soap_closesock(soap);
	}
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
#ifndef WITH_LEANER
	 || soap_resolve_attachments(soap)
#endif
	 || soap_end_recv(soap))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

SOAP_FMAC5 int SOAP_FMAC6 soap_call_klsrvh_DelServer(struct soap *soap, const char *URL, const char *action, long nId, struct klsrvh_DelServerResponse &r)
{
	struct klsrvh_DelServer soap_tmp_klsrvh_DelServer;
	soap->encodingStyle = NULL;
	soap_tmp_klsrvh_DelServer.nId=nId;
	soap_begin(soap);
	soap_serializeheader(soap);
	soap_serialize_klsrvh_DelServer(soap, &soap_tmp_klsrvh_DelServer);
	soap_begin_count(soap);
	if (soap->mode & SOAP_IO_LENGTH)
	{	soap_envelope_begin_out(soap);
		soap_putheader(soap);
		soap_body_begin_out(soap);
		soap_put_klsrvh_DelServer(soap, &soap_tmp_klsrvh_DelServer, "klsrvh-DelServer", "");
		soap_body_end_out(soap);
		soap_envelope_end_out(soap);
	}
	if (soap_connect(soap, URL, action)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put_klsrvh_DelServer(soap, &soap_tmp_klsrvh_DelServer, "klsrvh-DelServer", "")
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap_closesock(soap);
	soap_default_klsrvh_DelServerResponse(soap, &r);
	if (soap_begin_recv(soap)
	 || soap_envelope_begin_in(soap)
	 || soap_recv_header(soap)
	 || soap_body_begin_in(soap))
		return soap_closesock(soap);
	soap_get_klsrvh_DelServerResponse(soap, &r, "klsrvh-DelServerResponse", "");
	if (soap->error)
	{	if (soap->error == SOAP_TAG_MISMATCH && soap->level == 2)
			return soap_recv_fault(soap);
		return soap_closesock(soap);
	}
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
#ifndef WITH_LEANER
	 || soap_resolve_attachments(soap)
#endif
	 || soap_end_recv(soap))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

SOAP_FMAC5 int SOAP_FMAC6 soap_call_klsrvh_UpdateServer(struct soap *soap, const char *URL, const char *action, long nId, param__params info, struct klsrvh_UpdateServerResponse &r)
{
	struct klsrvh_UpdateServer soap_tmp_klsrvh_UpdateServer;
	soap->encodingStyle = NULL;
	soap_tmp_klsrvh_UpdateServer.nId=nId;
	soap_tmp_klsrvh_UpdateServer.info=info;
	soap_begin(soap);
	soap_serializeheader(soap);
	soap_serialize_klsrvh_UpdateServer(soap, &soap_tmp_klsrvh_UpdateServer);
	soap_begin_count(soap);
	if (soap->mode & SOAP_IO_LENGTH)
	{	soap_envelope_begin_out(soap);
		soap_putheader(soap);
		soap_body_begin_out(soap);
		soap_put_klsrvh_UpdateServer(soap, &soap_tmp_klsrvh_UpdateServer, "klsrvh-UpdateServer", "");
		soap_body_end_out(soap);
		soap_envelope_end_out(soap);
	}
	if (soap_connect(soap, URL, action)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put_klsrvh_UpdateServer(soap, &soap_tmp_klsrvh_UpdateServer, "klsrvh-UpdateServer", "")
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap_closesock(soap);
	soap_default_klsrvh_UpdateServerResponse(soap, &r);
	if (soap_begin_recv(soap)
	 || soap_envelope_begin_in(soap)
	 || soap_recv_header(soap)
	 || soap_body_begin_in(soap))
		return soap_closesock(soap);
	soap_get_klsrvh_UpdateServerResponse(soap, &r, "klsrvh-UpdateServerResponse", "");
	if (soap->error)
	{	if (soap->error == SOAP_TAG_MISMATCH && soap->level == 2)
			return soap_recv_fault(soap);
		return soap_closesock(soap);
	}
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
#ifndef WITH_LEANER
	 || soap_resolve_attachments(soap)
#endif
	 || soap_end_recv(soap))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

SOAP_FMAC5 int SOAP_FMAC6 soap_call_klsrvh_InitialPingMaster(struct soap *soap, const char *URL, const char *action, param__params info, struct klsrvh_InitialPingMasterResponse &r)
{
	struct klsrvh_InitialPingMaster soap_tmp_klsrvh_InitialPingMaster;
	soap->encodingStyle = NULL;
	soap_tmp_klsrvh_InitialPingMaster.info=info;
	soap_begin(soap);
	soap_serializeheader(soap);
	soap_serialize_klsrvh_InitialPingMaster(soap, &soap_tmp_klsrvh_InitialPingMaster);
	soap_begin_count(soap);
	if (soap->mode & SOAP_IO_LENGTH)
	{	soap_envelope_begin_out(soap);
		soap_putheader(soap);
		soap_body_begin_out(soap);
		soap_put_klsrvh_InitialPingMaster(soap, &soap_tmp_klsrvh_InitialPingMaster, "klsrvh-InitialPingMaster", "");
		soap_body_end_out(soap);
		soap_envelope_end_out(soap);
	}
	if (soap_connect(soap, URL, action)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put_klsrvh_InitialPingMaster(soap, &soap_tmp_klsrvh_InitialPingMaster, "klsrvh-InitialPingMaster", "")
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap_closesock(soap);
	soap_default_klsrvh_InitialPingMasterResponse(soap, &r);
	if (soap_begin_recv(soap)
	 || soap_envelope_begin_in(soap)
	 || soap_recv_header(soap)
	 || soap_body_begin_in(soap))
		return soap_closesock(soap);
	soap_get_klsrvh_InitialPingMasterResponse(soap, &r, "klsrvh-InitialPingMasterResponse", "");
	if (soap->error)
	{	if (soap->error == SOAP_TAG_MISMATCH && soap->level == 2)
			return soap_recv_fault(soap);
		return soap_closesock(soap);
	}
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
#ifndef WITH_LEANER
	 || soap_resolve_attachments(soap)
#endif
	 || soap_end_recv(soap))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

SOAP_FMAC5 int SOAP_FMAC6 soap_call_klsrvh_PingMaster(struct soap *soap, const char *URL, const char *action, param__params info, struct klsrvh_PingMasterResponse &r)
{
	struct klsrvh_PingMaster soap_tmp_klsrvh_PingMaster;
	soap->encodingStyle = NULL;
	soap_tmp_klsrvh_PingMaster.info=info;
	soap_begin(soap);
	soap_serializeheader(soap);
	soap_serialize_klsrvh_PingMaster(soap, &soap_tmp_klsrvh_PingMaster);
	soap_begin_count(soap);
	if (soap->mode & SOAP_IO_LENGTH)
	{	soap_envelope_begin_out(soap);
		soap_putheader(soap);
		soap_body_begin_out(soap);
		soap_put_klsrvh_PingMaster(soap, &soap_tmp_klsrvh_PingMaster, "klsrvh-PingMaster", "");
		soap_body_end_out(soap);
		soap_envelope_end_out(soap);
	}
	if (soap_connect(soap, URL, action)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put_klsrvh_PingMaster(soap, &soap_tmp_klsrvh_PingMaster, "klsrvh-PingMaster", "")
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap_closesock(soap);
	soap_default_klsrvh_PingMasterResponse(soap, &r);
	if (soap_begin_recv(soap)
	 || soap_envelope_begin_in(soap)
	 || soap_recv_header(soap)
	 || soap_body_begin_in(soap))
		return soap_closesock(soap);
	soap_get_klsrvh_PingMasterResponse(soap, &r, "klsrvh-PingMasterResponse", "");
	if (soap->error)
	{	if (soap->error == SOAP_TAG_MISMATCH && soap->level == 2)
			return soap_recv_fault(soap);
		return soap_closesock(soap);
	}
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
#ifndef WITH_LEANER
	 || soap_resolve_attachments(soap)
#endif
	 || soap_end_recv(soap))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

SOAP_FMAC5 int SOAP_FMAC6 soap_call_klsrvh_PingSlave(struct soap *soap, const char *URL, const char *action, param__params info, struct klsrvh_PingSlaveResponse &r)
{
	struct klsrvh_PingSlave soap_tmp_klsrvh_PingSlave;
	soap->encodingStyle = NULL;
	soap_tmp_klsrvh_PingSlave.info=info;
	soap_begin(soap);
	soap_serializeheader(soap);
	soap_serialize_klsrvh_PingSlave(soap, &soap_tmp_klsrvh_PingSlave);
	soap_begin_count(soap);
	if (soap->mode & SOAP_IO_LENGTH)
	{	soap_envelope_begin_out(soap);
		soap_putheader(soap);
		soap_body_begin_out(soap);
		soap_put_klsrvh_PingSlave(soap, &soap_tmp_klsrvh_PingSlave, "klsrvh-PingSlave", "");
		soap_body_end_out(soap);
		soap_envelope_end_out(soap);
	}
	if (soap_connect(soap, URL, action)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put_klsrvh_PingSlave(soap, &soap_tmp_klsrvh_PingSlave, "klsrvh-PingSlave", "")
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap_closesock(soap);
	soap_default_klsrvh_PingSlaveResponse(soap, &r);
	if (soap_begin_recv(soap)
	 || soap_envelope_begin_in(soap)
	 || soap_recv_header(soap)
	 || soap_body_begin_in(soap))
		return soap_closesock(soap);
	soap_get_klsrvh_PingSlaveResponse(soap, &r, "klsrvh-PingSlaveResponse", "");
	if (soap->error)
	{	if (soap->error == SOAP_TAG_MISMATCH && soap->level == 2)
			return soap_recv_fault(soap);
		return soap_closesock(soap);
	}
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
#ifndef WITH_LEANER
	 || soap_resolve_attachments(soap)
#endif
	 || soap_end_recv(soap))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

SOAP_FMAC5 int SOAP_FMAC6 soap_call_klsrvh_ForceRetranslateUpdates(struct soap *soap, const char *URL, const char *action, param__params info, struct klsrvh_ForceRetranslateUpdatesResponse &r)
{
	struct klsrvh_ForceRetranslateUpdates soap_tmp_klsrvh_ForceRetranslateUpdates;
	soap->encodingStyle = NULL;
	soap_tmp_klsrvh_ForceRetranslateUpdates.info=info;
	soap_begin(soap);
	soap_serializeheader(soap);
	soap_serialize_klsrvh_ForceRetranslateUpdates(soap, &soap_tmp_klsrvh_ForceRetranslateUpdates);
	soap_begin_count(soap);
	if (soap->mode & SOAP_IO_LENGTH)
	{	soap_envelope_begin_out(soap);
		soap_putheader(soap);
		soap_body_begin_out(soap);
		soap_put_klsrvh_ForceRetranslateUpdates(soap, &soap_tmp_klsrvh_ForceRetranslateUpdates, "klsrvh-ForceRetranslateUpdates", "");
		soap_body_end_out(soap);
		soap_envelope_end_out(soap);
	}
	if (soap_connect(soap, URL, action)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put_klsrvh_ForceRetranslateUpdates(soap, &soap_tmp_klsrvh_ForceRetranslateUpdates, "klsrvh-ForceRetranslateUpdates", "")
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap_closesock(soap);
	soap_default_klsrvh_ForceRetranslateUpdatesResponse(soap, &r);
	if (soap_begin_recv(soap)
	 || soap_envelope_begin_in(soap)
	 || soap_recv_header(soap)
	 || soap_body_begin_in(soap))
		return soap_closesock(soap);
	soap_get_klsrvh_ForceRetranslateUpdatesResponse(soap, &r, "klsrvh-ForceRetranslateUpdatesResponse", "");
	if (soap->error)
	{	if (soap->error == SOAP_TAG_MISMATCH && soap->level == 2)
			return soap_recv_fault(soap);
		return soap_closesock(soap);
	}
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
#ifndef WITH_LEANER
	 || soap_resolve_attachments(soap)
#endif
	 || soap_end_recv(soap))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

SOAP_FMAC5 int SOAP_FMAC6 soap_call_klsrvh_DeliverReport(struct soap *soap, const char *URL, const char *action, wchar_t *wstrRequestId, long nRecipientDeliverLevel, long nSenderDeliverLevel, wchar_t *wstrSenderInstanceId, param__params parDeliveryParams, param__params parReportResult, struct klsrvh_DeliverReportResponse &r)
{
	struct klsrvh_DeliverReport soap_tmp_klsrvh_DeliverReport;
	soap->encodingStyle = NULL;
	soap_tmp_klsrvh_DeliverReport.wstrRequestId=wstrRequestId;
	soap_tmp_klsrvh_DeliverReport.nRecipientDeliverLevel=nRecipientDeliverLevel;
	soap_tmp_klsrvh_DeliverReport.nSenderDeliverLevel=nSenderDeliverLevel;
	soap_tmp_klsrvh_DeliverReport.wstrSenderInstanceId=wstrSenderInstanceId;
	soap_tmp_klsrvh_DeliverReport.parDeliveryParams=parDeliveryParams;
	soap_tmp_klsrvh_DeliverReport.parReportResult=parReportResult;
	soap_begin(soap);
	soap_serializeheader(soap);
	soap_serialize_klsrvh_DeliverReport(soap, &soap_tmp_klsrvh_DeliverReport);
	soap_begin_count(soap);
	if (soap->mode & SOAP_IO_LENGTH)
	{	soap_envelope_begin_out(soap);
		soap_putheader(soap);
		soap_body_begin_out(soap);
		soap_put_klsrvh_DeliverReport(soap, &soap_tmp_klsrvh_DeliverReport, "klsrvh-DeliverReport", "");
		soap_body_end_out(soap);
		soap_envelope_end_out(soap);
	}
	if (soap_connect(soap, URL, action)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put_klsrvh_DeliverReport(soap, &soap_tmp_klsrvh_DeliverReport, "klsrvh-DeliverReport", "")
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap_closesock(soap);
	soap_default_klsrvh_DeliverReportResponse(soap, &r);
	if (soap_begin_recv(soap)
	 || soap_envelope_begin_in(soap)
	 || soap_recv_header(soap)
	 || soap_body_begin_in(soap))
		return soap_closesock(soap);
	soap_get_klsrvh_DeliverReportResponse(soap, &r, "klsrvh-DeliverReportResponse", "");
	if (soap->error)
	{	if (soap->error == SOAP_TAG_MISMATCH && soap->level == 2)
			return soap_recv_fault(soap);
		return soap_closesock(soap);
	}
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
#ifndef WITH_LEANER
	 || soap_resolve_attachments(soap)
#endif
	 || soap_end_recv(soap))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

SOAP_FMAC5 int SOAP_FMAC6 soap_call_klsrvh_RecreateInstallationPackage(struct soap *soap, const char *URL, const char *action, wchar_t *wstrPackageGUID, wchar_t *wstrNewPackageName, wchar_t *wstrFileId, wchar_t *wstrProductName, wchar_t *wstrProductVersion, wchar_t *wstrProductDisplName, wchar_t *wstrProductDisplVersion, bool bReplaceExisting, struct klsrvh_RecreateInstallationPackageResponse &r)
{
	struct klsrvh_RecreateInstallationPackage soap_tmp_klsrvh_RecreateInstallationPackage;
	soap->encodingStyle = NULL;
	soap_tmp_klsrvh_RecreateInstallationPackage.wstrPackageGUID=wstrPackageGUID;
	soap_tmp_klsrvh_RecreateInstallationPackage.wstrNewPackageName=wstrNewPackageName;
	soap_tmp_klsrvh_RecreateInstallationPackage.wstrFileId=wstrFileId;
	soap_tmp_klsrvh_RecreateInstallationPackage.wstrProductName=wstrProductName;
	soap_tmp_klsrvh_RecreateInstallationPackage.wstrProductVersion=wstrProductVersion;
	soap_tmp_klsrvh_RecreateInstallationPackage.wstrProductDisplName=wstrProductDisplName;
	soap_tmp_klsrvh_RecreateInstallationPackage.wstrProductDisplVersion=wstrProductDisplVersion;
	soap_tmp_klsrvh_RecreateInstallationPackage.bReplaceExisting=bReplaceExisting;
	soap_begin(soap);
	soap_serializeheader(soap);
	soap_serialize_klsrvh_RecreateInstallationPackage(soap, &soap_tmp_klsrvh_RecreateInstallationPackage);
	soap_begin_count(soap);
	if (soap->mode & SOAP_IO_LENGTH)
	{	soap_envelope_begin_out(soap);
		soap_putheader(soap);
		soap_body_begin_out(soap);
		soap_put_klsrvh_RecreateInstallationPackage(soap, &soap_tmp_klsrvh_RecreateInstallationPackage, "klsrvh-RecreateInstallationPackage", "");
		soap_body_end_out(soap);
		soap_envelope_end_out(soap);
	}
	if (soap_connect(soap, URL, action)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put_klsrvh_RecreateInstallationPackage(soap, &soap_tmp_klsrvh_RecreateInstallationPackage, "klsrvh-RecreateInstallationPackage", "")
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap_closesock(soap);
	soap_default_klsrvh_RecreateInstallationPackageResponse(soap, &r);
	if (soap_begin_recv(soap)
	 || soap_envelope_begin_in(soap)
	 || soap_recv_header(soap)
	 || soap_body_begin_in(soap))
		return soap_closesock(soap);
	soap_get_klsrvh_RecreateInstallationPackageResponse(soap, &r, "klsrvh-RecreateInstallationPackageResponse", "");
	if (soap->error)
	{	if (soap->error == SOAP_TAG_MISMATCH && soap->level == 2)
			return soap_recv_fault(soap);
		return soap_closesock(soap);
	}
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
#ifndef WITH_LEANER
	 || soap_resolve_attachments(soap)
#endif
	 || soap_end_recv(soap))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

SOAP_FMAC5 int SOAP_FMAC6 soap_call_klsrvh_StartTask(struct soap *soap, const char *URL, const char *action, wchar_t *wstrTaskTsId, wchar_t *wstrTaskTypeName, param__params parParams, struct klsrvh_StartTaskResponse &r)
{
	struct klsrvh_StartTask soap_tmp_klsrvh_StartTask;
	soap->encodingStyle = NULL;
	soap_tmp_klsrvh_StartTask.wstrTaskTsId=wstrTaskTsId;
	soap_tmp_klsrvh_StartTask.wstrTaskTypeName=wstrTaskTypeName;
	soap_tmp_klsrvh_StartTask.parParams=parParams;
	soap_begin(soap);
	soap_serializeheader(soap);
	soap_serialize_klsrvh_StartTask(soap, &soap_tmp_klsrvh_StartTask);
	soap_begin_count(soap);
	if (soap->mode & SOAP_IO_LENGTH)
	{	soap_envelope_begin_out(soap);
		soap_putheader(soap);
		soap_body_begin_out(soap);
		soap_put_klsrvh_StartTask(soap, &soap_tmp_klsrvh_StartTask, "klsrvh-StartTask", "");
		soap_body_end_out(soap);
		soap_envelope_end_out(soap);
	}
	if (soap_connect(soap, URL, action)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put_klsrvh_StartTask(soap, &soap_tmp_klsrvh_StartTask, "klsrvh-StartTask", "")
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap_closesock(soap);
	soap_default_klsrvh_StartTaskResponse(soap, &r);
	if (soap_begin_recv(soap)
	 || soap_envelope_begin_in(soap)
	 || soap_recv_header(soap)
	 || soap_body_begin_in(soap))
		return soap_closesock(soap);
	soap_get_klsrvh_StartTaskResponse(soap, &r, "klsrvh-StartTaskResponse", "");
	if (soap->error)
	{	if (soap->error == SOAP_TAG_MISMATCH && soap->level == 2)
			return soap_recv_fault(soap);
		return soap_closesock(soap);
	}
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
#ifndef WITH_LEANER
	 || soap_resolve_attachments(soap)
#endif
	 || soap_end_recv(soap))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

SOAP_FMAC5 int SOAP_FMAC6 soap_call_klsrvh_StartRemoteInstallation(struct soap *soap, const char *URL, const char *action, param__params parTaskInfo, param__params parTaskParams, struct klsrvh_StartRemoteInstallationResponse &r)
{
	struct klsrvh_StartRemoteInstallation soap_tmp_klsrvh_StartRemoteInstallation;
	soap->encodingStyle = NULL;
	soap_tmp_klsrvh_StartRemoteInstallation.parTaskInfo=parTaskInfo;
	soap_tmp_klsrvh_StartRemoteInstallation.parTaskParams=parTaskParams;
	soap_begin(soap);
	soap_serializeheader(soap);
	soap_serialize_klsrvh_StartRemoteInstallation(soap, &soap_tmp_klsrvh_StartRemoteInstallation);
	soap_begin_count(soap);
	if (soap->mode & SOAP_IO_LENGTH)
	{	soap_envelope_begin_out(soap);
		soap_putheader(soap);
		soap_body_begin_out(soap);
		soap_put_klsrvh_StartRemoteInstallation(soap, &soap_tmp_klsrvh_StartRemoteInstallation, "klsrvh-StartRemoteInstallation", "");
		soap_body_end_out(soap);
		soap_envelope_end_out(soap);
	}
	if (soap_connect(soap, URL, action)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put_klsrvh_StartRemoteInstallation(soap, &soap_tmp_klsrvh_StartRemoteInstallation, "klsrvh-StartRemoteInstallation", "")
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap_closesock(soap);
	soap_default_klsrvh_StartRemoteInstallationResponse(soap, &r);
	if (soap_begin_recv(soap)
	 || soap_envelope_begin_in(soap)
	 || soap_recv_header(soap)
	 || soap_body_begin_in(soap))
		return soap_closesock(soap);
	soap_get_klsrvh_StartRemoteInstallationResponse(soap, &r, "klsrvh-StartRemoteInstallationResponse", "");
	if (soap->error)
	{	if (soap->error == SOAP_TAG_MISMATCH && soap->level == 2)
			return soap_recv_fault(soap);
		return soap_closesock(soap);
	}
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
#ifndef WITH_LEANER
	 || soap_resolve_attachments(soap)
#endif
	 || soap_end_recv(soap))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

SOAP_FMAC5 int SOAP_FMAC6 soap_call_klsrvh_ReportRemoteInstallationResult(struct soap *soap, const char *URL, const char *action, wchar_t *wstrTaskTsId, param__params parResultTaskStateEvent, struct klsrvh_ReportRemoteInstallationResultResponse &r)
{
	struct klsrvh_ReportRemoteInstallationResult soap_tmp_klsrvh_ReportRemoteInstallationResult;
	soap->encodingStyle = NULL;
	soap_tmp_klsrvh_ReportRemoteInstallationResult.wstrTaskTsId=wstrTaskTsId;
	soap_tmp_klsrvh_ReportRemoteInstallationResult.parResultTaskStateEvent=parResultTaskStateEvent;
	soap_begin(soap);
	soap_serializeheader(soap);
	soap_serialize_klsrvh_ReportRemoteInstallationResult(soap, &soap_tmp_klsrvh_ReportRemoteInstallationResult);
	soap_begin_count(soap);
	if (soap->mode & SOAP_IO_LENGTH)
	{	soap_envelope_begin_out(soap);
		soap_putheader(soap);
		soap_body_begin_out(soap);
		soap_put_klsrvh_ReportRemoteInstallationResult(soap, &soap_tmp_klsrvh_ReportRemoteInstallationResult, "klsrvh-ReportRemoteInstallationResult", "");
		soap_body_end_out(soap);
		soap_envelope_end_out(soap);
	}
	if (soap_connect(soap, URL, action)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put_klsrvh_ReportRemoteInstallationResult(soap, &soap_tmp_klsrvh_ReportRemoteInstallationResult, "klsrvh-ReportRemoteInstallationResult", "")
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap_closesock(soap);
	soap_default_klsrvh_ReportRemoteInstallationResultResponse(soap, &r);
	if (soap_begin_recv(soap)
	 || soap_envelope_begin_in(soap)
	 || soap_recv_header(soap)
	 || soap_body_begin_in(soap))
		return soap_closesock(soap);
	soap_get_klsrvh_ReportRemoteInstallationResultResponse(soap, &r, "klsrvh-ReportRemoteInstallationResultResponse", "");
	if (soap->error)
	{	if (soap->error == SOAP_TAG_MISMATCH && soap->level == 2)
			return soap_recv_fault(soap);
		return soap_closesock(soap);
	}
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
#ifndef WITH_LEANER
	 || soap_resolve_attachments(soap)
#endif
	 || soap_end_recv(soap))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

SOAP_FMAC5 int SOAP_FMAC6 soap_call_klsrvh_NotifyOnReportResult(struct soap *soap, const char *URL, const char *action, wchar_t *wstrRequestId, long nResultCode, param__params paramParams, struct klsrvh_NotifyOnReportResultResponse &r)
{
	struct klsrvh_NotifyOnReportResult soap_tmp_klsrvh_NotifyOnReportResult;
	soap->encodingStyle = NULL;
	soap_tmp_klsrvh_NotifyOnReportResult.wstrRequestId=wstrRequestId;
	soap_tmp_klsrvh_NotifyOnReportResult.nResultCode=nResultCode;
	soap_tmp_klsrvh_NotifyOnReportResult.paramParams=paramParams;
	soap_begin(soap);
	soap_serializeheader(soap);
	soap_serialize_klsrvh_NotifyOnReportResult(soap, &soap_tmp_klsrvh_NotifyOnReportResult);
	soap_begin_count(soap);
	if (soap->mode & SOAP_IO_LENGTH)
	{	soap_envelope_begin_out(soap);
		soap_putheader(soap);
		soap_body_begin_out(soap);
		soap_put_klsrvh_NotifyOnReportResult(soap, &soap_tmp_klsrvh_NotifyOnReportResult, "klsrvh-NotifyOnReportResult", "");
		soap_body_end_out(soap);
		soap_envelope_end_out(soap);
	}
	if (soap_connect(soap, URL, action)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put_klsrvh_NotifyOnReportResult(soap, &soap_tmp_klsrvh_NotifyOnReportResult, "klsrvh-NotifyOnReportResult", "")
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap_closesock(soap);
	soap_default_klsrvh_NotifyOnReportResultResponse(soap, &r);
	if (soap_begin_recv(soap)
	 || soap_envelope_begin_in(soap)
	 || soap_recv_header(soap)
	 || soap_body_begin_in(soap))
		return soap_closesock(soap);
	soap_get_klsrvh_NotifyOnReportResultResponse(soap, &r, "klsrvh-NotifyOnReportResultResponse", "");
	if (soap->error)
	{	if (soap->error == SOAP_TAG_MISMATCH && soap->level == 2)
			return soap_recv_fault(soap);
		return soap_closesock(soap);
	}
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
#ifndef WITH_LEANER
	 || soap_resolve_attachments(soap)
#endif
	 || soap_end_recv(soap))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

SOAP_FMAC5 int SOAP_FMAC6 soap_call_klsrvh_FindSlaveServers(struct soap *soap, const char *URL, const char *action, wchar_t *wstrFilter, klgrp_wstrings arrFields, klgrp_field_order_array arrFieldsToOrder, param__params params, long lTimeout, wchar_t *wstrRequestId, struct klsrvh_FindSlaveServersResponse &r)
{
	struct klsrvh_FindSlaveServers soap_tmp_klsrvh_FindSlaveServers;
	soap->encodingStyle = NULL;
	soap_tmp_klsrvh_FindSlaveServers.wstrFilter=wstrFilter;
	soap_tmp_klsrvh_FindSlaveServers.arrFields=arrFields;
	soap_tmp_klsrvh_FindSlaveServers.arrFieldsToOrder=arrFieldsToOrder;
	soap_tmp_klsrvh_FindSlaveServers.params=params;
	soap_tmp_klsrvh_FindSlaveServers.lTimeout=lTimeout;
	soap_tmp_klsrvh_FindSlaveServers.wstrRequestId=wstrRequestId;
	soap_begin(soap);
	soap_serializeheader(soap);
	soap_serialize_klsrvh_FindSlaveServers(soap, &soap_tmp_klsrvh_FindSlaveServers);
	soap_begin_count(soap);
	if (soap->mode & SOAP_IO_LENGTH)
	{	soap_envelope_begin_out(soap);
		soap_putheader(soap);
		soap_body_begin_out(soap);
		soap_put_klsrvh_FindSlaveServers(soap, &soap_tmp_klsrvh_FindSlaveServers, "klsrvh-FindSlaveServers", "");
		soap_body_end_out(soap);
		soap_envelope_end_out(soap);
	}
	if (soap_connect(soap, URL, action)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put_klsrvh_FindSlaveServers(soap, &soap_tmp_klsrvh_FindSlaveServers, "klsrvh-FindSlaveServers", "")
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap_closesock(soap);
	soap_default_klsrvh_FindSlaveServersResponse(soap, &r);
	if (soap_begin_recv(soap)
	 || soap_envelope_begin_in(soap)
	 || soap_recv_header(soap)
	 || soap_body_begin_in(soap))
		return soap_closesock(soap);
	soap_get_klsrvh_FindSlaveServersResponse(soap, &r, "klsrvh-FindSlaveServersResponse", "");
	if (soap->error)
	{	if (soap->error == SOAP_TAG_MISMATCH && soap->level == 2)
			return soap_recv_fault(soap);
		return soap_closesock(soap);
	}
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
#ifndef WITH_LEANER
	 || soap_resolve_attachments(soap)
#endif
	 || soap_end_recv(soap))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

SOAP_FMAC5 int SOAP_FMAC6 soap_call_klsrvs_GetSharedFolder(struct soap *soap, const char *URL, const char *action, void *_, struct klsrvs_GetSharedFolderResponse &r)
{
	struct klsrvs_GetSharedFolder soap_tmp_klsrvs_GetSharedFolder;
	soap->encodingStyle = NULL;
	soap_tmp_klsrvs_GetSharedFolder._=_;
	soap_begin(soap);
	soap_serializeheader(soap);
	soap_serialize_klsrvs_GetSharedFolder(soap, &soap_tmp_klsrvs_GetSharedFolder);
	soap_begin_count(soap);
	if (soap->mode & SOAP_IO_LENGTH)
	{	soap_envelope_begin_out(soap);
		soap_putheader(soap);
		soap_body_begin_out(soap);
		soap_put_klsrvs_GetSharedFolder(soap, &soap_tmp_klsrvs_GetSharedFolder, "klsrvs-GetSharedFolder", "");
		soap_body_end_out(soap);
		soap_envelope_end_out(soap);
	}
	if (soap_connect(soap, URL, action)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put_klsrvs_GetSharedFolder(soap, &soap_tmp_klsrvs_GetSharedFolder, "klsrvs-GetSharedFolder", "")
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap_closesock(soap);
	soap_default_klsrvs_GetSharedFolderResponse(soap, &r);
	if (soap_begin_recv(soap)
	 || soap_envelope_begin_in(soap)
	 || soap_recv_header(soap)
	 || soap_body_begin_in(soap))
		return soap_closesock(soap);
	soap_get_klsrvs_GetSharedFolderResponse(soap, &r, "klsrvs-GetSharedFolderResponse", "");
	if (soap->error)
	{	if (soap->error == SOAP_TAG_MISMATCH && soap->level == 2)
			return soap_recv_fault(soap);
		return soap_closesock(soap);
	}
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
#ifndef WITH_LEANER
	 || soap_resolve_attachments(soap)
#endif
	 || soap_end_recv(soap))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

SOAP_FMAC5 int SOAP_FMAC6 soap_call_klsrvs_ChangeSharedFolder(struct soap *soap, const char *URL, const char *action, wchar_t *wstrFolder, struct klsrvs_ChangeSharedFolderResponse &r)
{
	struct klsrvs_ChangeSharedFolder soap_tmp_klsrvs_ChangeSharedFolder;
	soap->encodingStyle = NULL;
	soap_tmp_klsrvs_ChangeSharedFolder.wstrFolder=wstrFolder;
	soap_begin(soap);
	soap_serializeheader(soap);
	soap_serialize_klsrvs_ChangeSharedFolder(soap, &soap_tmp_klsrvs_ChangeSharedFolder);
	soap_begin_count(soap);
	if (soap->mode & SOAP_IO_LENGTH)
	{	soap_envelope_begin_out(soap);
		soap_putheader(soap);
		soap_body_begin_out(soap);
		soap_put_klsrvs_ChangeSharedFolder(soap, &soap_tmp_klsrvs_ChangeSharedFolder, "klsrvs-ChangeSharedFolder", "");
		soap_body_end_out(soap);
		soap_envelope_end_out(soap);
	}
	if (soap_connect(soap, URL, action)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put_klsrvs_ChangeSharedFolder(soap, &soap_tmp_klsrvs_ChangeSharedFolder, "klsrvs-ChangeSharedFolder", "")
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap_closesock(soap);
	soap_default_klsrvs_ChangeSharedFolderResponse(soap, &r);
	if (soap_begin_recv(soap)
	 || soap_envelope_begin_in(soap)
	 || soap_recv_header(soap)
	 || soap_body_begin_in(soap))
		return soap_closesock(soap);
	soap_get_klsrvs_ChangeSharedFolderResponse(soap, &r, "klsrvs-ChangeSharedFolderResponse", "");
	if (soap->error)
	{	if (soap->error == SOAP_TAG_MISMATCH && soap->level == 2)
			return soap_recv_fault(soap);
		return soap_closesock(soap);
	}
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
#ifndef WITH_LEANER
	 || soap_resolve_attachments(soap)
#endif
	 || soap_end_recv(soap))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

SOAP_FMAC5 int SOAP_FMAC6 soap_call_klnlst_ResetIterator(struct soap *soap, const char *URL, const char *action, wchar_t *listName, param__params paramIteratorDescr, klnlst_wstring_array fields, klnlst_field_order_array fields_to_order, long lifetime, struct klnlst_ResetIteratorResponse &r)
{
	struct klnlst_ResetIterator soap_tmp_klnlst_ResetIterator;
	soap->encodingStyle = NULL;
	soap_tmp_klnlst_ResetIterator.listName=listName;
	soap_tmp_klnlst_ResetIterator.paramIteratorDescr=paramIteratorDescr;
	soap_tmp_klnlst_ResetIterator.fields=fields;
	soap_tmp_klnlst_ResetIterator.fields_to_order=fields_to_order;
	soap_tmp_klnlst_ResetIterator.lifetime=lifetime;
	soap_begin(soap);
	soap_serializeheader(soap);
	soap_serialize_klnlst_ResetIterator(soap, &soap_tmp_klnlst_ResetIterator);
	soap_begin_count(soap);
	if (soap->mode & SOAP_IO_LENGTH)
	{	soap_envelope_begin_out(soap);
		soap_putheader(soap);
		soap_body_begin_out(soap);
		soap_put_klnlst_ResetIterator(soap, &soap_tmp_klnlst_ResetIterator, "klnlst-ResetIterator", "");
		soap_body_end_out(soap);
		soap_envelope_end_out(soap);
	}
	if (soap_connect(soap, URL, action)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put_klnlst_ResetIterator(soap, &soap_tmp_klnlst_ResetIterator, "klnlst-ResetIterator", "")
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap_closesock(soap);
	soap_default_klnlst_ResetIteratorResponse(soap, &r);
	if (soap_begin_recv(soap)
	 || soap_envelope_begin_in(soap)
	 || soap_recv_header(soap)
	 || soap_body_begin_in(soap))
		return soap_closesock(soap);
	soap_get_klnlst_ResetIteratorResponse(soap, &r, "klnlst-ResetIteratorResponse", "");
	if (soap->error)
	{	if (soap->error == SOAP_TAG_MISMATCH && soap->level == 2)
			return soap_recv_fault(soap);
		return soap_closesock(soap);
	}
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
#ifndef WITH_LEANER
	 || soap_resolve_attachments(soap)
#endif
	 || soap_end_recv(soap))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

SOAP_FMAC5 int SOAP_FMAC6 soap_call_klnlst_GetRecordCount(struct soap *soap, const char *URL, const char *action, wchar_t *iteratorId, struct klnlst_GetRecordCountResponse &r)
{
	struct klnlst_GetRecordCount soap_tmp_klnlst_GetRecordCount;
	soap->encodingStyle = NULL;
	soap_tmp_klnlst_GetRecordCount.iteratorId=iteratorId;
	soap_begin(soap);
	soap_serializeheader(soap);
	soap_serialize_klnlst_GetRecordCount(soap, &soap_tmp_klnlst_GetRecordCount);
	soap_begin_count(soap);
	if (soap->mode & SOAP_IO_LENGTH)
	{	soap_envelope_begin_out(soap);
		soap_putheader(soap);
		soap_body_begin_out(soap);
		soap_put_klnlst_GetRecordCount(soap, &soap_tmp_klnlst_GetRecordCount, "klnlst-GetRecordCount", "");
		soap_body_end_out(soap);
		soap_envelope_end_out(soap);
	}
	if (soap_connect(soap, URL, action)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put_klnlst_GetRecordCount(soap, &soap_tmp_klnlst_GetRecordCount, "klnlst-GetRecordCount", "")
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap_closesock(soap);
	soap_default_klnlst_GetRecordCountResponse(soap, &r);
	if (soap_begin_recv(soap)
	 || soap_envelope_begin_in(soap)
	 || soap_recv_header(soap)
	 || soap_body_begin_in(soap))
		return soap_closesock(soap);
	soap_get_klnlst_GetRecordCountResponse(soap, &r, "klnlst-GetRecordCountResponse", "");
	if (soap->error)
	{	if (soap->error == SOAP_TAG_MISMATCH && soap->level == 2)
			return soap_recv_fault(soap);
		return soap_closesock(soap);
	}
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
#ifndef WITH_LEANER
	 || soap_resolve_attachments(soap)
#endif
	 || soap_end_recv(soap))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

SOAP_FMAC5 int SOAP_FMAC6 soap_call_klnlst_GetRecordRange(struct soap *soap, const char *URL, const char *action, wchar_t *iteratorId, long nStart, long nEnd, struct klnlst_GetRecordRangeResponse &r)
{
	struct klnlst_GetRecordRange soap_tmp_klnlst_GetRecordRange;
	soap->encodingStyle = NULL;
	soap_tmp_klnlst_GetRecordRange.iteratorId=iteratorId;
	soap_tmp_klnlst_GetRecordRange.nStart=nStart;
	soap_tmp_klnlst_GetRecordRange.nEnd=nEnd;
	soap_begin(soap);
	soap_serializeheader(soap);
	soap_serialize_klnlst_GetRecordRange(soap, &soap_tmp_klnlst_GetRecordRange);
	soap_begin_count(soap);
	if (soap->mode & SOAP_IO_LENGTH)
	{	soap_envelope_begin_out(soap);
		soap_putheader(soap);
		soap_body_begin_out(soap);
		soap_put_klnlst_GetRecordRange(soap, &soap_tmp_klnlst_GetRecordRange, "klnlst-GetRecordRange", "");
		soap_body_end_out(soap);
		soap_envelope_end_out(soap);
	}
	if (soap_connect(soap, URL, action)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put_klnlst_GetRecordRange(soap, &soap_tmp_klnlst_GetRecordRange, "klnlst-GetRecordRange", "")
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap_closesock(soap);
	soap_default_klnlst_GetRecordRangeResponse(soap, &r);
	if (soap_begin_recv(soap)
	 || soap_envelope_begin_in(soap)
	 || soap_recv_header(soap)
	 || soap_body_begin_in(soap))
		return soap_closesock(soap);
	soap_get_klnlst_GetRecordRangeResponse(soap, &r, "klnlst-GetRecordRangeResponse", "");
	if (soap->error)
	{	if (soap->error == SOAP_TAG_MISMATCH && soap->level == 2)
			return soap_recv_fault(soap);
		return soap_closesock(soap);
	}
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
#ifndef WITH_LEANER
	 || soap_resolve_attachments(soap)
#endif
	 || soap_end_recv(soap))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

SOAP_FMAC5 int SOAP_FMAC6 soap_call_klnlst_ReleaseIterator(struct soap *soap, const char *URL, const char *action, wchar_t *iteratorId, struct klnlst_ReleaseIteratorResponse &r)
{
	struct klnlst_ReleaseIterator soap_tmp_klnlst_ReleaseIterator;
	soap->encodingStyle = NULL;
	soap_tmp_klnlst_ReleaseIterator.iteratorId=iteratorId;
	soap_begin(soap);
	soap_serializeheader(soap);
	soap_serialize_klnlst_ReleaseIterator(soap, &soap_tmp_klnlst_ReleaseIterator);
	soap_begin_count(soap);
	if (soap->mode & SOAP_IO_LENGTH)
	{	soap_envelope_begin_out(soap);
		soap_putheader(soap);
		soap_body_begin_out(soap);
		soap_put_klnlst_ReleaseIterator(soap, &soap_tmp_klnlst_ReleaseIterator, "klnlst-ReleaseIterator", "");
		soap_body_end_out(soap);
		soap_envelope_end_out(soap);
	}
	if (soap_connect(soap, URL, action)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put_klnlst_ReleaseIterator(soap, &soap_tmp_klnlst_ReleaseIterator, "klnlst-ReleaseIterator", "")
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap_closesock(soap);
	soap_default_klnlst_ReleaseIteratorResponse(soap, &r);
	if (soap_begin_recv(soap)
	 || soap_envelope_begin_in(soap)
	 || soap_recv_header(soap)
	 || soap_body_begin_in(soap))
		return soap_closesock(soap);
	soap_get_klnlst_ReleaseIteratorResponse(soap, &r, "klnlst-ReleaseIteratorResponse", "");
	if (soap->error)
	{	if (soap->error == SOAP_TAG_MISMATCH && soap->level == 2)
			return soap_recv_fault(soap);
		return soap_closesock(soap);
	}
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
#ifndef WITH_LEANER
	 || soap_resolve_attachments(soap)
#endif
	 || soap_end_recv(soap))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

SOAP_FMAC5 int SOAP_FMAC6 soap_call_klnlst_UpdateHostNetworkList(struct soap *soap, const char *URL, const char *action, wchar_t *nagentTransportName, wchar_t *listName, wchar_t *listComponentName, klnlst_network_list_item_array listsItemsArray, struct klnlst_UpdateHostNetworkListResponse &r)
{
	struct klnlst_UpdateHostNetworkList soap_tmp_klnlst_UpdateHostNetworkList;
	soap->encodingStyle = NULL;
	soap_tmp_klnlst_UpdateHostNetworkList.nagentTransportName=nagentTransportName;
	soap_tmp_klnlst_UpdateHostNetworkList.listName=listName;
	soap_tmp_klnlst_UpdateHostNetworkList.listComponentName=listComponentName;
	soap_tmp_klnlst_UpdateHostNetworkList.listsItemsArray=listsItemsArray;
	soap_begin(soap);
	soap_serializeheader(soap);
	soap_serialize_klnlst_UpdateHostNetworkList(soap, &soap_tmp_klnlst_UpdateHostNetworkList);
	soap_begin_count(soap);
	if (soap->mode & SOAP_IO_LENGTH)
	{	soap_envelope_begin_out(soap);
		soap_putheader(soap);
		soap_body_begin_out(soap);
		soap_put_klnlst_UpdateHostNetworkList(soap, &soap_tmp_klnlst_UpdateHostNetworkList, "klnlst-UpdateHostNetworkList", "");
		soap_body_end_out(soap);
		soap_envelope_end_out(soap);
	}
	if (soap_connect(soap, URL, action)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put_klnlst_UpdateHostNetworkList(soap, &soap_tmp_klnlst_UpdateHostNetworkList, "klnlst-UpdateHostNetworkList", "")
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap_closesock(soap);
	soap_default_klnlst_UpdateHostNetworkListResponse(soap, &r);
	if (soap_begin_recv(soap)
	 || soap_envelope_begin_in(soap)
	 || soap_recv_header(soap)
	 || soap_body_begin_in(soap))
		return soap_closesock(soap);
	soap_get_klnlst_UpdateHostNetworkListResponse(soap, &r, "klnlst-UpdateHostNetworkListResponse", "");
	if (soap->error)
	{	if (soap->error == SOAP_TAG_MISMATCH && soap->level == 2)
			return soap_recv_fault(soap);
		return soap_closesock(soap);
	}
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
#ifndef WITH_LEANER
	 || soap_resolve_attachments(soap)
#endif
	 || soap_end_recv(soap))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

SOAP_FMAC5 int SOAP_FMAC6 soap_call_klnlst_AddListItemTask(struct soap *soap, const char *URL, const char *action, long itemId, param__params taskParams, wchar_t *taskName, struct klnlst_AddListItemTaskResponse &r)
{
	struct klnlst_AddListItemTask soap_tmp_klnlst_AddListItemTask;
	soap->encodingStyle = NULL;
	soap_tmp_klnlst_AddListItemTask.itemId=itemId;
	soap_tmp_klnlst_AddListItemTask.taskParams=taskParams;
	soap_tmp_klnlst_AddListItemTask.taskName=taskName;
	soap_begin(soap);
	soap_serializeheader(soap);
	soap_serialize_klnlst_AddListItemTask(soap, &soap_tmp_klnlst_AddListItemTask);
	soap_begin_count(soap);
	if (soap->mode & SOAP_IO_LENGTH)
	{	soap_envelope_begin_out(soap);
		soap_putheader(soap);
		soap_body_begin_out(soap);
		soap_put_klnlst_AddListItemTask(soap, &soap_tmp_klnlst_AddListItemTask, "klnlst-AddListItemTask", "");
		soap_body_end_out(soap);
		soap_envelope_end_out(soap);
	}
	if (soap_connect(soap, URL, action)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put_klnlst_AddListItemTask(soap, &soap_tmp_klnlst_AddListItemTask, "klnlst-AddListItemTask", "")
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap_closesock(soap);
	soap_default_klnlst_AddListItemTaskResponse(soap, &r);
	if (soap_begin_recv(soap)
	 || soap_envelope_begin_in(soap)
	 || soap_recv_header(soap)
	 || soap_body_begin_in(soap))
		return soap_closesock(soap);
	soap_get_klnlst_AddListItemTaskResponse(soap, &r, "klnlst-AddListItemTaskResponse", "");
	if (soap->error)
	{	if (soap->error == SOAP_TAG_MISMATCH && soap->level == 2)
			return soap_recv_fault(soap);
		return soap_closesock(soap);
	}
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
#ifndef WITH_LEANER
	 || soap_resolve_attachments(soap)
#endif
	 || soap_end_recv(soap))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

SOAP_FMAC5 int SOAP_FMAC6 soap_call_klnlst_AddTaskForListItems(struct soap *soap, const char *URL, const char *action, klnlst_long_array itemsIds, param__params taskParams, wchar_t *taskName, struct klnlst_AddTaskForListItemsResponse &r)
{
	struct klnlst_AddTaskForListItems soap_tmp_klnlst_AddTaskForListItems;
	soap->encodingStyle = NULL;
	soap_tmp_klnlst_AddTaskForListItems.itemsIds=itemsIds;
	soap_tmp_klnlst_AddTaskForListItems.taskParams=taskParams;
	soap_tmp_klnlst_AddTaskForListItems.taskName=taskName;
	soap_begin(soap);
	soap_serializeheader(soap);
	soap_serialize_klnlst_AddTaskForListItems(soap, &soap_tmp_klnlst_AddTaskForListItems);
	soap_begin_count(soap);
	if (soap->mode & SOAP_IO_LENGTH)
	{	soap_envelope_begin_out(soap);
		soap_putheader(soap);
		soap_body_begin_out(soap);
		soap_put_klnlst_AddTaskForListItems(soap, &soap_tmp_klnlst_AddTaskForListItems, "klnlst-AddTaskForListItems", "");
		soap_body_end_out(soap);
		soap_envelope_end_out(soap);
	}
	if (soap_connect(soap, URL, action)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put_klnlst_AddTaskForListItems(soap, &soap_tmp_klnlst_AddTaskForListItems, "klnlst-AddTaskForListItems", "")
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap_closesock(soap);
	soap_default_klnlst_AddTaskForListItemsResponse(soap, &r);
	if (soap_begin_recv(soap)
	 || soap_envelope_begin_in(soap)
	 || soap_recv_header(soap)
	 || soap_body_begin_in(soap))
		return soap_closesock(soap);
	soap_get_klnlst_AddTaskForListItemsResponse(soap, &r, "klnlst-AddTaskForListItemsResponse", "");
	if (soap->error)
	{	if (soap->error == SOAP_TAG_MISMATCH && soap->level == 2)
			return soap_recv_fault(soap);
		return soap_closesock(soap);
	}
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
#ifndef WITH_LEANER
	 || soap_resolve_attachments(soap)
#endif
	 || soap_end_recv(soap))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

SOAP_FMAC5 int SOAP_FMAC6 soap_call_klnlst_GetItemInfo(struct soap *soap, const char *URL, const char *action, long itemId, struct klnlst_GetItemInfoResponse &r)
{
	struct klnlst_GetItemInfo soap_tmp_klnlst_GetItemInfo;
	soap->encodingStyle = NULL;
	soap_tmp_klnlst_GetItemInfo.itemId=itemId;
	soap_begin(soap);
	soap_serializeheader(soap);
	soap_serialize_klnlst_GetItemInfo(soap, &soap_tmp_klnlst_GetItemInfo);
	soap_begin_count(soap);
	if (soap->mode & SOAP_IO_LENGTH)
	{	soap_envelope_begin_out(soap);
		soap_putheader(soap);
		soap_body_begin_out(soap);
		soap_put_klnlst_GetItemInfo(soap, &soap_tmp_klnlst_GetItemInfo, "klnlst-GetItemInfo", "");
		soap_body_end_out(soap);
		soap_envelope_end_out(soap);
	}
	if (soap_connect(soap, URL, action)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put_klnlst_GetItemInfo(soap, &soap_tmp_klnlst_GetItemInfo, "klnlst-GetItemInfo", "")
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap_closesock(soap);
	soap_default_klnlst_GetItemInfoResponse(soap, &r);
	if (soap_begin_recv(soap)
	 || soap_envelope_begin_in(soap)
	 || soap_recv_header(soap)
	 || soap_body_begin_in(soap))
		return soap_closesock(soap);
	soap_get_klnlst_GetItemInfoResponse(soap, &r, "klnlst-GetItemInfoResponse", "");
	if (soap->error)
	{	if (soap->error == SOAP_TAG_MISMATCH && soap->level == 2)
			return soap_recv_fault(soap);
		return soap_closesock(soap);
	}
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
#ifndef WITH_LEANER
	 || soap_resolve_attachments(soap)
#endif
	 || soap_end_recv(soap))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

SOAP_FMAC5 int SOAP_FMAC6 soap_call_klnagnlst_CallNetworkListTask(struct soap *soap, const char *URL, const char *action, wchar_t *listName, wchar_t *itemId, wchar_t *taskName, param__params taskParams, struct klnagnlst_CallNetworkListTaskResponse &r)
{
	struct klnagnlst_CallNetworkListTask soap_tmp_klnagnlst_CallNetworkListTask;
	soap->encodingStyle = NULL;
	soap_tmp_klnagnlst_CallNetworkListTask.listName=listName;
	soap_tmp_klnagnlst_CallNetworkListTask.itemId=itemId;
	soap_tmp_klnagnlst_CallNetworkListTask.taskName=taskName;
	soap_tmp_klnagnlst_CallNetworkListTask.taskParams=taskParams;
	soap_begin(soap);
	soap_serializeheader(soap);
	soap_serialize_klnagnlst_CallNetworkListTask(soap, &soap_tmp_klnagnlst_CallNetworkListTask);
	soap_begin_count(soap);
	if (soap->mode & SOAP_IO_LENGTH)
	{	soap_envelope_begin_out(soap);
		soap_putheader(soap);
		soap_body_begin_out(soap);
		soap_put_klnagnlst_CallNetworkListTask(soap, &soap_tmp_klnagnlst_CallNetworkListTask, "klnagnlst-CallNetworkListTask", "");
		soap_body_end_out(soap);
		soap_envelope_end_out(soap);
	}
	if (soap_connect(soap, URL, action)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put_klnagnlst_CallNetworkListTask(soap, &soap_tmp_klnagnlst_CallNetworkListTask, "klnagnlst-CallNetworkListTask", "")
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap_closesock(soap);
	soap_default_klnagnlst_CallNetworkListTaskResponse(soap, &r);
	if (soap_begin_recv(soap)
	 || soap_envelope_begin_in(soap)
	 || soap_recv_header(soap)
	 || soap_body_begin_in(soap))
		return soap_closesock(soap);
	soap_get_klnagnlst_CallNetworkListTaskResponse(soap, &r, "klnagnlst-CallNetworkListTaskResponse", "");
	if (soap->error)
	{	if (soap->error == SOAP_TAG_MISMATCH && soap->level == 2)
			return soap_recv_fault(soap);
		return soap_closesock(soap);
	}
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
#ifndef WITH_LEANER
	 || soap_resolve_attachments(soap)
#endif
	 || soap_end_recv(soap))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

SOAP_FMAC5 int SOAP_FMAC6 soap_call_klnagnlst_GetItemFileInfo(struct soap *soap, const char *URL, const char *action, wchar_t *listName, wchar_t *itemId, struct klnagnlst_GetItemFileInfoResponse &r)
{
	struct klnagnlst_GetItemFileInfo soap_tmp_klnagnlst_GetItemFileInfo;
	soap->encodingStyle = NULL;
	soap_tmp_klnagnlst_GetItemFileInfo.listName=listName;
	soap_tmp_klnagnlst_GetItemFileInfo.itemId=itemId;
	soap_begin(soap);
	soap_serializeheader(soap);
	soap_serialize_klnagnlst_GetItemFileInfo(soap, &soap_tmp_klnagnlst_GetItemFileInfo);
	soap_begin_count(soap);
	if (soap->mode & SOAP_IO_LENGTH)
	{	soap_envelope_begin_out(soap);
		soap_putheader(soap);
		soap_body_begin_out(soap);
		soap_put_klnagnlst_GetItemFileInfo(soap, &soap_tmp_klnagnlst_GetItemFileInfo, "klnagnlst-GetItemFileInfo", "");
		soap_body_end_out(soap);
		soap_envelope_end_out(soap);
	}
	if (soap_connect(soap, URL, action)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put_klnagnlst_GetItemFileInfo(soap, &soap_tmp_klnagnlst_GetItemFileInfo, "klnagnlst-GetItemFileInfo", "")
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap_closesock(soap);
	soap_default_klnagnlst_GetItemFileInfoResponse(soap, &r);
	if (soap_begin_recv(soap)
	 || soap_envelope_begin_in(soap)
	 || soap_recv_header(soap)
	 || soap_body_begin_in(soap))
		return soap_closesock(soap);
	soap_get_klnagnlst_GetItemFileInfoResponse(soap, &r, "klnagnlst-GetItemFileInfoResponse", "");
	if (soap->error)
	{	if (soap->error == SOAP_TAG_MISMATCH && soap->level == 2)
			return soap_recv_fault(soap);
		return soap_closesock(soap);
	}
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
#ifndef WITH_LEANER
	 || soap_resolve_attachments(soap)
#endif
	 || soap_end_recv(soap))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

SOAP_FMAC5 int SOAP_FMAC6 soap_call_klnagnlst_GetItemFileChunk(struct soap *soap, const char *URL, const char *action, wchar_t *listName, wchar_t *itemId, ULONG64 startPos, ULONG64 neededSize, struct klnagnlst_GetItemFileChunkResponse &r)
{
	struct klnagnlst_GetItemFileChunk soap_tmp_klnagnlst_GetItemFileChunk;
	soap->encodingStyle = NULL;
	soap_tmp_klnagnlst_GetItemFileChunk.listName=listName;
	soap_tmp_klnagnlst_GetItemFileChunk.itemId=itemId;
	soap_tmp_klnagnlst_GetItemFileChunk.startPos=startPos;
	soap_tmp_klnagnlst_GetItemFileChunk.neededSize=neededSize;
	soap_begin(soap);
	soap_serializeheader(soap);
	soap_serialize_klnagnlst_GetItemFileChunk(soap, &soap_tmp_klnagnlst_GetItemFileChunk);
	soap_begin_count(soap);
	if (soap->mode & SOAP_IO_LENGTH)
	{	soap_envelope_begin_out(soap);
		soap_putheader(soap);
		soap_body_begin_out(soap);
		soap_put_klnagnlst_GetItemFileChunk(soap, &soap_tmp_klnagnlst_GetItemFileChunk, "klnagnlst-GetItemFileChunk", "");
		soap_body_end_out(soap);
		soap_envelope_end_out(soap);
	}
	if (soap_connect(soap, URL, action)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put_klnagnlst_GetItemFileChunk(soap, &soap_tmp_klnagnlst_GetItemFileChunk, "klnagnlst-GetItemFileChunk", "")
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap_closesock(soap);
	soap_default_klnagnlst_GetItemFileChunkResponse(soap, &r);
	if (soap_begin_recv(soap)
	 || soap_envelope_begin_in(soap)
	 || soap_recv_header(soap)
	 || soap_body_begin_in(soap))
		return soap_closesock(soap);
	soap_get_klnagnlst_GetItemFileChunkResponse(soap, &r, "klnagnlst-GetItemFileChunkResponse", "");
	if (soap->error)
	{	if (soap->error == SOAP_TAG_MISMATCH && soap->level == 2)
			return soap_recv_fault(soap);
		return soap_closesock(soap);
	}
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
#ifndef WITH_LEANER
	 || soap_resolve_attachments(soap)
#endif
	 || soap_end_recv(soap))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

SOAP_FMAC5 int SOAP_FMAC6 soap_call_klft_GetNextFileChunk(struct soap *soap, const char *URL, const char *action, wchar_t *remoteClientName, wchar_t *fileName, wchar_t *fileId, ULONG64 startFilePos, ULONG64 neededSize, bool useUpdaterFolder, bool forUpdateAgent, struct klft_GetNextFileChunkOptions *options, struct klft_GetNextFileChunkResponse &r)
{
	struct klft_GetNextFileChunk soap_tmp_klft_GetNextFileChunk;
	soap->encodingStyle = NULL;
	soap_tmp_klft_GetNextFileChunk.remoteClientName=remoteClientName;
	soap_tmp_klft_GetNextFileChunk.fileName=fileName;
	soap_tmp_klft_GetNextFileChunk.fileId=fileId;
	soap_tmp_klft_GetNextFileChunk.startFilePos=startFilePos;
	soap_tmp_klft_GetNextFileChunk.neededSize=neededSize;
	soap_tmp_klft_GetNextFileChunk.useUpdaterFolder=useUpdaterFolder;
	soap_tmp_klft_GetNextFileChunk.forUpdateAgent=forUpdateAgent;
	soap_tmp_klft_GetNextFileChunk.options=options;
	soap_begin(soap);
	soap_serializeheader(soap);
	soap_serialize_klft_GetNextFileChunk(soap, &soap_tmp_klft_GetNextFileChunk);
	soap_begin_count(soap);
	if (soap->mode & SOAP_IO_LENGTH)
	{	soap_envelope_begin_out(soap);
		soap_putheader(soap);
		soap_body_begin_out(soap);
		soap_put_klft_GetNextFileChunk(soap, &soap_tmp_klft_GetNextFileChunk, "klft-GetNextFileChunk", "");
		soap_body_end_out(soap);
		soap_envelope_end_out(soap);
	}
	if (soap_connect(soap, URL, action)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put_klft_GetNextFileChunk(soap, &soap_tmp_klft_GetNextFileChunk, "klft-GetNextFileChunk", "")
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap_closesock(soap);
	soap_default_klft_GetNextFileChunkResponse(soap, &r);
	if (soap_begin_recv(soap)
	 || soap_envelope_begin_in(soap)
	 || soap_recv_header(soap)
	 || soap_body_begin_in(soap))
		return soap_closesock(soap);
	soap_get_klft_GetNextFileChunkResponse(soap, &r, "klft-GetNextFileChunkResponse", "");
	if (soap->error)
	{	if (soap->error == SOAP_TAG_MISMATCH && soap->level == 2)
			return soap_recv_fault(soap);
		return soap_closesock(soap);
	}
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
#ifndef WITH_LEANER
	 || soap_resolve_attachments(soap)
#endif
	 || soap_end_recv(soap))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

SOAP_FMAC5 int SOAP_FMAC6 soap_call_klft_GetServerFilesList(struct soap *soap, const char *URL, const char *action, wchar_t *clientName, struct klft_GetServerFilesListResponse &r)
{
	struct klft_GetServerFilesList soap_tmp_klft_GetServerFilesList;
	soap->encodingStyle = NULL;
	soap_tmp_klft_GetServerFilesList.clientName=clientName;
	soap_begin(soap);
	soap_serializeheader(soap);
	soap_serialize_klft_GetServerFilesList(soap, &soap_tmp_klft_GetServerFilesList);
	soap_begin_count(soap);
	if (soap->mode & SOAP_IO_LENGTH)
	{	soap_envelope_begin_out(soap);
		soap_putheader(soap);
		soap_body_begin_out(soap);
		soap_put_klft_GetServerFilesList(soap, &soap_tmp_klft_GetServerFilesList, "klft-GetServerFilesList", "");
		soap_body_end_out(soap);
		soap_envelope_end_out(soap);
	}
	if (soap_connect(soap, URL, action)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put_klft_GetServerFilesList(soap, &soap_tmp_klft_GetServerFilesList, "klft-GetServerFilesList", "")
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap_closesock(soap);
	soap_default_klft_GetServerFilesListResponse(soap, &r);
	if (soap_begin_recv(soap)
	 || soap_envelope_begin_in(soap)
	 || soap_recv_header(soap)
	 || soap_body_begin_in(soap))
		return soap_closesock(soap);
	soap_get_klft_GetServerFilesListResponse(soap, &r, "klft-GetServerFilesListResponse", "");
	if (soap->error)
	{	if (soap->error == SOAP_TAG_MISMATCH && soap->level == 2)
			return soap_recv_fault(soap);
		return soap_closesock(soap);
	}
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
#ifndef WITH_LEANER
	 || soap_resolve_attachments(soap)
#endif
	 || soap_end_recv(soap))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

SOAP_FMAC5 int SOAP_FMAC6 soap_call_klft_GetUpdaterFolderFileInfo(struct soap *soap, const char *URL, const char *action, wchar_t *fileName, struct klft_GetUpdaterFolderFileInfoOptions *options, struct klft_GetUpdaterFolderFileInfoResponse &r)
{
	struct klft_GetUpdaterFolderFileInfo soap_tmp_klft_GetUpdaterFolderFileInfo;
	soap->encodingStyle = NULL;
	soap_tmp_klft_GetUpdaterFolderFileInfo.fileName=fileName;
	soap_tmp_klft_GetUpdaterFolderFileInfo.options=options;
	soap_begin(soap);
	soap_serializeheader(soap);
	soap_serialize_klft_GetUpdaterFolderFileInfo(soap, &soap_tmp_klft_GetUpdaterFolderFileInfo);
	soap_begin_count(soap);
	if (soap->mode & SOAP_IO_LENGTH)
	{	soap_envelope_begin_out(soap);
		soap_putheader(soap);
		soap_body_begin_out(soap);
		soap_put_klft_GetUpdaterFolderFileInfo(soap, &soap_tmp_klft_GetUpdaterFolderFileInfo, "klft-GetUpdaterFolderFileInfo", "");
		soap_body_end_out(soap);
		soap_envelope_end_out(soap);
	}
	if (soap_connect(soap, URL, action)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put_klft_GetUpdaterFolderFileInfo(soap, &soap_tmp_klft_GetUpdaterFolderFileInfo, "klft-GetUpdaterFolderFileInfo", "")
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap_closesock(soap);
	soap_default_klft_GetUpdaterFolderFileInfoResponse(soap, &r);
	if (soap_begin_recv(soap)
	 || soap_envelope_begin_in(soap)
	 || soap_recv_header(soap)
	 || soap_body_begin_in(soap))
		return soap_closesock(soap);
	soap_get_klft_GetUpdaterFolderFileInfoResponse(soap, &r, "klft-GetUpdaterFolderFileInfoResponse", "");
	if (soap->error)
	{	if (soap->error == SOAP_TAG_MISMATCH && soap->level == 2)
			return soap_recv_fault(soap);
		return soap_closesock(soap);
	}
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
#ifndef WITH_LEANER
	 || soap_resolve_attachments(soap)
#endif
	 || soap_end_recv(soap))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

SOAP_FMAC5 int SOAP_FMAC6 soap_call_klft_GetFullFileInfo(struct soap *soap, const char *URL, const char *action, wchar_t *fileId, struct klft_GetFullFileInfoResponse &r)
{
	struct klft_GetFullFileInfo soap_tmp_klft_GetFullFileInfo;
	soap->encodingStyle = NULL;
	soap_tmp_klft_GetFullFileInfo.fileId=fileId;
	soap_begin(soap);
	soap_serializeheader(soap);
	soap_serialize_klft_GetFullFileInfo(soap, &soap_tmp_klft_GetFullFileInfo);
	soap_begin_count(soap);
	if (soap->mode & SOAP_IO_LENGTH)
	{	soap_envelope_begin_out(soap);
		soap_putheader(soap);
		soap_body_begin_out(soap);
		soap_put_klft_GetFullFileInfo(soap, &soap_tmp_klft_GetFullFileInfo, "klft-GetFullFileInfo", "");
		soap_body_end_out(soap);
		soap_envelope_end_out(soap);
	}
	if (soap_connect(soap, URL, action)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put_klft_GetFullFileInfo(soap, &soap_tmp_klft_GetFullFileInfo, "klft-GetFullFileInfo", "")
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap_closesock(soap);
	soap_default_klft_GetFullFileInfoResponse(soap, &r);
	if (soap_begin_recv(soap)
	 || soap_envelope_begin_in(soap)
	 || soap_recv_header(soap)
	 || soap_body_begin_in(soap))
		return soap_closesock(soap);
	soap_get_klft_GetFullFileInfoResponse(soap, &r, "klft-GetFullFileInfoResponse", "");
	if (soap->error)
	{	if (soap->error == SOAP_TAG_MISMATCH && soap->level == 2)
			return soap_recv_fault(soap);
		return soap_closesock(soap);
	}
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
#ifndef WITH_LEANER
	 || soap_resolve_attachments(soap)
#endif
	 || soap_end_recv(soap))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

SOAP_FMAC5 int SOAP_FMAC6 soap_call_klft_GetHostUpdateAgentInfo(struct soap *soap, const char *URL, const char *action, wchar_t *hostId, struct klft_GetHostUpdateAgentInfoResponse &r)
{
	struct klft_GetHostUpdateAgentInfo soap_tmp_klft_GetHostUpdateAgentInfo;
	soap->encodingStyle = NULL;
	soap_tmp_klft_GetHostUpdateAgentInfo.hostId=hostId;
	soap_begin(soap);
	soap_serializeheader(soap);
	soap_serialize_klft_GetHostUpdateAgentInfo(soap, &soap_tmp_klft_GetHostUpdateAgentInfo);
	soap_begin_count(soap);
	if (soap->mode & SOAP_IO_LENGTH)
	{	soap_envelope_begin_out(soap);
		soap_putheader(soap);
		soap_body_begin_out(soap);
		soap_put_klft_GetHostUpdateAgentInfo(soap, &soap_tmp_klft_GetHostUpdateAgentInfo, "klft-GetHostUpdateAgentInfo", "");
		soap_body_end_out(soap);
		soap_envelope_end_out(soap);
	}
	if (soap_connect(soap, URL, action)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put_klft_GetHostUpdateAgentInfo(soap, &soap_tmp_klft_GetHostUpdateAgentInfo, "klft-GetHostUpdateAgentInfo", "")
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap_closesock(soap);
	soap_default_klft_GetHostUpdateAgentInfoResponse(soap, &r);
	if (soap_begin_recv(soap)
	 || soap_envelope_begin_in(soap)
	 || soap_recv_header(soap)
	 || soap_body_begin_in(soap))
		return soap_closesock(soap);
	soap_get_klft_GetHostUpdateAgentInfoResponse(soap, &r, "klft-GetHostUpdateAgentInfoResponse", "");
	if (soap->error)
	{	if (soap->error == SOAP_TAG_MISMATCH && soap->level == 2)
			return soap_recv_fault(soap);
		return soap_closesock(soap);
	}
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
#ifndef WITH_LEANER
	 || soap_resolve_attachments(soap)
#endif
	 || soap_end_recv(soap))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

SOAP_FMAC5 int SOAP_FMAC6 soap_call_klft_SendToClientFullSyncArchive(struct soap *soap, const char *URL, const char *action, wchar_t *remoteClientName, wchar_t *syncFolderFileId, bool fileNamesHashed, struct SOAPFilesInfoList *filesList, struct SOAPSyncFolderOptions *syncFolderOptions, struct klft_SendToClientFullSyncArchiveResponse &r)
{
	struct klft_SendToClientFullSyncArchive soap_tmp_klft_SendToClientFullSyncArchive;
	soap->encodingStyle = NULL;
	soap_tmp_klft_SendToClientFullSyncArchive.remoteClientName=remoteClientName;
	soap_tmp_klft_SendToClientFullSyncArchive.syncFolderFileId=syncFolderFileId;
	soap_tmp_klft_SendToClientFullSyncArchive.fileNamesHashed=fileNamesHashed;
	soap_tmp_klft_SendToClientFullSyncArchive.filesList=filesList;
	soap_tmp_klft_SendToClientFullSyncArchive.syncFolderOptions=syncFolderOptions;
	soap_begin(soap);
	soap_serializeheader(soap);
	soap_serialize_klft_SendToClientFullSyncArchive(soap, &soap_tmp_klft_SendToClientFullSyncArchive);
	soap_begin_count(soap);
	if (soap->mode & SOAP_IO_LENGTH)
	{	soap_envelope_begin_out(soap);
		soap_putheader(soap);
		soap_body_begin_out(soap);
		soap_put_klft_SendToClientFullSyncArchive(soap, &soap_tmp_klft_SendToClientFullSyncArchive, "klft-SendToClientFullSyncArchive", "");
		soap_body_end_out(soap);
		soap_envelope_end_out(soap);
	}
	if (soap_connect(soap, URL, action)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put_klft_SendToClientFullSyncArchive(soap, &soap_tmp_klft_SendToClientFullSyncArchive, "klft-SendToClientFullSyncArchive", "")
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap_closesock(soap);
	soap_default_klft_SendToClientFullSyncArchiveResponse(soap, &r);
	if (soap_begin_recv(soap)
	 || soap_envelope_begin_in(soap)
	 || soap_recv_header(soap)
	 || soap_body_begin_in(soap))
		return soap_closesock(soap);
	soap_get_klft_SendToClientFullSyncArchiveResponse(soap, &r, "klft-SendToClientFullSyncArchiveResponse", "");
	if (soap->error)
	{	if (soap->error == SOAP_TAG_MISMATCH && soap->level == 2)
			return soap_recv_fault(soap);
		return soap_closesock(soap);
	}
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
#ifndef WITH_LEANER
	 || soap_resolve_attachments(soap)
#endif
	 || soap_end_recv(soap))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

SOAP_FMAC5 int SOAP_FMAC6 soap_call_klfts_RegisterUpdateAgent(struct soap *soap, const char *URL, const char *action, klfts_update_agent_info updateAgentInfo, bool checkExisting, struct klfts_RegisterUpdateAgentResponse &r)
{
	struct klfts_RegisterUpdateAgent soap_tmp_klfts_RegisterUpdateAgent;
	soap->encodingStyle = NULL;
	soap_tmp_klfts_RegisterUpdateAgent.updateAgentInfo=updateAgentInfo;
	soap_tmp_klfts_RegisterUpdateAgent.checkExisting=checkExisting;
	soap_begin(soap);
	soap_serializeheader(soap);
	soap_serialize_klfts_RegisterUpdateAgent(soap, &soap_tmp_klfts_RegisterUpdateAgent);
	soap_begin_count(soap);
	if (soap->mode & SOAP_IO_LENGTH)
	{	soap_envelope_begin_out(soap);
		soap_putheader(soap);
		soap_body_begin_out(soap);
		soap_put_klfts_RegisterUpdateAgent(soap, &soap_tmp_klfts_RegisterUpdateAgent, "klfts-RegisterUpdateAgent", "");
		soap_body_end_out(soap);
		soap_envelope_end_out(soap);
	}
	if (soap_connect(soap, URL, action)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put_klfts_RegisterUpdateAgent(soap, &soap_tmp_klfts_RegisterUpdateAgent, "klfts-RegisterUpdateAgent", "")
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap_closesock(soap);
	soap_default_klfts_RegisterUpdateAgentResponse(soap, &r);
	if (soap_begin_recv(soap)
	 || soap_envelope_begin_in(soap)
	 || soap_recv_header(soap)
	 || soap_body_begin_in(soap))
		return soap_closesock(soap);
	soap_get_klfts_RegisterUpdateAgentResponse(soap, &r, "klfts-RegisterUpdateAgentResponse", "");
	if (soap->error)
	{	if (soap->error == SOAP_TAG_MISMATCH && soap->level == 2)
			return soap_recv_fault(soap);
		return soap_closesock(soap);
	}
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
#ifndef WITH_LEANER
	 || soap_resolve_attachments(soap)
#endif
	 || soap_end_recv(soap))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

SOAP_FMAC5 int SOAP_FMAC6 soap_call_klfts_ModifyUpdateAgent(struct soap *soap, const char *URL, const char *action, klfts_update_agent_info updateAgentInfo, struct klfts_ModifyUpdateAgentResponse &r)
{
	struct klfts_ModifyUpdateAgent soap_tmp_klfts_ModifyUpdateAgent;
	soap->encodingStyle = NULL;
	soap_tmp_klfts_ModifyUpdateAgent.updateAgentInfo=updateAgentInfo;
	soap_begin(soap);
	soap_serializeheader(soap);
	soap_serialize_klfts_ModifyUpdateAgent(soap, &soap_tmp_klfts_ModifyUpdateAgent);
	soap_begin_count(soap);
	if (soap->mode & SOAP_IO_LENGTH)
	{	soap_envelope_begin_out(soap);
		soap_putheader(soap);
		soap_body_begin_out(soap);
		soap_put_klfts_ModifyUpdateAgent(soap, &soap_tmp_klfts_ModifyUpdateAgent, "klfts-ModifyUpdateAgent", "");
		soap_body_end_out(soap);
		soap_envelope_end_out(soap);
	}
	if (soap_connect(soap, URL, action)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put_klfts_ModifyUpdateAgent(soap, &soap_tmp_klfts_ModifyUpdateAgent, "klfts-ModifyUpdateAgent", "")
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap_closesock(soap);
	soap_default_klfts_ModifyUpdateAgentResponse(soap, &r);
	if (soap_begin_recv(soap)
	 || soap_envelope_begin_in(soap)
	 || soap_recv_header(soap)
	 || soap_body_begin_in(soap))
		return soap_closesock(soap);
	soap_get_klfts_ModifyUpdateAgentResponse(soap, &r, "klfts-ModifyUpdateAgentResponse", "");
	if (soap->error)
	{	if (soap->error == SOAP_TAG_MISMATCH && soap->level == 2)
			return soap_recv_fault(soap);
		return soap_closesock(soap);
	}
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
#ifndef WITH_LEANER
	 || soap_resolve_attachments(soap)
#endif
	 || soap_end_recv(soap))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

SOAP_FMAC5 int SOAP_FMAC6 soap_call_klfts_UnregisterUpdateAgent(struct soap *soap, const char *URL, const char *action, wchar_t *strAgentHostId, struct klfts_UnregisterUpdateAgentResponse &r)
{
	struct klfts_UnregisterUpdateAgent soap_tmp_klfts_UnregisterUpdateAgent;
	soap->encodingStyle = NULL;
	soap_tmp_klfts_UnregisterUpdateAgent.strAgentHostId=strAgentHostId;
	soap_begin(soap);
	soap_serializeheader(soap);
	soap_serialize_klfts_UnregisterUpdateAgent(soap, &soap_tmp_klfts_UnregisterUpdateAgent);
	soap_begin_count(soap);
	if (soap->mode & SOAP_IO_LENGTH)
	{	soap_envelope_begin_out(soap);
		soap_putheader(soap);
		soap_body_begin_out(soap);
		soap_put_klfts_UnregisterUpdateAgent(soap, &soap_tmp_klfts_UnregisterUpdateAgent, "klfts-UnregisterUpdateAgent", "");
		soap_body_end_out(soap);
		soap_envelope_end_out(soap);
	}
	if (soap_connect(soap, URL, action)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put_klfts_UnregisterUpdateAgent(soap, &soap_tmp_klfts_UnregisterUpdateAgent, "klfts-UnregisterUpdateAgent", "")
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap_closesock(soap);
	soap_default_klfts_UnregisterUpdateAgentResponse(soap, &r);
	if (soap_begin_recv(soap)
	 || soap_envelope_begin_in(soap)
	 || soap_recv_header(soap)
	 || soap_body_begin_in(soap))
		return soap_closesock(soap);
	soap_get_klfts_UnregisterUpdateAgentResponse(soap, &r, "klfts-UnregisterUpdateAgentResponse", "");
	if (soap->error)
	{	if (soap->error == SOAP_TAG_MISMATCH && soap->level == 2)
			return soap_recv_fault(soap);
		return soap_closesock(soap);
	}
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
#ifndef WITH_LEANER
	 || soap_resolve_attachments(soap)
#endif
	 || soap_end_recv(soap))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

SOAP_FMAC5 int SOAP_FMAC6 soap_call_klfts_GetDefaultUpdateAgentRegistrationInfo(struct soap *soap, const char *URL, const char *action, int nGroupId, struct klfts_GetDefaultUpdateAgentRegistrationInfoResponse &r)
{
	struct klfts_GetDefaultUpdateAgentRegistrationInfo soap_tmp_klfts_GetDefaultUpdateAgentRegistrationInfo;
	soap->encodingStyle = NULL;
	soap_tmp_klfts_GetDefaultUpdateAgentRegistrationInfo.nGroupId=nGroupId;
	soap_begin(soap);
	soap_serializeheader(soap);
	soap_serialize_klfts_GetDefaultUpdateAgentRegistrationInfo(soap, &soap_tmp_klfts_GetDefaultUpdateAgentRegistrationInfo);
	soap_begin_count(soap);
	if (soap->mode & SOAP_IO_LENGTH)
	{	soap_envelope_begin_out(soap);
		soap_putheader(soap);
		soap_body_begin_out(soap);
		soap_put_klfts_GetDefaultUpdateAgentRegistrationInfo(soap, &soap_tmp_klfts_GetDefaultUpdateAgentRegistrationInfo, "klfts-GetDefaultUpdateAgentRegistrationInfo", "");
		soap_body_end_out(soap);
		soap_envelope_end_out(soap);
	}
	if (soap_connect(soap, URL, action)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put_klfts_GetDefaultUpdateAgentRegistrationInfo(soap, &soap_tmp_klfts_GetDefaultUpdateAgentRegistrationInfo, "klfts-GetDefaultUpdateAgentRegistrationInfo", "")
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap_closesock(soap);
	soap_default_klfts_GetDefaultUpdateAgentRegistrationInfoResponse(soap, &r);
	if (soap_begin_recv(soap)
	 || soap_envelope_begin_in(soap)
	 || soap_recv_header(soap)
	 || soap_body_begin_in(soap))
		return soap_closesock(soap);
	soap_get_klfts_GetDefaultUpdateAgentRegistrationInfoResponse(soap, &r, "klfts-GetDefaultUpdateAgentRegistrationInfoResponse", "");
	if (soap->error)
	{	if (soap->error == SOAP_TAG_MISMATCH && soap->level == 2)
			return soap_recv_fault(soap);
		return soap_closesock(soap);
	}
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
#ifndef WITH_LEANER
	 || soap_resolve_attachments(soap)
#endif
	 || soap_end_recv(soap))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

SOAP_FMAC5 int SOAP_FMAC6 soap_call_klfts_GetUpdateAgentsForGroup(struct soap *soap, const char *URL, const char *action, int nGroupId, struct klfts_GetUpdateAgentsForGroupResponse &r)
{
	struct klfts_GetUpdateAgentsForGroup soap_tmp_klfts_GetUpdateAgentsForGroup;
	soap->encodingStyle = NULL;
	soap_tmp_klfts_GetUpdateAgentsForGroup.nGroupId=nGroupId;
	soap_begin(soap);
	soap_serializeheader(soap);
	soap_serialize_klfts_GetUpdateAgentsForGroup(soap, &soap_tmp_klfts_GetUpdateAgentsForGroup);
	soap_begin_count(soap);
	if (soap->mode & SOAP_IO_LENGTH)
	{	soap_envelope_begin_out(soap);
		soap_putheader(soap);
		soap_body_begin_out(soap);
		soap_put_klfts_GetUpdateAgentsForGroup(soap, &soap_tmp_klfts_GetUpdateAgentsForGroup, "klfts-GetUpdateAgentsForGroup", "");
		soap_body_end_out(soap);
		soap_envelope_end_out(soap);
	}
	if (soap_connect(soap, URL, action)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put_klfts_GetUpdateAgentsForGroup(soap, &soap_tmp_klfts_GetUpdateAgentsForGroup, "klfts-GetUpdateAgentsForGroup", "")
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap_closesock(soap);
	soap_default_klfts_GetUpdateAgentsForGroupResponse(soap, &r);
	if (soap_begin_recv(soap)
	 || soap_envelope_begin_in(soap)
	 || soap_recv_header(soap)
	 || soap_body_begin_in(soap))
		return soap_closesock(soap);
	soap_get_klfts_GetUpdateAgentsForGroupResponse(soap, &r, "klfts-GetUpdateAgentsForGroupResponse", "");
	if (soap->error)
	{	if (soap->error == SOAP_TAG_MISMATCH && soap->level == 2)
			return soap_recv_fault(soap);
		return soap_closesock(soap);
	}
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
#ifndef WITH_LEANER
	 || soap_resolve_attachments(soap)
#endif
	 || soap_end_recv(soap))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

SOAP_FMAC5 int SOAP_FMAC6 soap_call_klfts_GetUpdateAgentInfo(struct soap *soap, const char *URL, const char *action, wchar_t *strAgentHostId, struct klfts_GetUpdateAgentInfoResponse &r)
{
	struct klfts_GetUpdateAgentInfo soap_tmp_klfts_GetUpdateAgentInfo;
	soap->encodingStyle = NULL;
	soap_tmp_klfts_GetUpdateAgentInfo.strAgentHostId=strAgentHostId;
	soap_begin(soap);
	soap_serializeheader(soap);
	soap_serialize_klfts_GetUpdateAgentInfo(soap, &soap_tmp_klfts_GetUpdateAgentInfo);
	soap_begin_count(soap);
	if (soap->mode & SOAP_IO_LENGTH)
	{	soap_envelope_begin_out(soap);
		soap_putheader(soap);
		soap_body_begin_out(soap);
		soap_put_klfts_GetUpdateAgentInfo(soap, &soap_tmp_klfts_GetUpdateAgentInfo, "klfts-GetUpdateAgentInfo", "");
		soap_body_end_out(soap);
		soap_envelope_end_out(soap);
	}
	if (soap_connect(soap, URL, action)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put_klfts_GetUpdateAgentInfo(soap, &soap_tmp_klfts_GetUpdateAgentInfo, "klfts-GetUpdateAgentInfo", "")
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap_closesock(soap);
	soap_default_klfts_GetUpdateAgentInfoResponse(soap, &r);
	if (soap_begin_recv(soap)
	 || soap_envelope_begin_in(soap)
	 || soap_recv_header(soap)
	 || soap_body_begin_in(soap))
		return soap_closesock(soap);
	soap_get_klfts_GetUpdateAgentInfoResponse(soap, &r, "klfts-GetUpdateAgentInfoResponse", "");
	if (soap->error)
	{	if (soap->error == SOAP_TAG_MISMATCH && soap->level == 2)
			return soap_recv_fault(soap);
		return soap_closesock(soap);
	}
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
#ifndef WITH_LEANER
	 || soap_resolve_attachments(soap)
#endif
	 || soap_end_recv(soap))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

SOAP_FMAC5 int SOAP_FMAC6 soap_call_klfts_UseUAForSyncFolder(struct soap *soap, const char *URL, const char *action, wchar_t *strAgentHostId, wchar_t *strSyncFolderName, bool bUse, struct klfts_UseUAForSyncFolderResponse &r)
{
	struct klfts_UseUAForSyncFolder soap_tmp_klfts_UseUAForSyncFolder;
	soap->encodingStyle = NULL;
	soap_tmp_klfts_UseUAForSyncFolder.strAgentHostId=strAgentHostId;
	soap_tmp_klfts_UseUAForSyncFolder.strSyncFolderName=strSyncFolderName;
	soap_tmp_klfts_UseUAForSyncFolder.bUse=bUse;
	soap_begin(soap);
	soap_serializeheader(soap);
	soap_serialize_klfts_UseUAForSyncFolder(soap, &soap_tmp_klfts_UseUAForSyncFolder);
	soap_begin_count(soap);
	if (soap->mode & SOAP_IO_LENGTH)
	{	soap_envelope_begin_out(soap);
		soap_putheader(soap);
		soap_body_begin_out(soap);
		soap_put_klfts_UseUAForSyncFolder(soap, &soap_tmp_klfts_UseUAForSyncFolder, "klfts-UseUAForSyncFolder", "");
		soap_body_end_out(soap);
		soap_envelope_end_out(soap);
	}
	if (soap_connect(soap, URL, action)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put_klfts_UseUAForSyncFolder(soap, &soap_tmp_klfts_UseUAForSyncFolder, "klfts-UseUAForSyncFolder", "")
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap_closesock(soap);
	soap_default_klfts_UseUAForSyncFolderResponse(soap, &r);
	if (soap_begin_recv(soap)
	 || soap_envelope_begin_in(soap)
	 || soap_recv_header(soap)
	 || soap_body_begin_in(soap))
		return soap_closesock(soap);
	soap_get_klfts_UseUAForSyncFolderResponse(soap, &r, "klfts-UseUAForSyncFolderResponse", "");
	if (soap->error)
	{	if (soap->error == SOAP_TAG_MISMATCH && soap->level == 2)
			return soap_recv_fault(soap);
		return soap_closesock(soap);
	}
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
#ifndef WITH_LEANER
	 || soap_resolve_attachments(soap)
#endif
	 || soap_end_recv(soap))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

SOAP_FMAC5 int SOAP_FMAC6 soap_call_klfts_GetUseUAForSyncFolder(struct soap *soap, const char *URL, const char *action, wchar_t *strAgentHostId, wchar_t *strSyncFolderName, struct klfts_GetUseUAForSyncFolderResponse &r)
{
	struct klfts_GetUseUAForSyncFolder soap_tmp_klfts_GetUseUAForSyncFolder;
	soap->encodingStyle = NULL;
	soap_tmp_klfts_GetUseUAForSyncFolder.strAgentHostId=strAgentHostId;
	soap_tmp_klfts_GetUseUAForSyncFolder.strSyncFolderName=strSyncFolderName;
	soap_begin(soap);
	soap_serializeheader(soap);
	soap_serialize_klfts_GetUseUAForSyncFolder(soap, &soap_tmp_klfts_GetUseUAForSyncFolder);
	soap_begin_count(soap);
	if (soap->mode & SOAP_IO_LENGTH)
	{	soap_envelope_begin_out(soap);
		soap_putheader(soap);
		soap_body_begin_out(soap);
		soap_put_klfts_GetUseUAForSyncFolder(soap, &soap_tmp_klfts_GetUseUAForSyncFolder, "klfts-GetUseUAForSyncFolder", "");
		soap_body_end_out(soap);
		soap_envelope_end_out(soap);
	}
	if (soap_connect(soap, URL, action)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put_klfts_GetUseUAForSyncFolder(soap, &soap_tmp_klfts_GetUseUAForSyncFolder, "klfts-GetUseUAForSyncFolder", "")
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap_closesock(soap);
	soap_default_klfts_GetUseUAForSyncFolderResponse(soap, &r);
	if (soap_begin_recv(soap)
	 || soap_envelope_begin_in(soap)
	 || soap_recv_header(soap)
	 || soap_body_begin_in(soap))
		return soap_closesock(soap);
	soap_get_klfts_GetUseUAForSyncFolderResponse(soap, &r, "klfts-GetUseUAForSyncFolderResponse", "");
	if (soap->error)
	{	if (soap->error == SOAP_TAG_MISMATCH && soap->level == 2)
			return soap_recv_fault(soap);
		return soap_closesock(soap);
	}
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
#ifndef WITH_LEANER
	 || soap_resolve_attachments(soap)
#endif
	 || soap_end_recv(soap))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

SOAP_FMAC5 int SOAP_FMAC6 soap_call_klcmptrsft_GetCompetitorSoftwareList(struct soap *soap, const char *URL, const char *action, struct klcmptrsft_GetCompetitorSoftwareLisResponse &r)
{
	struct klcmptrsft_GetCompetitorSoftwareList soap_tmp_klcmptrsft_GetCompetitorSoftwareList;
	soap->encodingStyle = NULL;
	soap_begin(soap);
	soap_serializeheader(soap);
	soap_serialize_klcmptrsft_GetCompetitorSoftwareList(soap, &soap_tmp_klcmptrsft_GetCompetitorSoftwareList);
	soap_begin_count(soap);
	if (soap->mode & SOAP_IO_LENGTH)
	{	soap_envelope_begin_out(soap);
		soap_putheader(soap);
		soap_body_begin_out(soap);
		soap_put_klcmptrsft_GetCompetitorSoftwareList(soap, &soap_tmp_klcmptrsft_GetCompetitorSoftwareList, "klcmptrsft-GetCompetitorSoftwareList", "");
		soap_body_end_out(soap);
		soap_envelope_end_out(soap);
	}
	if (soap_connect(soap, URL, action)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put_klcmptrsft_GetCompetitorSoftwareList(soap, &soap_tmp_klcmptrsft_GetCompetitorSoftwareList, "klcmptrsft-GetCompetitorSoftwareList", "")
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap_closesock(soap);
	soap_default_klcmptrsft_GetCompetitorSoftwareLisResponse(soap, &r);
	if (soap_begin_recv(soap)
	 || soap_envelope_begin_in(soap)
	 || soap_recv_header(soap)
	 || soap_body_begin_in(soap))
		return soap_closesock(soap);
	soap_get_klcmptrsft_GetCompetitorSoftwareLisResponse(soap, &r, "klcmptrsft-GetCompetitorSoftwareLisResponse", "");
	if (soap->error)
	{	if (soap->error == SOAP_TAG_MISMATCH && soap->level == 2)
			return soap_recv_fault(soap);
		return soap_closesock(soap);
	}
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
#ifndef WITH_LEANER
	 || soap_resolve_attachments(soap)
#endif
	 || soap_end_recv(soap))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

SOAP_FMAC5 int SOAP_FMAC6 soap_call_klcmptrsft_GetHostCompetitorSoftwareList(struct soap *soap, const char *URL, const char *action, long hostId, struct klcmptrsft_GetHostCompetitorSoftwareListResponse &r)
{
	struct klcmptrsft_GetHostCompetitorSoftwareList soap_tmp_klcmptrsft_GetHostCompetitorSoftwareList;
	soap->encodingStyle = NULL;
	soap_tmp_klcmptrsft_GetHostCompetitorSoftwareList.hostId=hostId;
	soap_begin(soap);
	soap_serializeheader(soap);
	soap_serialize_klcmptrsft_GetHostCompetitorSoftwareList(soap, &soap_tmp_klcmptrsft_GetHostCompetitorSoftwareList);
	soap_begin_count(soap);
	if (soap->mode & SOAP_IO_LENGTH)
	{	soap_envelope_begin_out(soap);
		soap_putheader(soap);
		soap_body_begin_out(soap);
		soap_put_klcmptrsft_GetHostCompetitorSoftwareList(soap, &soap_tmp_klcmptrsft_GetHostCompetitorSoftwareList, "klcmptrsft-GetHostCompetitorSoftwareList", "");
		soap_body_end_out(soap);
		soap_envelope_end_out(soap);
	}
	if (soap_connect(soap, URL, action)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put_klcmptrsft_GetHostCompetitorSoftwareList(soap, &soap_tmp_klcmptrsft_GetHostCompetitorSoftwareList, "klcmptrsft-GetHostCompetitorSoftwareList", "")
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap_closesock(soap);
	soap_default_klcmptrsft_GetHostCompetitorSoftwareListResponse(soap, &r);
	if (soap_begin_recv(soap)
	 || soap_envelope_begin_in(soap)
	 || soap_recv_header(soap)
	 || soap_body_begin_in(soap))
		return soap_closesock(soap);
	soap_get_klcmptrsft_GetHostCompetitorSoftwareListResponse(soap, &r, "klcmptrsft-GetHostCompetitorSoftwareListResponse", "");
	if (soap->error)
	{	if (soap->error == SOAP_TAG_MISMATCH && soap->level == 2)
			return soap_recv_fault(soap);
		return soap_closesock(soap);
	}
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
#ifndef WITH_LEANER
	 || soap_resolve_attachments(soap)
#endif
	 || soap_end_recv(soap))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

SOAP_FMAC5 int SOAP_FMAC6 soap_call_aklwngt__SessionBegin(struct soap *soap, const char *URL, const char *action, char *szDeviceId, char *szPassword, int nProtocolVersion, struct aklwngt__SessionBeginResponse &r)
{
	struct aklwngt__SessionBegin soap_tmp_aklwngt__SessionBegin;
	soap->encodingStyle = NULL;
	soap_tmp_aklwngt__SessionBegin.szDeviceId=szDeviceId;
	soap_tmp_aklwngt__SessionBegin.szPassword=szPassword;
	soap_tmp_aklwngt__SessionBegin.nProtocolVersion=nProtocolVersion;
	soap_begin(soap);
	soap_serializeheader(soap);
	soap_serialize_aklwngt__SessionBegin(soap, &soap_tmp_aklwngt__SessionBegin);
	soap_begin_count(soap);
	if (soap->mode & SOAP_IO_LENGTH)
	{	soap_envelope_begin_out(soap);
		soap_putheader(soap);
		soap_body_begin_out(soap);
		soap_put_aklwngt__SessionBegin(soap, &soap_tmp_aklwngt__SessionBegin, "aklwngt:SessionBegin", "");
		soap_body_end_out(soap);
		soap_envelope_end_out(soap);
	}
	if (soap_connect(soap, URL, action)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put_aklwngt__SessionBegin(soap, &soap_tmp_aklwngt__SessionBegin, "aklwngt:SessionBegin", "")
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap_closesock(soap);
	soap_default_aklwngt__SessionBeginResponse(soap, &r);
	if (soap_begin_recv(soap)
	 || soap_envelope_begin_in(soap)
	 || soap_recv_header(soap)
	 || soap_body_begin_in(soap))
		return soap_closesock(soap);
	soap_get_aklwngt__SessionBeginResponse(soap, &r, "aklwngt:SessionBeginResponse", "");
	if (soap->error)
	{	if (soap->error == SOAP_TAG_MISMATCH && soap->level == 2)
			return soap_recv_fault(soap);
		return soap_closesock(soap);
	}
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
#ifndef WITH_LEANER
	 || soap_resolve_attachments(soap)
#endif
	 || soap_end_recv(soap))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

SOAP_FMAC5 int SOAP_FMAC6 soap_call_aklwngt__SessionEnd(struct soap *soap, const char *URL, const char *action, char *szSessionId, struct aklwngt__SessionEndResponse &r)
{
	struct aklwngt__SessionEnd soap_tmp_aklwngt__SessionEnd;
	soap->encodingStyle = NULL;
	soap_tmp_aklwngt__SessionEnd.szSessionId=szSessionId;
	soap_begin(soap);
	soap_serializeheader(soap);
	soap_serialize_aklwngt__SessionEnd(soap, &soap_tmp_aklwngt__SessionEnd);
	soap_begin_count(soap);
	if (soap->mode & SOAP_IO_LENGTH)
	{	soap_envelope_begin_out(soap);
		soap_putheader(soap);
		soap_body_begin_out(soap);
		soap_put_aklwngt__SessionEnd(soap, &soap_tmp_aklwngt__SessionEnd, "aklwngt:SessionEnd", "");
		soap_body_end_out(soap);
		soap_envelope_end_out(soap);
	}
	if (soap_connect(soap, URL, action)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put_aklwngt__SessionEnd(soap, &soap_tmp_aklwngt__SessionEnd, "aklwngt:SessionEnd", "")
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap_closesock(soap);
	soap_default_aklwngt__SessionEndResponse(soap, &r);
	if (soap_begin_recv(soap)
	 || soap_envelope_begin_in(soap)
	 || soap_recv_header(soap)
	 || soap_body_begin_in(soap))
		return soap_closesock(soap);
	soap_get_aklwngt__SessionEndResponse(soap, &r, "aklwngt:SessionEndResponse", "");
	if (soap->error)
	{	if (soap->error == SOAP_TAG_MISMATCH && soap->level == 2)
			return soap_recv_fault(soap);
		return soap_closesock(soap);
	}
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
#ifndef WITH_LEANER
	 || soap_resolve_attachments(soap)
#endif
	 || soap_end_recv(soap))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

SOAP_FMAC5 int SOAP_FMAC6 soap_call_aklwngt__Heartbeat(struct soap *soap, const char *URL, const char *action, char *szSessionId, struct aklwngt__sync_info *oMaySynchronize, struct aklwngt__HeartbeatResponse &r)
{
	struct aklwngt__Heartbeat soap_tmp_aklwngt__Heartbeat;
	soap->encodingStyle = NULL;
	soap_tmp_aklwngt__Heartbeat.szSessionId=szSessionId;
	soap_tmp_aklwngt__Heartbeat.oMaySynchronize=oMaySynchronize;
	soap_begin(soap);
	soap_serializeheader(soap);
	soap_serialize_aklwngt__Heartbeat(soap, &soap_tmp_aklwngt__Heartbeat);
	soap_begin_count(soap);
	if (soap->mode & SOAP_IO_LENGTH)
	{	soap_envelope_begin_out(soap);
		soap_putheader(soap);
		soap_body_begin_out(soap);
		soap_put_aklwngt__Heartbeat(soap, &soap_tmp_aklwngt__Heartbeat, "aklwngt:Heartbeat", "");
		soap_body_end_out(soap);
		soap_envelope_end_out(soap);
	}
	if (soap_connect(soap, URL, action)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put_aklwngt__Heartbeat(soap, &soap_tmp_aklwngt__Heartbeat, "aklwngt:Heartbeat", "")
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap_closesock(soap);
	soap_default_aklwngt__HeartbeatResponse(soap, &r);
	if (soap_begin_recv(soap)
	 || soap_envelope_begin_in(soap)
	 || soap_recv_header(soap)
	 || soap_body_begin_in(soap))
		return soap_closesock(soap);
	soap_get_aklwngt__HeartbeatResponse(soap, &r, "aklwngt:HeartbeatResponse", "");
	if (soap->error)
	{	if (soap->error == SOAP_TAG_MISMATCH && soap->level == 2)
			return soap_recv_fault(soap);
		return soap_closesock(soap);
	}
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
#ifndef WITH_LEANER
	 || soap_resolve_attachments(soap)
#endif
	 || soap_end_recv(soap))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

SOAP_FMAC5 int SOAP_FMAC6 soap_call_aklwngt__PutResult(struct soap *soap, const char *URL, const char *action, char *szSessionId, struct aklwngt__command *result, struct aklwngt__PutResultResponse &r)
{
	struct aklwngt__PutResult soap_tmp_aklwngt__PutResult;
	soap->encodingStyle = NULL;
	soap_tmp_aklwngt__PutResult.szSessionId=szSessionId;
	soap_tmp_aklwngt__PutResult.result=result;
	soap_begin(soap);
	soap_serializeheader(soap);
	soap_serialize_aklwngt__PutResult(soap, &soap_tmp_aklwngt__PutResult);
	soap_begin_count(soap);
	if (soap->mode & SOAP_IO_LENGTH)
	{	soap_envelope_begin_out(soap);
		soap_putheader(soap);
		soap_body_begin_out(soap);
		soap_put_aklwngt__PutResult(soap, &soap_tmp_aklwngt__PutResult, "aklwngt:PutResult", "");
		soap_body_end_out(soap);
		soap_envelope_end_out(soap);
	}
	if (soap_connect(soap, URL, action)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put_aklwngt__PutResult(soap, &soap_tmp_aklwngt__PutResult, "aklwngt:PutResult", "")
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap_closesock(soap);
	soap_default_aklwngt__PutResultResponse(soap, &r);
	if (soap_begin_recv(soap)
	 || soap_envelope_begin_in(soap)
	 || soap_recv_header(soap)
	 || soap_body_begin_in(soap))
		return soap_closesock(soap);
	soap_get_aklwngt__PutResultResponse(soap, &r, "aklwngt:PutResultResponse", "");
	if (soap->error)
	{	if (soap->error == SOAP_TAG_MISMATCH && soap->level == 2)
			return soap_recv_fault(soap);
		return soap_closesock(soap);
	}
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
#ifndef WITH_LEANER
	 || soap_resolve_attachments(soap)
#endif
	 || soap_end_recv(soap))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

SOAP_FMAC5 int SOAP_FMAC6 soap_call_aklwngt__PutEvents(struct soap *soap, const char *URL, const char *action, char *szSessionId, struct aklwngt__event_info_array *oEventsInfoArray, struct aklwngt__PutEventsResponse &r)
{
	struct aklwngt__PutEvents soap_tmp_aklwngt__PutEvents;
	soap->encodingStyle = NULL;
	soap_tmp_aklwngt__PutEvents.szSessionId=szSessionId;
	soap_tmp_aklwngt__PutEvents.oEventsInfoArray=oEventsInfoArray;
	soap_begin(soap);
	soap_serializeheader(soap);
	soap_serialize_aklwngt__PutEvents(soap, &soap_tmp_aklwngt__PutEvents);
	soap_begin_count(soap);
	if (soap->mode & SOAP_IO_LENGTH)
	{	soap_envelope_begin_out(soap);
		soap_putheader(soap);
		soap_body_begin_out(soap);
		soap_put_aklwngt__PutEvents(soap, &soap_tmp_aklwngt__PutEvents, "aklwngt:PutEvents", "");
		soap_body_end_out(soap);
		soap_envelope_end_out(soap);
	}
	if (soap_connect(soap, URL, action)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put_aklwngt__PutEvents(soap, &soap_tmp_aklwngt__PutEvents, "aklwngt:PutEvents", "")
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap_closesock(soap);
	soap_default_aklwngt__PutEventsResponse(soap, &r);
	if (soap_begin_recv(soap)
	 || soap_envelope_begin_in(soap)
	 || soap_recv_header(soap)
	 || soap_body_begin_in(soap))
		return soap_closesock(soap);
	soap_get_aklwngt__PutEventsResponse(soap, &r, "aklwngt:PutEventsResponse", "");
	if (soap->error)
	{	if (soap->error == SOAP_TAG_MISMATCH && soap->level == 2)
			return soap_recv_fault(soap);
		return soap_closesock(soap);
	}
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
#ifndef WITH_LEANER
	 || soap_resolve_attachments(soap)
#endif
	 || soap_end_recv(soap))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

SOAP_FMAC5 int SOAP_FMAC6 soap_call_aklwngt__klft_GetFileInfo(struct soap *soap, const char *URL, const char *action, char *szSessionId, wchar_t *fileName, struct aklwngt__klft_GetFileInfoResponse &r)
{
	struct aklwngt__klft_GetFileInfo soap_tmp_aklwngt__klft_GetFileInfo;
	soap->encodingStyle = NULL;
	soap_tmp_aklwngt__klft_GetFileInfo.szSessionId=szSessionId;
	soap_tmp_aklwngt__klft_GetFileInfo.fileName=fileName;
	soap_begin(soap);
	soap_serializeheader(soap);
	soap_serialize_aklwngt__klft_GetFileInfo(soap, &soap_tmp_aklwngt__klft_GetFileInfo);
	soap_begin_count(soap);
	if (soap->mode & SOAP_IO_LENGTH)
	{	soap_envelope_begin_out(soap);
		soap_putheader(soap);
		soap_body_begin_out(soap);
		soap_put_aklwngt__klft_GetFileInfo(soap, &soap_tmp_aklwngt__klft_GetFileInfo, "aklwngt:klft-GetFileInfo", "");
		soap_body_end_out(soap);
		soap_envelope_end_out(soap);
	}
	if (soap_connect(soap, URL, action)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put_aklwngt__klft_GetFileInfo(soap, &soap_tmp_aklwngt__klft_GetFileInfo, "aklwngt:klft-GetFileInfo", "")
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap_closesock(soap);
	soap_default_aklwngt__klft_GetFileInfoResponse(soap, &r);
	if (soap_begin_recv(soap)
	 || soap_envelope_begin_in(soap)
	 || soap_recv_header(soap)
	 || soap_body_begin_in(soap))
		return soap_closesock(soap);
	soap_get_aklwngt__klft_GetFileInfoResponse(soap, &r, "aklwngt:klft-GetFileInfoResponse", "");
	if (soap->error)
	{	if (soap->error == SOAP_TAG_MISMATCH && soap->level == 2)
			return soap_recv_fault(soap);
		return soap_closesock(soap);
	}
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
#ifndef WITH_LEANER
	 || soap_resolve_attachments(soap)
#endif
	 || soap_end_recv(soap))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

SOAP_FMAC5 int SOAP_FMAC6 soap_call_aklwngt__klft_GetNextFileChunk(struct soap *soap, const char *URL, const char *action, char *szSessionId, wchar_t *fileName, ULONG64 startFilePos, ULONG64 neededSize, struct aklwngt__klft_GetNextFileChunkResponse &r)
{
	struct aklwngt__klft_GetNextFileChunk soap_tmp_aklwngt__klft_GetNextFileChunk;
	soap->encodingStyle = NULL;
	soap_tmp_aklwngt__klft_GetNextFileChunk.szSessionId=szSessionId;
	soap_tmp_aklwngt__klft_GetNextFileChunk.fileName=fileName;
	soap_tmp_aklwngt__klft_GetNextFileChunk.startFilePos=startFilePos;
	soap_tmp_aklwngt__klft_GetNextFileChunk.neededSize=neededSize;
	soap_begin(soap);
	soap_serializeheader(soap);
	soap_serialize_aklwngt__klft_GetNextFileChunk(soap, &soap_tmp_aklwngt__klft_GetNextFileChunk);
	soap_begin_count(soap);
	if (soap->mode & SOAP_IO_LENGTH)
	{	soap_envelope_begin_out(soap);
		soap_putheader(soap);
		soap_body_begin_out(soap);
		soap_put_aklwngt__klft_GetNextFileChunk(soap, &soap_tmp_aklwngt__klft_GetNextFileChunk, "aklwngt:klft-GetNextFileChunk", "");
		soap_body_end_out(soap);
		soap_envelope_end_out(soap);
	}
	if (soap_connect(soap, URL, action)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put_aklwngt__klft_GetNextFileChunk(soap, &soap_tmp_aklwngt__klft_GetNextFileChunk, "aklwngt:klft-GetNextFileChunk", "")
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap_closesock(soap);
	soap_default_aklwngt__klft_GetNextFileChunkResponse(soap, &r);
	if (soap_begin_recv(soap)
	 || soap_envelope_begin_in(soap)
	 || soap_recv_header(soap)
	 || soap_body_begin_in(soap))
		return soap_closesock(soap);
	soap_get_aklwngt__klft_GetNextFileChunkResponse(soap, &r, "aklwngt:klft-GetNextFileChunkResponse", "");
	if (soap->error)
	{	if (soap->error == SOAP_TAG_MISMATCH && soap->level == 2)
			return soap_recv_fault(soap);
		return soap_closesock(soap);
	}
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
#ifndef WITH_LEANER
	 || soap_resolve_attachments(soap)
#endif
	 || soap_end_recv(soap))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

SOAP_FMAC5 int SOAP_FMAC6 soap_call_klptch_get_nagent_latest_patch_info(struct soap *soap, const char *URL, const char *action, param__params nagent_data, struct klptch_get_nagent_latest_patch_infoResponse &r)
{
	struct klptch_get_nagent_latest_patch_info soap_tmp_klptch_get_nagent_latest_patch_info;
	soap->encodingStyle = NULL;
	soap_tmp_klptch_get_nagent_latest_patch_info.nagent_data=nagent_data;
	soap_begin(soap);
	soap_serializeheader(soap);
	soap_serialize_klptch_get_nagent_latest_patch_info(soap, &soap_tmp_klptch_get_nagent_latest_patch_info);
	soap_begin_count(soap);
	if (soap->mode & SOAP_IO_LENGTH)
	{	soap_envelope_begin_out(soap);
		soap_putheader(soap);
		soap_body_begin_out(soap);
		soap_put_klptch_get_nagent_latest_patch_info(soap, &soap_tmp_klptch_get_nagent_latest_patch_info, "klptch-get-nagent-latest-patch-info", "");
		soap_body_end_out(soap);
		soap_envelope_end_out(soap);
	}
	if (soap_connect(soap, URL, action)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put_klptch_get_nagent_latest_patch_info(soap, &soap_tmp_klptch_get_nagent_latest_patch_info, "klptch-get-nagent-latest-patch-info", "")
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap_closesock(soap);
	soap_default_klptch_get_nagent_latest_patch_infoResponse(soap, &r);
	if (soap_begin_recv(soap)
	 || soap_envelope_begin_in(soap)
	 || soap_recv_header(soap)
	 || soap_body_begin_in(soap))
		return soap_closesock(soap);
	soap_get_klptch_get_nagent_latest_patch_infoResponse(soap, &r, "klptch-get-nagent-latest-patch-infoResponse", "");
	if (soap->error)
	{	if (soap->error == SOAP_TAG_MISMATCH && soap->level == 2)
			return soap_recv_fault(soap);
		return soap_closesock(soap);
	}
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
#ifndef WITH_LEANER
	 || soap_resolve_attachments(soap)
#endif
	 || soap_end_recv(soap))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

SOAP_FMAC5 int SOAP_FMAC6 soap_call_klinv_GetInvProductsList(struct soap *soap, const char *URL, const char *action, struct klinv_GetInvProductsListResponse &r)
{
	struct klinv_GetInvProductsList soap_tmp_klinv_GetInvProductsList;
	soap->encodingStyle = NULL;
	soap_begin(soap);
	soap_serializeheader(soap);
	soap_serialize_klinv_GetInvProductsList(soap, &soap_tmp_klinv_GetInvProductsList);
	soap_begin_count(soap);
	if (soap->mode & SOAP_IO_LENGTH)
	{	soap_envelope_begin_out(soap);
		soap_putheader(soap);
		soap_body_begin_out(soap);
		soap_put_klinv_GetInvProductsList(soap, &soap_tmp_klinv_GetInvProductsList, "klinv-GetInvProductsList", "");
		soap_body_end_out(soap);
		soap_envelope_end_out(soap);
	}
	if (soap_connect(soap, URL, action)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put_klinv_GetInvProductsList(soap, &soap_tmp_klinv_GetInvProductsList, "klinv-GetInvProductsList", "")
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap_closesock(soap);
	soap_default_klinv_GetInvProductsListResponse(soap, &r);
	if (soap_begin_recv(soap)
	 || soap_envelope_begin_in(soap)
	 || soap_recv_header(soap)
	 || soap_body_begin_in(soap))
		return soap_closesock(soap);
	soap_get_klinv_GetInvProductsListResponse(soap, &r, "klinv-GetInvProductsListResponse", "");
	if (soap->error)
	{	if (soap->error == SOAP_TAG_MISMATCH && soap->level == 2)
			return soap_recv_fault(soap);
		return soap_closesock(soap);
	}
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
#ifndef WITH_LEANER
	 || soap_resolve_attachments(soap)
#endif
	 || soap_end_recv(soap))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

SOAP_FMAC5 int SOAP_FMAC6 soap_call_klinv_GetInvPatchesList(struct soap *soap, const char *URL, const char *action, struct klinv_GetInvPatchesListResponse &r)
{
	struct klinv_GetInvPatchesList soap_tmp_klinv_GetInvPatchesList;
	soap->encodingStyle = NULL;
	soap_begin(soap);
	soap_serializeheader(soap);
	soap_serialize_klinv_GetInvPatchesList(soap, &soap_tmp_klinv_GetInvPatchesList);
	soap_begin_count(soap);
	if (soap->mode & SOAP_IO_LENGTH)
	{	soap_envelope_begin_out(soap);
		soap_putheader(soap);
		soap_body_begin_out(soap);
		soap_put_klinv_GetInvPatchesList(soap, &soap_tmp_klinv_GetInvPatchesList, "klinv-GetInvPatchesList", "");
		soap_body_end_out(soap);
		soap_envelope_end_out(soap);
	}
	if (soap_connect(soap, URL, action)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put_klinv_GetInvPatchesList(soap, &soap_tmp_klinv_GetInvPatchesList, "klinv-GetInvPatchesList", "")
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap_closesock(soap);
	soap_default_klinv_GetInvPatchesListResponse(soap, &r);
	if (soap_begin_recv(soap)
	 || soap_envelope_begin_in(soap)
	 || soap_recv_header(soap)
	 || soap_body_begin_in(soap))
		return soap_closesock(soap);
	soap_get_klinv_GetInvPatchesListResponse(soap, &r, "klinv-GetInvPatchesListResponse", "");
	if (soap->error)
	{	if (soap->error == SOAP_TAG_MISMATCH && soap->level == 2)
			return soap_recv_fault(soap);
		return soap_closesock(soap);
	}
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
#ifndef WITH_LEANER
	 || soap_resolve_attachments(soap)
#endif
	 || soap_end_recv(soap))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

SOAP_FMAC5 int SOAP_FMAC6 soap_call_klinv_GetHostInvProductsList(struct soap *soap, const char *URL, const char *action, long hostId, struct klinv_GetHostInvProductsListResponse &r)
{
	struct klinv_GetHostInvProductsList soap_tmp_klinv_GetHostInvProductsList;
	soap->encodingStyle = NULL;
	soap_tmp_klinv_GetHostInvProductsList.hostId=hostId;
	soap_begin(soap);
	soap_serializeheader(soap);
	soap_serialize_klinv_GetHostInvProductsList(soap, &soap_tmp_klinv_GetHostInvProductsList);
	soap_begin_count(soap);
	if (soap->mode & SOAP_IO_LENGTH)
	{	soap_envelope_begin_out(soap);
		soap_putheader(soap);
		soap_body_begin_out(soap);
		soap_put_klinv_GetHostInvProductsList(soap, &soap_tmp_klinv_GetHostInvProductsList, "klinv-GetHostInvProductsList", "");
		soap_body_end_out(soap);
		soap_envelope_end_out(soap);
	}
	if (soap_connect(soap, URL, action)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put_klinv_GetHostInvProductsList(soap, &soap_tmp_klinv_GetHostInvProductsList, "klinv-GetHostInvProductsList", "")
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap_closesock(soap);
	soap_default_klinv_GetHostInvProductsListResponse(soap, &r);
	if (soap_begin_recv(soap)
	 || soap_envelope_begin_in(soap)
	 || soap_recv_header(soap)
	 || soap_body_begin_in(soap))
		return soap_closesock(soap);
	soap_get_klinv_GetHostInvProductsListResponse(soap, &r, "klinv-GetHostInvProductsListResponse", "");
	if (soap->error)
	{	if (soap->error == SOAP_TAG_MISMATCH && soap->level == 2)
			return soap_recv_fault(soap);
		return soap_closesock(soap);
	}
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
#ifndef WITH_LEANER
	 || soap_resolve_attachments(soap)
#endif
	 || soap_end_recv(soap))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

SOAP_FMAC5 int SOAP_FMAC6 soap_call_klinv_GetHostInvPatchesList(struct soap *soap, const char *URL, const char *action, long hostId, struct klinv_GetHostInvPatchesListResponse &r)
{
	struct klinv_GetHostInvPatchesList soap_tmp_klinv_GetHostInvPatchesList;
	soap->encodingStyle = NULL;
	soap_tmp_klinv_GetHostInvPatchesList.hostId=hostId;
	soap_begin(soap);
	soap_serializeheader(soap);
	soap_serialize_klinv_GetHostInvPatchesList(soap, &soap_tmp_klinv_GetHostInvPatchesList);
	soap_begin_count(soap);
	if (soap->mode & SOAP_IO_LENGTH)
	{	soap_envelope_begin_out(soap);
		soap_putheader(soap);
		soap_body_begin_out(soap);
		soap_put_klinv_GetHostInvPatchesList(soap, &soap_tmp_klinv_GetHostInvPatchesList, "klinv-GetHostInvPatchesList", "");
		soap_body_end_out(soap);
		soap_envelope_end_out(soap);
	}
	if (soap_connect(soap, URL, action)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put_klinv_GetHostInvPatchesList(soap, &soap_tmp_klinv_GetHostInvPatchesList, "klinv-GetHostInvPatchesList", "")
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap_closesock(soap);
	soap_default_klinv_GetHostInvPatchesListResponse(soap, &r);
	if (soap_begin_recv(soap)
	 || soap_envelope_begin_in(soap)
	 || soap_recv_header(soap)
	 || soap_body_begin_in(soap))
		return soap_closesock(soap);
	soap_get_klinv_GetHostInvPatchesListResponse(soap, &r, "klinv-GetHostInvPatchesListResponse", "");
	if (soap->error)
	{	if (soap->error == SOAP_TAG_MISMATCH && soap->level == 2)
			return soap_recv_fault(soap);
		return soap_closesock(soap);
	}
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
#ifndef WITH_LEANER
	 || soap_resolve_attachments(soap)
#endif
	 || soap_end_recv(soap))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

SOAP_FMAC5 int SOAP_FMAC6 soap_call_klinv_GetSrvCompetitorIniFileInfoList(struct soap *soap, const char *URL, const char *action, wchar_t *wstrType, struct klinv_GetSrvCompetitorIniFileInfoListResponse &r)
{
	struct klinv_GetSrvCompetitorIniFileInfoList soap_tmp_klinv_GetSrvCompetitorIniFileInfoList;
	soap->encodingStyle = NULL;
	soap_tmp_klinv_GetSrvCompetitorIniFileInfoList.wstrType=wstrType;
	soap_begin(soap);
	soap_serializeheader(soap);
	soap_serialize_klinv_GetSrvCompetitorIniFileInfoList(soap, &soap_tmp_klinv_GetSrvCompetitorIniFileInfoList);
	soap_begin_count(soap);
	if (soap->mode & SOAP_IO_LENGTH)
	{	soap_envelope_begin_out(soap);
		soap_putheader(soap);
		soap_body_begin_out(soap);
		soap_put_klinv_GetSrvCompetitorIniFileInfoList(soap, &soap_tmp_klinv_GetSrvCompetitorIniFileInfoList, "klinv-GetSrvCompetitorIniFileInfoList", "");
		soap_body_end_out(soap);
		soap_envelope_end_out(soap);
	}
	if (soap_connect(soap, URL, action)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put_klinv_GetSrvCompetitorIniFileInfoList(soap, &soap_tmp_klinv_GetSrvCompetitorIniFileInfoList, "klinv-GetSrvCompetitorIniFileInfoList", "")
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap_closesock(soap);
	soap_default_klinv_GetSrvCompetitorIniFileInfoListResponse(soap, &r);
	if (soap_begin_recv(soap)
	 || soap_envelope_begin_in(soap)
	 || soap_recv_header(soap)
	 || soap_body_begin_in(soap))
		return soap_closesock(soap);
	soap_get_klinv_GetSrvCompetitorIniFileInfoListResponse(soap, &r, "klinv-GetSrvCompetitorIniFileInfoListResponse", "");
	if (soap->error)
	{	if (soap->error == SOAP_TAG_MISMATCH && soap->level == 2)
			return soap_recv_fault(soap);
		return soap_closesock(soap);
	}
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
#ifndef WITH_LEANER
	 || soap_resolve_attachments(soap)
#endif
	 || soap_end_recv(soap))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

SOAP_FMAC5 int SOAP_FMAC6 soap_call_klinv_ResetIterator(struct soap *soap, const char *URL, const char *action, wchar_t *wstrFilter, klinv_wstring_array fields, klinv_field_order_array fields_to_order, long lifetime, struct klinv_ResetIteratorResponse &r)
{
	struct klinv_ResetIterator soap_tmp_klinv_ResetIterator;
	soap->encodingStyle = NULL;
	soap_tmp_klinv_ResetIterator.wstrFilter=wstrFilter;
	soap_tmp_klinv_ResetIterator.fields=fields;
	soap_tmp_klinv_ResetIterator.fields_to_order=fields_to_order;
	soap_tmp_klinv_ResetIterator.lifetime=lifetime;
	soap_begin(soap);
	soap_serializeheader(soap);
	soap_serialize_klinv_ResetIterator(soap, &soap_tmp_klinv_ResetIterator);
	soap_begin_count(soap);
	if (soap->mode & SOAP_IO_LENGTH)
	{	soap_envelope_begin_out(soap);
		soap_putheader(soap);
		soap_body_begin_out(soap);
		soap_put_klinv_ResetIterator(soap, &soap_tmp_klinv_ResetIterator, "klinv-ResetIterator", "");
		soap_body_end_out(soap);
		soap_envelope_end_out(soap);
	}
	if (soap_connect(soap, URL, action)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put_klinv_ResetIterator(soap, &soap_tmp_klinv_ResetIterator, "klinv-ResetIterator", "")
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap_closesock(soap);
	soap_default_klinv_ResetIteratorResponse(soap, &r);
	if (soap_begin_recv(soap)
	 || soap_envelope_begin_in(soap)
	 || soap_recv_header(soap)
	 || soap_body_begin_in(soap))
		return soap_closesock(soap);
	soap_get_klinv_ResetIteratorResponse(soap, &r, "klinv-ResetIteratorResponse", "");
	if (soap->error)
	{	if (soap->error == SOAP_TAG_MISMATCH && soap->level == 2)
			return soap_recv_fault(soap);
		return soap_closesock(soap);
	}
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
#ifndef WITH_LEANER
	 || soap_resolve_attachments(soap)
#endif
	 || soap_end_recv(soap))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

SOAP_FMAC5 int SOAP_FMAC6 soap_call_klinv_GetRecordCount(struct soap *soap, const char *URL, const char *action, wchar_t *iteratorId, struct klinv_GetRecordCountResponse &r)
{
	struct klinv_GetRecordCount soap_tmp_klinv_GetRecordCount;
	soap->encodingStyle = NULL;
	soap_tmp_klinv_GetRecordCount.iteratorId=iteratorId;
	soap_begin(soap);
	soap_serializeheader(soap);
	soap_serialize_klinv_GetRecordCount(soap, &soap_tmp_klinv_GetRecordCount);
	soap_begin_count(soap);
	if (soap->mode & SOAP_IO_LENGTH)
	{	soap_envelope_begin_out(soap);
		soap_putheader(soap);
		soap_body_begin_out(soap);
		soap_put_klinv_GetRecordCount(soap, &soap_tmp_klinv_GetRecordCount, "klinv-GetRecordCount", "");
		soap_body_end_out(soap);
		soap_envelope_end_out(soap);
	}
	if (soap_connect(soap, URL, action)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put_klinv_GetRecordCount(soap, &soap_tmp_klinv_GetRecordCount, "klinv-GetRecordCount", "")
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap_closesock(soap);
	soap_default_klinv_GetRecordCountResponse(soap, &r);
	if (soap_begin_recv(soap)
	 || soap_envelope_begin_in(soap)
	 || soap_recv_header(soap)
	 || soap_body_begin_in(soap))
		return soap_closesock(soap);
	soap_get_klinv_GetRecordCountResponse(soap, &r, "klinv-GetRecordCountResponse", "");
	if (soap->error)
	{	if (soap->error == SOAP_TAG_MISMATCH && soap->level == 2)
			return soap_recv_fault(soap);
		return soap_closesock(soap);
	}
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
#ifndef WITH_LEANER
	 || soap_resolve_attachments(soap)
#endif
	 || soap_end_recv(soap))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

SOAP_FMAC5 int SOAP_FMAC6 soap_call_klinv_GetRecordRange(struct soap *soap, const char *URL, const char *action, wchar_t *iteratorId, long nStart, long nEnd, struct klinv_GetRecordRangeResponse &r)
{
	struct klinv_GetRecordRange soap_tmp_klinv_GetRecordRange;
	soap->encodingStyle = NULL;
	soap_tmp_klinv_GetRecordRange.iteratorId=iteratorId;
	soap_tmp_klinv_GetRecordRange.nStart=nStart;
	soap_tmp_klinv_GetRecordRange.nEnd=nEnd;
	soap_begin(soap);
	soap_serializeheader(soap);
	soap_serialize_klinv_GetRecordRange(soap, &soap_tmp_klinv_GetRecordRange);
	soap_begin_count(soap);
	if (soap->mode & SOAP_IO_LENGTH)
	{	soap_envelope_begin_out(soap);
		soap_putheader(soap);
		soap_body_begin_out(soap);
		soap_put_klinv_GetRecordRange(soap, &soap_tmp_klinv_GetRecordRange, "klinv-GetRecordRange", "");
		soap_body_end_out(soap);
		soap_envelope_end_out(soap);
	}
	if (soap_connect(soap, URL, action)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put_klinv_GetRecordRange(soap, &soap_tmp_klinv_GetRecordRange, "klinv-GetRecordRange", "")
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap_closesock(soap);
	soap_default_klinv_GetRecordRangeResponse(soap, &r);
	if (soap_begin_recv(soap)
	 || soap_envelope_begin_in(soap)
	 || soap_recv_header(soap)
	 || soap_body_begin_in(soap))
		return soap_closesock(soap);
	soap_get_klinv_GetRecordRangeResponse(soap, &r, "klinv-GetRecordRangeResponse", "");
	if (soap->error)
	{	if (soap->error == SOAP_TAG_MISMATCH && soap->level == 2)
			return soap_recv_fault(soap);
		return soap_closesock(soap);
	}
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
#ifndef WITH_LEANER
	 || soap_resolve_attachments(soap)
#endif
	 || soap_end_recv(soap))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

SOAP_FMAC5 int SOAP_FMAC6 soap_call_klinv_ReleaseIterator(struct soap *soap, const char *URL, const char *action, wchar_t *iteratorId, struct klinv_ReleaseIteratorResponse &r)
{
	struct klinv_ReleaseIterator soap_tmp_klinv_ReleaseIterator;
	soap->encodingStyle = NULL;
	soap_tmp_klinv_ReleaseIterator.iteratorId=iteratorId;
	soap_begin(soap);
	soap_serializeheader(soap);
	soap_serialize_klinv_ReleaseIterator(soap, &soap_tmp_klinv_ReleaseIterator);
	soap_begin_count(soap);
	if (soap->mode & SOAP_IO_LENGTH)
	{	soap_envelope_begin_out(soap);
		soap_putheader(soap);
		soap_body_begin_out(soap);
		soap_put_klinv_ReleaseIterator(soap, &soap_tmp_klinv_ReleaseIterator, "klinv-ReleaseIterator", "");
		soap_body_end_out(soap);
		soap_envelope_end_out(soap);
	}
	if (soap_connect(soap, URL, action)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put_klinv_ReleaseIterator(soap, &soap_tmp_klinv_ReleaseIterator, "klinv-ReleaseIterator", "")
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap_closesock(soap);
	soap_default_klinv_ReleaseIteratorResponse(soap, &r);
	if (soap_begin_recv(soap)
	 || soap_envelope_begin_in(soap)
	 || soap_recv_header(soap)
	 || soap_body_begin_in(soap))
		return soap_closesock(soap);
	soap_get_klinv_ReleaseIteratorResponse(soap, &r, "klinv-ReleaseIteratorResponse", "");
	if (soap->error)
	{	if (soap->error == SOAP_TAG_MISMATCH && soap->level == 2)
			return soap_recv_fault(soap);
		return soap_closesock(soap);
	}
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
#ifndef WITH_LEANER
	 || soap_resolve_attachments(soap)
#endif
	 || soap_end_recv(soap))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

SOAP_FMAC5 int SOAP_FMAC6 soap_call_kltrf_ReplaceRestriction(struct soap *soap, const char *URL, const char *action, kltrf_Restriction restriction, struct kltrf_ReplaceRestrictionResponse &r)
{
	struct kltrf_ReplaceRestriction soap_tmp_kltrf_ReplaceRestriction;
	soap->encodingStyle = NULL;
	soap_tmp_kltrf_ReplaceRestriction.restriction=restriction;
	soap_begin(soap);
	soap_serializeheader(soap);
	soap_serialize_kltrf_ReplaceRestriction(soap, &soap_tmp_kltrf_ReplaceRestriction);
	soap_begin_count(soap);
	if (soap->mode & SOAP_IO_LENGTH)
	{	soap_envelope_begin_out(soap);
		soap_putheader(soap);
		soap_body_begin_out(soap);
		soap_put_kltrf_ReplaceRestriction(soap, &soap_tmp_kltrf_ReplaceRestriction, "kltrf-ReplaceRestriction", "");
		soap_body_end_out(soap);
		soap_envelope_end_out(soap);
	}
	if (soap_connect(soap, URL, action)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put_kltrf_ReplaceRestriction(soap, &soap_tmp_kltrf_ReplaceRestriction, "kltrf-ReplaceRestriction", "")
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap_closesock(soap);
	soap_default_kltrf_ReplaceRestrictionResponse(soap, &r);
	if (soap_begin_recv(soap)
	 || soap_envelope_begin_in(soap)
	 || soap_recv_header(soap)
	 || soap_body_begin_in(soap))
		return soap_closesock(soap);
	soap_get_kltrf_ReplaceRestrictionResponse(soap, &r, "kltrf-ReplaceRestrictionResponse", "");
	if (soap->error)
	{	if (soap->error == SOAP_TAG_MISMATCH && soap->level == 2)
			return soap_recv_fault(soap);
		return soap_closesock(soap);
	}
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
#ifndef WITH_LEANER
	 || soap_resolve_attachments(soap)
#endif
	 || soap_end_recv(soap))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

SOAP_FMAC5 int SOAP_FMAC6 soap_call_kltrf_DeleteRestriction(struct soap *soap, const char *URL, const char *action, LONG64 nRestrictionId, struct kltrf_DeleteRestrictionResponse &r)
{
	struct kltrf_DeleteRestriction soap_tmp_kltrf_DeleteRestriction;
	soap->encodingStyle = NULL;
	soap_tmp_kltrf_DeleteRestriction.nRestrictionId=nRestrictionId;
	soap_begin(soap);
	soap_serializeheader(soap);
	soap_serialize_kltrf_DeleteRestriction(soap, &soap_tmp_kltrf_DeleteRestriction);
	soap_begin_count(soap);
	if (soap->mode & SOAP_IO_LENGTH)
	{	soap_envelope_begin_out(soap);
		soap_putheader(soap);
		soap_body_begin_out(soap);
		soap_put_kltrf_DeleteRestriction(soap, &soap_tmp_kltrf_DeleteRestriction, "kltrf-DeleteRestriction", "");
		soap_body_end_out(soap);
		soap_envelope_end_out(soap);
	}
	if (soap_connect(soap, URL, action)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put_kltrf_DeleteRestriction(soap, &soap_tmp_kltrf_DeleteRestriction, "kltrf-DeleteRestriction", "")
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap_closesock(soap);
	soap_default_kltrf_DeleteRestrictionResponse(soap, &r);
	if (soap_begin_recv(soap)
	 || soap_envelope_begin_in(soap)
	 || soap_recv_header(soap)
	 || soap_body_begin_in(soap))
		return soap_closesock(soap);
	soap_get_kltrf_DeleteRestrictionResponse(soap, &r, "kltrf-DeleteRestrictionResponse", "");
	if (soap->error)
	{	if (soap->error == SOAP_TAG_MISMATCH && soap->level == 2)
			return soap_recv_fault(soap);
		return soap_closesock(soap);
	}
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
#ifndef WITH_LEANER
	 || soap_resolve_attachments(soap)
#endif
	 || soap_end_recv(soap))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

SOAP_FMAC5 int SOAP_FMAC6 soap_call_kltrf_GetRestrictions(struct soap *soap, const char *URL, const char *action, struct kltrf_GetRestrictionsResponse &r)
{
	struct kltrf_GetRestrictions soap_tmp_kltrf_GetRestrictions;
	soap->encodingStyle = NULL;
	soap_begin(soap);
	soap_serializeheader(soap);
	soap_serialize_kltrf_GetRestrictions(soap, &soap_tmp_kltrf_GetRestrictions);
	soap_begin_count(soap);
	if (soap->mode & SOAP_IO_LENGTH)
	{	soap_envelope_begin_out(soap);
		soap_putheader(soap);
		soap_body_begin_out(soap);
		soap_put_kltrf_GetRestrictions(soap, &soap_tmp_kltrf_GetRestrictions, "kltrf-GetRestrictions", "");
		soap_body_end_out(soap);
		soap_envelope_end_out(soap);
	}
	if (soap_connect(soap, URL, action)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put_kltrf_GetRestrictions(soap, &soap_tmp_kltrf_GetRestrictions, "kltrf-GetRestrictions", "")
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap_closesock(soap);
	soap_default_kltrf_GetRestrictionsResponse(soap, &r);
	if (soap_begin_recv(soap)
	 || soap_envelope_begin_in(soap)
	 || soap_recv_header(soap)
	 || soap_body_begin_in(soap))
		return soap_closesock(soap);
	soap_get_kltrf_GetRestrictionsResponse(soap, &r, "kltrf-GetRestrictionsResponse", "");
	if (soap->error)
	{	if (soap->error == SOAP_TAG_MISMATCH && soap->level == 2)
			return soap_recv_fault(soap);
		return soap_closesock(soap);
	}
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
#ifndef WITH_LEANER
	 || soap_resolve_attachments(soap)
#endif
	 || soap_end_recv(soap))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

SOAP_FMAC5 int SOAP_FMAC6 soap_call_klnag_SendWakeOnLanOnSubnetsHosts(struct soap *soap, const char *URL, const char *action, param__params macsList, struct klnag_SendWakeOnLanOnSubnetsHostsResponse &r)
{
	struct klnag_SendWakeOnLanOnSubnetsHosts soap_tmp_klnag_SendWakeOnLanOnSubnetsHosts;
	soap->encodingStyle = NULL;
	soap_tmp_klnag_SendWakeOnLanOnSubnetsHosts.macsList=macsList;
	soap_begin(soap);
	soap_serializeheader(soap);
	soap_serialize_klnag_SendWakeOnLanOnSubnetsHosts(soap, &soap_tmp_klnag_SendWakeOnLanOnSubnetsHosts);
	soap_begin_count(soap);
	if (soap->mode & SOAP_IO_LENGTH)
	{	soap_envelope_begin_out(soap);
		soap_putheader(soap);
		soap_body_begin_out(soap);
		soap_put_klnag_SendWakeOnLanOnSubnetsHosts(soap, &soap_tmp_klnag_SendWakeOnLanOnSubnetsHosts, "klnag-SendWakeOnLanOnSubnetsHosts", "");
		soap_body_end_out(soap);
		soap_envelope_end_out(soap);
	}
	if (soap_connect(soap, URL, action)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put_klnag_SendWakeOnLanOnSubnetsHosts(soap, &soap_tmp_klnag_SendWakeOnLanOnSubnetsHosts, "klnag-SendWakeOnLanOnSubnetsHosts", "")
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap_closesock(soap);
	soap_default_klnag_SendWakeOnLanOnSubnetsHostsResponse(soap, &r);
	if (soap_begin_recv(soap)
	 || soap_envelope_begin_in(soap)
	 || soap_recv_header(soap)
	 || soap_body_begin_in(soap))
		return soap_closesock(soap);
	soap_get_klnag_SendWakeOnLanOnSubnetsHostsResponse(soap, &r, "klnag-SendWakeOnLanOnSubnetsHostsResponse", "");
	if (soap->error)
	{	if (soap->error == SOAP_TAG_MISMATCH && soap->level == 2)
			return soap_recv_fault(soap);
		return soap_closesock(soap);
	}
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
#ifndef WITH_LEANER
	 || soap_resolve_attachments(soap)
#endif
	 || soap_end_recv(soap))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

SOAP_FMAC5 int SOAP_FMAC6 soap_call_klsnmpagt_PutServerEvent(struct soap *soap, const char *URL, const char *action, struct klsnmpagt_event event, struct klsnmpagt_PutServerEventResponse &r)
{
	struct klsnmpagt_PutServerEvent soap_tmp_klsnmpagt_PutServerEvent;
	soap->encodingStyle = NULL;
	soap_tmp_klsnmpagt_PutServerEvent.event=event;
	soap_begin(soap);
	soap_serializeheader(soap);
	soap_serialize_klsnmpagt_PutServerEvent(soap, &soap_tmp_klsnmpagt_PutServerEvent);
	soap_begin_count(soap);
	if (soap->mode & SOAP_IO_LENGTH)
	{	soap_envelope_begin_out(soap);
		soap_putheader(soap);
		soap_body_begin_out(soap);
		soap_put_klsnmpagt_PutServerEvent(soap, &soap_tmp_klsnmpagt_PutServerEvent, "klsnmpagt-PutServerEvent", "");
		soap_body_end_out(soap);
		soap_envelope_end_out(soap);
	}
	if (soap_connect(soap, URL, action)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put_klsnmpagt_PutServerEvent(soap, &soap_tmp_klsnmpagt_PutServerEvent, "klsnmpagt-PutServerEvent", "")
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap_closesock(soap);
	soap_default_klsnmpagt_PutServerEventResponse(soap, &r);
	if (soap_begin_recv(soap)
	 || soap_envelope_begin_in(soap)
	 || soap_recv_header(soap)
	 || soap_body_begin_in(soap))
		return soap_closesock(soap);
	soap_get_klsnmpagt_PutServerEventResponse(soap, &r, "klsnmpagt-PutServerEventResponse", "");
	if (soap->error)
	{	if (soap->error == SOAP_TAG_MISMATCH && soap->level == 2)
			return soap_recv_fault(soap);
		return soap_closesock(soap);
	}
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
#ifndef WITH_LEANER
	 || soap_resolve_attachments(soap)
#endif
	 || soap_end_recv(soap))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

SOAP_FMAC5 int SOAP_FMAC6 soap_call_klsnmpagt_SetAgentConnection(struct soap *soap, const char *URL, const char *action, wchar_t *wstrLocalName, wchar_t *wstrRemoteName, struct klsnmpagt_SetAgentConnectionResponse &r)
{
	struct klsnmpagt_SetAgentConnection soap_tmp_klsnmpagt_SetAgentConnection;
	soap->encodingStyle = NULL;
	soap_tmp_klsnmpagt_SetAgentConnection.wstrLocalName=wstrLocalName;
	soap_tmp_klsnmpagt_SetAgentConnection.wstrRemoteName=wstrRemoteName;
	soap_begin(soap);
	soap_serializeheader(soap);
	soap_serialize_klsnmpagt_SetAgentConnection(soap, &soap_tmp_klsnmpagt_SetAgentConnection);
	soap_begin_count(soap);
	if (soap->mode & SOAP_IO_LENGTH)
	{	soap_envelope_begin_out(soap);
		soap_putheader(soap);
		soap_body_begin_out(soap);
		soap_put_klsnmpagt_SetAgentConnection(soap, &soap_tmp_klsnmpagt_SetAgentConnection, "klsnmpagt-SetAgentConnection", "");
		soap_body_end_out(soap);
		soap_envelope_end_out(soap);
	}
	if (soap_connect(soap, URL, action)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put_klsnmpagt_SetAgentConnection(soap, &soap_tmp_klsnmpagt_SetAgentConnection, "klsnmpagt-SetAgentConnection", "")
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap_closesock(soap);
	soap_default_klsnmpagt_SetAgentConnectionResponse(soap, &r);
	if (soap_begin_recv(soap)
	 || soap_envelope_begin_in(soap)
	 || soap_recv_header(soap)
	 || soap_body_begin_in(soap))
		return soap_closesock(soap);
	soap_get_klsnmpagt_SetAgentConnectionResponse(soap, &r, "klsnmpagt-SetAgentConnectionResponse", "");
	if (soap->error)
	{	if (soap->error == SOAP_TAG_MISMATCH && soap->level == 2)
			return soap_recv_fault(soap);
		return soap_closesock(soap);
	}
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
#ifndef WITH_LEANER
	 || soap_resolve_attachments(soap)
#endif
	 || soap_end_recv(soap))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

SOAP_END_NAMESPACE(soap)

/* end of soapClient.cpp */
