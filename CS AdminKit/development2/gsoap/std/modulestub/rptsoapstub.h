/*!
 * (C) "Kaspersky Lab"
 *
 * \file rptsoapstub.h
 * \author Generated by createsoapheader.pl
 * \brief SOAP stub declaration and registration code
 */

#include "soapH.h"

#include "std/gsoap/stubrouter.h"

/* Declaration of functions */

int klrpt_GetReportTypesStub(  struct soap *soap, 
    void* _,
	struct klrpt_GetReportTypesResponse&r );

int klrpt_GetReportTypeDetailedDataStub(  struct soap *soap, 
    xsd__int        reportType,
	struct klrpt_GetReportTypeDetailedDataResponse&r );

int klrpt_GetReportIdsStub(  struct soap *soap, 
    void* _,
	struct klrpt_GetReportIdsResponse&r );

int klrpt_GetReportsStub(  struct soap *soap, 
    void* _,
	struct klrpt_GetReportsResponse&r );

int klrpt_GetReportCommonDataStub(  struct soap *soap, 
    xsd__int  reportId,
	struct klrpt_GetReportCommonDataResponse&r );

int klrpt_GetReportDetailedDataStub(  struct soap *soap, 
    xsd__int        reportId,
	struct klrpt_GetReportDetailedDataResponse&r );

int klrpt_AddReportStub(  struct soap *soap, 
    struct klrpt_common    commonData,
    struct klrpt_details   details,
    struct klrpt_AddReportResponse&r );

int klrpt_UpdateReportStub(  struct soap *soap, 
    struct klrpt_common    commonData,
    struct klrpt_details   details,
    struct klrpt_UpdateReportResponse&r );

int klrpt_DeleteReportStub(  struct soap *soap, 
    xsd__int                reportId,
    struct klrpt_DeleteReportResponse&r );

int klrpt_ExecuteReportStub(  struct soap *soap, 
    xsd__int                reportId,
    struct klrpt_input      input,
    struct klrpt_ExecuteReportResponse&r );

int klrpt_GetConstantOutputForReportTypeStub(  struct soap *soap, 
    xsd__int                reportType,
    xsd__int                xmlTargetType,
    struct klrpt_GetConstantOutputForReportTypeResponse&r );

int klrpt_CreateDefaultReportDataStub(  struct soap *soap, 
    xsd__int                reportType,
    struct klrpt_CreateDefaultReportDataResponse&r );

int klrpt_ExecuteReportAsyncStub(  struct soap *soap, 
    xsd__int                reportId,
    xsd__wstring			wstrAsyncRequestId,
    struct klrpt_input      input,
    struct klrpt_ExecuteReportAsyncResponse&r );

int klrpt_ExecuteReportAsyncCancelStub(  struct soap *soap, 
    xsd__wstring			wstrAsyncRequestId,
    struct klrpt_ExecuteReportAsyncCancelResponse&r );

int klrpt_ExecuteReportAsyncGetDataStub(  struct soap *soap, 
    xsd__wstring			wstrAsyncRequestId,
    xsd__int                nMaxDataChunkSize,
    struct klrpt_ExecuteReportAsyncGetDataResponse&r );

int klrpt_ExecuteSlaveReportAsyncStub(  struct soap *soap, 
    struct klrpt_common		commonData,
    struct klrpt_details	details,
	param__params			paramLocalData,
    xsd__wstring			wstrAsyncRequestId,
	xsd__int				nTimeoutInSec,
    struct klrpt_ExecuteSlaveReportAsyncResponse&r );

int klrpt_ExecuteSlaveReportAsyncCancelStub(  struct soap *soap, 
    xsd__wstring			wstrAsyncRequestId,
    struct klrpt_ExecuteSlaveReportAsyncCancelResponse&r );

int klrpt_ExecuteSlaveReportAsyncGetDataStub(  struct soap *soap, 
    xsd__wstring			wstrAsyncRequestId,
	xsd__int				nRecordsCount,
    struct klrpt_ExecuteSlaveReportAsyncGetDataResponse&r );

int klrpt_RequestStatisticsDataStub(  struct soap *soap, 
	param__params	paramRequestParams,
    xsd__wstring	wstrRequestId,
    struct klrpt_RequestStatisticsDataResponse&r );

int klrpt_CancelStatisticsRequestStub(  struct soap *soap, 
    xsd__wstring	wstrRequestId,
    struct klrpt_CancelStatisticsRequestResponse&r );

int klrpt_GetStatisticsDataStub(  struct soap *soap, 
    xsd__wstring	wstrRequestId,
    struct klrpt_GetStatisticsDataResponse&r );

int klrpt_GetFilterSettingsStub(  struct soap *soap, 
    xsd__int                reportType,
    struct klrpt_GetFilterSettingsResponse&r );

int klrpt_ExecuteReportAsyncCancelWaitingForSlavesStub(  struct soap *soap, 
    xsd__wstring			wstrAsyncRequestId,
    struct klrpt_ExecuteReportAsyncCancelWaitingForSlavesResponse&r );

int klrpt_ResetStatisticsDataStub(  struct soap *soap, 
	param__params	paramRequestParams,
    struct klrpt_ResetStatisticsDataResponse&r );

namespace KLRPT
{

	struct KLSTRT::SOAPStubFunc rpt_funcs_ptrs[25]=
	{
		{ L"klrpt_GetReportTypes",		 (void*)klrpt_GetReportTypesStub },
		{ L"klrpt_GetReportTypeDetailedData",		 (void*)klrpt_GetReportTypeDetailedDataStub },
		{ L"klrpt_GetReportIds",		 (void*)klrpt_GetReportIdsStub },
		{ L"klrpt_GetReports",		 (void*)klrpt_GetReportsStub },
		{ L"klrpt_GetReportCommonData",		 (void*)klrpt_GetReportCommonDataStub },
		{ L"klrpt_GetReportDetailedData",		 (void*)klrpt_GetReportDetailedDataStub },
		{ L"klrpt_AddReport",		 (void*)klrpt_AddReportStub },
		{ L"klrpt_UpdateReport",		 (void*)klrpt_UpdateReportStub },
		{ L"klrpt_DeleteReport",		 (void*)klrpt_DeleteReportStub },
		{ L"klrpt_ExecuteReport",		 (void*)klrpt_ExecuteReportStub },
		{ L"klrpt_GetConstantOutputForReportType",		 (void*)klrpt_GetConstantOutputForReportTypeStub },
		{ L"klrpt_CreateDefaultReportData",		 (void*)klrpt_CreateDefaultReportDataStub },
		{ L"klrpt_ExecuteReportAsync",		 (void*)klrpt_ExecuteReportAsyncStub },
		{ L"klrpt_ExecuteReportAsyncCancel",		 (void*)klrpt_ExecuteReportAsyncCancelStub },
		{ L"klrpt_ExecuteReportAsyncGetData",		 (void*)klrpt_ExecuteReportAsyncGetDataStub },
		{ L"klrpt_ExecuteSlaveReportAsync",		 (void*)klrpt_ExecuteSlaveReportAsyncStub },
		{ L"klrpt_ExecuteSlaveReportAsyncCancel",		 (void*)klrpt_ExecuteSlaveReportAsyncCancelStub },
		{ L"klrpt_ExecuteSlaveReportAsyncGetData",		 (void*)klrpt_ExecuteSlaveReportAsyncGetDataStub },
		{ L"klrpt_RequestStatisticsData",		 (void*)klrpt_RequestStatisticsDataStub },
		{ L"klrpt_CancelStatisticsRequest",		 (void*)klrpt_CancelStatisticsRequestStub },
		{ L"klrpt_GetStatisticsData",		 (void*)klrpt_GetStatisticsDataStub },
		{ L"klrpt_GetFilterSettings",		 (void*)klrpt_GetFilterSettingsStub },
		{ L"klrpt_ExecuteReportAsyncCancelWaitingForSlaves",		 (void*)klrpt_ExecuteReportAsyncCancelWaitingForSlavesStub },
		{ L"klrpt_ResetStatisticsData",		 (void*)klrpt_ResetStatisticsDataStub },
		{ L"", NULL },
	};

	void RegisterGSOAPStubFunctions()
	{
		KLSTRT::RegisterGSOAPStubFunctions( rpt_funcs_ptrs, (sizeof(rpt_funcs_ptrs)/sizeof(rpt_funcs_ptrs[0])) );
	}

	void UnregisterGSOAPStubFunctions()
	{
		KLSTRT::UnregisterGSOAPStubFunctions( rpt_funcs_ptrs, (sizeof(rpt_funcs_ptrs)/sizeof(rpt_funcs_ptrs[0])) );
	}

} // end namespace KLRPT
