/*!
 * (C) "Kaspersky Lab"
 *
 * \file aklwngtsoapstub.h
 * \author Generated by createsoapheader.pl
 * \brief SOAP stub declaration and registration code
 */

#include "soapH.h"

#include "std/gsoap/stubrouter.h"

/* Declaration of functions */

int aklwngt__SessionBeginStub(  struct soap *soap, 
						xsd__string     szDeviceId,
                        xsd__string     szPassword,
                        int             nProtocolVersion,
                        struct aklwngt__SessionBeginResponse
                        &r);

int aklwngt__SessionEndStub(  struct soap *soap, 
                        xsd__string         szSessionId,
                        struct aklwngt__SessionEndResponse
                        &r);

int aklwngt__HeartbeatStub(  struct soap *soap, 
                        xsd__string     szSessionId,
                        struct aklwngt__sync_info* oMaySynchronize,
                        struct aklwngt__HeartbeatResponse&r);

int aklwngt__PutResultStub(  struct soap *soap, 
                        xsd__string     szSessionId,
                        struct aklwngt__command*    result,
                        struct aklwngt__PutResultResponse&r);

int aklwngt__PutEventsStub(  struct soap *soap, 
                        xsd__string     szSessionId,
                        struct aklwngt__event_info_array* oEventsInfoArray,
                        struct aklwngt__PutEventsResponse&r);

int aklwngt__klft_GetFileInfoStub(  struct soap *soap, 
                        xsd__string     szSessionId,
						xsd__wstring	fileName,
						struct aklwngt__klft_GetFileInfoResponse
						&r);

int aklwngt__klft_GetNextFileChunkStub(  struct soap *soap, 
                        xsd__string     szSessionId,
						xsd__wstring	fileName,
						xsd__unsignedLong	startFilePos,
						xsd__unsignedLong	neededSize,
						struct aklwngt__klft_GetNextFileChunkResponse
						&r);

namespace KLAKLWNGT
{

	struct KLSTRT::SOAPStubFunc aklwngt_funcs_ptrs[8]=
	{
		{ L"aklwngt__SessionBegin",		 (void*)aklwngt__SessionBeginStub },
		{ L"aklwngt__SessionEnd",		 (void*)aklwngt__SessionEndStub },
		{ L"aklwngt__Heartbeat",		 (void*)aklwngt__HeartbeatStub },
		{ L"aklwngt__PutResult",		 (void*)aklwngt__PutResultStub },
		{ L"aklwngt__PutEvents",		 (void*)aklwngt__PutEventsStub },
		{ L"aklwngt__klft_GetFileInfo",		 (void*)aklwngt__klft_GetFileInfoStub },
		{ L"aklwngt__klft_GetNextFileChunk",		 (void*)aklwngt__klft_GetNextFileChunkStub },
		{ L"", NULL },
	};

	void RegisterGSOAPStubFunctions()
	{
		KLSTRT::RegisterGSOAPStubFunctions( aklwngt_funcs_ptrs, (sizeof(aklwngt_funcs_ptrs)/sizeof(aklwngt_funcs_ptrs[0])) );
	}

	void UnregisterGSOAPStubFunctions()
	{
		KLSTRT::UnregisterGSOAPStubFunctions( aklwngt_funcs_ptrs, (sizeof(aklwngt_funcs_ptrs)/sizeof(aklwngt_funcs_ptrs[0])) );
	}

} // end namespace KLAKLWNGT
