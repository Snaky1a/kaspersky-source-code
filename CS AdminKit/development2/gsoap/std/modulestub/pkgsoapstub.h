/*!
 * (C) "Kaspersky Lab"
 *
 * \file pkgsoapstub.h
 * \author Generated by createsoapheader.pl
 * \brief SOAP stub declaration and registration code
 */

#include "soapH.h"

#include "std/gsoap/stubrouter.h"

/* Declaration of functions */

int klpkg_GetPackagesStub(  struct soap *soap,  
					void* _,
					struct klpkg_GetPackagesResponse&r);

int klpkg_RenamePackageStub(  struct soap *soap, 
					  xsd__int		    nPackageId,
					  xsd__wstring		wstrNewPackageName,
					  struct klpkg_RenamePackageResponse&r);

int klpkg_GetIntranetFolderForNewPackageStub(  struct soap *soap, 
					xsd__wstring		wstrProductName,
					xsd__wstring		wstrProductVersion,
					struct klpkg_GetIntranetFolderForNewPackageResponse&r);

int klpkg_RecordNewPackageStub(  struct soap *soap, 
                    xsd__wstring	    wstrName,
					xsd__wstring		wstrFolder,
					xsd__wstring		wstrProductName,
					xsd__wstring		wstrProductVersion,
					xsd__wstring		wstrProductDisplName,
					xsd__wstring		wstrProductDisplVersion,
					struct klpkg_RecordNewPackageResponse&r);

int klpkg_RemovePackageStub(  struct soap *soap, 
					xsd__int		    nPackageId,
					struct klpkg_RemovePackageResponse&r);

int klpkg_GetIntranetFolderForPackageStub(  struct soap *soap, 
					xsd__int		    nPackageId,
					struct klpkg_GetIntranetFolderForPackageResponse&r);

int klpkg_SS_ReadStub(  struct soap *soap, 
				  xsd__wstring	storage_descr,
				  xsd__wstring	name,
				  xsd__wstring	version,
				  xsd__wstring	section,
				  xsd__int		timeout,
				  struct klpkg_SS_ReadResponse&r);

int klpkg_SS_WriteStub(  struct soap *soap, 
					xsd__wstring	storage_descr,
					xsd__wstring	name,
					xsd__wstring	version,
					xsd__wstring	section,
					param__params	data,
					xsd__int		timeout,
					xsd__int		operation_type,  
					struct klpkg_SS_WriteResponse&r);

int klpkg_SS_SectionOpearationStub(  struct soap *soap, 
					xsd__wstring	storage_descr,
					xsd__wstring	name,
					xsd__wstring	version,
					xsd__wstring	section,
					xsd__int		timeout,
					xsd__int		operation_type,
					struct klpkg_SS_SectionOpearationResponse&r);

int klpkg_SS_GetNamesStub(  struct soap *soap, 
					xsd__wstring	storage_descr,
					xsd__wstring	name,
					xsd__wstring	version,
					xsd__int		timeout,
					struct klpkg_SS_GetNamesResponse&r);

int klpkg_RemovePackage2Stub(  struct soap *soap, 
					xsd__int		    nPackageId,
					struct klpkg_RemovePackage2Response&r);

int klpkg_GetLoginScriptStub(  struct soap *soap, 
					xsd__int		    nPackageId,
					xsd__wstring		wstrTaskId,
					struct klpkg_GetLoginScriptResponse&r);

int klpkg_SetRebootOptionsStub(  struct soap *soap, 
					xsd__int		    nPackageId,
					xsd__boolean	    bRebootImmediately,
					xsd__boolean	    bAskForReboot,
					xsd__int		    nAskForRebootPeriodInMin,
					xsd__int		    nForceRebootTimeInMin,
					xsd__wstring		wstrAskRebootMsgText,
					struct klpkg_SetRebootOptionsResponse&r);

int klpkg_GetRebootOptionsStub(  struct soap *soap, 
					xsd__int		    nPackageId,
					struct klpkg_GetRebootOptionsResponse&r);

int klpkg_RecordNewPackage2Stub(  struct soap *soap, 
                    xsd__wstring	    wstrName,
					xsd__wstring		wstrFileId,
					xsd__wstring		wstrProductName,
					xsd__wstring		wstrProductVersion,
					xsd__wstring		wstrProductDisplName,
					xsd__wstring		wstrProductDisplVersion,
					struct klpkg_RecordNewPackage2Response&r);

int klpkg_GetLicenseKeyStub(  struct soap *soap, 
                    xsd__int			nPackageId,
					struct klpkg_GetLicenseKeyResponse&r);

int klpkg_SetLicenseKeyStub(  struct soap *soap, 
                    xsd__int			nPackageId,
					xsd__wstring		wstrKeyFileName,
					xsd__hexBinary		data,
					xsd__boolean		bRemoveExisting,
					struct klpkg_SetLicenseKeyResponse&r);

int klpkg_ReadPkgCfgFileStub(  struct soap *soap, 
					xsd__int		    nPackageId,
					xsd__wstring		wstrFileRelativePath,
					struct klpkg_ReadPkgCfgFileResponse&r);

int klpkg_WritePkgCfgFileStub(  struct soap *soap, 
					xsd__int		    nPackageId,
					xsd__wstring		wstrFileRelativePath,
					xsd__hexBinary		data,
					struct klpkg_WritePkgCfgFileResponse&r);

int klpkg_ReadKpdFileStub(  struct soap *soap, 
					xsd__int		    nPackageId,
					struct klpkg_ReadKpdFileResponse&r);

int klpkg_GetKpdProfileStringStub(  struct soap *soap, 
					xsd__int		    nPackageId,
					xsd__wstring		wstrSection,
					xsd__wstring		wstrKey,
					xsd__wstring		wstrDefault,
					struct klpkg_GetKpdProfileStringResponse&r);

int klpkg_WriteKpdProfileStringStub(  struct soap *soap, 
					xsd__int		    nPackageId,
					xsd__wstring		wstrSection,
					xsd__wstring		wstrKey,
					xsd__wstring		wstrValue,
					struct klpkg_WriteKpdProfileStringResponse&r);

int klpkg_SetRebootOptionsExStub(  struct soap *soap, 
					xsd__int		    nPackageId,
					xsd__boolean	    bRebootImmediately,
					xsd__boolean	    bAskForReboot,
					xsd__int		    nAskForRebootPeriodInMin,
					xsd__int		    nForceRebootTimeInMin,
					xsd__wstring		wstrAskRebootMsgText,
					xsd__boolean		    bForceAppsClosed,
					param__params	    parParams,
					struct klpkg_SetRebootOptionsExResponse&r);

int klpkg_GetRebootOptionsExStub(  struct soap *soap, 
					xsd__int		    nPackageId,
					struct klpkg_GetRebootOptionsExResponse&r);

int klpkg_RecordNewPackageAsyncStub(  struct soap *soap, 
                    xsd__wstring	    wstrName,
					xsd__wstring		wstrFolder,
					xsd__wstring		wstrProductName,
					xsd__wstring		wstrProductVersion,
					xsd__wstring		wstrProductDisplName,
					xsd__wstring		wstrProductDisplVersion,
					xsd__wstring		wstrRequestId,
					struct klpkg_RecordNewPackageAsyncResponse&r);

int klpkg_GetPackageInfoStub(  struct soap *soap, 
                    xsd__int		    nPackageId,
					struct klpkg_GetPackageInfoResponse&r);

int klpkg_GetIncompatibleAppsInfoStub(  struct soap *soap, 
                    xsd__int			nPackageId,
					struct klpkg_GetIncompatibleAppsInfoResponse&r);

int klpkg_SetRemoveIncompatibleAppsStub(  struct soap *soap, 
                    xsd__int		    nPackageId,
					xsd__boolean		bRemoveIncompatibleApps,
					struct klpkg_SetRemoveIncompatibleAppsResponse&r);

namespace KLPKG
{

	struct KLSTRT::SOAPStubFunc pkg_funcs_ptrs[29]=
	{
		{ L"klpkg_GetPackages",		 (void*)klpkg_GetPackagesStub },
		{ L"klpkg_RenamePackage",		 (void*)klpkg_RenamePackageStub },
		{ L"klpkg_GetIntranetFolderForNewPackage",		 (void*)klpkg_GetIntranetFolderForNewPackageStub },
		{ L"klpkg_RecordNewPackage",		 (void*)klpkg_RecordNewPackageStub },
		{ L"klpkg_RemovePackage",		 (void*)klpkg_RemovePackageStub },
		{ L"klpkg_GetIntranetFolderForPackage",		 (void*)klpkg_GetIntranetFolderForPackageStub },
		{ L"klpkg_SS_Read",		 (void*)klpkg_SS_ReadStub },
		{ L"klpkg_SS_Write",		 (void*)klpkg_SS_WriteStub },
		{ L"klpkg_SS_SectionOpearation",		 (void*)klpkg_SS_SectionOpearationStub },
		{ L"klpkg_SS_GetNames",		 (void*)klpkg_SS_GetNamesStub },
		{ L"klpkg_RemovePackage2",		 (void*)klpkg_RemovePackage2Stub },
		{ L"klpkg_GetLoginScript",		 (void*)klpkg_GetLoginScriptStub },
		{ L"klpkg_SetRebootOptions",		 (void*)klpkg_SetRebootOptionsStub },
		{ L"klpkg_GetRebootOptions",		 (void*)klpkg_GetRebootOptionsStub },
		{ L"klpkg_RecordNewPackage2",		 (void*)klpkg_RecordNewPackage2Stub },
		{ L"klpkg_GetLicenseKey",		 (void*)klpkg_GetLicenseKeyStub },
		{ L"klpkg_SetLicenseKey",		 (void*)klpkg_SetLicenseKeyStub },
		{ L"klpkg_ReadPkgCfgFile",		 (void*)klpkg_ReadPkgCfgFileStub },
		{ L"klpkg_WritePkgCfgFile",		 (void*)klpkg_WritePkgCfgFileStub },
		{ L"klpkg_ReadKpdFile",		 (void*)klpkg_ReadKpdFileStub },
		{ L"klpkg_GetKpdProfileString",		 (void*)klpkg_GetKpdProfileStringStub },
		{ L"klpkg_WriteKpdProfileString",		 (void*)klpkg_WriteKpdProfileStringStub },
		{ L"klpkg_SetRebootOptionsEx",		 (void*)klpkg_SetRebootOptionsExStub },
		{ L"klpkg_GetRebootOptionsEx",		 (void*)klpkg_GetRebootOptionsExStub },
		{ L"klpkg_RecordNewPackageAsync",		 (void*)klpkg_RecordNewPackageAsyncStub },
		{ L"klpkg_GetPackageInfo",		 (void*)klpkg_GetPackageInfoStub },
		{ L"klpkg_GetIncompatibleAppsInfo",		 (void*)klpkg_GetIncompatibleAppsInfoStub },
		{ L"klpkg_SetRemoveIncompatibleApps",		 (void*)klpkg_SetRemoveIncompatibleAppsStub },
		{ L"", NULL },
	};

	void RegisterGSOAPStubFunctions()
	{
		KLSTRT::RegisterGSOAPStubFunctions( pkg_funcs_ptrs, (sizeof(pkg_funcs_ptrs)/sizeof(pkg_funcs_ptrs[0])) );
	}

	void UnregisterGSOAPStubFunctions()
	{
		KLSTRT::UnregisterGSOAPStubFunctions( pkg_funcs_ptrs, (sizeof(pkg_funcs_ptrs)/sizeof(pkg_funcs_ptrs[0])) );
	}

} // end namespace KLPKG
