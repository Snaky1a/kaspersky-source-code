/* soapServer.cpp
   Generated by gSOAP 2.7.0d from soapheader.h
   Copyright (C) 2001-2004 Genivia, Inc. All Rights Reserved.
   This software is released under one of the following three licenses:
   GPL, the gSOAP public license, or Genivia's license for commercial use.
   See README.txt for further details.
*/
#include "soapH.h"

SOAP_BEGIN_NAMESPACE(soap)

SOAP_SOURCE_STAMP("@(#) soapServer.cpp ver 2.7.0d 2007-12-27 13:15:32 GMT")


SOAP_FMAC5 int SOAP_FMAC6 soap_serve(struct soap *soap)
{
	unsigned int n = soap->max_keep_alive;
	do
	{	soap_begin(soap);
		if (!--n)
			soap->keep_alive = 0;
		if (soap_begin_recv(soap))
		{	if (soap->error < SOAP_STOP)
				return soap_send_fault(soap);
			soap_closesock(soap);
			continue;
		}
		if (soap_envelope_begin_in(soap)
		 || soap_recv_header(soap)
		 || soap_body_begin_in(soap)
		 || soap_serve_request(soap) || (soap->fserveloop && soap->fserveloop(soap)))
			return soap_send_fault(soap);
		
	} while (soap->keep_alive);
	return SOAP_OK;
}

SOAP_FMAC5 int SOAP_FMAC6 soap_serve_request(struct soap *soap)
{
	soap_peek_element(soap);
	if (!soap_match_tag(soap, soap->tag, "tr-InitiateRemoteConnection"))
		return soap_serve_tr_InitiateRemoteConnection(soap);
	if (!soap_match_tag(soap, soap->tag, "tr-CreateReverseConnection"))
		return soap_serve_tr_CreateReverseConnection(soap);
	if (!soap_match_tag(soap, soap->tag, "tr-ReverseConnectionReply"))
		return soap_serve_tr_ReverseConnectionReply(soap);
	if (!soap_match_tag(soap, soap->tag, "tr-PingMethod"))
		return soap_serve_tr_PingMethod(soap);
	if (!soap_match_tag(soap, soap->tag, "tr-AuthenticationHandshake"))
		return soap_serve_tr_AuthenticationHandshake(soap);
	if (!soap_match_tag(soap, soap->tag, "tr-CreateGatewayConnection"))
		return soap_serve_tr_CreateGatewayConnection(soap);
	if (!soap_match_tag(soap, soap->tag, "tr-TestMethod"))
		return soap_serve_tr_TestMethod(soap);
	if (!soap_match_tag(soap, soap->tag, "tr-TestMethod1"))
		return soap_serve_tr_TestMethod1(soap);
	if (!soap_match_tag(soap, soap->tag, "tr-TrafficControlNotify"))
		return soap_serve_tr_TrafficControlNotify(soap);
	if (!soap_match_tag(soap, soap->tag, "ev-RemoteSubscribe"))
		return soap_serve_ev_RemoteSubscribe(soap);
	if (!soap_match_tag(soap, soap->tag, "ev-RemoteUnsubscribe"))
		return soap_serve_ev_RemoteUnsubscribe(soap);
	if (!soap_match_tag(soap, soap->tag, "ev-PublishEvent"))
		return soap_serve_ev_PublishEvent(soap);
	if (!soap_match_tag(soap, soap->tag, "klspl-GetPermissions"))
		return soap_serve_klspl_GetPermissions(soap);
	if (!soap_match_tag(soap, soap->tag, "klspl-SetPermissions"))
		return soap_serve_klspl_SetPermissions(soap);
	if (!soap_match_tag(soap, soap->tag, "klprci-GetTasksParams"))
		return soap_serve_klprci_GetTasksParams(soap);
	if (!soap_match_tag(soap, soap->tag, "klprci-GetPingTimeout"))
		return soap_serve_klprci_GetPingTimeout(soap);
	if (!soap_match_tag(soap, soap->tag, "klprci-GetState"))
		return soap_serve_klprci_GetState(soap);
	if (!soap_match_tag(soap, soap->tag, "klprci-GetStatistics"))
		return soap_serve_klprci_GetStatistics(soap);
	if (!soap_match_tag(soap, soap->tag, "klprci-Stop"))
		return soap_serve_klprci_Stop(soap);
	if (!soap_match_tag(soap, soap->tag, "klprci-Suspend"))
		return soap_serve_klprci_Suspend(soap);
	if (!soap_match_tag(soap, soap->tag, "klprci-Resume"))
		return soap_serve_klprci_Resume(soap);
	if (!soap_match_tag(soap, soap->tag, "klprci-RunTask"))
		return soap_serve_klprci_RunTask(soap);
	if (!soap_match_tag(soap, soap->tag, "klprci-RunMethod"))
		return soap_serve_klprci_RunMethod(soap);
	if (!soap_match_tag(soap, soap->tag, "klprci-GetTasksList"))
		return soap_serve_klprci_GetTasksList(soap);
	if (!soap_match_tag(soap, soap->tag, "klprci-GetTaskName"))
		return soap_serve_klprci_GetTaskName(soap);
	if (!soap_match_tag(soap, soap->tag, "klprci-TaskStop"))
		return soap_serve_klprci_TaskStop(soap);
	if (!soap_match_tag(soap, soap->tag, "klprci-TaskSuspend"))
		return soap_serve_klprci_TaskSuspend(soap);
	if (!soap_match_tag(soap, soap->tag, "klprci-TaskResume"))
		return soap_serve_klprci_TaskResume(soap);
	if (!soap_match_tag(soap, soap->tag, "klprci-TaskGetState"))
		return soap_serve_klprci_TaskGetState(soap);
	if (!soap_match_tag(soap, soap->tag, "klprci-TaskGetCompletion"))
		return soap_serve_klprci_TaskGetCompletion(soap);
	if (!soap_match_tag(soap, soap->tag, "klprci-TaskReload"))
		return soap_serve_klprci_TaskReload(soap);
	if (!soap_match_tag(soap, soap->tag, "KLPRES-ResetSubscriptionsIterator"))
		return soap_serve_KLPRES_ResetSubscriptionsIterator(soap);
	if (!soap_match_tag(soap, soap->tag, "KLPRES-ReleaseSubscriptionsIterator"))
		return soap_serve_KLPRES_ReleaseSubscriptionsIterator(soap);
	if (!soap_match_tag(soap, soap->tag, "KLPRES-GetNextSubscription"))
		return soap_serve_KLPRES_GetNextSubscription(soap);
	if (!soap_match_tag(soap, soap->tag, "KLPRES-AddSubscription"))
		return soap_serve_KLPRES_AddSubscription(soap);
	if (!soap_match_tag(soap, soap->tag, "KLPRES-UpdateSubscription"))
		return soap_serve_KLPRES_UpdateSubscription(soap);
	if (!soap_match_tag(soap, soap->tag, "KLPRES-PauseSubscription"))
		return soap_serve_KLPRES_PauseSubscription(soap);
	if (!soap_match_tag(soap, soap->tag, "KLPRES-ResumeSubscription"))
		return soap_serve_KLPRES_ResumeSubscription(soap);
	if (!soap_match_tag(soap, soap->tag, "KLPRES-RemoveSubscription"))
		return soap_serve_KLPRES_RemoveSubscription(soap);
	if (!soap_match_tag(soap, soap->tag, "KLPRES-ResetEventsIterator"))
		return soap_serve_KLPRES_ResetEventsIterator(soap);
	if (!soap_match_tag(soap, soap->tag, "KLPRES-SetEventsIterator"))
		return soap_serve_KLPRES_SetEventsIterator(soap);
	if (!soap_match_tag(soap, soap->tag, "KLPRES-ResetEventsIteratorEx"))
		return soap_serve_KLPRES_ResetEventsIteratorEx(soap);
	if (!soap_match_tag(soap, soap->tag, "KLPRES-SetEventsIteratorEx"))
		return soap_serve_KLPRES_SetEventsIteratorEx(soap);
	if (!soap_match_tag(soap, soap->tag, "KLPRES-MoveToEventWithIndex"))
		return soap_serve_KLPRES_MoveToEventWithIndex(soap);
	if (!soap_match_tag(soap, soap->tag, "KLPRES-GetEventsCount"))
		return soap_serve_KLPRES_GetEventsCount(soap);
	if (!soap_match_tag(soap, soap->tag, "KLPRES-GetNextEventsChunk"))
		return soap_serve_KLPRES_GetNextEventsChunk(soap);
	if (!soap_match_tag(soap, soap->tag, "KLPRES-ClearEventsList"))
		return soap_serve_KLPRES_ClearEventsList(soap);
	if (!soap_match_tag(soap, soap->tag, "KLPRES-DeleteEvents"))
		return soap_serve_KLPRES_DeleteEvents(soap);
	if (!soap_match_tag(soap, soap->tag, "KLPRES-DeleteOneEventByID"))
		return soap_serve_KLPRES_DeleteOneEventByID(soap);
	if (!soap_match_tag(soap, soap->tag, "KLPRES-DeleteRanges"))
		return soap_serve_KLPRES_DeleteRanges(soap);
	if (!soap_match_tag(soap, soap->tag, "KLPRES-RemoveExpiredEvents"))
		return soap_serve_KLPRES_RemoveExpiredEvents(soap);
	if (!soap_match_tag(soap, soap->tag, "KLPRES-GetEventStorageFileSize"))
		return soap_serve_KLPRES_GetEventStorageFileSize(soap);
	if (!soap_match_tag(soap, soap->tag, "KLPRTS-ResetTasksIterator"))
		return soap_serve_KLPRTS_ResetTasksIterator(soap);
	if (!soap_match_tag(soap, soap->tag, "KLPRTS-GetTaskByID"))
		return soap_serve_KLPRTS_GetTaskByID(soap);
	if (!soap_match_tag(soap, soap->tag, "KLPRTS-GetTaskByIDWithPolicyApplied"))
		return soap_serve_KLPRTS_GetTaskByIDWithPolicyApplied(soap);
	if (!soap_match_tag(soap, soap->tag, "KLPRTS-AddTask"))
		return soap_serve_KLPRTS_AddTask(soap);
	if (!soap_match_tag(soap, soap->tag, "KLPRTS-UpdateTask"))
		return soap_serve_KLPRTS_UpdateTask(soap);
	if (!soap_match_tag(soap, soap->tag, "KLPRTS-DeleteTask"))
		return soap_serve_KLPRTS_DeleteTask(soap);
	if (!soap_match_tag(soap, soap->tag, "KLPRTS-SetTaskStartEvent"))
		return soap_serve_KLPRTS_SetTaskStartEvent(soap);
	if (!soap_match_tag(soap, soap->tag, "KLPRTS-GetTaskStartEvent"))
		return soap_serve_KLPRTS_GetTaskStartEvent(soap);
	if (!soap_match_tag(soap, soap->tag, "KLPRTS-UpdateTask2"))
		return soap_serve_KLPRTS_UpdateTask2(soap);
	if (!soap_match_tag(soap, soap->tag, "KLPRTS-ReplaceTask"))
		return soap_serve_KLPRTS_ReplaceTask(soap);
	if (!soap_match_tag(soap, soap->tag, "klsssrv-Close"))
		return soap_serve_klsssrv_Close(soap);
	if (!soap_match_tag(soap, soap->tag, "klsssrv-CreateSettingsStorage"))
		return soap_serve_klsssrv_CreateSettingsStorage(soap);
	if (!soap_match_tag(soap, soap->tag, "klsssrv-Read"))
		return soap_serve_klsssrv_Read(soap);
	if (!soap_match_tag(soap, soap->tag, "klsssrv-Write"))
		return soap_serve_klsssrv_Write(soap);
	if (!soap_match_tag(soap, soap->tag, "klsssrv-CreateSection"))
		return soap_serve_klsssrv_CreateSection(soap);
	if (!soap_match_tag(soap, soap->tag, "klsssrv-DeleteSection"))
		return soap_serve_klsssrv_DeleteSection(soap);
	if (!soap_match_tag(soap, soap->tag, "klsssrv-SetTimeout"))
		return soap_serve_klsssrv_SetTimeout(soap);
	if (!soap_match_tag(soap, soap->tag, "klsssrv-GetNames"))
		return soap_serve_klsssrv_GetNames(soap);
	if (!soap_match_tag(soap, soap->tag, "klsssrv-AttrRead"))
		return soap_serve_klsssrv_AttrRead(soap);
	if (!soap_match_tag(soap, soap->tag, "klagent-StartTaskStorageTask"))
		return soap_serve_klagent_StartTaskStorageTask(soap);
	if (!soap_match_tag(soap, soap->tag, "klagent-StartComponentEx"))
		return soap_serve_klagent_StartComponentEx(soap);
	if (!soap_match_tag(soap, soap->tag, "klagent-GetStartedComponentsList"))
		return soap_serve_klagent_GetStartedComponentsList(soap);
	if (!soap_match_tag(soap, soap->tag, "klagent-IsComponentStarted"))
		return soap_serve_klagent_IsComponentStarted(soap);
	if (!soap_match_tag(soap, soap->tag, "klagent-GetComponentStartParameters"))
		return soap_serve_klagent_GetComponentStartParameters(soap);
	if (!soap_match_tag(soap, soap->tag, "klagent-GetComponentPort"))
		return soap_serve_klagent_GetComponentPort(soap);
	if (!soap_match_tag(soap, soap->tag, "klevprop-ResetIterator"))
		return soap_serve_klevprop_ResetIterator(soap);
	if (!soap_match_tag(soap, soap->tag, "klevprop-GetRecordCount"))
		return soap_serve_klevprop_GetRecordCount(soap);
	if (!soap_match_tag(soap, soap->tag, "klevprop-GetRecordRange"))
		return soap_serve_klevprop_GetRecordRange(soap);
	if (!soap_match_tag(soap, soap->tag, "klevprop-FindRecordByFirstChars"))
		return soap_serve_klevprop_FindRecordByFirstChars(soap);
	if (!soap_match_tag(soap, soap->tag, "klevprop-DeleteProperties"))
		return soap_serve_klevprop_DeleteProperties(soap);
	if (!soap_match_tag(soap, soap->tag, "klevprop-InitiateDelete"))
		return soap_serve_klevprop_InitiateDelete(soap);
	if (!soap_match_tag(soap, soap->tag, "klevprop-CancelDelete"))
		return soap_serve_klevprop_CancelDelete(soap);
	if (!soap_match_tag(soap, soap->tag, "klevprop-ReleaseIterator"))
		return soap_serve_klevprop_ReleaseIterator(soap);
	if (!soap_match_tag(soap, soap->tag, "klevproc-Process"))
		return soap_serve_klevproc_Process(soap);
	if (!soap_match_tag(soap, soap->tag, "klevpnp-GetDefaultSettings"))
		return soap_serve_klevpnp_GetDefaultSettings(soap);
	if (!soap_match_tag(soap, soap->tag, "klevpnp-SetDefaultSettings"))
		return soap_serve_klevpnp_SetDefaultSettings(soap);
	if (!soap_match_tag(soap, soap->tag, "klevpnp-TestNotification"))
		return soap_serve_klevpnp_TestNotification(soap);
	if (!soap_match_tag(soap, soap->tag, "klevpnp-SetNotificationLimits"))
		return soap_serve_klevpnp_SetNotificationLimits(soap);
	if (!soap_match_tag(soap, soap->tag, "klevpnp-GetNotificationLimits"))
		return soap_serve_klevpnp_GetNotificationLimits(soap);
	if (!soap_match_tag(soap, soap->tag, "klevpnp-GetCommonProperties"))
		return soap_serve_klevpnp_GetCommonProperties(soap);
	if (!soap_match_tag(soap, soap->tag, "klevpnp-GetGroupProperties"))
		return soap_serve_klevpnp_GetGroupProperties(soap);
	if (!soap_match_tag(soap, soap->tag, "klevpnp-GetTaskProperties"))
		return soap_serve_klevpnp_GetTaskProperties(soap);
	if (!soap_match_tag(soap, soap->tag, "klevpnp-SetCommonProperties"))
		return soap_serve_klevpnp_SetCommonProperties(soap);
	if (!soap_match_tag(soap, soap->tag, "klevpnp-SetGroupProperties"))
		return soap_serve_klevpnp_SetGroupProperties(soap);
	if (!soap_match_tag(soap, soap->tag, "klevpnp-SetTaskProperties"))
		return soap_serve_klevpnp_SetTaskProperties(soap);
	if (!soap_match_tag(soap, soap->tag, "klnag-RemoveStores"))
		return soap_serve_klnag_RemoveStores(soap);
	if (!soap_match_tag(soap, soap->tag, "klnag-StartNewIntegration"))
		return soap_serve_klnag_StartNewIntegration(soap);
	if (!soap_match_tag(soap, soap->tag, "klnag-NotifySSChange"))
		return soap_serve_klnag_NotifySSChange(soap);
	if (!soap_match_tag(soap, soap->tag, "klnag-OnPing"))
		return soap_serve_klnag_OnPing(soap);
	if (!soap_match_tag(soap, soap->tag, "klnag-WatchdogPing"))
		return soap_serve_klnag_WatchdogPing(soap);
	if (!soap_match_tag(soap, soap->tag, "klnag-GetRunTimeInfo"))
		return soap_serve_klnag_GetRunTimeInfo(soap);
	if (!soap_match_tag(soap, soap->tag, "klnag-GetStaticInfo"))
		return soap_serve_klnag_GetStaticInfo(soap);
	if (!soap_match_tag(soap, soap->tag, "klnag-GetStatistics"))
		return soap_serve_klnag_GetStatistics(soap);
	if (!soap_match_tag(soap, soap->tag, "klnag-GetInstancePort"))
		return soap_serve_klnag_GetInstancePort(soap);
	if (!soap_match_tag(soap, soap->tag, "klnag-StartProduct"))
		return soap_serve_klnag_StartProduct(soap);
	if (!soap_match_tag(soap, soap->tag, "klnag-StopProduct"))
		return soap_serve_klnag_StopProduct(soap);
	if (!soap_match_tag(soap, soap->tag, "klnag-OnStartRemoteInstallTask"))
		return soap_serve_klnag_OnStartRemoteInstallTask(soap);
	if (!soap_match_tag(soap, soap->tag, "klnag-OnInstallerNotification"))
		return soap_serve_klnag_OnInstallerNotification(soap);
	if (!soap_match_tag(soap, soap->tag, "klnag-GetHostPublicKey"))
		return soap_serve_klnag_GetHostPublicKey(soap);
	if (!soap_match_tag(soap, soap->tag, "klnag-PutGlobalKeys"))
		return soap_serve_klnag_PutGlobalKeys(soap);
	if (!soap_match_tag(soap, soap->tag, "klnag-OnUserForceSyncRequest"))
		return soap_serve_klnag_OnUserForceSyncRequest(soap);
	if (!soap_match_tag(soap, soap->tag, "klftbridge-CreateReceiver"))
		return soap_serve_klftbridge_CreateReceiver(soap);
	if (!soap_match_tag(soap, soap->tag, "klftbridge-Connect"))
		return soap_serve_klftbridge_Connect(soap);
	if (!soap_match_tag(soap, soap->tag, "klftbridge-GetFileInfo"))
		return soap_serve_klftbridge_GetFileInfo(soap);
	if (!soap_match_tag(soap, soap->tag, "klftbridge-GetNextFileChunk"))
		return soap_serve_klftbridge_GetNextFileChunk(soap);
	if (!soap_match_tag(soap, soap->tag, "klftbridge-ReleaseReceiver"))
		return soap_serve_klftbridge_ReleaseReceiver(soap);
	if (!soap_match_tag(soap, soap->tag, "klft-InitiateFileUpload"))
		return soap_serve_klft_InitiateFileUpload(soap);
	if (!soap_match_tag(soap, soap->tag, "klft-RegisterUpdateAgent"))
		return soap_serve_klft_RegisterUpdateAgent(soap);
	if (!soap_match_tag(soap, soap->tag, "klft-InitiateServerFileUpload"))
		return soap_serve_klft_InitiateServerFileUpload(soap);
	if (!soap_match_tag(soap, soap->tag, "klft-CancelServerFileUpload"))
		return soap_serve_klft_CancelServerFileUpload(soap);
	if (!soap_match_tag(soap, soap->tag, "klft-PutNextFileChunk"))
		return soap_serve_klft_PutNextFileChunk(soap);
	if (!soap_match_tag(soap, soap->tag, "klft-GetSyncFolderDiff"))
		return soap_serve_klft_GetSyncFolderDiff(soap);
	if (!soap_match_tag(soap, soap->tag, "klft-GetSyncFolderFileInfo"))
		return soap_serve_klft_GetSyncFolderFileInfo(soap);
	if (!soap_match_tag(soap, soap->tag, "klft-GetSyncFolderFileChunk"))
		return soap_serve_klft_GetSyncFolderFileChunk(soap);
	if (!soap_match_tag(soap, soap->tag, "sync-putData"))
		return soap_serve_sync_putData(soap);
	if (!soap_match_tag(soap, soap->tag, "sync-Call"))
		return soap_serve_sync_Call(soap);
	if (!soap_match_tag(soap, soap->tag, "sync-start"))
		return soap_serve_sync_start(soap);
	if (!soap_match_tag(soap, soap->tag, "klhst-UseKeepConnection"))
		return soap_serve_klhst_UseKeepConnection(soap);
	if (!soap_match_tag(soap, soap->tag, "klhst-AddHosts"))
		return soap_serve_klhst_AddHosts(soap);
	if (!soap_match_tag(soap, soap->tag, "klhst-GetHostTasks"))
		return soap_serve_klhst_GetHostTasks(soap);
	if (!soap_match_tag(soap, soap->tag, "klhst-GetDomains"))
		return soap_serve_klhst_GetDomains(soap);
	if (!soap_match_tag(soap, soap->tag, "klhst-GetDomainHosts"))
		return soap_serve_klhst_GetDomainHosts(soap);
	if (!soap_match_tag(soap, soap->tag, "klhst-GetHostInfo"))
		return soap_serve_klhst_GetHostInfo(soap);
	if (!soap_match_tag(soap, soap->tag, "klhst-AddDomain"))
		return soap_serve_klhst_AddDomain(soap);
	if (!soap_match_tag(soap, soap->tag, "klhst-DelDomain"))
		return soap_serve_klhst_DelDomain(soap);
	if (!soap_match_tag(soap, soap->tag, "klhst-AddHost"))
		return soap_serve_klhst_AddHost(soap);
	if (!soap_match_tag(soap, soap->tag, "klhst-DelHost"))
		return soap_serve_klhst_DelHost(soap);
	if (!soap_match_tag(soap, soap->tag, "klhst-UpdateHost"))
		return soap_serve_klhst_UpdateHost(soap);
	if (!soap_match_tag(soap, soap->tag, "klhst-GetHostProducts"))
		return soap_serve_klhst_GetHostProducts(soap);
	if (!soap_match_tag(soap, soap->tag, "klhst-SS-Read"))
		return soap_serve_klhst_SS_Read(soap);
	if (!soap_match_tag(soap, soap->tag, "klhst-SS-Write"))
		return soap_serve_klhst_SS_Write(soap);
	if (!soap_match_tag(soap, soap->tag, "klhst-SS-CreateSection"))
		return soap_serve_klhst_SS_CreateSection(soap);
	if (!soap_match_tag(soap, soap->tag, "klhst-SS-DeleteSection"))
		return soap_serve_klhst_SS_DeleteSection(soap);
	if (!soap_match_tag(soap, soap->tag, "klhst-SS-GetNames"))
		return soap_serve_klhst_SS_GetNames(soap);
	if (!soap_match_tag(soap, soap->tag, "klhst-CallGetRunTimeInfo"))
		return soap_serve_klhst_CallGetRunTimeInfo(soap);
	if (!soap_match_tag(soap, soap->tag, "klhst-CallGetStaticInfo"))
		return soap_serve_klhst_CallGetStaticInfo(soap);
	if (!soap_match_tag(soap, soap->tag, "klhst-CallGetStatistics"))
		return soap_serve_klhst_CallGetStatistics(soap);
	if (!soap_match_tag(soap, soap->tag, "klhst-CallGetInstancePort"))
		return soap_serve_klhst_CallGetInstancePort(soap);
	if (!soap_match_tag(soap, soap->tag, "klhst-NotifyTask"))
		return soap_serve_klhst_NotifyTask(soap);
	if (!soap_match_tag(soap, soap->tag, "klupdt-GetUpdatesInfo"))
		return soap_serve_klupdt_GetUpdatesInfo(soap);
	if (!soap_match_tag(soap, soap->tag, "klupdt-SetBundleOptions"))
		return soap_serve_klupdt_SetBundleOptions(soap);
	if (!soap_match_tag(soap, soap->tag, "klupdt-SetGeneralOptions"))
		return soap_serve_klupdt_SetGeneralOptions(soap);
	if (!soap_match_tag(soap, soap->tag, "klupdt-GetGeneralOptions"))
		return soap_serve_klupdt_GetGeneralOptions(soap);
	if (!soap_match_tag(soap, soap->tag, "klupdt-GetAvailableUpdatesInfo"))
		return soap_serve_klupdt_GetAvailableUpdatesInfo(soap);
	if (!soap_match_tag(soap, soap->tag, "klupdt-GetRequiedUpdatesInfo"))
		return soap_serve_klupdt_GetRequiedUpdatesInfo(soap);
	if (!soap_match_tag(soap, soap->tag, "kllicsrv-GetKeysInfo"))
		return soap_serve_kllicsrv_GetKeysInfo(soap);
	if (!soap_match_tag(soap, soap->tag, "kllicsrv-GetKeyInfo"))
		return soap_serve_kllicsrv_GetKeyInfo(soap);
	if (!soap_match_tag(soap, soap->tag, "kllicsrv-DeleteKeyInfo"))
		return soap_serve_kllicsrv_DeleteKeyInfo(soap);
	if (!soap_match_tag(soap, soap->tag, "kllicsrv-InstallKey"))
		return soap_serve_kllicsrv_InstallKey(soap);
	if (!soap_match_tag(soap, soap->tag, "kllicsrv-UninstallKey"))
		return soap_serve_kllicsrv_UninstallKey(soap);
	if (!soap_match_tag(soap, soap->tag, "kllicsrv-GetKeyData"))
		return soap_serve_kllicsrv_GetKeyData(soap);
	if (!soap_match_tag(soap, soap->tag, "kllicsrv-AdjustFlexibleKey"))
		return soap_serve_kllicsrv_AdjustFlexibleKey(soap);
	if (!soap_match_tag(soap, soap->tag, "kllicsrv-EnumKeys"))
		return soap_serve_kllicsrv_EnumKeys(soap);
	if (!soap_match_tag(soap, soap->tag, "klhst-MoveRulesAddRule"))
		return soap_serve_klhst_MoveRulesAddRule(soap);
	if (!soap_match_tag(soap, soap->tag, "klhst-MoveRulesUpdateRule"))
		return soap_serve_klhst_MoveRulesUpdateRule(soap);
	if (!soap_match_tag(soap, soap->tag, "klhst-MoveRulesDeleteRule"))
		return soap_serve_klhst_MoveRulesDeleteRule(soap);
	if (!soap_match_tag(soap, soap->tag, "klhst-MoveRulesSetRulesOrder"))
		return soap_serve_klhst_MoveRulesSetRulesOrder(soap);
	if (!soap_match_tag(soap, soap->tag, "klhst-MoveRulesGetRule"))
		return soap_serve_klhst_MoveRulesGetRule(soap);
	if (!soap_match_tag(soap, soap->tag, "klhst-MoveRulesGetRules"))
		return soap_serve_klhst_MoveRulesGetRules(soap);
	if (!soap_match_tag(soap, soap->tag, "kldpns-AddDiapason"))
		return soap_serve_kldpns_AddDiapason(soap);
	if (!soap_match_tag(soap, soap->tag, "kldpns-UpdateDiapason"))
		return soap_serve_kldpns_UpdateDiapason(soap);
	if (!soap_match_tag(soap, soap->tag, "kldpns-RemoveDiapason"))
		return soap_serve_kldpns_RemoveDiapason(soap);
	if (!soap_match_tag(soap, soap->tag, "kldpns-GetDiapasons"))
		return soap_serve_kldpns_GetDiapasons(soap);
	if (!soap_match_tag(soap, soap->tag, "kldpns-GetDiapason"))
		return soap_serve_kldpns_GetDiapason(soap);
	if (!soap_match_tag(soap, soap->tag, "kldpns-NotifyDpnsTask"))
		return soap_serve_kldpns_NotifyDpnsTask(soap);
	if (!soap_match_tag(soap, soap->tag, "klgrp-GetGroups"))
		return soap_serve_klgrp_GetGroups(soap);
	if (!soap_match_tag(soap, soap->tag, "klgrp-GetUnassignedGroupId"))
		return soap_serve_klgrp_GetUnassignedGroupId(soap);
	if (!soap_match_tag(soap, soap->tag, "klgrp-GetGroupInfo"))
		return soap_serve_klgrp_GetGroupInfo(soap);
	if (!soap_match_tag(soap, soap->tag, "klgrp-AddGroup"))
		return soap_serve_klgrp_AddGroup(soap);
	if (!soap_match_tag(soap, soap->tag, "klgrp-DelGroup"))
		return soap_serve_klgrp_DelGroup(soap);
	if (!soap_match_tag(soap, soap->tag, "klgrp-UpdateGroup"))
		return soap_serve_klgrp_UpdateGroup(soap);
	if (!soap_match_tag(soap, soap->tag, "klgrp-SetGroupHosts"))
		return soap_serve_klgrp_SetGroupHosts(soap);
	if (!soap_match_tag(soap, soap->tag, "klgrp-RemoveHosts"))
		return soap_serve_klgrp_RemoveHosts(soap);
	if (!soap_match_tag(soap, soap->tag, "klgrp-ResetGroupHostsIterator"))
		return soap_serve_klgrp_ResetGroupHostsIterator(soap);
	if (!soap_match_tag(soap, soap->tag, "klgrp-ReleaseGroupHostsIterator"))
		return soap_serve_klgrp_ReleaseGroupHostsIterator(soap);
	if (!soap_match_tag(soap, soap->tag, "klgrp-GetNextGroupHost"))
		return soap_serve_klgrp_GetNextGroupHost(soap);
	if (!soap_match_tag(soap, soap->tag, "klgrp-FindHosts"))
		return soap_serve_klgrp_FindHosts(soap);
	if (!soap_match_tag(soap, soap->tag, "klgrp-FindHostsCancel"))
		return soap_serve_klgrp_FindHostsCancel(soap);
	if (!soap_match_tag(soap, soap->tag, "klgrp-FindHostsGetAccessor"))
		return soap_serve_klgrp_FindHostsGetAccessor(soap);
	if (!soap_match_tag(soap, soap->tag, "klgrp-GetSuperGroupId"))
		return soap_serve_klgrp_GetSuperGroupId(soap);
	if (!soap_match_tag(soap, soap->tag, "klgrp-FindGroups"))
		return soap_serve_klgrp_FindGroups(soap);
	if (!soap_match_tag(soap, soap->tag, "klpol-GetPolicyCommonData"))
		return soap_serve_klpol_GetPolicyCommonData(soap);
	if (!soap_match_tag(soap, soap->tag, "klpol-GetAllAcivePoliciesForGroup"))
		return soap_serve_klpol_GetAllAcivePoliciesForGroup(soap);
	if (!soap_match_tag(soap, soap->tag, "klpol-GetSinglePolicyCommonData"))
		return soap_serve_klpol_GetSinglePolicyCommonData(soap);
	if (!soap_match_tag(soap, soap->tag, "klpol-AddPolicy"))
		return soap_serve_klpol_AddPolicy(soap);
	if (!soap_match_tag(soap, soap->tag, "klpol-UpdatePolicyCommonData"))
		return soap_serve_klpol_UpdatePolicyCommonData(soap);
	if (!soap_match_tag(soap, soap->tag, "klpol-DeletePolicy"))
		return soap_serve_klpol_DeletePolicy(soap);
	if (!soap_match_tag(soap, soap->tag, "klpol-CopyPolicyEx"))
		return soap_serve_klpol_CopyPolicyEx(soap);
	if (!soap_match_tag(soap, soap->tag, "klpol-GetSSProxyID"))
		return soap_serve_klpol_GetSSProxyID(soap);
	if (!soap_match_tag(soap, soap->tag, "klpol-ModifySettings"))
		return soap_serve_klpol_ModifySettings(soap);
	if (!soap_match_tag(soap, soap->tag, "klpol-MakePolicyActive"))
		return soap_serve_klpol_MakePolicyActive(soap);
	if (!soap_match_tag(soap, soap->tag, "klpol-MakePolicyRoaming"))
		return soap_serve_klpol_MakePolicyRoaming(soap);
	if (!soap_match_tag(soap, soap->tag, "klpol-GetPoliciesForGroup"))
		return soap_serve_klpol_GetPoliciesForGroup(soap);
	if (!soap_match_tag(soap, soap->tag, "klpol-CopyOrMovePolicy"))
		return soap_serve_klpol_CopyOrMovePolicy(soap);
	if (!soap_match_tag(soap, soap->tag, "klpol-SetOutbreakPolicy"))
		return soap_serve_klpol_SetOutbreakPolicy(soap);
	if (!soap_match_tag(soap, soap->tag, "klpol-GetOutbreakPolicy"))
		return soap_serve_klpol_GetOutbreakPolicy(soap);
	if (!soap_match_tag(soap, soap->tag, "klpol-SetOutbreakPolicy2"))
		return soap_serve_klpol_SetOutbreakPolicy2(soap);
	if (!soap_match_tag(soap, soap->tag, "klpol-GetOutbreakPolicy2"))
		return soap_serve_klpol_GetOutbreakPolicy2(soap);
	if (!soap_match_tag(soap, soap->tag, "klprssp-SS-Read"))
		return soap_serve_klprssp_SS_Read(soap);
	if (!soap_match_tag(soap, soap->tag, "klprssp-SS-Write"))
		return soap_serve_klprssp_SS_Write(soap);
	if (!soap_match_tag(soap, soap->tag, "klprssp-SS-SectionOperation"))
		return soap_serve_klprssp_SS_SectionOperation(soap);
	if (!soap_match_tag(soap, soap->tag, "klprssp-SS-GetNames"))
		return soap_serve_klprssp_SS_GetNames(soap);
	if (!soap_match_tag(soap, soap->tag, "klprssp-SS-ApplyChanges"))
		return soap_serve_klprssp_SS_ApplyChanges(soap);
	if (!soap_match_tag(soap, soap->tag, "klprssp-ReleaseSS"))
		return soap_serve_klprssp_ReleaseSS(soap);
	if (!soap_match_tag(soap, soap->tag, "adhst-GetChildComputers"))
		return soap_serve_adhst_GetChildComputers(soap);
	if (!soap_match_tag(soap, soap->tag, "adhst-GetChildOUs"))
		return soap_serve_adhst_GetChildOUs(soap);
	if (!soap_match_tag(soap, soap->tag, "adhst-GetOU"))
		return soap_serve_adhst_GetOU(soap);
	if (!soap_match_tag(soap, soap->tag, "adhst-UpdateOU"))
		return soap_serve_adhst_UpdateOU(soap);
	if (!soap_match_tag(soap, soap->tag, "klgsyn-GetNextItems"))
		return soap_serve_klgsyn_GetNextItems(soap);
	if (!soap_match_tag(soap, soap->tag, "klgsyn-ReleaseIterator"))
		return soap_serve_klgsyn_ReleaseIterator(soap);
	if (!soap_match_tag(soap, soap->tag, "klgsyn-AddSyncObjG"))
		return soap_serve_klgsyn_AddSyncObjG(soap);
	if (!soap_match_tag(soap, soap->tag, "klgsyn-AddSyncObjH"))
		return soap_serve_klgsyn_AddSyncObjH(soap);
	if (!soap_match_tag(soap, soap->tag, "klgsyn-GetSyncInfo"))
		return soap_serve_klgsyn_GetSyncInfo(soap);
	if (!soap_match_tag(soap, soap->tag, "klgsyn-RemoveSyncObj"))
		return soap_serve_klgsyn_RemoveSyncObj(soap);
	if (!soap_match_tag(soap, soap->tag, "klgsyn-GetSyncHostsInfo"))
		return soap_serve_klgsyn_GetSyncHostsInfo(soap);
	if (!soap_match_tag(soap, soap->tag, "klgsyn-FindHosts"))
		return soap_serve_klgsyn_FindHosts(soap);
	if (!soap_match_tag(soap, soap->tag, "klgsyn-GetSyncHostsInfo2"))
		return soap_serve_klgsyn_GetSyncHostsInfo2(soap);
	if (!soap_match_tag(soap, soap->tag, "klgsyn-FindHosts2"))
		return soap_serve_klgsyn_FindHosts2(soap);
	if (!soap_match_tag(soap, soap->tag, "klgsyn-GetItemsCount"))
		return soap_serve_klgsyn_GetItemsCount(soap);
	if (!soap_match_tag(soap, soap->tag, "klgsyn-GetItemsChunk"))
		return soap_serve_klgsyn_GetItemsChunk(soap);
	if (!soap_match_tag(soap, soap->tag, "klgsyn-ReleaseChunkAccessor"))
		return soap_serve_klgsyn_ReleaseChunkAccessor(soap);
	if (!soap_match_tag(soap, soap->tag, "kltsk-ForbidTaskForGroup"))
		return soap_serve_kltsk_ForbidTaskForGroup(soap);
	if (!soap_match_tag(soap, soap->tag, "kltsk-RunTaskNow"))
		return soap_serve_kltsk_RunTaskNow(soap);
	if (!soap_match_tag(soap, soap->tag, "kltsk-SuspendTask"))
		return soap_serve_kltsk_SuspendTask(soap);
	if (!soap_match_tag(soap, soap->tag, "kltsk-ResumeTask"))
		return soap_serve_kltsk_ResumeTask(soap);
	if (!soap_match_tag(soap, soap->tag, "kltsk-CancelTask"))
		return soap_serve_kltsk_CancelTask(soap);
	if (!soap_match_tag(soap, soap->tag, "kltsk-ResetTasksIterator"))
		return soap_serve_kltsk_ResetTasksIterator(soap);
	if (!soap_match_tag(soap, soap->tag, "kltsk-GetNextTask"))
		return soap_serve_kltsk_GetNextTask(soap);
	if (!soap_match_tag(soap, soap->tag, "kltsk-GetTaskByID"))
		return soap_serve_kltsk_GetTaskByID(soap);
	if (!soap_match_tag(soap, soap->tag, "kltsk-GetTaskStatistics"))
		return soap_serve_kltsk_GetTaskStatistics(soap);
	if (!soap_match_tag(soap, soap->tag, "kltsk-AddTask"))
		return soap_serve_kltsk_AddTask(soap);
	if (!soap_match_tag(soap, soap->tag, "kltsk-UpdateTask"))
		return soap_serve_kltsk_UpdateTask(soap);
	if (!soap_match_tag(soap, soap->tag, "kltsk-DeleteTask"))
		return soap_serve_kltsk_DeleteTask(soap);
	if (!soap_match_tag(soap, soap->tag, "kltsk-SetTaskStartEvent"))
		return soap_serve_kltsk_SetTaskStartEvent(soap);
	if (!soap_match_tag(soap, soap->tag, "kltsk-GetTaskStartEvent"))
		return soap_serve_kltsk_GetTaskStartEvent(soap);
	if (!soap_match_tag(soap, soap->tag, "kltsk-ResetHostIteratorForTaskStatus"))
		return soap_serve_kltsk_ResetHostIteratorForTaskStatus(soap);
	if (!soap_match_tag(soap, soap->tag, "kltsk-GetNextHostStatus"))
		return soap_serve_kltsk_GetNextHostStatus(soap);
	if (!soap_match_tag(soap, soap->tag, "kltsk-ResetHostIteratorForTaskStatusEx"))
		return soap_serve_kltsk_ResetHostIteratorForTaskStatusEx(soap);
	if (!soap_match_tag(soap, soap->tag, "kltsk-GetHostStatusRecordsCount"))
		return soap_serve_kltsk_GetHostStatusRecordsCount(soap);
	if (!soap_match_tag(soap, soap->tag, "kltsk-GetHostStatusRecordRange"))
		return soap_serve_kltsk_GetHostStatusRecordRange(soap);
	if (!soap_match_tag(soap, soap->tag, "kltsk-GetAllTasksOfHost"))
		return soap_serve_kltsk_GetAllTasksOfHost(soap);
	if (!soap_match_tag(soap, soap->tag, "kltsk-GetTaskGroup"))
		return soap_serve_kltsk_GetTaskGroup(soap);
	if (!soap_match_tag(soap, soap->tag, "klpkg-GetPackages"))
		return soap_serve_klpkg_GetPackages(soap);
	if (!soap_match_tag(soap, soap->tag, "klpkg-RenamePackage"))
		return soap_serve_klpkg_RenamePackage(soap);
	if (!soap_match_tag(soap, soap->tag, "klpkg-GetIntranetFolderForNewPackage"))
		return soap_serve_klpkg_GetIntranetFolderForNewPackage(soap);
	if (!soap_match_tag(soap, soap->tag, "klpkg-RecordNewPackage"))
		return soap_serve_klpkg_RecordNewPackage(soap);
	if (!soap_match_tag(soap, soap->tag, "klpkg-RemovePackage"))
		return soap_serve_klpkg_RemovePackage(soap);
	if (!soap_match_tag(soap, soap->tag, "klpkg-GetIntranetFolderForPackage"))
		return soap_serve_klpkg_GetIntranetFolderForPackage(soap);
	if (!soap_match_tag(soap, soap->tag, "klpkg-SS-Read"))
		return soap_serve_klpkg_SS_Read(soap);
	if (!soap_match_tag(soap, soap->tag, "klpkg-SS-Write"))
		return soap_serve_klpkg_SS_Write(soap);
	if (!soap_match_tag(soap, soap->tag, "klpkg-SS-SectionOpearation"))
		return soap_serve_klpkg_SS_SectionOpearation(soap);
	if (!soap_match_tag(soap, soap->tag, "klpkg-SS-GetNames"))
		return soap_serve_klpkg_SS_GetNames(soap);
	if (!soap_match_tag(soap, soap->tag, "klpkg-RemovePackage2"))
		return soap_serve_klpkg_RemovePackage2(soap);
	if (!soap_match_tag(soap, soap->tag, "klpkg-GetLoginScript"))
		return soap_serve_klpkg_GetLoginScript(soap);
	if (!soap_match_tag(soap, soap->tag, "klpkg-SetRebootOptions"))
		return soap_serve_klpkg_SetRebootOptions(soap);
	if (!soap_match_tag(soap, soap->tag, "klpkg-GetRebootOptions"))
		return soap_serve_klpkg_GetRebootOptions(soap);
	if (!soap_match_tag(soap, soap->tag, "klpkg-RecordNewPackage2"))
		return soap_serve_klpkg_RecordNewPackage2(soap);
	if (!soap_match_tag(soap, soap->tag, "klpkg-GetLicenseKey"))
		return soap_serve_klpkg_GetLicenseKey(soap);
	if (!soap_match_tag(soap, soap->tag, "klpkg-SetLicenseKey"))
		return soap_serve_klpkg_SetLicenseKey(soap);
	if (!soap_match_tag(soap, soap->tag, "klpkg-ReadPkgCfgFile"))
		return soap_serve_klpkg_ReadPkgCfgFile(soap);
	if (!soap_match_tag(soap, soap->tag, "klpkg-WritePkgCfgFile"))
		return soap_serve_klpkg_WritePkgCfgFile(soap);
	if (!soap_match_tag(soap, soap->tag, "klpkg-ReadKpdFile"))
		return soap_serve_klpkg_ReadKpdFile(soap);
	if (!soap_match_tag(soap, soap->tag, "klpkg-GetKpdProfileString"))
		return soap_serve_klpkg_GetKpdProfileString(soap);
	if (!soap_match_tag(soap, soap->tag, "klpkg-WriteKpdProfileString"))
		return soap_serve_klpkg_WriteKpdProfileString(soap);
	if (!soap_match_tag(soap, soap->tag, "klpkg-SetRebootOptionsEx"))
		return soap_serve_klpkg_SetRebootOptionsEx(soap);
	if (!soap_match_tag(soap, soap->tag, "klpkg-GetRebootOptionsEx"))
		return soap_serve_klpkg_GetRebootOptionsEx(soap);
	if (!soap_match_tag(soap, soap->tag, "klpkg-RecordNewPackageAsync"))
		return soap_serve_klpkg_RecordNewPackageAsync(soap);
	if (!soap_match_tag(soap, soap->tag, "klpkg-GetPackageInfo"))
		return soap_serve_klpkg_GetPackageInfo(soap);
	if (!soap_match_tag(soap, soap->tag, "klpkg-GetIncompatibleAppsInfo"))
		return soap_serve_klpkg_GetIncompatibleAppsInfo(soap);
	if (!soap_match_tag(soap, soap->tag, "klpkg-SetRemoveIncompatibleApps"))
		return soap_serve_klpkg_SetRemoveIncompatibleApps(soap);
	if (!soap_match_tag(soap, soap->tag, "klrpt-GetReportTypes"))
		return soap_serve_klrpt_GetReportTypes(soap);
	if (!soap_match_tag(soap, soap->tag, "klrpt-GetReportTypeDetailedData"))
		return soap_serve_klrpt_GetReportTypeDetailedData(soap);
	if (!soap_match_tag(soap, soap->tag, "klrpt-GetReportIds"))
		return soap_serve_klrpt_GetReportIds(soap);
	if (!soap_match_tag(soap, soap->tag, "klrpt-GetReports"))
		return soap_serve_klrpt_GetReports(soap);
	if (!soap_match_tag(soap, soap->tag, "klrpt-GetReportCommonData"))
		return soap_serve_klrpt_GetReportCommonData(soap);
	if (!soap_match_tag(soap, soap->tag, "klrpt-GetReportDetailedData"))
		return soap_serve_klrpt_GetReportDetailedData(soap);
	if (!soap_match_tag(soap, soap->tag, "klrpt-AddReport"))
		return soap_serve_klrpt_AddReport(soap);
	if (!soap_match_tag(soap, soap->tag, "klrpt-UpdateReport"))
		return soap_serve_klrpt_UpdateReport(soap);
	if (!soap_match_tag(soap, soap->tag, "klrpt-DeleteReport"))
		return soap_serve_klrpt_DeleteReport(soap);
	if (!soap_match_tag(soap, soap->tag, "klrpt-ExecuteReport"))
		return soap_serve_klrpt_ExecuteReport(soap);
	if (!soap_match_tag(soap, soap->tag, "klrpt-GetConstantOutputForReportType"))
		return soap_serve_klrpt_GetConstantOutputForReportType(soap);
	if (!soap_match_tag(soap, soap->tag, "klrpt-CreateDefaultReportData"))
		return soap_serve_klrpt_CreateDefaultReportData(soap);
	if (!soap_match_tag(soap, soap->tag, "klrpt-ExecuteReportAsync"))
		return soap_serve_klrpt_ExecuteReportAsync(soap);
	if (!soap_match_tag(soap, soap->tag, "klrpt-ExecuteReportAsyncCancel"))
		return soap_serve_klrpt_ExecuteReportAsyncCancel(soap);
	if (!soap_match_tag(soap, soap->tag, "klrpt-ExecuteReportAsyncGetData"))
		return soap_serve_klrpt_ExecuteReportAsyncGetData(soap);
	if (!soap_match_tag(soap, soap->tag, "klrpt-ExecuteSlaveReportAsync"))
		return soap_serve_klrpt_ExecuteSlaveReportAsync(soap);
	if (!soap_match_tag(soap, soap->tag, "klrpt-ExecuteSlaveReportAsyncCancel"))
		return soap_serve_klrpt_ExecuteSlaveReportAsyncCancel(soap);
	if (!soap_match_tag(soap, soap->tag, "klrpt-ExecuteSlaveReportAsyncGetData"))
		return soap_serve_klrpt_ExecuteSlaveReportAsyncGetData(soap);
	if (!soap_match_tag(soap, soap->tag, "klrpt-RequestStatisticsData"))
		return soap_serve_klrpt_RequestStatisticsData(soap);
	if (!soap_match_tag(soap, soap->tag, "klrpt-CancelStatisticsRequest"))
		return soap_serve_klrpt_CancelStatisticsRequest(soap);
	if (!soap_match_tag(soap, soap->tag, "klrpt-GetStatisticsData"))
		return soap_serve_klrpt_GetStatisticsData(soap);
	if (!soap_match_tag(soap, soap->tag, "klrpt-GetFilterSettings"))
		return soap_serve_klrpt_GetFilterSettings(soap);
	if (!soap_match_tag(soap, soap->tag, "klrpt-ExecuteReportAsyncCancelWaitingForSlaves"))
		return soap_serve_klrpt_ExecuteReportAsyncCancelWaitingForSlaves(soap);
	if (!soap_match_tag(soap, soap->tag, "klrpt-ResetStatisticsData"))
		return soap_serve_klrpt_ResetStatisticsData(soap);
	if (!soap_match_tag(soap, soap->tag, "klsrvh-GetChildServers"))
		return soap_serve_klsrvh_GetChildServers(soap);
	if (!soap_match_tag(soap, soap->tag, "klsrvh-GetServerInfo"))
		return soap_serve_klsrvh_GetServerInfo(soap);
	if (!soap_match_tag(soap, soap->tag, "klsrvh-RegisterServer"))
		return soap_serve_klsrvh_RegisterServer(soap);
	if (!soap_match_tag(soap, soap->tag, "klsrvh-DelServer"))
		return soap_serve_klsrvh_DelServer(soap);
	if (!soap_match_tag(soap, soap->tag, "klsrvh-UpdateServer"))
		return soap_serve_klsrvh_UpdateServer(soap);
	if (!soap_match_tag(soap, soap->tag, "klsrvh-InitialPingMaster"))
		return soap_serve_klsrvh_InitialPingMaster(soap);
	if (!soap_match_tag(soap, soap->tag, "klsrvh-PingMaster"))
		return soap_serve_klsrvh_PingMaster(soap);
	if (!soap_match_tag(soap, soap->tag, "klsrvh-PingSlave"))
		return soap_serve_klsrvh_PingSlave(soap);
	if (!soap_match_tag(soap, soap->tag, "klsrvh-ForceRetranslateUpdates"))
		return soap_serve_klsrvh_ForceRetranslateUpdates(soap);
	if (!soap_match_tag(soap, soap->tag, "klsrvh-DeliverReport"))
		return soap_serve_klsrvh_DeliverReport(soap);
	if (!soap_match_tag(soap, soap->tag, "klsrvh-RecreateInstallationPackage"))
		return soap_serve_klsrvh_RecreateInstallationPackage(soap);
	if (!soap_match_tag(soap, soap->tag, "klsrvh-StartTask"))
		return soap_serve_klsrvh_StartTask(soap);
	if (!soap_match_tag(soap, soap->tag, "klsrvh-StartRemoteInstallation"))
		return soap_serve_klsrvh_StartRemoteInstallation(soap);
	if (!soap_match_tag(soap, soap->tag, "klsrvh-ReportRemoteInstallationResult"))
		return soap_serve_klsrvh_ReportRemoteInstallationResult(soap);
	if (!soap_match_tag(soap, soap->tag, "klsrvh-NotifyOnReportResult"))
		return soap_serve_klsrvh_NotifyOnReportResult(soap);
	if (!soap_match_tag(soap, soap->tag, "klsrvh-FindSlaveServers"))
		return soap_serve_klsrvh_FindSlaveServers(soap);
	if (!soap_match_tag(soap, soap->tag, "klsrvs-GetSharedFolder"))
		return soap_serve_klsrvs_GetSharedFolder(soap);
	if (!soap_match_tag(soap, soap->tag, "klsrvs-ChangeSharedFolder"))
		return soap_serve_klsrvs_ChangeSharedFolder(soap);
	if (!soap_match_tag(soap, soap->tag, "klnlst-ResetIterator"))
		return soap_serve_klnlst_ResetIterator(soap);
	if (!soap_match_tag(soap, soap->tag, "klnlst-GetRecordCount"))
		return soap_serve_klnlst_GetRecordCount(soap);
	if (!soap_match_tag(soap, soap->tag, "klnlst-GetRecordRange"))
		return soap_serve_klnlst_GetRecordRange(soap);
	if (!soap_match_tag(soap, soap->tag, "klnlst-ReleaseIterator"))
		return soap_serve_klnlst_ReleaseIterator(soap);
	if (!soap_match_tag(soap, soap->tag, "klnlst-UpdateHostNetworkList"))
		return soap_serve_klnlst_UpdateHostNetworkList(soap);
	if (!soap_match_tag(soap, soap->tag, "klnlst-AddListItemTask"))
		return soap_serve_klnlst_AddListItemTask(soap);
	if (!soap_match_tag(soap, soap->tag, "klnlst-AddTaskForListItems"))
		return soap_serve_klnlst_AddTaskForListItems(soap);
	if (!soap_match_tag(soap, soap->tag, "klnlst-GetItemInfo"))
		return soap_serve_klnlst_GetItemInfo(soap);
	if (!soap_match_tag(soap, soap->tag, "klnagnlst-CallNetworkListTask"))
		return soap_serve_klnagnlst_CallNetworkListTask(soap);
	if (!soap_match_tag(soap, soap->tag, "klnagnlst-GetItemFileInfo"))
		return soap_serve_klnagnlst_GetItemFileInfo(soap);
	if (!soap_match_tag(soap, soap->tag, "klnagnlst-GetItemFileChunk"))
		return soap_serve_klnagnlst_GetItemFileChunk(soap);
	if (!soap_match_tag(soap, soap->tag, "klft-GetNextFileChunk"))
		return soap_serve_klft_GetNextFileChunk(soap);
	if (!soap_match_tag(soap, soap->tag, "klft-GetServerFilesList"))
		return soap_serve_klft_GetServerFilesList(soap);
	if (!soap_match_tag(soap, soap->tag, "klft-GetUpdaterFolderFileInfo"))
		return soap_serve_klft_GetUpdaterFolderFileInfo(soap);
	if (!soap_match_tag(soap, soap->tag, "klft-GetFullFileInfo"))
		return soap_serve_klft_GetFullFileInfo(soap);
	if (!soap_match_tag(soap, soap->tag, "klft-GetHostUpdateAgentInfo"))
		return soap_serve_klft_GetHostUpdateAgentInfo(soap);
	if (!soap_match_tag(soap, soap->tag, "klft-SendToClientFullSyncArchive"))
		return soap_serve_klft_SendToClientFullSyncArchive(soap);
	if (!soap_match_tag(soap, soap->tag, "klfts-RegisterUpdateAgent"))
		return soap_serve_klfts_RegisterUpdateAgent(soap);
	if (!soap_match_tag(soap, soap->tag, "klfts-ModifyUpdateAgent"))
		return soap_serve_klfts_ModifyUpdateAgent(soap);
	if (!soap_match_tag(soap, soap->tag, "klfts-UnregisterUpdateAgent"))
		return soap_serve_klfts_UnregisterUpdateAgent(soap);
	if (!soap_match_tag(soap, soap->tag, "klfts-GetDefaultUpdateAgentRegistrationInfo"))
		return soap_serve_klfts_GetDefaultUpdateAgentRegistrationInfo(soap);
	if (!soap_match_tag(soap, soap->tag, "klfts-GetUpdateAgentsForGroup"))
		return soap_serve_klfts_GetUpdateAgentsForGroup(soap);
	if (!soap_match_tag(soap, soap->tag, "klfts-GetUpdateAgentInfo"))
		return soap_serve_klfts_GetUpdateAgentInfo(soap);
	if (!soap_match_tag(soap, soap->tag, "klfts-UseUAForSyncFolder"))
		return soap_serve_klfts_UseUAForSyncFolder(soap);
	if (!soap_match_tag(soap, soap->tag, "klfts-GetUseUAForSyncFolder"))
		return soap_serve_klfts_GetUseUAForSyncFolder(soap);
	if (!soap_match_tag(soap, soap->tag, "klcmptrsft-GetCompetitorSoftwareList"))
		return soap_serve_klcmptrsft_GetCompetitorSoftwareList(soap);
	if (!soap_match_tag(soap, soap->tag, "klcmptrsft-GetHostCompetitorSoftwareList"))
		return soap_serve_klcmptrsft_GetHostCompetitorSoftwareList(soap);
	if (!soap_match_tag(soap, soap->tag, "aklwngt:SessionBegin"))
		return soap_serve_aklwngt__SessionBegin(soap);
	if (!soap_match_tag(soap, soap->tag, "aklwngt:SessionEnd"))
		return soap_serve_aklwngt__SessionEnd(soap);
	if (!soap_match_tag(soap, soap->tag, "aklwngt:Heartbeat"))
		return soap_serve_aklwngt__Heartbeat(soap);
	if (!soap_match_tag(soap, soap->tag, "aklwngt:PutResult"))
		return soap_serve_aklwngt__PutResult(soap);
	if (!soap_match_tag(soap, soap->tag, "aklwngt:PutEvents"))
		return soap_serve_aklwngt__PutEvents(soap);
	if (!soap_match_tag(soap, soap->tag, "aklwngt:klft-GetFileInfo"))
		return soap_serve_aklwngt__klft_GetFileInfo(soap);
	if (!soap_match_tag(soap, soap->tag, "aklwngt:klft-GetNextFileChunk"))
		return soap_serve_aklwngt__klft_GetNextFileChunk(soap);
	if (!soap_match_tag(soap, soap->tag, "klptch-get-nagent-latest-patch-info"))
		return soap_serve_klptch_get_nagent_latest_patch_info(soap);
	if (!soap_match_tag(soap, soap->tag, "klinv-GetInvProductsList"))
		return soap_serve_klinv_GetInvProductsList(soap);
	if (!soap_match_tag(soap, soap->tag, "klinv-GetInvPatchesList"))
		return soap_serve_klinv_GetInvPatchesList(soap);
	if (!soap_match_tag(soap, soap->tag, "klinv-GetHostInvProductsList"))
		return soap_serve_klinv_GetHostInvProductsList(soap);
	if (!soap_match_tag(soap, soap->tag, "klinv-GetHostInvPatchesList"))
		return soap_serve_klinv_GetHostInvPatchesList(soap);
	if (!soap_match_tag(soap, soap->tag, "klinv-GetSrvCompetitorIniFileInfoList"))
		return soap_serve_klinv_GetSrvCompetitorIniFileInfoList(soap);
	if (!soap_match_tag(soap, soap->tag, "klinv-ResetIterator"))
		return soap_serve_klinv_ResetIterator(soap);
	if (!soap_match_tag(soap, soap->tag, "klinv-GetRecordCount"))
		return soap_serve_klinv_GetRecordCount(soap);
	if (!soap_match_tag(soap, soap->tag, "klinv-GetRecordRange"))
		return soap_serve_klinv_GetRecordRange(soap);
	if (!soap_match_tag(soap, soap->tag, "klinv-ReleaseIterator"))
		return soap_serve_klinv_ReleaseIterator(soap);
	if (!soap_match_tag(soap, soap->tag, "kltrf-ReplaceRestriction"))
		return soap_serve_kltrf_ReplaceRestriction(soap);
	if (!soap_match_tag(soap, soap->tag, "kltrf-DeleteRestriction"))
		return soap_serve_kltrf_DeleteRestriction(soap);
	if (!soap_match_tag(soap, soap->tag, "kltrf-GetRestrictions"))
		return soap_serve_kltrf_GetRestrictions(soap);
	if (!soap_match_tag(soap, soap->tag, "klnag-SendWakeOnLanOnSubnetsHosts"))
		return soap_serve_klnag_SendWakeOnLanOnSubnetsHosts(soap);
	if (!soap_match_tag(soap, soap->tag, "klsnmpagt-PutServerEvent"))
		return soap_serve_klsnmpagt_PutServerEvent(soap);
	if (!soap_match_tag(soap, soap->tag, "klsnmpagt-SetAgentConnection"))
		return soap_serve_klsnmpagt_SetAgentConnection(soap);
	return soap->error = SOAP_NO_METHOD;
}

SOAP_FMAC5 int SOAP_FMAC6 soap_serve_tr_InitiateRemoteConnection(struct soap *soap)
{	struct tr_InitiateRemoteConnection soap_tmp_tr_InitiateRemoteConnection;
	struct tr_InitiateRemoteConnectionResponse soap_tmp_tr_InitiateRemoteConnectionResponse;
	int soap_tmp_int;
	soap_default_tr_InitiateRemoteConnectionResponse(soap, &soap_tmp_tr_InitiateRemoteConnectionResponse);
	soap_default_int(soap, &soap_tmp_int);
	soap_tmp_tr_InitiateRemoteConnectionResponse.result = &soap_tmp_int;
	soap_default_tr_InitiateRemoteConnection(soap, &soap_tmp_tr_InitiateRemoteConnection);
	soap->encodingStyle = NULL;
	soap_get_tr_InitiateRemoteConnection(soap, &soap_tmp_tr_InitiateRemoteConnection, "tr-InitiateRemoteConnection", NULL);
	if (soap->error)
		return soap->error;
	
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
#ifndef WITH_LEANER
	 || soap_resolve_attachments(soap)
#endif
	 || soap_end_recv(soap))
		return soap->error;
	soap->error = tr_InitiateRemoteConnection(soap, soap_tmp_tr_InitiateRemoteConnection.remoteName, soap_tmp_tr_InitiateRemoteConnection.localName, &soap_tmp_int);
	if (soap->error)
		return soap->error;
	soap_serializeheader(soap);
	soap_serialize_tr_InitiateRemoteConnectionResponse(soap, &soap_tmp_tr_InitiateRemoteConnectionResponse);
	soap_begin_count(soap);
	if (soap->mode & SOAP_IO_LENGTH)
	{	soap_envelope_begin_out(soap);
		soap_putheader(soap);
		soap_body_begin_out(soap);
		soap_put_tr_InitiateRemoteConnectionResponse(soap, &soap_tmp_tr_InitiateRemoteConnectionResponse, "tr-InitiateRemoteConnectionResponse", "");
		soap_body_end_out(soap);
		soap_envelope_end_out(soap);
	};
	if (soap_response(soap, SOAP_OK)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put_tr_InitiateRemoteConnectionResponse(soap, &soap_tmp_tr_InitiateRemoteConnectionResponse, "tr-InitiateRemoteConnectionResponse", "")
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap->error;
	soap_closesock(soap);
	return SOAP_OK;
}

SOAP_FMAC5 int SOAP_FMAC6 soap_serve_tr_CreateReverseConnection(struct soap *soap)
{	struct tr_CreateReverseConnection soap_tmp_tr_CreateReverseConnection;
	struct tr_CreateReverseConnectionResponse soap_tmp_tr_CreateReverseConnectionResponse;
	int soap_tmp_int;
	soap_default_tr_CreateReverseConnectionResponse(soap, &soap_tmp_tr_CreateReverseConnectionResponse);
	soap_default_int(soap, &soap_tmp_int);
	soap_tmp_tr_CreateReverseConnectionResponse.result = &soap_tmp_int;
	soap_default_tr_CreateReverseConnection(soap, &soap_tmp_tr_CreateReverseConnection);
	soap->encodingStyle = NULL;
	soap_get_tr_CreateReverseConnection(soap, &soap_tmp_tr_CreateReverseConnection, "tr-CreateReverseConnection", NULL);
	if (soap->error)
		return soap->error;
	
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
#ifndef WITH_LEANER
	 || soap_resolve_attachments(soap)
#endif
	 || soap_end_recv(soap))
		return soap->error;
	soap->error = tr_CreateReverseConnection(soap, soap_tmp_tr_CreateReverseConnection.remoteClientConnName, soap_tmp_tr_CreateReverseConnection.connName, soap_tmp_tr_CreateReverseConnection.remoteClientLoc, soap_tmp_tr_CreateReverseConnection.authClientName, soap_tmp_tr_CreateReverseConnection.gatewayConnFlag, soap_tmp_tr_CreateReverseConnection.connPingTimeout, soap_tmp_tr_CreateReverseConnection.connPriority, soap_tmp_tr_CreateReverseConnection.permissions, soap_tmp_tr_CreateReverseConnection.options, &soap_tmp_int);
	if (soap->error)
		return soap->error;
	soap_serializeheader(soap);
	soap_serialize_tr_CreateReverseConnectionResponse(soap, &soap_tmp_tr_CreateReverseConnectionResponse);
	soap_begin_count(soap);
	if (soap->mode & SOAP_IO_LENGTH)
	{	soap_envelope_begin_out(soap);
		soap_putheader(soap);
		soap_body_begin_out(soap);
		soap_put_tr_CreateReverseConnectionResponse(soap, &soap_tmp_tr_CreateReverseConnectionResponse, "tr-CreateReverseConnectionResponse", "");
		soap_body_end_out(soap);
		soap_envelope_end_out(soap);
	};
	if (soap_response(soap, SOAP_OK)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put_tr_CreateReverseConnectionResponse(soap, &soap_tmp_tr_CreateReverseConnectionResponse, "tr-CreateReverseConnectionResponse", "")
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap->error;
	soap_closesock(soap);
	return SOAP_OK;
}

SOAP_FMAC5 int SOAP_FMAC6 soap_serve_tr_ReverseConnectionReply(struct soap *soap)
{	struct tr_ReverseConnectionReply soap_tmp_tr_ReverseConnectionReply;
	struct tr_ReverseConnectionReplyResponse soap_tmp_tr_ReverseConnectionReplyResponse;
	int soap_tmp_int;
	soap_default_tr_ReverseConnectionReplyResponse(soap, &soap_tmp_tr_ReverseConnectionReplyResponse);
	soap_default_int(soap, &soap_tmp_int);
	soap_tmp_tr_ReverseConnectionReplyResponse.result = &soap_tmp_int;
	soap_default_tr_ReverseConnectionReply(soap, &soap_tmp_tr_ReverseConnectionReply);
	soap->encodingStyle = NULL;
	soap_get_tr_ReverseConnectionReply(soap, &soap_tmp_tr_ReverseConnectionReply, "tr-ReverseConnectionReply", NULL);
	if (soap->error)
		return soap->error;
	
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
#ifndef WITH_LEANER
	 || soap_resolve_attachments(soap)
#endif
	 || soap_end_recv(soap))
		return soap->error;
	soap->error = tr_ReverseConnectionReply(soap, soap_tmp_tr_ReverseConnectionReply.remoteServerConnName, soap_tmp_tr_ReverseConnectionReply.clientConnName, soap_tmp_tr_ReverseConnectionReply.pingTimeout, soap_tmp_tr_ReverseConnectionReply.permissions, soap_tmp_tr_ReverseConnectionReply.options, &soap_tmp_int);
	if (soap->error)
		return soap->error;
	soap_serializeheader(soap);
	soap_serialize_tr_ReverseConnectionReplyResponse(soap, &soap_tmp_tr_ReverseConnectionReplyResponse);
	soap_begin_count(soap);
	if (soap->mode & SOAP_IO_LENGTH)
	{	soap_envelope_begin_out(soap);
		soap_putheader(soap);
		soap_body_begin_out(soap);
		soap_put_tr_ReverseConnectionReplyResponse(soap, &soap_tmp_tr_ReverseConnectionReplyResponse, "tr-ReverseConnectionReplyResponse", "");
		soap_body_end_out(soap);
		soap_envelope_end_out(soap);
	};
	if (soap_response(soap, SOAP_OK)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put_tr_ReverseConnectionReplyResponse(soap, &soap_tmp_tr_ReverseConnectionReplyResponse, "tr-ReverseConnectionReplyResponse", "")
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap->error;
	soap_closesock(soap);
	return SOAP_OK;
}

SOAP_FMAC5 int SOAP_FMAC6 soap_serve_tr_PingMethod(struct soap *soap)
{	struct tr_PingMethod soap_tmp_tr_PingMethod;
	struct tr_PingMethodResponse soap_tmp_tr_PingMethodResponse;
	int soap_tmp_int;
	soap_default_tr_PingMethodResponse(soap, &soap_tmp_tr_PingMethodResponse);
	soap_default_int(soap, &soap_tmp_int);
	soap_tmp_tr_PingMethodResponse.result = &soap_tmp_int;
	soap_default_tr_PingMethod(soap, &soap_tmp_tr_PingMethod);
	soap->encodingStyle = NULL;
	soap_get_tr_PingMethod(soap, &soap_tmp_tr_PingMethod, "tr-PingMethod", NULL);
	if (soap->error)
		return soap->error;
	
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
#ifndef WITH_LEANER
	 || soap_resolve_attachments(soap)
#endif
	 || soap_end_recv(soap))
		return soap->error;
	soap->error = tr_PingMethod(soap, soap_tmp_tr_PingMethod.remoteClientConnName, &soap_tmp_int);
	if (soap->error)
		return soap->error;
	soap_serializeheader(soap);
	soap_serialize_tr_PingMethodResponse(soap, &soap_tmp_tr_PingMethodResponse);
	soap_begin_count(soap);
	if (soap->mode & SOAP_IO_LENGTH)
	{	soap_envelope_begin_out(soap);
		soap_putheader(soap);
		soap_body_begin_out(soap);
		soap_put_tr_PingMethodResponse(soap, &soap_tmp_tr_PingMethodResponse, "tr-PingMethodResponse", "");
		soap_body_end_out(soap);
		soap_envelope_end_out(soap);
	};
	if (soap_response(soap, SOAP_OK)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put_tr_PingMethodResponse(soap, &soap_tmp_tr_PingMethodResponse, "tr-PingMethodResponse", "")
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap->error;
	soap_closesock(soap);
	return SOAP_OK;
}

SOAP_FMAC5 int SOAP_FMAC6 soap_serve_tr_AuthenticationHandshake(struct soap *soap)
{	struct tr_AuthenticationHandshake soap_tmp_tr_AuthenticationHandshake;
	struct tr_AuthHandshakeResult r;
	soap_default_tr_AuthHandshakeResult(soap, &r);
	soap_default_tr_AuthenticationHandshake(soap, &soap_tmp_tr_AuthenticationHandshake);
	soap->encodingStyle = NULL;
	soap_get_tr_AuthenticationHandshake(soap, &soap_tmp_tr_AuthenticationHandshake, "tr-AuthenticationHandshake", NULL);
	if (soap->error)
		return soap->error;
	
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
#ifndef WITH_LEANER
	 || soap_resolve_attachments(soap)
#endif
	 || soap_end_recv(soap))
		return soap->error;
	soap->error = tr_AuthenticationHandshake(soap, soap_tmp_tr_AuthenticationHandshake.inClientIdentity, soap_tmp_tr_AuthenticationHandshake.inString, soap_tmp_tr_AuthenticationHandshake.connPriority, r);
	if (soap->error)
		return soap->error;
	soap_serializeheader(soap);
	soap_serialize_tr_AuthHandshakeResult(soap, &r);
	soap_begin_count(soap);
	if (soap->mode & SOAP_IO_LENGTH)
	{	soap_envelope_begin_out(soap);
		soap_putheader(soap);
		soap_body_begin_out(soap);
		soap_put_tr_AuthHandshakeResult(soap, &r, "tr-AuthHandshakeResult", "");
		soap_body_end_out(soap);
		soap_envelope_end_out(soap);
	};
	if (soap_response(soap, SOAP_OK)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put_tr_AuthHandshakeResult(soap, &r, "tr-AuthHandshakeResult", "")
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap->error;
	soap_closesock(soap);
	return SOAP_OK;
}

SOAP_FMAC5 int SOAP_FMAC6 soap_serve_tr_CreateGatewayConnection(struct soap *soap)
{	struct tr_CreateGatewayConnection soap_tmp_tr_CreateGatewayConnection;
	struct tr_CreateGatewayConnectionResponse soap_tmp_tr_CreateGatewayConnectionResponse;
	int soap_tmp_int;
	soap_default_tr_CreateGatewayConnectionResponse(soap, &soap_tmp_tr_CreateGatewayConnectionResponse);
	soap_default_int(soap, &soap_tmp_int);
	soap_tmp_tr_CreateGatewayConnectionResponse.result = &soap_tmp_int;
	soap_default_tr_CreateGatewayConnection(soap, &soap_tmp_tr_CreateGatewayConnection);
	soap->encodingStyle = NULL;
	soap_get_tr_CreateGatewayConnection(soap, &soap_tmp_tr_CreateGatewayConnection, "tr-CreateGatewayConnection", NULL);
	if (soap->error)
		return soap->error;
	
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
#ifndef WITH_LEANER
	 || soap_resolve_attachments(soap)
#endif
	 || soap_end_recv(soap))
		return soap->error;
	soap->error = tr_CreateGatewayConnection(soap, soap_tmp_tr_CreateGatewayConnection.localName, soap_tmp_tr_CreateGatewayConnection.processNamesList, soap_tmp_tr_CreateGatewayConnection.nextProcessPos, soap_tmp_tr_CreateGatewayConnection.connectTimeout, &soap_tmp_int);
	if (soap->error)
		return soap->error;
	soap_serializeheader(soap);
	soap_serialize_tr_CreateGatewayConnectionResponse(soap, &soap_tmp_tr_CreateGatewayConnectionResponse);
	soap_begin_count(soap);
	if (soap->mode & SOAP_IO_LENGTH)
	{	soap_envelope_begin_out(soap);
		soap_putheader(soap);
		soap_body_begin_out(soap);
		soap_put_tr_CreateGatewayConnectionResponse(soap, &soap_tmp_tr_CreateGatewayConnectionResponse, "tr-CreateGatewayConnectionResponse", "");
		soap_body_end_out(soap);
		soap_envelope_end_out(soap);
	};
	if (soap_response(soap, SOAP_OK)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put_tr_CreateGatewayConnectionResponse(soap, &soap_tmp_tr_CreateGatewayConnectionResponse, "tr-CreateGatewayConnectionResponse", "")
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap->error;
	soap_closesock(soap);
	return SOAP_OK;
}

SOAP_FMAC5 int SOAP_FMAC6 soap_serve_tr_TestMethod(struct soap *soap)
{	struct tr_TestMethod soap_tmp_tr_TestMethod;
	struct tr_TestMethodResponse soap_tmp_tr_TestMethodResponse;
	int soap_tmp_int;
	soap_default_tr_TestMethodResponse(soap, &soap_tmp_tr_TestMethodResponse);
	soap_default_int(soap, &soap_tmp_int);
	soap_tmp_tr_TestMethodResponse.result = &soap_tmp_int;
	soap_default_tr_TestMethod(soap, &soap_tmp_tr_TestMethod);
	soap->encodingStyle = NULL;
	soap_get_tr_TestMethod(soap, &soap_tmp_tr_TestMethod, "tr-TestMethod", NULL);
	if (soap->error)
		return soap->error;
	
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
#ifndef WITH_LEANER
	 || soap_resolve_attachments(soap)
#endif
	 || soap_end_recv(soap))
		return soap->error;
	soap->error = tr_TestMethod(soap, soap_tmp_tr_TestMethod.num, soap_tmp_tr_TestMethod.str, &soap_tmp_int);
	if (soap->error)
		return soap->error;
	soap_serializeheader(soap);
	soap_serialize_tr_TestMethodResponse(soap, &soap_tmp_tr_TestMethodResponse);
	soap_begin_count(soap);
	if (soap->mode & SOAP_IO_LENGTH)
	{	soap_envelope_begin_out(soap);
		soap_putheader(soap);
		soap_body_begin_out(soap);
		soap_put_tr_TestMethodResponse(soap, &soap_tmp_tr_TestMethodResponse, "tr-TestMethodResponse", "");
		soap_body_end_out(soap);
		soap_envelope_end_out(soap);
	};
	if (soap_response(soap, SOAP_OK)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put_tr_TestMethodResponse(soap, &soap_tmp_tr_TestMethodResponse, "tr-TestMethodResponse", "")
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap->error;
	soap_closesock(soap);
	return SOAP_OK;
}

SOAP_FMAC5 int SOAP_FMAC6 soap_serve_tr_TestMethod1(struct soap *soap)
{	struct tr_TestMethod1 soap_tmp_tr_TestMethod1;
	struct tr_TestMethod1Result r;
	soap_default_tr_TestMethod1Result(soap, &r);
	soap_default_tr_TestMethod1(soap, &soap_tmp_tr_TestMethod1);
	soap->encodingStyle = NULL;
	soap_get_tr_TestMethod1(soap, &soap_tmp_tr_TestMethod1, "tr-TestMethod1", NULL);
	if (soap->error)
		return soap->error;
	
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
#ifndef WITH_LEANER
	 || soap_resolve_attachments(soap)
#endif
	 || soap_end_recv(soap))
		return soap->error;
	soap->error = tr_TestMethod1(soap, soap_tmp_tr_TestMethod1.num, soap_tmp_tr_TestMethod1.str, r);
	if (soap->error)
		return soap->error;
	soap_serializeheader(soap);
	soap_serialize_tr_TestMethod1Result(soap, &r);
	soap_begin_count(soap);
	if (soap->mode & SOAP_IO_LENGTH)
	{	soap_envelope_begin_out(soap);
		soap_putheader(soap);
		soap_body_begin_out(soap);
		soap_put_tr_TestMethod1Result(soap, &r, "tr-TestMethod1Result", "");
		soap_body_end_out(soap);
		soap_envelope_end_out(soap);
	};
	if (soap_response(soap, SOAP_OK)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put_tr_TestMethod1Result(soap, &r, "tr-TestMethod1Result", "")
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap->error;
	soap_closesock(soap);
	return SOAP_OK;
}

SOAP_FMAC5 int SOAP_FMAC6 soap_serve_tr_TrafficControlNotify(struct soap *soap)
{	struct tr_TrafficControlNotify soap_tmp_tr_TrafficControlNotify;
	struct tr_TrafficControlNotifyResponse soap_tmp_tr_TrafficControlNotifyResponse;
	int soap_tmp_int;
	soap_default_tr_TrafficControlNotifyResponse(soap, &soap_tmp_tr_TrafficControlNotifyResponse);
	soap_default_int(soap, &soap_tmp_int);
	soap_tmp_tr_TrafficControlNotifyResponse.result = &soap_tmp_int;
	soap_default_tr_TrafficControlNotify(soap, &soap_tmp_tr_TrafficControlNotify);
	soap->encodingStyle = NULL;
	soap_get_tr_TrafficControlNotify(soap, &soap_tmp_tr_TrafficControlNotify, "tr-TrafficControlNotify", NULL);
	if (soap->error)
		return soap->error;
	
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
#ifndef WITH_LEANER
	 || soap_resolve_attachments(soap)
#endif
	 || soap_end_recv(soap))
		return soap->error;
	soap->error = tr_TrafficControlNotify(soap, soap_tmp_tr_TrafficControlNotify.error, &soap_tmp_int);
	if (soap->error)
		return soap->error;
	soap_serializeheader(soap);
	soap_serialize_tr_TrafficControlNotifyResponse(soap, &soap_tmp_tr_TrafficControlNotifyResponse);
	soap_begin_count(soap);
	if (soap->mode & SOAP_IO_LENGTH)
	{	soap_envelope_begin_out(soap);
		soap_putheader(soap);
		soap_body_begin_out(soap);
		soap_put_tr_TrafficControlNotifyResponse(soap, &soap_tmp_tr_TrafficControlNotifyResponse, "tr-TrafficControlNotifyResponse", "");
		soap_body_end_out(soap);
		soap_envelope_end_out(soap);
	};
	if (soap_response(soap, SOAP_OK)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put_tr_TrafficControlNotifyResponse(soap, &soap_tmp_tr_TrafficControlNotifyResponse, "tr-TrafficControlNotifyResponse", "")
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap->error;
	soap_closesock(soap);
	return SOAP_OK;
}

SOAP_FMAC5 int SOAP_FMAC6 soap_serve_ev_RemoteSubscribe(struct soap *soap)
{	struct ev_RemoteSubscribe soap_tmp_ev_RemoteSubscribe;
	struct ev_RemoteSubscribeResponse soap_tmp_ev_RemoteSubscribeResponse;
	int soap_tmp_int;
	soap_default_ev_RemoteSubscribeResponse(soap, &soap_tmp_ev_RemoteSubscribeResponse);
	soap_default_int(soap, &soap_tmp_int);
	soap_tmp_ev_RemoteSubscribeResponse.result = &soap_tmp_int;
	soap_default_ev_RemoteSubscribe(soap, &soap_tmp_ev_RemoteSubscribe);
	soap->encodingStyle = NULL;
	soap_get_ev_RemoteSubscribe(soap, &soap_tmp_ev_RemoteSubscribe, "ev-RemoteSubscribe", NULL);
	if (soap->error)
		return soap->error;
	
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
#ifndef WITH_LEANER
	 || soap_resolve_attachments(soap)
#endif
	 || soap_end_recv(soap))
		return soap->error;
	soap->error = ev_RemoteSubscribe(soap, soap_tmp_ev_RemoteSubscribe.subsId, soap_tmp_ev_RemoteSubscribe.localCompName, soap_tmp_ev_RemoteSubscribe.subscriber, soap_tmp_ev_RemoteSubscribe.publisher, soap_tmp_ev_RemoteSubscribe.eventType, soap_tmp_ev_RemoteSubscribe.eventBodyFilter, soap_tmp_ev_RemoteSubscribe.sendToAgentSubs, soap_tmp_ev_RemoteSubscribe.useOnlyLocalConnsFlag, &soap_tmp_int);
	if (soap->error)
		return soap->error;
	soap_serializeheader(soap);
	soap_serialize_ev_RemoteSubscribeResponse(soap, &soap_tmp_ev_RemoteSubscribeResponse);
	soap_begin_count(soap);
	if (soap->mode & SOAP_IO_LENGTH)
	{	soap_envelope_begin_out(soap);
		soap_putheader(soap);
		soap_body_begin_out(soap);
		soap_put_ev_RemoteSubscribeResponse(soap, &soap_tmp_ev_RemoteSubscribeResponse, "ev-RemoteSubscribeResponse", "");
		soap_body_end_out(soap);
		soap_envelope_end_out(soap);
	};
	if (soap_response(soap, SOAP_OK)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put_ev_RemoteSubscribeResponse(soap, &soap_tmp_ev_RemoteSubscribeResponse, "ev-RemoteSubscribeResponse", "")
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap->error;
	soap_closesock(soap);
	return SOAP_OK;
}

SOAP_FMAC5 int SOAP_FMAC6 soap_serve_ev_RemoteUnsubscribe(struct soap *soap)
{	struct ev_RemoteUnsubscribe soap_tmp_ev_RemoteUnsubscribe;
	struct ev_RemoteUnsubscribeResponse soap_tmp_ev_RemoteUnsubscribeResponse;
	int soap_tmp_int;
	soap_default_ev_RemoteUnsubscribeResponse(soap, &soap_tmp_ev_RemoteUnsubscribeResponse);
	soap_default_int(soap, &soap_tmp_int);
	soap_tmp_ev_RemoteUnsubscribeResponse.result = &soap_tmp_int;
	soap_default_ev_RemoteUnsubscribe(soap, &soap_tmp_ev_RemoteUnsubscribe);
	soap->encodingStyle = NULL;
	soap_get_ev_RemoteUnsubscribe(soap, &soap_tmp_ev_RemoteUnsubscribe, "ev-RemoteUnsubscribe", NULL);
	if (soap->error)
		return soap->error;
	
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
#ifndef WITH_LEANER
	 || soap_resolve_attachments(soap)
#endif
	 || soap_end_recv(soap))
		return soap->error;
	soap->error = ev_RemoteUnsubscribe(soap, soap_tmp_ev_RemoteUnsubscribe.remoteSubsId, &soap_tmp_int);
	if (soap->error)
		return soap->error;
	soap_serializeheader(soap);
	soap_serialize_ev_RemoteUnsubscribeResponse(soap, &soap_tmp_ev_RemoteUnsubscribeResponse);
	soap_begin_count(soap);
	if (soap->mode & SOAP_IO_LENGTH)
	{	soap_envelope_begin_out(soap);
		soap_putheader(soap);
		soap_body_begin_out(soap);
		soap_put_ev_RemoteUnsubscribeResponse(soap, &soap_tmp_ev_RemoteUnsubscribeResponse, "ev-RemoteUnsubscribeResponse", "");
		soap_body_end_out(soap);
		soap_envelope_end_out(soap);
	};
	if (soap_response(soap, SOAP_OK)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put_ev_RemoteUnsubscribeResponse(soap, &soap_tmp_ev_RemoteUnsubscribeResponse, "ev-RemoteUnsubscribeResponse", "")
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap->error;
	soap_closesock(soap);
	return SOAP_OK;
}

SOAP_FMAC5 int SOAP_FMAC6 soap_serve_ev_PublishEvent(struct soap *soap)
{	struct ev_PublishEvent soap_tmp_ev_PublishEvent;
	struct ev_PublishEventResponse soap_tmp_ev_PublishEventResponse;
	int soap_tmp_int;
	soap_default_ev_PublishEventResponse(soap, &soap_tmp_ev_PublishEventResponse);
	soap_default_int(soap, &soap_tmp_int);
	soap_tmp_ev_PublishEventResponse.result = &soap_tmp_int;
	soap_default_ev_PublishEvent(soap, &soap_tmp_ev_PublishEvent);
	soap->encodingStyle = NULL;
	soap_get_ev_PublishEvent(soap, &soap_tmp_ev_PublishEvent, "ev-PublishEvent", NULL);
	if (soap->error)
		return soap->error;
	
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
#ifndef WITH_LEANER
	 || soap_resolve_attachments(soap)
#endif
	 || soap_end_recv(soap))
		return soap->error;
	soap->error = ev_PublishEvent(soap, soap_tmp_ev_PublishEvent.eventPublisher, soap_tmp_ev_PublishEvent.eventType, soap_tmp_ev_PublishEvent.eventBody, soap_tmp_ev_PublishEvent.eventBirthTime, soap_tmp_ev_PublishEvent.eventLifeTime, soap_tmp_ev_PublishEvent.processedCompsList, soap_tmp_ev_PublishEvent.remoteSubsIdsList, &soap_tmp_int);
	if (soap->error)
		return soap->error;
	soap_serializeheader(soap);
	soap_serialize_ev_PublishEventResponse(soap, &soap_tmp_ev_PublishEventResponse);
	soap_begin_count(soap);
	if (soap->mode & SOAP_IO_LENGTH)
	{	soap_envelope_begin_out(soap);
		soap_putheader(soap);
		soap_body_begin_out(soap);
		soap_put_ev_PublishEventResponse(soap, &soap_tmp_ev_PublishEventResponse, "ev-PublishEventResponse", "");
		soap_body_end_out(soap);
		soap_envelope_end_out(soap);
	};
	if (soap_response(soap, SOAP_OK)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put_ev_PublishEventResponse(soap, &soap_tmp_ev_PublishEventResponse, "ev-PublishEventResponse", "")
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap->error;
	soap_closesock(soap);
	return SOAP_OK;
}

SOAP_FMAC5 int SOAP_FMAC6 soap_serve_klspl_GetPermissions(struct soap *soap)
{	struct klspl_GetPermissions soap_tmp_klspl_GetPermissions;
	struct klspl_GetPermissionsResponse r;
	soap_default_klspl_GetPermissionsResponse(soap, &r);
	soap_default_klspl_GetPermissions(soap, &soap_tmp_klspl_GetPermissions);
	soap->encodingStyle = NULL;
	soap_get_klspl_GetPermissions(soap, &soap_tmp_klspl_GetPermissions, "klspl-GetPermissions", NULL);
	if (soap->error)
		return soap->error;
	
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
#ifndef WITH_LEANER
	 || soap_resolve_attachments(soap)
#endif
	 || soap_end_recv(soap))
		return soap->error;
	soap->error = klspl_GetPermissions(soap, soap_tmp_klspl_GetPermissions.groupId, r);
	if (soap->error)
		return soap->error;
	soap_serializeheader(soap);
	soap_serialize_klspl_GetPermissionsResponse(soap, &r);
	soap_begin_count(soap);
	if (soap->mode & SOAP_IO_LENGTH)
	{	soap_envelope_begin_out(soap);
		soap_putheader(soap);
		soap_body_begin_out(soap);
		soap_put_klspl_GetPermissionsResponse(soap, &r, "klspl-GetPermissionsResponse", "");
		soap_body_end_out(soap);
		soap_envelope_end_out(soap);
	};
	if (soap_response(soap, SOAP_OK)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put_klspl_GetPermissionsResponse(soap, &r, "klspl-GetPermissionsResponse", "")
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap->error;
	soap_closesock(soap);
	return SOAP_OK;
}

SOAP_FMAC5 int SOAP_FMAC6 soap_serve_klspl_SetPermissions(struct soap *soap)
{	struct klspl_SetPermissions soap_tmp_klspl_SetPermissions;
	struct klspl_SetPermissionsResponse r;
	soap_default_klspl_SetPermissionsResponse(soap, &r);
	soap_default_klspl_SetPermissions(soap, &soap_tmp_klspl_SetPermissions);
	soap->encodingStyle = NULL;
	soap_get_klspl_SetPermissions(soap, &soap_tmp_klspl_SetPermissions, "klspl-SetPermissions", NULL);
	if (soap->error)
		return soap->error;
	
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
#ifndef WITH_LEANER
	 || soap_resolve_attachments(soap)
#endif
	 || soap_end_recv(soap))
		return soap->error;
	soap->error = klspl_SetPermissions(soap, soap_tmp_klspl_SetPermissions.groupId, soap_tmp_klspl_SetPermissions.perms, soap_tmp_klspl_SetPermissions.bCheckUserRights, r);
	if (soap->error)
		return soap->error;
	soap_serializeheader(soap);
	soap_serialize_klspl_SetPermissionsResponse(soap, &r);
	soap_begin_count(soap);
	if (soap->mode & SOAP_IO_LENGTH)
	{	soap_envelope_begin_out(soap);
		soap_putheader(soap);
		soap_body_begin_out(soap);
		soap_put_klspl_SetPermissionsResponse(soap, &r, "klspl-SetPermissionsResponse", "");
		soap_body_end_out(soap);
		soap_envelope_end_out(soap);
	};
	if (soap_response(soap, SOAP_OK)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put_klspl_SetPermissionsResponse(soap, &r, "klspl-SetPermissionsResponse", "")
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap->error;
	soap_closesock(soap);
	return SOAP_OK;
}

SOAP_FMAC5 int SOAP_FMAC6 soap_serve_klprci_GetTasksParams(struct soap *soap)
{	struct klprci_GetTasksParams soap_tmp_klprci_GetTasksParams;
	struct klprci_GetTasksParamsResponse r;
	soap_default_klprci_GetTasksParamsResponse(soap, &r);
	soap_default_klprci_GetTasksParams(soap, &soap_tmp_klprci_GetTasksParams);
	soap->encodingStyle = NULL;
	soap_get_klprci_GetTasksParams(soap, &soap_tmp_klprci_GetTasksParams, "klprci-GetTasksParams", NULL);
	if (soap->error)
		return soap->error;
	
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
#ifndef WITH_LEANER
	 || soap_resolve_attachments(soap)
#endif
	 || soap_end_recv(soap))
		return soap->error;
	soap->error = klprci_GetTasksParams(soap, soap_tmp_klprci_GetTasksParams.ID, soap_tmp_klprci_GetTasksParams.idtask, soap_tmp_klprci_GetTasksParams.filter, r);
	if (soap->error)
		return soap->error;
	soap_serializeheader(soap);
	soap_serialize_klprci_GetTasksParamsResponse(soap, &r);
	soap_begin_count(soap);
	if (soap->mode & SOAP_IO_LENGTH)
	{	soap_envelope_begin_out(soap);
		soap_putheader(soap);
		soap_body_begin_out(soap);
		soap_put_klprci_GetTasksParamsResponse(soap, &r, "klprci-GetTasksParamsResponse", "");
		soap_body_end_out(soap);
		soap_envelope_end_out(soap);
	};
	if (soap_response(soap, SOAP_OK)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put_klprci_GetTasksParamsResponse(soap, &r, "klprci-GetTasksParamsResponse", "")
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap->error;
	soap_closesock(soap);
	return SOAP_OK;
}

SOAP_FMAC5 int SOAP_FMAC6 soap_serve_klprci_GetPingTimeout(struct soap *soap)
{	struct klprci_GetPingTimeout soap_tmp_klprci_GetPingTimeout;
	struct klprci_GetPingTimeoutResponse r;
	soap_default_klprci_GetPingTimeoutResponse(soap, &r);
	soap_default_klprci_GetPingTimeout(soap, &soap_tmp_klprci_GetPingTimeout);
	soap->encodingStyle = NULL;
	soap_get_klprci_GetPingTimeout(soap, &soap_tmp_klprci_GetPingTimeout, "klprci-GetPingTimeout", NULL);
	if (soap->error)
		return soap->error;
	
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
#ifndef WITH_LEANER
	 || soap_resolve_attachments(soap)
#endif
	 || soap_end_recv(soap))
		return soap->error;
	soap->error = klprci_GetPingTimeout(soap, soap_tmp_klprci_GetPingTimeout.ID, r);
	if (soap->error)
		return soap->error;
	soap_serializeheader(soap);
	soap_serialize_klprci_GetPingTimeoutResponse(soap, &r);
	soap_begin_count(soap);
	if (soap->mode & SOAP_IO_LENGTH)
	{	soap_envelope_begin_out(soap);
		soap_putheader(soap);
		soap_body_begin_out(soap);
		soap_put_klprci_GetPingTimeoutResponse(soap, &r, "klprci-GetPingTimeoutResponse", "");
		soap_body_end_out(soap);
		soap_envelope_end_out(soap);
	};
	if (soap_response(soap, SOAP_OK)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put_klprci_GetPingTimeoutResponse(soap, &r, "klprci-GetPingTimeoutResponse", "")
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap->error;
	soap_closesock(soap);
	return SOAP_OK;
}

SOAP_FMAC5 int SOAP_FMAC6 soap_serve_klprci_GetState(struct soap *soap)
{	struct klprci_GetState soap_tmp_klprci_GetState;
	struct klprci_GetStateResponse r;
	soap_default_klprci_GetStateResponse(soap, &r);
	soap_default_klprci_GetState(soap, &soap_tmp_klprci_GetState);
	soap->encodingStyle = NULL;
	soap_get_klprci_GetState(soap, &soap_tmp_klprci_GetState, "klprci-GetState", NULL);
	if (soap->error)
		return soap->error;
	
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
#ifndef WITH_LEANER
	 || soap_resolve_attachments(soap)
#endif
	 || soap_end_recv(soap))
		return soap->error;
	soap->error = klprci_GetState(soap, soap_tmp_klprci_GetState.ID, r);
	if (soap->error)
		return soap->error;
	soap_serializeheader(soap);
	soap_serialize_klprci_GetStateResponse(soap, &r);
	soap_begin_count(soap);
	if (soap->mode & SOAP_IO_LENGTH)
	{	soap_envelope_begin_out(soap);
		soap_putheader(soap);
		soap_body_begin_out(soap);
		soap_put_klprci_GetStateResponse(soap, &r, "klprci-GetStateResponse", "");
		soap_body_end_out(soap);
		soap_envelope_end_out(soap);
	};
	if (soap_response(soap, SOAP_OK)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put_klprci_GetStateResponse(soap, &r, "klprci-GetStateResponse", "")
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap->error;
	soap_closesock(soap);
	return SOAP_OK;
}

SOAP_FMAC5 int SOAP_FMAC6 soap_serve_klprci_GetStatistics(struct soap *soap)
{	struct klprci_GetStatistics soap_tmp_klprci_GetStatistics;
	struct klprci_GetStatisticsResponse r;
	soap_default_klprci_GetStatisticsResponse(soap, &r);
	soap_default_klprci_GetStatistics(soap, &soap_tmp_klprci_GetStatistics);
	soap->encodingStyle = NULL;
	soap_get_klprci_GetStatistics(soap, &soap_tmp_klprci_GetStatistics, "klprci-GetStatistics", NULL);
	if (soap->error)
		return soap->error;
	
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
#ifndef WITH_LEANER
	 || soap_resolve_attachments(soap)
#endif
	 || soap_end_recv(soap))
		return soap->error;
	soap->error = klprci_GetStatistics(soap, soap_tmp_klprci_GetStatistics.ID, soap_tmp_klprci_GetStatistics.statisticsIn, r);
	if (soap->error)
		return soap->error;
	soap_serializeheader(soap);
	soap_serialize_klprci_GetStatisticsResponse(soap, &r);
	soap_begin_count(soap);
	if (soap->mode & SOAP_IO_LENGTH)
	{	soap_envelope_begin_out(soap);
		soap_putheader(soap);
		soap_body_begin_out(soap);
		soap_put_klprci_GetStatisticsResponse(soap, &r, "klprci-GetStatisticsResponse", "");
		soap_body_end_out(soap);
		soap_envelope_end_out(soap);
	};
	if (soap_response(soap, SOAP_OK)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put_klprci_GetStatisticsResponse(soap, &r, "klprci-GetStatisticsResponse", "")
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap->error;
	soap_closesock(soap);
	return SOAP_OK;
}

SOAP_FMAC5 int SOAP_FMAC6 soap_serve_klprci_Stop(struct soap *soap)
{	struct klprci_Stop soap_tmp_klprci_Stop;
	struct klprci_StopResponse r;
	soap_default_klprci_StopResponse(soap, &r);
	soap_default_klprci_Stop(soap, &soap_tmp_klprci_Stop);
	soap->encodingStyle = NULL;
	soap_get_klprci_Stop(soap, &soap_tmp_klprci_Stop, "klprci-Stop", NULL);
	if (soap->error)
		return soap->error;
	
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
#ifndef WITH_LEANER
	 || soap_resolve_attachments(soap)
#endif
	 || soap_end_recv(soap))
		return soap->error;
	soap->error = klprci_Stop(soap, soap_tmp_klprci_Stop.ID, r);
	if (soap->error)
		return soap->error;
	soap_serializeheader(soap);
	soap_serialize_klprci_StopResponse(soap, &r);
	soap_begin_count(soap);
	if (soap->mode & SOAP_IO_LENGTH)
	{	soap_envelope_begin_out(soap);
		soap_putheader(soap);
		soap_body_begin_out(soap);
		soap_put_klprci_StopResponse(soap, &r, "klprci-StopResponse", "");
		soap_body_end_out(soap);
		soap_envelope_end_out(soap);
	};
	if (soap_response(soap, SOAP_OK)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put_klprci_StopResponse(soap, &r, "klprci-StopResponse", "")
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap->error;
	soap_closesock(soap);
	return SOAP_OK;
}

SOAP_FMAC5 int SOAP_FMAC6 soap_serve_klprci_Suspend(struct soap *soap)
{	struct klprci_Suspend soap_tmp_klprci_Suspend;
	struct klprci_SuspendResponse r;
	soap_default_klprci_SuspendResponse(soap, &r);
	soap_default_klprci_Suspend(soap, &soap_tmp_klprci_Suspend);
	soap->encodingStyle = NULL;
	soap_get_klprci_Suspend(soap, &soap_tmp_klprci_Suspend, "klprci-Suspend", NULL);
	if (soap->error)
		return soap->error;
	
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
#ifndef WITH_LEANER
	 || soap_resolve_attachments(soap)
#endif
	 || soap_end_recv(soap))
		return soap->error;
	soap->error = klprci_Suspend(soap, soap_tmp_klprci_Suspend.ID, r);
	if (soap->error)
		return soap->error;
	soap_serializeheader(soap);
	soap_serialize_klprci_SuspendResponse(soap, &r);
	soap_begin_count(soap);
	if (soap->mode & SOAP_IO_LENGTH)
	{	soap_envelope_begin_out(soap);
		soap_putheader(soap);
		soap_body_begin_out(soap);
		soap_put_klprci_SuspendResponse(soap, &r, "klprci-SuspendResponse", "");
		soap_body_end_out(soap);
		soap_envelope_end_out(soap);
	};
	if (soap_response(soap, SOAP_OK)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put_klprci_SuspendResponse(soap, &r, "klprci-SuspendResponse", "")
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap->error;
	soap_closesock(soap);
	return SOAP_OK;
}

SOAP_FMAC5 int SOAP_FMAC6 soap_serve_klprci_Resume(struct soap *soap)
{	struct klprci_Resume soap_tmp_klprci_Resume;
	struct klprci_ResumeResponse r;
	soap_default_klprci_ResumeResponse(soap, &r);
	soap_default_klprci_Resume(soap, &soap_tmp_klprci_Resume);
	soap->encodingStyle = NULL;
	soap_get_klprci_Resume(soap, &soap_tmp_klprci_Resume, "klprci-Resume", NULL);
	if (soap->error)
		return soap->error;
	
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
#ifndef WITH_LEANER
	 || soap_resolve_attachments(soap)
#endif
	 || soap_end_recv(soap))
		return soap->error;
	soap->error = klprci_Resume(soap, soap_tmp_klprci_Resume.ID, r);
	if (soap->error)
		return soap->error;
	soap_serializeheader(soap);
	soap_serialize_klprci_ResumeResponse(soap, &r);
	soap_begin_count(soap);
	if (soap->mode & SOAP_IO_LENGTH)
	{	soap_envelope_begin_out(soap);
		soap_putheader(soap);
		soap_body_begin_out(soap);
		soap_put_klprci_ResumeResponse(soap, &r, "klprci-ResumeResponse", "");
		soap_body_end_out(soap);
		soap_envelope_end_out(soap);
	};
	if (soap_response(soap, SOAP_OK)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put_klprci_ResumeResponse(soap, &r, "klprci-ResumeResponse", "")
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap->error;
	soap_closesock(soap);
	return SOAP_OK;
}

SOAP_FMAC5 int SOAP_FMAC6 soap_serve_klprci_RunTask(struct soap *soap)
{	struct klprci_RunTask soap_tmp_klprci_RunTask;
	struct klprci_RunTaskResponse r;
	soap_default_klprci_RunTaskResponse(soap, &r);
	soap_default_klprci_RunTask(soap, &soap_tmp_klprci_RunTask);
	soap->encodingStyle = NULL;
	soap_get_klprci_RunTask(soap, &soap_tmp_klprci_RunTask, "klprci-RunTask", NULL);
	if (soap->error)
		return soap->error;
	
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
#ifndef WITH_LEANER
	 || soap_resolve_attachments(soap)
#endif
	 || soap_end_recv(soap))
		return soap->error;
	soap->error = klprci_RunTask(soap, soap_tmp_klprci_RunTask.ID, soap_tmp_klprci_RunTask.name, soap_tmp_klprci_RunTask.settings, soap_tmp_klprci_RunTask.asyncID, soap_tmp_klprci_RunTask.timeout, r);
	if (soap->error)
		return soap->error;
	soap_serializeheader(soap);
	soap_serialize_klprci_RunTaskResponse(soap, &r);
	soap_begin_count(soap);
	if (soap->mode & SOAP_IO_LENGTH)
	{	soap_envelope_begin_out(soap);
		soap_putheader(soap);
		soap_body_begin_out(soap);
		soap_put_klprci_RunTaskResponse(soap, &r, "klprci-RunTaskResponse", "");
		soap_body_end_out(soap);
		soap_envelope_end_out(soap);
	};
	if (soap_response(soap, SOAP_OK)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put_klprci_RunTaskResponse(soap, &r, "klprci-RunTaskResponse", "")
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap->error;
	soap_closesock(soap);
	return SOAP_OK;
}

SOAP_FMAC5 int SOAP_FMAC6 soap_serve_klprci_RunMethod(struct soap *soap)
{	struct klprci_RunMethod soap_tmp_klprci_RunMethod;
	struct klprci_RunMethodResponse r;
	soap_default_klprci_RunMethodResponse(soap, &r);
	soap_default_klprci_RunMethod(soap, &soap_tmp_klprci_RunMethod);
	soap->encodingStyle = NULL;
	soap_get_klprci_RunMethod(soap, &soap_tmp_klprci_RunMethod, "klprci-RunMethod", NULL);
	if (soap->error)
		return soap->error;
	
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
#ifndef WITH_LEANER
	 || soap_resolve_attachments(soap)
#endif
	 || soap_end_recv(soap))
		return soap->error;
	soap->error = klprci_RunMethod(soap, soap_tmp_klprci_RunMethod.ID, soap_tmp_klprci_RunMethod.name, soap_tmp_klprci_RunMethod.settings, soap_tmp_klprci_RunMethod.timeout, r);
	if (soap->error)
		return soap->error;
	soap_serializeheader(soap);
	soap_serialize_klprci_RunMethodResponse(soap, &r);
	soap_begin_count(soap);
	if (soap->mode & SOAP_IO_LENGTH)
	{	soap_envelope_begin_out(soap);
		soap_putheader(soap);
		soap_body_begin_out(soap);
		soap_put_klprci_RunMethodResponse(soap, &r, "klprci-RunMethodResponse", "");
		soap_body_end_out(soap);
		soap_envelope_end_out(soap);
	};
	if (soap_response(soap, SOAP_OK)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put_klprci_RunMethodResponse(soap, &r, "klprci-RunMethodResponse", "")
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap->error;
	soap_closesock(soap);
	return SOAP_OK;
}

SOAP_FMAC5 int SOAP_FMAC6 soap_serve_klprci_GetTasksList(struct soap *soap)
{	struct klprci_GetTasksList soap_tmp_klprci_GetTasksList;
	struct klprci_GetTasksListResponse r;
	soap_default_klprci_GetTasksListResponse(soap, &r);
	soap_default_klprci_GetTasksList(soap, &soap_tmp_klprci_GetTasksList);
	soap->encodingStyle = NULL;
	soap_get_klprci_GetTasksList(soap, &soap_tmp_klprci_GetTasksList, "klprci-GetTasksList", NULL);
	if (soap->error)
		return soap->error;
	
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
#ifndef WITH_LEANER
	 || soap_resolve_attachments(soap)
#endif
	 || soap_end_recv(soap))
		return soap->error;
	soap->error = klprci_GetTasksList(soap, soap_tmp_klprci_GetTasksList.ID, r);
	if (soap->error)
		return soap->error;
	soap_serializeheader(soap);
	soap_serialize_klprci_GetTasksListResponse(soap, &r);
	soap_begin_count(soap);
	if (soap->mode & SOAP_IO_LENGTH)
	{	soap_envelope_begin_out(soap);
		soap_putheader(soap);
		soap_body_begin_out(soap);
		soap_put_klprci_GetTasksListResponse(soap, &r, "klprci-GetTasksListResponse", "");
		soap_body_end_out(soap);
		soap_envelope_end_out(soap);
	};
	if (soap_response(soap, SOAP_OK)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put_klprci_GetTasksListResponse(soap, &r, "klprci-GetTasksListResponse", "")
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap->error;
	soap_closesock(soap);
	return SOAP_OK;
}

SOAP_FMAC5 int SOAP_FMAC6 soap_serve_klprci_GetTaskName(struct soap *soap)
{	struct klprci_GetTaskName soap_tmp_klprci_GetTaskName;
	struct klprci_GetTaskNameResponse r;
	soap_default_klprci_GetTaskNameResponse(soap, &r);
	soap_default_klprci_GetTaskName(soap, &soap_tmp_klprci_GetTaskName);
	soap->encodingStyle = NULL;
	soap_get_klprci_GetTaskName(soap, &soap_tmp_klprci_GetTaskName, "klprci-GetTaskName", NULL);
	if (soap->error)
		return soap->error;
	
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
#ifndef WITH_LEANER
	 || soap_resolve_attachments(soap)
#endif
	 || soap_end_recv(soap))
		return soap->error;
	soap->error = klprci_GetTaskName(soap, soap_tmp_klprci_GetTaskName.ID, soap_tmp_klprci_GetTaskName.idTask, r);
	if (soap->error)
		return soap->error;
	soap_serializeheader(soap);
	soap_serialize_klprci_GetTaskNameResponse(soap, &r);
	soap_begin_count(soap);
	if (soap->mode & SOAP_IO_LENGTH)
	{	soap_envelope_begin_out(soap);
		soap_putheader(soap);
		soap_body_begin_out(soap);
		soap_put_klprci_GetTaskNameResponse(soap, &r, "klprci-GetTaskNameResponse", "");
		soap_body_end_out(soap);
		soap_envelope_end_out(soap);
	};
	if (soap_response(soap, SOAP_OK)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put_klprci_GetTaskNameResponse(soap, &r, "klprci-GetTaskNameResponse", "")
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap->error;
	soap_closesock(soap);
	return SOAP_OK;
}

SOAP_FMAC5 int SOAP_FMAC6 soap_serve_klprci_TaskStop(struct soap *soap)
{	struct klprci_TaskStop soap_tmp_klprci_TaskStop;
	struct klprci_TaskStopResponse r;
	soap_default_klprci_TaskStopResponse(soap, &r);
	soap_default_klprci_TaskStop(soap, &soap_tmp_klprci_TaskStop);
	soap->encodingStyle = NULL;
	soap_get_klprci_TaskStop(soap, &soap_tmp_klprci_TaskStop, "klprci-TaskStop", NULL);
	if (soap->error)
		return soap->error;
	
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
#ifndef WITH_LEANER
	 || soap_resolve_attachments(soap)
#endif
	 || soap_end_recv(soap))
		return soap->error;
	soap->error = klprci_TaskStop(soap, soap_tmp_klprci_TaskStop.ID, soap_tmp_klprci_TaskStop.idTask, r);
	if (soap->error)
		return soap->error;
	soap_serializeheader(soap);
	soap_serialize_klprci_TaskStopResponse(soap, &r);
	soap_begin_count(soap);
	if (soap->mode & SOAP_IO_LENGTH)
	{	soap_envelope_begin_out(soap);
		soap_putheader(soap);
		soap_body_begin_out(soap);
		soap_put_klprci_TaskStopResponse(soap, &r, "klprci-TaskStopResponse", "");
		soap_body_end_out(soap);
		soap_envelope_end_out(soap);
	};
	if (soap_response(soap, SOAP_OK)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put_klprci_TaskStopResponse(soap, &r, "klprci-TaskStopResponse", "")
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap->error;
	soap_closesock(soap);
	return SOAP_OK;
}

SOAP_FMAC5 int SOAP_FMAC6 soap_serve_klprci_TaskSuspend(struct soap *soap)
{	struct klprci_TaskSuspend soap_tmp_klprci_TaskSuspend;
	struct klprci_TaskSuspendResponse r;
	soap_default_klprci_TaskSuspendResponse(soap, &r);
	soap_default_klprci_TaskSuspend(soap, &soap_tmp_klprci_TaskSuspend);
	soap->encodingStyle = NULL;
	soap_get_klprci_TaskSuspend(soap, &soap_tmp_klprci_TaskSuspend, "klprci-TaskSuspend", NULL);
	if (soap->error)
		return soap->error;
	
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
#ifndef WITH_LEANER
	 || soap_resolve_attachments(soap)
#endif
	 || soap_end_recv(soap))
		return soap->error;
	soap->error = klprci_TaskSuspend(soap, soap_tmp_klprci_TaskSuspend.ID, soap_tmp_klprci_TaskSuspend.idTask, r);
	if (soap->error)
		return soap->error;
	soap_serializeheader(soap);
	soap_serialize_klprci_TaskSuspendResponse(soap, &r);
	soap_begin_count(soap);
	if (soap->mode & SOAP_IO_LENGTH)
	{	soap_envelope_begin_out(soap);
		soap_putheader(soap);
		soap_body_begin_out(soap);
		soap_put_klprci_TaskSuspendResponse(soap, &r, "klprci-TaskSuspendResponse", "");
		soap_body_end_out(soap);
		soap_envelope_end_out(soap);
	};
	if (soap_response(soap, SOAP_OK)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put_klprci_TaskSuspendResponse(soap, &r, "klprci-TaskSuspendResponse", "")
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap->error;
	soap_closesock(soap);
	return SOAP_OK;
}

SOAP_FMAC5 int SOAP_FMAC6 soap_serve_klprci_TaskResume(struct soap *soap)
{	struct klprci_TaskResume soap_tmp_klprci_TaskResume;
	struct klprci_TaskResumeResponse r;
	soap_default_klprci_TaskResumeResponse(soap, &r);
	soap_default_klprci_TaskResume(soap, &soap_tmp_klprci_TaskResume);
	soap->encodingStyle = NULL;
	soap_get_klprci_TaskResume(soap, &soap_tmp_klprci_TaskResume, "klprci-TaskResume", NULL);
	if (soap->error)
		return soap->error;
	
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
#ifndef WITH_LEANER
	 || soap_resolve_attachments(soap)
#endif
	 || soap_end_recv(soap))
		return soap->error;
	soap->error = klprci_TaskResume(soap, soap_tmp_klprci_TaskResume.ID, soap_tmp_klprci_TaskResume.idTask, r);
	if (soap->error)
		return soap->error;
	soap_serializeheader(soap);
	soap_serialize_klprci_TaskResumeResponse(soap, &r);
	soap_begin_count(soap);
	if (soap->mode & SOAP_IO_LENGTH)
	{	soap_envelope_begin_out(soap);
		soap_putheader(soap);
		soap_body_begin_out(soap);
		soap_put_klprci_TaskResumeResponse(soap, &r, "klprci-TaskResumeResponse", "");
		soap_body_end_out(soap);
		soap_envelope_end_out(soap);
	};
	if (soap_response(soap, SOAP_OK)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put_klprci_TaskResumeResponse(soap, &r, "klprci-TaskResumeResponse", "")
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap->error;
	soap_closesock(soap);
	return SOAP_OK;
}

SOAP_FMAC5 int SOAP_FMAC6 soap_serve_klprci_TaskGetState(struct soap *soap)
{	struct klprci_TaskGetState soap_tmp_klprci_TaskGetState;
	struct klprci_GetTaskStateResponse r;
	soap_default_klprci_GetTaskStateResponse(soap, &r);
	soap_default_klprci_TaskGetState(soap, &soap_tmp_klprci_TaskGetState);
	soap->encodingStyle = NULL;
	soap_get_klprci_TaskGetState(soap, &soap_tmp_klprci_TaskGetState, "klprci-TaskGetState", NULL);
	if (soap->error)
		return soap->error;
	
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
#ifndef WITH_LEANER
	 || soap_resolve_attachments(soap)
#endif
	 || soap_end_recv(soap))
		return soap->error;
	soap->error = klprci_TaskGetState(soap, soap_tmp_klprci_TaskGetState.ID, soap_tmp_klprci_TaskGetState.idTask, r);
	if (soap->error)
		return soap->error;
	soap_serializeheader(soap);
	soap_serialize_klprci_GetTaskStateResponse(soap, &r);
	soap_begin_count(soap);
	if (soap->mode & SOAP_IO_LENGTH)
	{	soap_envelope_begin_out(soap);
		soap_putheader(soap);
		soap_body_begin_out(soap);
		soap_put_klprci_GetTaskStateResponse(soap, &r, "klprci-GetTaskStateResponse", "");
		soap_body_end_out(soap);
		soap_envelope_end_out(soap);
	};
	if (soap_response(soap, SOAP_OK)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put_klprci_GetTaskStateResponse(soap, &r, "klprci-GetTaskStateResponse", "")
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap->error;
	soap_closesock(soap);
	return SOAP_OK;
}

SOAP_FMAC5 int SOAP_FMAC6 soap_serve_klprci_TaskGetCompletion(struct soap *soap)
{	struct klprci_TaskGetCompletion soap_tmp_klprci_TaskGetCompletion;
	struct klprci_GetTaskCompletionResponse r;
	soap_default_klprci_GetTaskCompletionResponse(soap, &r);
	soap_default_klprci_TaskGetCompletion(soap, &soap_tmp_klprci_TaskGetCompletion);
	soap->encodingStyle = NULL;
	soap_get_klprci_TaskGetCompletion(soap, &soap_tmp_klprci_TaskGetCompletion, "klprci-TaskGetCompletion", NULL);
	if (soap->error)
		return soap->error;
	
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
#ifndef WITH_LEANER
	 || soap_resolve_attachments(soap)
#endif
	 || soap_end_recv(soap))
		return soap->error;
	soap->error = klprci_TaskGetCompletion(soap, soap_tmp_klprci_TaskGetCompletion.ID, soap_tmp_klprci_TaskGetCompletion.idTask, r);
	if (soap->error)
		return soap->error;
	soap_serializeheader(soap);
	soap_serialize_klprci_GetTaskCompletionResponse(soap, &r);
	soap_begin_count(soap);
	if (soap->mode & SOAP_IO_LENGTH)
	{	soap_envelope_begin_out(soap);
		soap_putheader(soap);
		soap_body_begin_out(soap);
		soap_put_klprci_GetTaskCompletionResponse(soap, &r, "klprci-GetTaskCompletionResponse", "");
		soap_body_end_out(soap);
		soap_envelope_end_out(soap);
	};
	if (soap_response(soap, SOAP_OK)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put_klprci_GetTaskCompletionResponse(soap, &r, "klprci-GetTaskCompletionResponse", "")
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap->error;
	soap_closesock(soap);
	return SOAP_OK;
}

SOAP_FMAC5 int SOAP_FMAC6 soap_serve_klprci_TaskReload(struct soap *soap)
{	struct klprci_TaskReload soap_tmp_klprci_TaskReload;
	struct klprci_TaskReloadResponse r;
	soap_default_klprci_TaskReloadResponse(soap, &r);
	soap_default_klprci_TaskReload(soap, &soap_tmp_klprci_TaskReload);
	soap->encodingStyle = NULL;
	soap_get_klprci_TaskReload(soap, &soap_tmp_klprci_TaskReload, "klprci-TaskReload", NULL);
	if (soap->error)
		return soap->error;
	
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
#ifndef WITH_LEANER
	 || soap_resolve_attachments(soap)
#endif
	 || soap_end_recv(soap))
		return soap->error;
	soap->error = klprci_TaskReload(soap, soap_tmp_klprci_TaskReload.ID, soap_tmp_klprci_TaskReload.idTask, soap_tmp_klprci_TaskReload.settings, r);
	if (soap->error)
		return soap->error;
	soap_serializeheader(soap);
	soap_serialize_klprci_TaskReloadResponse(soap, &r);
	soap_begin_count(soap);
	if (soap->mode & SOAP_IO_LENGTH)
	{	soap_envelope_begin_out(soap);
		soap_putheader(soap);
		soap_body_begin_out(soap);
		soap_put_klprci_TaskReloadResponse(soap, &r, "klprci-TaskReloadResponse", "");
		soap_body_end_out(soap);
		soap_envelope_end_out(soap);
	};
	if (soap_response(soap, SOAP_OK)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put_klprci_TaskReloadResponse(soap, &r, "klprci-TaskReloadResponse", "")
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap->error;
	soap_closesock(soap);
	return SOAP_OK;
}

SOAP_FMAC5 int SOAP_FMAC6 soap_serve_KLPRES_ResetSubscriptionsIterator(struct soap *soap)
{	struct KLPRES_ResetSubscriptionsIterator soap_tmp_KLPRES_ResetSubscriptionsIterator;
	struct KLPRES_RESET_SUBSCRIPTIONS_ITERATOR_RESPONSE rc;
	soap_default_KLPRES_RESET_SUBSCRIPTIONS_ITERATOR_RESPONSE(soap, &rc);
	soap_default_KLPRES_ResetSubscriptionsIterator(soap, &soap_tmp_KLPRES_ResetSubscriptionsIterator);
	soap->encodingStyle = NULL;
	soap_get_KLPRES_ResetSubscriptionsIterator(soap, &soap_tmp_KLPRES_ResetSubscriptionsIterator, "KLPRES-ResetSubscriptionsIterator", NULL);
	if (soap->error)
		return soap->error;
	
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
#ifndef WITH_LEANER
	 || soap_resolve_attachments(soap)
#endif
	 || soap_end_recv(soap))
		return soap->error;
	soap->error = KLPRES_ResetSubscriptionsIterator(soap, soap_tmp_KLPRES_ResetSubscriptionsIterator.sServerObjectID, soap_tmp_KLPRES_ResetSubscriptionsIterator.cidFilter, soap_tmp_KLPRES_ResetSubscriptionsIterator.nTimeout, rc);
	if (soap->error)
		return soap->error;
	soap_serializeheader(soap);
	soap_serialize_KLPRES_RESET_SUBSCRIPTIONS_ITERATOR_RESPONSE(soap, &rc);
	soap_begin_count(soap);
	if (soap->mode & SOAP_IO_LENGTH)
	{	soap_envelope_begin_out(soap);
		soap_putheader(soap);
		soap_body_begin_out(soap);
		soap_put_KLPRES_RESET_SUBSCRIPTIONS_ITERATOR_RESPONSE(soap, &rc, "KLPRES-RESET-SUBSCRIPTIONS-ITERATOR-RESPONSE", "");
		soap_body_end_out(soap);
		soap_envelope_end_out(soap);
	};
	if (soap_response(soap, SOAP_OK)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put_KLPRES_RESET_SUBSCRIPTIONS_ITERATOR_RESPONSE(soap, &rc, "KLPRES-RESET-SUBSCRIPTIONS-ITERATOR-RESPONSE", "")
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap->error;
	soap_closesock(soap);
	return SOAP_OK;
}

SOAP_FMAC5 int SOAP_FMAC6 soap_serve_KLPRES_ReleaseSubscriptionsIterator(struct soap *soap)
{	struct KLPRES_ReleaseSubscriptionsIterator soap_tmp_KLPRES_ReleaseSubscriptionsIterator;
	struct KLPRES_RELEASE_SUBSCRIPTIONS_ITERATOR_RESPONSE rc;
	soap_default_KLPRES_RELEASE_SUBSCRIPTIONS_ITERATOR_RESPONSE(soap, &rc);
	soap_default_KLPRES_ReleaseSubscriptionsIterator(soap, &soap_tmp_KLPRES_ReleaseSubscriptionsIterator);
	soap->encodingStyle = NULL;
	soap_get_KLPRES_ReleaseSubscriptionsIterator(soap, &soap_tmp_KLPRES_ReleaseSubscriptionsIterator, "KLPRES-ReleaseSubscriptionsIterator", NULL);
	if (soap->error)
		return soap->error;
	
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
#ifndef WITH_LEANER
	 || soap_resolve_attachments(soap)
#endif
	 || soap_end_recv(soap))
		return soap->error;
	soap->error = KLPRES_ReleaseSubscriptionsIterator(soap, soap_tmp_KLPRES_ReleaseSubscriptionsIterator.sServerObjectID, soap_tmp_KLPRES_ReleaseSubscriptionsIterator.sSubscrIteratorId, rc);
	if (soap->error)
		return soap->error;
	soap_serializeheader(soap);
	soap_serialize_KLPRES_RELEASE_SUBSCRIPTIONS_ITERATOR_RESPONSE(soap, &rc);
	soap_begin_count(soap);
	if (soap->mode & SOAP_IO_LENGTH)
	{	soap_envelope_begin_out(soap);
		soap_putheader(soap);
		soap_body_begin_out(soap);
		soap_put_KLPRES_RELEASE_SUBSCRIPTIONS_ITERATOR_RESPONSE(soap, &rc, "KLPRES-RELEASE-SUBSCRIPTIONS-ITERATOR-RESPONSE", "");
		soap_body_end_out(soap);
		soap_envelope_end_out(soap);
	};
	if (soap_response(soap, SOAP_OK)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put_KLPRES_RELEASE_SUBSCRIPTIONS_ITERATOR_RESPONSE(soap, &rc, "KLPRES-RELEASE-SUBSCRIPTIONS-ITERATOR-RESPONSE", "")
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap->error;
	soap_closesock(soap);
	return SOAP_OK;
}

SOAP_FMAC5 int SOAP_FMAC6 soap_serve_KLPRES_GetNextSubscription(struct soap *soap)
{	struct KLPRES_GetNextSubscription soap_tmp_KLPRES_GetNextSubscription;
	struct KLPRES_GET_NEXT_SUBSCRIPTION_RESPONSE rc;
	soap_default_KLPRES_GET_NEXT_SUBSCRIPTION_RESPONSE(soap, &rc);
	soap_default_KLPRES_GetNextSubscription(soap, &soap_tmp_KLPRES_GetNextSubscription);
	soap->encodingStyle = NULL;
	soap_get_KLPRES_GetNextSubscription(soap, &soap_tmp_KLPRES_GetNextSubscription, "KLPRES-GetNextSubscription", NULL);
	if (soap->error)
		return soap->error;
	
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
#ifndef WITH_LEANER
	 || soap_resolve_attachments(soap)
#endif
	 || soap_end_recv(soap))
		return soap->error;
	soap->error = KLPRES_GetNextSubscription(soap, soap_tmp_KLPRES_GetNextSubscription.sServerObjectID, soap_tmp_KLPRES_GetNextSubscription.sSubscrIteratorId, rc);
	if (soap->error)
		return soap->error;
	soap_serializeheader(soap);
	soap_serialize_KLPRES_GET_NEXT_SUBSCRIPTION_RESPONSE(soap, &rc);
	soap_begin_count(soap);
	if (soap->mode & SOAP_IO_LENGTH)
	{	soap_envelope_begin_out(soap);
		soap_putheader(soap);
		soap_body_begin_out(soap);
		soap_put_KLPRES_GET_NEXT_SUBSCRIPTION_RESPONSE(soap, &rc, "KLPRES-GET-NEXT-SUBSCRIPTION-RESPONSE", "");
		soap_body_end_out(soap);
		soap_envelope_end_out(soap);
	};
	if (soap_response(soap, SOAP_OK)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put_KLPRES_GET_NEXT_SUBSCRIPTION_RESPONSE(soap, &rc, "KLPRES-GET-NEXT-SUBSCRIPTION-RESPONSE", "")
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap->error;
	soap_closesock(soap);
	return SOAP_OK;
}

SOAP_FMAC5 int SOAP_FMAC6 soap_serve_KLPRES_AddSubscription(struct soap *soap)
{	struct KLPRES_AddSubscription soap_tmp_KLPRES_AddSubscription;
	struct KLPRES_ADD_SUBSCRIPTION_RESPONSE rc;
	soap_default_KLPRES_ADD_SUBSCRIPTION_RESPONSE(soap, &rc);
	soap_default_KLPRES_AddSubscription(soap, &soap_tmp_KLPRES_AddSubscription);
	soap->encodingStyle = NULL;
	soap_get_KLPRES_AddSubscription(soap, &soap_tmp_KLPRES_AddSubscription, "KLPRES-AddSubscription", NULL);
	if (soap->error)
		return soap->error;
	
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
#ifndef WITH_LEANER
	 || soap_resolve_attachments(soap)
#endif
	 || soap_end_recv(soap))
		return soap->error;
	soap->error = KLPRES_AddSubscription(soap, soap_tmp_KLPRES_AddSubscription.sServerObjectID, soap_tmp_KLPRES_AddSubscription.sSubscriptionID, soap_tmp_KLPRES_AddSubscription.bPersistent, soap_tmp_KLPRES_AddSubscription.parSubscription, rc);
	if (soap->error)
		return soap->error;
	soap_serializeheader(soap);
	soap_serialize_KLPRES_ADD_SUBSCRIPTION_RESPONSE(soap, &rc);
	soap_begin_count(soap);
	if (soap->mode & SOAP_IO_LENGTH)
	{	soap_envelope_begin_out(soap);
		soap_putheader(soap);
		soap_body_begin_out(soap);
		soap_put_KLPRES_ADD_SUBSCRIPTION_RESPONSE(soap, &rc, "KLPRES-ADD-SUBSCRIPTION-RESPONSE", "");
		soap_body_end_out(soap);
		soap_envelope_end_out(soap);
	};
	if (soap_response(soap, SOAP_OK)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put_KLPRES_ADD_SUBSCRIPTION_RESPONSE(soap, &rc, "KLPRES-ADD-SUBSCRIPTION-RESPONSE", "")
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap->error;
	soap_closesock(soap);
	return SOAP_OK;
}

SOAP_FMAC5 int SOAP_FMAC6 soap_serve_KLPRES_UpdateSubscription(struct soap *soap)
{	struct KLPRES_UpdateSubscription soap_tmp_KLPRES_UpdateSubscription;
	struct param_error rc;
	soap_default_param_error(soap, &rc);
	soap_default_KLPRES_UpdateSubscription(soap, &soap_tmp_KLPRES_UpdateSubscription);
	soap->encodingStyle = NULL;
	soap_get_KLPRES_UpdateSubscription(soap, &soap_tmp_KLPRES_UpdateSubscription, "KLPRES-UpdateSubscription", NULL);
	if (soap->error)
		return soap->error;
	
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
#ifndef WITH_LEANER
	 || soap_resolve_attachments(soap)
#endif
	 || soap_end_recv(soap))
		return soap->error;
	soap->error = KLPRES_UpdateSubscription(soap, soap_tmp_KLPRES_UpdateSubscription.sServerObjectID, soap_tmp_KLPRES_UpdateSubscription.sSubscriptionID, soap_tmp_KLPRES_UpdateSubscription.parSubscription, rc);
	if (soap->error)
		return soap->error;
	soap_serializeheader(soap);
	soap_serialize_param_error(soap, &rc);
	soap_begin_count(soap);
	if (soap->mode & SOAP_IO_LENGTH)
	{	soap_envelope_begin_out(soap);
		soap_putheader(soap);
		soap_body_begin_out(soap);
		soap_put_param_error(soap, &rc, "param-error", "");
		soap_body_end_out(soap);
		soap_envelope_end_out(soap);
	};
	if (soap_response(soap, SOAP_OK)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put_param_error(soap, &rc, "param-error", "")
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap->error;
	soap_closesock(soap);
	return SOAP_OK;
}

SOAP_FMAC5 int SOAP_FMAC6 soap_serve_KLPRES_PauseSubscription(struct soap *soap)
{	struct KLPRES_PauseSubscription soap_tmp_KLPRES_PauseSubscription;
	struct param_error rc;
	soap_default_param_error(soap, &rc);
	soap_default_KLPRES_PauseSubscription(soap, &soap_tmp_KLPRES_PauseSubscription);
	soap->encodingStyle = NULL;
	soap_get_KLPRES_PauseSubscription(soap, &soap_tmp_KLPRES_PauseSubscription, "KLPRES-PauseSubscription", NULL);
	if (soap->error)
		return soap->error;
	
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
#ifndef WITH_LEANER
	 || soap_resolve_attachments(soap)
#endif
	 || soap_end_recv(soap))
		return soap->error;
	soap->error = KLPRES_PauseSubscription(soap, soap_tmp_KLPRES_PauseSubscription.sServerObjectID, soap_tmp_KLPRES_PauseSubscription.sSubscriptionID, rc);
	if (soap->error)
		return soap->error;
	soap_serializeheader(soap);
	soap_serialize_param_error(soap, &rc);
	soap_begin_count(soap);
	if (soap->mode & SOAP_IO_LENGTH)
	{	soap_envelope_begin_out(soap);
		soap_putheader(soap);
		soap_body_begin_out(soap);
		soap_put_param_error(soap, &rc, "param-error", "");
		soap_body_end_out(soap);
		soap_envelope_end_out(soap);
	};
	if (soap_response(soap, SOAP_OK)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put_param_error(soap, &rc, "param-error", "")
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap->error;
	soap_closesock(soap);
	return SOAP_OK;
}

SOAP_FMAC5 int SOAP_FMAC6 soap_serve_KLPRES_ResumeSubscription(struct soap *soap)
{	struct KLPRES_ResumeSubscription soap_tmp_KLPRES_ResumeSubscription;
	struct param_error rc;
	soap_default_param_error(soap, &rc);
	soap_default_KLPRES_ResumeSubscription(soap, &soap_tmp_KLPRES_ResumeSubscription);
	soap->encodingStyle = NULL;
	soap_get_KLPRES_ResumeSubscription(soap, &soap_tmp_KLPRES_ResumeSubscription, "KLPRES-ResumeSubscription", NULL);
	if (soap->error)
		return soap->error;
	
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
#ifndef WITH_LEANER
	 || soap_resolve_attachments(soap)
#endif
	 || soap_end_recv(soap))
		return soap->error;
	soap->error = KLPRES_ResumeSubscription(soap, soap_tmp_KLPRES_ResumeSubscription.sServerObjectID, soap_tmp_KLPRES_ResumeSubscription.sSubscriptionID, rc);
	if (soap->error)
		return soap->error;
	soap_serializeheader(soap);
	soap_serialize_param_error(soap, &rc);
	soap_begin_count(soap);
	if (soap->mode & SOAP_IO_LENGTH)
	{	soap_envelope_begin_out(soap);
		soap_putheader(soap);
		soap_body_begin_out(soap);
		soap_put_param_error(soap, &rc, "param-error", "");
		soap_body_end_out(soap);
		soap_envelope_end_out(soap);
	};
	if (soap_response(soap, SOAP_OK)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put_param_error(soap, &rc, "param-error", "")
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap->error;
	soap_closesock(soap);
	return SOAP_OK;
}

SOAP_FMAC5 int SOAP_FMAC6 soap_serve_KLPRES_RemoveSubscription(struct soap *soap)
{	struct KLPRES_RemoveSubscription soap_tmp_KLPRES_RemoveSubscription;
	struct param_error rc;
	soap_default_param_error(soap, &rc);
	soap_default_KLPRES_RemoveSubscription(soap, &soap_tmp_KLPRES_RemoveSubscription);
	soap->encodingStyle = NULL;
	soap_get_KLPRES_RemoveSubscription(soap, &soap_tmp_KLPRES_RemoveSubscription, "KLPRES-RemoveSubscription", NULL);
	if (soap->error)
		return soap->error;
	
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
#ifndef WITH_LEANER
	 || soap_resolve_attachments(soap)
#endif
	 || soap_end_recv(soap))
		return soap->error;
	soap->error = KLPRES_RemoveSubscription(soap, soap_tmp_KLPRES_RemoveSubscription.sServerObjectID, soap_tmp_KLPRES_RemoveSubscription.sSubscriptionID, rc);
	if (soap->error)
		return soap->error;
	soap_serializeheader(soap);
	soap_serialize_param_error(soap, &rc);
	soap_begin_count(soap);
	if (soap->mode & SOAP_IO_LENGTH)
	{	soap_envelope_begin_out(soap);
		soap_putheader(soap);
		soap_body_begin_out(soap);
		soap_put_param_error(soap, &rc, "param-error", "");
		soap_body_end_out(soap);
		soap_envelope_end_out(soap);
	};
	if (soap_response(soap, SOAP_OK)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put_param_error(soap, &rc, "param-error", "")
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap->error;
	soap_closesock(soap);
	return SOAP_OK;
}

SOAP_FMAC5 int SOAP_FMAC6 soap_serve_KLPRES_ResetEventsIterator(struct soap *soap)
{	struct KLPRES_ResetEventsIterator soap_tmp_KLPRES_ResetEventsIterator;
	struct param_error rc;
	soap_default_param_error(soap, &rc);
	soap_default_KLPRES_ResetEventsIterator(soap, &soap_tmp_KLPRES_ResetEventsIterator);
	soap->encodingStyle = NULL;
	soap_get_KLPRES_ResetEventsIterator(soap, &soap_tmp_KLPRES_ResetEventsIterator, "KLPRES-ResetEventsIterator", NULL);
	if (soap->error)
		return soap->error;
	
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
#ifndef WITH_LEANER
	 || soap_resolve_attachments(soap)
#endif
	 || soap_end_recv(soap))
		return soap->error;
	soap->error = KLPRES_ResetEventsIterator(soap, soap_tmp_KLPRES_ResetEventsIterator.sServerObjectID, soap_tmp_KLPRES_ResetEventsIterator.sSubscriptionID, rc);
	if (soap->error)
		return soap->error;
	soap_serializeheader(soap);
	soap_serialize_param_error(soap, &rc);
	soap_begin_count(soap);
	if (soap->mode & SOAP_IO_LENGTH)
	{	soap_envelope_begin_out(soap);
		soap_putheader(soap);
		soap_body_begin_out(soap);
		soap_put_param_error(soap, &rc, "param-error", "");
		soap_body_end_out(soap);
		soap_envelope_end_out(soap);
	};
	if (soap_response(soap, SOAP_OK)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put_param_error(soap, &rc, "param-error", "")
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap->error;
	soap_closesock(soap);
	return SOAP_OK;
}

SOAP_FMAC5 int SOAP_FMAC6 soap_serve_KLPRES_SetEventsIterator(struct soap *soap)
{	struct KLPRES_SetEventsIterator soap_tmp_KLPRES_SetEventsIterator;
	struct param_error rc;
	soap_default_param_error(soap, &rc);
	soap_default_KLPRES_SetEventsIterator(soap, &soap_tmp_KLPRES_SetEventsIterator);
	soap->encodingStyle = NULL;
	soap_get_KLPRES_SetEventsIterator(soap, &soap_tmp_KLPRES_SetEventsIterator, "KLPRES-SetEventsIterator", NULL);
	if (soap->error)
		return soap->error;
	
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
#ifndef WITH_LEANER
	 || soap_resolve_attachments(soap)
#endif
	 || soap_end_recv(soap))
		return soap->error;
	soap->error = KLPRES_SetEventsIterator(soap, soap_tmp_KLPRES_SetEventsIterator.sServerObjectID, soap_tmp_KLPRES_SetEventsIterator.sSubscriptionID, soap_tmp_KLPRES_SetEventsIterator.eventID, rc);
	if (soap->error)
		return soap->error;
	soap_serializeheader(soap);
	soap_serialize_param_error(soap, &rc);
	soap_begin_count(soap);
	if (soap->mode & SOAP_IO_LENGTH)
	{	soap_envelope_begin_out(soap);
		soap_putheader(soap);
		soap_body_begin_out(soap);
		soap_put_param_error(soap, &rc, "param-error", "");
		soap_body_end_out(soap);
		soap_envelope_end_out(soap);
	};
	if (soap_response(soap, SOAP_OK)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put_param_error(soap, &rc, "param-error", "")
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap->error;
	soap_closesock(soap);
	return SOAP_OK;
}

SOAP_FMAC5 int SOAP_FMAC6 soap_serve_KLPRES_ResetEventsIteratorEx(struct soap *soap)
{	struct KLPRES_ResetEventsIteratorEx soap_tmp_KLPRES_ResetEventsIteratorEx;
	struct KLPRES_RESET_EVENTS_ITERATOR_EX_RESPONSE rc;
	soap_default_KLPRES_RESET_EVENTS_ITERATOR_EX_RESPONSE(soap, &rc);
	soap_default_KLPRES_ResetEventsIteratorEx(soap, &soap_tmp_KLPRES_ResetEventsIteratorEx);
	soap->encodingStyle = NULL;
	soap_get_KLPRES_ResetEventsIteratorEx(soap, &soap_tmp_KLPRES_ResetEventsIteratorEx, "KLPRES-ResetEventsIteratorEx", NULL);
	if (soap->error)
		return soap->error;
	
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
#ifndef WITH_LEANER
	 || soap_resolve_attachments(soap)
#endif
	 || soap_end_recv(soap))
		return soap->error;
	soap->error = KLPRES_ResetEventsIteratorEx(soap, soap_tmp_KLPRES_ResetEventsIteratorEx.sServerObjectID, soap_tmp_KLPRES_ResetEventsIteratorEx.sSubscriptionID, rc);
	if (soap->error)
		return soap->error;
	soap_serializeheader(soap);
	soap_serialize_KLPRES_RESET_EVENTS_ITERATOR_EX_RESPONSE(soap, &rc);
	soap_begin_count(soap);
	if (soap->mode & SOAP_IO_LENGTH)
	{	soap_envelope_begin_out(soap);
		soap_putheader(soap);
		soap_body_begin_out(soap);
		soap_put_KLPRES_RESET_EVENTS_ITERATOR_EX_RESPONSE(soap, &rc, "KLPRES-RESET-EVENTS-ITERATOR-EX-RESPONSE", "");
		soap_body_end_out(soap);
		soap_envelope_end_out(soap);
	};
	if (soap_response(soap, SOAP_OK)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put_KLPRES_RESET_EVENTS_ITERATOR_EX_RESPONSE(soap, &rc, "KLPRES-RESET-EVENTS-ITERATOR-EX-RESPONSE", "")
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap->error;
	soap_closesock(soap);
	return SOAP_OK;
}

SOAP_FMAC5 int SOAP_FMAC6 soap_serve_KLPRES_SetEventsIteratorEx(struct soap *soap)
{	struct KLPRES_SetEventsIteratorEx soap_tmp_KLPRES_SetEventsIteratorEx;
	struct KLPRES_SET_EVENTS_ITERATOR_EX_RESPONSE rc;
	soap_default_KLPRES_SET_EVENTS_ITERATOR_EX_RESPONSE(soap, &rc);
	soap_default_KLPRES_SetEventsIteratorEx(soap, &soap_tmp_KLPRES_SetEventsIteratorEx);
	soap->encodingStyle = NULL;
	soap_get_KLPRES_SetEventsIteratorEx(soap, &soap_tmp_KLPRES_SetEventsIteratorEx, "KLPRES-SetEventsIteratorEx", NULL);
	if (soap->error)
		return soap->error;
	
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
#ifndef WITH_LEANER
	 || soap_resolve_attachments(soap)
#endif
	 || soap_end_recv(soap))
		return soap->error;
	soap->error = KLPRES_SetEventsIteratorEx(soap, soap_tmp_KLPRES_SetEventsIteratorEx.sServerObjectID, soap_tmp_KLPRES_SetEventsIteratorEx.sSubscriptionID, soap_tmp_KLPRES_SetEventsIteratorEx.eventID, rc);
	if (soap->error)
		return soap->error;
	soap_serializeheader(soap);
	soap_serialize_KLPRES_SET_EVENTS_ITERATOR_EX_RESPONSE(soap, &rc);
	soap_begin_count(soap);
	if (soap->mode & SOAP_IO_LENGTH)
	{	soap_envelope_begin_out(soap);
		soap_putheader(soap);
		soap_body_begin_out(soap);
		soap_put_KLPRES_SET_EVENTS_ITERATOR_EX_RESPONSE(soap, &rc, "KLPRES-SET-EVENTS-ITERATOR-EX-RESPONSE", "");
		soap_body_end_out(soap);
		soap_envelope_end_out(soap);
	};
	if (soap_response(soap, SOAP_OK)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put_KLPRES_SET_EVENTS_ITERATOR_EX_RESPONSE(soap, &rc, "KLPRES-SET-EVENTS-ITERATOR-EX-RESPONSE", "")
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap->error;
	soap_closesock(soap);
	return SOAP_OK;
}

SOAP_FMAC5 int SOAP_FMAC6 soap_serve_KLPRES_MoveToEventWithIndex(struct soap *soap)
{	struct KLPRES_MoveToEventWithIndex soap_tmp_KLPRES_MoveToEventWithIndex;
	struct param_error rc;
	soap_default_param_error(soap, &rc);
	soap_default_KLPRES_MoveToEventWithIndex(soap, &soap_tmp_KLPRES_MoveToEventWithIndex);
	soap->encodingStyle = NULL;
	soap_get_KLPRES_MoveToEventWithIndex(soap, &soap_tmp_KLPRES_MoveToEventWithIndex, "KLPRES-MoveToEventWithIndex", NULL);
	if (soap->error)
		return soap->error;
	
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
#ifndef WITH_LEANER
	 || soap_resolve_attachments(soap)
#endif
	 || soap_end_recv(soap))
		return soap->error;
	soap->error = KLPRES_MoveToEventWithIndex(soap, soap_tmp_KLPRES_MoveToEventWithIndex.sServerObjectID, soap_tmp_KLPRES_MoveToEventWithIndex.sSubscriptionID, soap_tmp_KLPRES_MoveToEventWithIndex.nIndex, rc);
	if (soap->error)
		return soap->error;
	soap_serializeheader(soap);
	soap_serialize_param_error(soap, &rc);
	soap_begin_count(soap);
	if (soap->mode & SOAP_IO_LENGTH)
	{	soap_envelope_begin_out(soap);
		soap_putheader(soap);
		soap_body_begin_out(soap);
		soap_put_param_error(soap, &rc, "param-error", "");
		soap_body_end_out(soap);
		soap_envelope_end_out(soap);
	};
	if (soap_response(soap, SOAP_OK)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put_param_error(soap, &rc, "param-error", "")
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap->error;
	soap_closesock(soap);
	return SOAP_OK;
}

SOAP_FMAC5 int SOAP_FMAC6 soap_serve_KLPRES_GetEventsCount(struct soap *soap)
{	struct KLPRES_GetEventsCount soap_tmp_KLPRES_GetEventsCount;
	struct KLPRES_GET_EVENTS_COUNT_RESPONSE rc;
	soap_default_KLPRES_GET_EVENTS_COUNT_RESPONSE(soap, &rc);
	soap_default_KLPRES_GetEventsCount(soap, &soap_tmp_KLPRES_GetEventsCount);
	soap->encodingStyle = NULL;
	soap_get_KLPRES_GetEventsCount(soap, &soap_tmp_KLPRES_GetEventsCount, "KLPRES-GetEventsCount", NULL);
	if (soap->error)
		return soap->error;
	
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
#ifndef WITH_LEANER
	 || soap_resolve_attachments(soap)
#endif
	 || soap_end_recv(soap))
		return soap->error;
	soap->error = KLPRES_GetEventsCount(soap, soap_tmp_KLPRES_GetEventsCount.sServerObjectID, soap_tmp_KLPRES_GetEventsCount.sSubscriptionID, rc);
	if (soap->error)
		return soap->error;
	soap_serializeheader(soap);
	soap_serialize_KLPRES_GET_EVENTS_COUNT_RESPONSE(soap, &rc);
	soap_begin_count(soap);
	if (soap->mode & SOAP_IO_LENGTH)
	{	soap_envelope_begin_out(soap);
		soap_putheader(soap);
		soap_body_begin_out(soap);
		soap_put_KLPRES_GET_EVENTS_COUNT_RESPONSE(soap, &rc, "KLPRES-GET-EVENTS-COUNT-RESPONSE", "");
		soap_body_end_out(soap);
		soap_envelope_end_out(soap);
	};
	if (soap_response(soap, SOAP_OK)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put_KLPRES_GET_EVENTS_COUNT_RESPONSE(soap, &rc, "KLPRES-GET-EVENTS-COUNT-RESPONSE", "")
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap->error;
	soap_closesock(soap);
	return SOAP_OK;
}

SOAP_FMAC5 int SOAP_FMAC6 soap_serve_KLPRES_GetNextEventsChunk(struct soap *soap)
{	struct KLPRES_GetNextEventsChunk soap_tmp_KLPRES_GetNextEventsChunk;
	struct KLPRES_GET_NEXT_EVENTS_CHUNK_RESPONSE rc;
	soap_default_KLPRES_GET_NEXT_EVENTS_CHUNK_RESPONSE(soap, &rc);
	soap_default_KLPRES_GetNextEventsChunk(soap, &soap_tmp_KLPRES_GetNextEventsChunk);
	soap->encodingStyle = NULL;
	soap_get_KLPRES_GetNextEventsChunk(soap, &soap_tmp_KLPRES_GetNextEventsChunk, "KLPRES-GetNextEventsChunk", NULL);
	if (soap->error)
		return soap->error;
	
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
#ifndef WITH_LEANER
	 || soap_resolve_attachments(soap)
#endif
	 || soap_end_recv(soap))
		return soap->error;
	soap->error = KLPRES_GetNextEventsChunk(soap, soap_tmp_KLPRES_GetNextEventsChunk.sServerObjectID, soap_tmp_KLPRES_GetNextEventsChunk.sSubscriptionID, rc);
	if (soap->error)
		return soap->error;
	soap_serializeheader(soap);
	soap_serialize_KLPRES_GET_NEXT_EVENTS_CHUNK_RESPONSE(soap, &rc);
	soap_begin_count(soap);
	if (soap->mode & SOAP_IO_LENGTH)
	{	soap_envelope_begin_out(soap);
		soap_putheader(soap);
		soap_body_begin_out(soap);
		soap_put_KLPRES_GET_NEXT_EVENTS_CHUNK_RESPONSE(soap, &rc, "KLPRES-GET-NEXT-EVENTS-CHUNK-RESPONSE", "");
		soap_body_end_out(soap);
		soap_envelope_end_out(soap);
	};
	if (soap_response(soap, SOAP_OK)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put_KLPRES_GET_NEXT_EVENTS_CHUNK_RESPONSE(soap, &rc, "KLPRES-GET-NEXT-EVENTS-CHUNK-RESPONSE", "")
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap->error;
	soap_closesock(soap);
	return SOAP_OK;
}

SOAP_FMAC5 int SOAP_FMAC6 soap_serve_KLPRES_ClearEventsList(struct soap *soap)
{	struct KLPRES_ClearEventsList soap_tmp_KLPRES_ClearEventsList;
	struct param_error rc;
	soap_default_param_error(soap, &rc);
	soap_default_KLPRES_ClearEventsList(soap, &soap_tmp_KLPRES_ClearEventsList);
	soap->encodingStyle = NULL;
	soap_get_KLPRES_ClearEventsList(soap, &soap_tmp_KLPRES_ClearEventsList, "KLPRES-ClearEventsList", NULL);
	if (soap->error)
		return soap->error;
	
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
#ifndef WITH_LEANER
	 || soap_resolve_attachments(soap)
#endif
	 || soap_end_recv(soap))
		return soap->error;
	soap->error = KLPRES_ClearEventsList(soap, soap_tmp_KLPRES_ClearEventsList.sServerObjectID, soap_tmp_KLPRES_ClearEventsList.sSubscriptionID, rc);
	if (soap->error)
		return soap->error;
	soap_serializeheader(soap);
	soap_serialize_param_error(soap, &rc);
	soap_begin_count(soap);
	if (soap->mode & SOAP_IO_LENGTH)
	{	soap_envelope_begin_out(soap);
		soap_putheader(soap);
		soap_body_begin_out(soap);
		soap_put_param_error(soap, &rc, "param-error", "");
		soap_body_end_out(soap);
		soap_envelope_end_out(soap);
	};
	if (soap_response(soap, SOAP_OK)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put_param_error(soap, &rc, "param-error", "")
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap->error;
	soap_closesock(soap);
	return SOAP_OK;
}

SOAP_FMAC5 int SOAP_FMAC6 soap_serve_KLPRES_DeleteEvents(struct soap *soap)
{	struct KLPRES_DeleteEvents soap_tmp_KLPRES_DeleteEvents;
	struct param_error rc;
	soap_default_param_error(soap, &rc);
	soap_default_KLPRES_DeleteEvents(soap, &soap_tmp_KLPRES_DeleteEvents);
	soap->encodingStyle = NULL;
	soap_get_KLPRES_DeleteEvents(soap, &soap_tmp_KLPRES_DeleteEvents, "KLPRES-DeleteEvents", NULL);
	if (soap->error)
		return soap->error;
	
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
#ifndef WITH_LEANER
	 || soap_resolve_attachments(soap)
#endif
	 || soap_end_recv(soap))
		return soap->error;
	soap->error = KLPRES_DeleteEvents(soap, soap_tmp_KLPRES_DeleteEvents.sServerObjectID, soap_tmp_KLPRES_DeleteEvents.sSubscriptionID, soap_tmp_KLPRES_DeleteEvents.nStopEventID, rc);
	if (soap->error)
		return soap->error;
	soap_serializeheader(soap);
	soap_serialize_param_error(soap, &rc);
	soap_begin_count(soap);
	if (soap->mode & SOAP_IO_LENGTH)
	{	soap_envelope_begin_out(soap);
		soap_putheader(soap);
		soap_body_begin_out(soap);
		soap_put_param_error(soap, &rc, "param-error", "");
		soap_body_end_out(soap);
		soap_envelope_end_out(soap);
	};
	if (soap_response(soap, SOAP_OK)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put_param_error(soap, &rc, "param-error", "")
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap->error;
	soap_closesock(soap);
	return SOAP_OK;
}

SOAP_FMAC5 int SOAP_FMAC6 soap_serve_KLPRES_DeleteOneEventByID(struct soap *soap)
{	struct KLPRES_DeleteOneEventByID soap_tmp_KLPRES_DeleteOneEventByID;
	struct param_error rc;
	soap_default_param_error(soap, &rc);
	soap_default_KLPRES_DeleteOneEventByID(soap, &soap_tmp_KLPRES_DeleteOneEventByID);
	soap->encodingStyle = NULL;
	soap_get_KLPRES_DeleteOneEventByID(soap, &soap_tmp_KLPRES_DeleteOneEventByID, "KLPRES-DeleteOneEventByID", NULL);
	if (soap->error)
		return soap->error;
	
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
#ifndef WITH_LEANER
	 || soap_resolve_attachments(soap)
#endif
	 || soap_end_recv(soap))
		return soap->error;
	soap->error = KLPRES_DeleteOneEventByID(soap, soap_tmp_KLPRES_DeleteOneEventByID.sServerObjectID, soap_tmp_KLPRES_DeleteOneEventByID.sSubscriptionID, soap_tmp_KLPRES_DeleteOneEventByID.nEventID, rc);
	if (soap->error)
		return soap->error;
	soap_serializeheader(soap);
	soap_serialize_param_error(soap, &rc);
	soap_begin_count(soap);
	if (soap->mode & SOAP_IO_LENGTH)
	{	soap_envelope_begin_out(soap);
		soap_putheader(soap);
		soap_body_begin_out(soap);
		soap_put_param_error(soap, &rc, "param-error", "");
		soap_body_end_out(soap);
		soap_envelope_end_out(soap);
	};
	if (soap_response(soap, SOAP_OK)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put_param_error(soap, &rc, "param-error", "")
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap->error;
	soap_closesock(soap);
	return SOAP_OK;
}

SOAP_FMAC5 int SOAP_FMAC6 soap_serve_KLPRES_DeleteRanges(struct soap *soap)
{	struct KLPRES_DeleteRanges soap_tmp_KLPRES_DeleteRanges;
	struct param_error rc;
	soap_default_param_error(soap, &rc);
	soap_default_KLPRES_DeleteRanges(soap, &soap_tmp_KLPRES_DeleteRanges);
	soap->encodingStyle = NULL;
	soap_get_KLPRES_DeleteRanges(soap, &soap_tmp_KLPRES_DeleteRanges, "KLPRES-DeleteRanges", NULL);
	if (soap->error)
		return soap->error;
	
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
#ifndef WITH_LEANER
	 || soap_resolve_attachments(soap)
#endif
	 || soap_end_recv(soap))
		return soap->error;
	soap->error = KLPRES_DeleteRanges(soap, soap_tmp_KLPRES_DeleteRanges.sServerObjectID, soap_tmp_KLPRES_DeleteRanges.sSubscriptionID, soap_tmp_KLPRES_DeleteRanges.parRanges, rc);
	if (soap->error)
		return soap->error;
	soap_serializeheader(soap);
	soap_serialize_param_error(soap, &rc);
	soap_begin_count(soap);
	if (soap->mode & SOAP_IO_LENGTH)
	{	soap_envelope_begin_out(soap);
		soap_putheader(soap);
		soap_body_begin_out(soap);
		soap_put_param_error(soap, &rc, "param-error", "");
		soap_body_end_out(soap);
		soap_envelope_end_out(soap);
	};
	if (soap_response(soap, SOAP_OK)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put_param_error(soap, &rc, "param-error", "")
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap->error;
	soap_closesock(soap);
	return SOAP_OK;
}

SOAP_FMAC5 int SOAP_FMAC6 soap_serve_KLPRES_RemoveExpiredEvents(struct soap *soap)
{	struct KLPRES_RemoveExpiredEvents soap_tmp_KLPRES_RemoveExpiredEvents;
	struct param_error rc;
	soap_default_param_error(soap, &rc);
	soap_default_KLPRES_RemoveExpiredEvents(soap, &soap_tmp_KLPRES_RemoveExpiredEvents);
	soap->encodingStyle = NULL;
	soap_get_KLPRES_RemoveExpiredEvents(soap, &soap_tmp_KLPRES_RemoveExpiredEvents, "KLPRES-RemoveExpiredEvents", NULL);
	if (soap->error)
		return soap->error;
	
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
#ifndef WITH_LEANER
	 || soap_resolve_attachments(soap)
#endif
	 || soap_end_recv(soap))
		return soap->error;
	soap->error = KLPRES_RemoveExpiredEvents(soap, soap_tmp_KLPRES_RemoveExpiredEvents.sServerObjectID, soap_tmp_KLPRES_RemoveExpiredEvents.sSubscriptionID, rc);
	if (soap->error)
		return soap->error;
	soap_serializeheader(soap);
	soap_serialize_param_error(soap, &rc);
	soap_begin_count(soap);
	if (soap->mode & SOAP_IO_LENGTH)
	{	soap_envelope_begin_out(soap);
		soap_putheader(soap);
		soap_body_begin_out(soap);
		soap_put_param_error(soap, &rc, "param-error", "");
		soap_body_end_out(soap);
		soap_envelope_end_out(soap);
	};
	if (soap_response(soap, SOAP_OK)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put_param_error(soap, &rc, "param-error", "")
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap->error;
	soap_closesock(soap);
	return SOAP_OK;
}

SOAP_FMAC5 int SOAP_FMAC6 soap_serve_KLPRES_GetEventStorageFileSize(struct soap *soap)
{	struct KLPRES_GetEventStorageFileSize soap_tmp_KLPRES_GetEventStorageFileSize;
	struct KLPRES_GET_EVENT_STORAGE_FILE_SIZE_RESPONSE rc;
	soap_default_KLPRES_GET_EVENT_STORAGE_FILE_SIZE_RESPONSE(soap, &rc);
	soap_default_KLPRES_GetEventStorageFileSize(soap, &soap_tmp_KLPRES_GetEventStorageFileSize);
	soap->encodingStyle = NULL;
	soap_get_KLPRES_GetEventStorageFileSize(soap, &soap_tmp_KLPRES_GetEventStorageFileSize, "KLPRES-GetEventStorageFileSize", NULL);
	if (soap->error)
		return soap->error;
	
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
#ifndef WITH_LEANER
	 || soap_resolve_attachments(soap)
#endif
	 || soap_end_recv(soap))
		return soap->error;
	soap->error = KLPRES_GetEventStorageFileSize(soap, soap_tmp_KLPRES_GetEventStorageFileSize.sServerObjectID, soap_tmp_KLPRES_GetEventStorageFileSize.sSubscriptionID, rc);
	if (soap->error)
		return soap->error;
	soap_serializeheader(soap);
	soap_serialize_KLPRES_GET_EVENT_STORAGE_FILE_SIZE_RESPONSE(soap, &rc);
	soap_begin_count(soap);
	if (soap->mode & SOAP_IO_LENGTH)
	{	soap_envelope_begin_out(soap);
		soap_putheader(soap);
		soap_body_begin_out(soap);
		soap_put_KLPRES_GET_EVENT_STORAGE_FILE_SIZE_RESPONSE(soap, &rc, "KLPRES-GET-EVENT-STORAGE-FILE-SIZE-RESPONSE", "");
		soap_body_end_out(soap);
		soap_envelope_end_out(soap);
	};
	if (soap_response(soap, SOAP_OK)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put_KLPRES_GET_EVENT_STORAGE_FILE_SIZE_RESPONSE(soap, &rc, "KLPRES-GET-EVENT-STORAGE-FILE-SIZE-RESPONSE", "")
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap->error;
	soap_closesock(soap);
	return SOAP_OK;
}

SOAP_FMAC5 int SOAP_FMAC6 soap_serve_KLPRTS_ResetTasksIterator(struct soap *soap)
{	struct KLPRTS_ResetTasksIterator soap_tmp_KLPRTS_ResetTasksIterator;
	struct KLPRTS_RESET_TASKS_ITERATOR_RESPONSE rc;
	soap_default_KLPRTS_RESET_TASKS_ITERATOR_RESPONSE(soap, &rc);
	soap_default_KLPRTS_ResetTasksIterator(soap, &soap_tmp_KLPRTS_ResetTasksIterator);
	soap->encodingStyle = NULL;
	soap_get_KLPRTS_ResetTasksIterator(soap, &soap_tmp_KLPRTS_ResetTasksIterator, "KLPRTS-ResetTasksIterator", NULL);
	if (soap->error)
		return soap->error;
	
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
#ifndef WITH_LEANER
	 || soap_resolve_attachments(soap)
#endif
	 || soap_end_recv(soap))
		return soap->error;
	soap->error = KLPRTS_ResetTasksIterator(soap, soap_tmp_KLPRTS_ResetTasksIterator.sServerObjectID, soap_tmp_KLPRTS_ResetTasksIterator.cidFilter, soap_tmp_KLPRTS_ResetTasksIterator.sTaskNameFilter, rc);
	if (soap->error)
		return soap->error;
	soap_serializeheader(soap);
	soap_serialize_KLPRTS_RESET_TASKS_ITERATOR_RESPONSE(soap, &rc);
	soap_begin_count(soap);
	if (soap->mode & SOAP_IO_LENGTH)
	{	soap_envelope_begin_out(soap);
		soap_putheader(soap);
		soap_body_begin_out(soap);
		soap_put_KLPRTS_RESET_TASKS_ITERATOR_RESPONSE(soap, &rc, "KLPRTS-RESET-TASKS-ITERATOR-RESPONSE", "");
		soap_body_end_out(soap);
		soap_envelope_end_out(soap);
	};
	if (soap_response(soap, SOAP_OK)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put_KLPRTS_RESET_TASKS_ITERATOR_RESPONSE(soap, &rc, "KLPRTS-RESET-TASKS-ITERATOR-RESPONSE", "")
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap->error;
	soap_closesock(soap);
	return SOAP_OK;
}

SOAP_FMAC5 int SOAP_FMAC6 soap_serve_KLPRTS_GetTaskByID(struct soap *soap)
{	struct KLPRTS_GetTaskByID soap_tmp_KLPRTS_GetTaskByID;
	struct KLPRTS_GET_TASK_BY_ID_RESPONSE rc;
	soap_default_KLPRTS_GET_TASK_BY_ID_RESPONSE(soap, &rc);
	soap_default_KLPRTS_GetTaskByID(soap, &soap_tmp_KLPRTS_GetTaskByID);
	soap->encodingStyle = NULL;
	soap_get_KLPRTS_GetTaskByID(soap, &soap_tmp_KLPRTS_GetTaskByID, "KLPRTS-GetTaskByID", NULL);
	if (soap->error)
		return soap->error;
	
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
#ifndef WITH_LEANER
	 || soap_resolve_attachments(soap)
#endif
	 || soap_end_recv(soap))
		return soap->error;
	soap->error = KLPRTS_GetTaskByID(soap, soap_tmp_KLPRTS_GetTaskByID.sServerObjectID, soap_tmp_KLPRTS_GetTaskByID.TaskID, rc);
	if (soap->error)
		return soap->error;
	soap_serializeheader(soap);
	soap_serialize_KLPRTS_GET_TASK_BY_ID_RESPONSE(soap, &rc);
	soap_begin_count(soap);
	if (soap->mode & SOAP_IO_LENGTH)
	{	soap_envelope_begin_out(soap);
		soap_putheader(soap);
		soap_body_begin_out(soap);
		soap_put_KLPRTS_GET_TASK_BY_ID_RESPONSE(soap, &rc, "KLPRTS-GET-TASK-BY-ID-RESPONSE", "");
		soap_body_end_out(soap);
		soap_envelope_end_out(soap);
	};
	if (soap_response(soap, SOAP_OK)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put_KLPRTS_GET_TASK_BY_ID_RESPONSE(soap, &rc, "KLPRTS-GET-TASK-BY-ID-RESPONSE", "")
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap->error;
	soap_closesock(soap);
	return SOAP_OK;
}

SOAP_FMAC5 int SOAP_FMAC6 soap_serve_KLPRTS_GetTaskByIDWithPolicyApplied(struct soap *soap)
{	struct KLPRTS_GetTaskByIDWithPolicyApplied soap_tmp_KLPRTS_GetTaskByIDWithPolicyApplied;
	struct KLPRTS_GET_TASK_BY_ID_WPA_RESPONSE rc;
	soap_default_KLPRTS_GET_TASK_BY_ID_WPA_RESPONSE(soap, &rc);
	soap_default_KLPRTS_GetTaskByIDWithPolicyApplied(soap, &soap_tmp_KLPRTS_GetTaskByIDWithPolicyApplied);
	soap->encodingStyle = NULL;
	soap_get_KLPRTS_GetTaskByIDWithPolicyApplied(soap, &soap_tmp_KLPRTS_GetTaskByIDWithPolicyApplied, "KLPRTS-GetTaskByIDWithPolicyApplied", NULL);
	if (soap->error)
		return soap->error;
	
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
#ifndef WITH_LEANER
	 || soap_resolve_attachments(soap)
#endif
	 || soap_end_recv(soap))
		return soap->error;
	soap->error = KLPRTS_GetTaskByIDWithPolicyApplied(soap, soap_tmp_KLPRTS_GetTaskByIDWithPolicyApplied.sServerObjectID, soap_tmp_KLPRTS_GetTaskByIDWithPolicyApplied.TaskID, rc);
	if (soap->error)
		return soap->error;
	soap_serializeheader(soap);
	soap_serialize_KLPRTS_GET_TASK_BY_ID_WPA_RESPONSE(soap, &rc);
	soap_begin_count(soap);
	if (soap->mode & SOAP_IO_LENGTH)
	{	soap_envelope_begin_out(soap);
		soap_putheader(soap);
		soap_body_begin_out(soap);
		soap_put_KLPRTS_GET_TASK_BY_ID_WPA_RESPONSE(soap, &rc, "KLPRTS-GET-TASK-BY-ID-WPA-RESPONSE", "");
		soap_body_end_out(soap);
		soap_envelope_end_out(soap);
	};
	if (soap_response(soap, SOAP_OK)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put_KLPRTS_GET_TASK_BY_ID_WPA_RESPONSE(soap, &rc, "KLPRTS-GET-TASK-BY-ID-WPA-RESPONSE", "")
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap->error;
	soap_closesock(soap);
	return SOAP_OK;
}

SOAP_FMAC5 int SOAP_FMAC6 soap_serve_KLPRTS_AddTask(struct soap *soap)
{	struct KLPRTS_AddTask soap_tmp_KLPRTS_AddTask;
	struct KLPRTS_ADD_TASK_RESPONSE rc;
	soap_default_KLPRTS_ADD_TASK_RESPONSE(soap, &rc);
	soap_default_KLPRTS_AddTask(soap, &soap_tmp_KLPRTS_AddTask);
	soap->encodingStyle = NULL;
	soap_get_KLPRTS_AddTask(soap, &soap_tmp_KLPRTS_AddTask, "KLPRTS-AddTask", NULL);
	if (soap->error)
		return soap->error;
	
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
#ifndef WITH_LEANER
	 || soap_resolve_attachments(soap)
#endif
	 || soap_end_recv(soap))
		return soap->error;
	soap->error = KLPRTS_AddTask(soap, soap_tmp_KLPRTS_AddTask.sServerObjectID, soap_tmp_KLPRTS_AddTask.parTaskParams, rc);
	if (soap->error)
		return soap->error;
	soap_serializeheader(soap);
	soap_serialize_KLPRTS_ADD_TASK_RESPONSE(soap, &rc);
	soap_begin_count(soap);
	if (soap->mode & SOAP_IO_LENGTH)
	{	soap_envelope_begin_out(soap);
		soap_putheader(soap);
		soap_body_begin_out(soap);
		soap_put_KLPRTS_ADD_TASK_RESPONSE(soap, &rc, "KLPRTS-ADD-TASK-RESPONSE", "");
		soap_body_end_out(soap);
		soap_envelope_end_out(soap);
	};
	if (soap_response(soap, SOAP_OK)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put_KLPRTS_ADD_TASK_RESPONSE(soap, &rc, "KLPRTS-ADD-TASK-RESPONSE", "")
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap->error;
	soap_closesock(soap);
	return SOAP_OK;
}

SOAP_FMAC5 int SOAP_FMAC6 soap_serve_KLPRTS_UpdateTask(struct soap *soap)
{	struct KLPRTS_UpdateTask soap_tmp_KLPRTS_UpdateTask;
	struct param_error rc;
	soap_default_param_error(soap, &rc);
	soap_default_KLPRTS_UpdateTask(soap, &soap_tmp_KLPRTS_UpdateTask);
	soap->encodingStyle = NULL;
	soap_get_KLPRTS_UpdateTask(soap, &soap_tmp_KLPRTS_UpdateTask, "KLPRTS-UpdateTask", NULL);
	if (soap->error)
		return soap->error;
	
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
#ifndef WITH_LEANER
	 || soap_resolve_attachments(soap)
#endif
	 || soap_end_recv(soap))
		return soap->error;
	soap->error = KLPRTS_UpdateTask(soap, soap_tmp_KLPRTS_UpdateTask.sServerObjectID, soap_tmp_KLPRTS_UpdateTask.TaskID, soap_tmp_KLPRTS_UpdateTask.parTaskParams, rc);
	if (soap->error)
		return soap->error;
	soap_serializeheader(soap);
	soap_serialize_param_error(soap, &rc);
	soap_begin_count(soap);
	if (soap->mode & SOAP_IO_LENGTH)
	{	soap_envelope_begin_out(soap);
		soap_putheader(soap);
		soap_body_begin_out(soap);
		soap_put_param_error(soap, &rc, "param-error", "");
		soap_body_end_out(soap);
		soap_envelope_end_out(soap);
	};
	if (soap_response(soap, SOAP_OK)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put_param_error(soap, &rc, "param-error", "")
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap->error;
	soap_closesock(soap);
	return SOAP_OK;
}

SOAP_FMAC5 int SOAP_FMAC6 soap_serve_KLPRTS_DeleteTask(struct soap *soap)
{	struct KLPRTS_DeleteTask soap_tmp_KLPRTS_DeleteTask;
	struct param_error rc;
	soap_default_param_error(soap, &rc);
	soap_default_KLPRTS_DeleteTask(soap, &soap_tmp_KLPRTS_DeleteTask);
	soap->encodingStyle = NULL;
	soap_get_KLPRTS_DeleteTask(soap, &soap_tmp_KLPRTS_DeleteTask, "KLPRTS-DeleteTask", NULL);
	if (soap->error)
		return soap->error;
	
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
#ifndef WITH_LEANER
	 || soap_resolve_attachments(soap)
#endif
	 || soap_end_recv(soap))
		return soap->error;
	soap->error = KLPRTS_DeleteTask(soap, soap_tmp_KLPRTS_DeleteTask.sServerObjectID, soap_tmp_KLPRTS_DeleteTask.TaskID, rc);
	if (soap->error)
		return soap->error;
	soap_serializeheader(soap);
	soap_serialize_param_error(soap, &rc);
	soap_begin_count(soap);
	if (soap->mode & SOAP_IO_LENGTH)
	{	soap_envelope_begin_out(soap);
		soap_putheader(soap);
		soap_body_begin_out(soap);
		soap_put_param_error(soap, &rc, "param-error", "");
		soap_body_end_out(soap);
		soap_envelope_end_out(soap);
	};
	if (soap_response(soap, SOAP_OK)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put_param_error(soap, &rc, "param-error", "")
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap->error;
	soap_closesock(soap);
	return SOAP_OK;
}

SOAP_FMAC5 int SOAP_FMAC6 soap_serve_KLPRTS_SetTaskStartEvent(struct soap *soap)
{	struct KLPRTS_SetTaskStartEvent soap_tmp_KLPRTS_SetTaskStartEvent;
	struct param_error rc;
	soap_default_param_error(soap, &rc);
	soap_default_KLPRTS_SetTaskStartEvent(soap, &soap_tmp_KLPRTS_SetTaskStartEvent);
	soap->encodingStyle = NULL;
	soap_get_KLPRTS_SetTaskStartEvent(soap, &soap_tmp_KLPRTS_SetTaskStartEvent, "KLPRTS-SetTaskStartEvent", NULL);
	if (soap->error)
		return soap->error;
	
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
#ifndef WITH_LEANER
	 || soap_resolve_attachments(soap)
#endif
	 || soap_end_recv(soap))
		return soap->error;
	soap->error = KLPRTS_SetTaskStartEvent(soap, soap_tmp_KLPRTS_SetTaskStartEvent.sServerObjectID, soap_tmp_KLPRTS_SetTaskStartEvent.TaskID, soap_tmp_KLPRTS_SetTaskStartEvent.cidEventFilter, soap_tmp_KLPRTS_SetTaskStartEvent.sEventType, soap_tmp_KLPRTS_SetTaskStartEvent.parBodyFilter, rc);
	if (soap->error)
		return soap->error;
	soap_serializeheader(soap);
	soap_serialize_param_error(soap, &rc);
	soap_begin_count(soap);
	if (soap->mode & SOAP_IO_LENGTH)
	{	soap_envelope_begin_out(soap);
		soap_putheader(soap);
		soap_body_begin_out(soap);
		soap_put_param_error(soap, &rc, "param-error", "");
		soap_body_end_out(soap);
		soap_envelope_end_out(soap);
	};
	if (soap_response(soap, SOAP_OK)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put_param_error(soap, &rc, "param-error", "")
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap->error;
	soap_closesock(soap);
	return SOAP_OK;
}

SOAP_FMAC5 int SOAP_FMAC6 soap_serve_KLPRTS_GetTaskStartEvent(struct soap *soap)
{	struct KLPRTS_GetTaskStartEvent soap_tmp_KLPRTS_GetTaskStartEvent;
	struct KLPRTS_GET_TASK_START_EVENT_RESPONSE rc;
	soap_default_KLPRTS_GET_TASK_START_EVENT_RESPONSE(soap, &rc);
	soap_default_KLPRTS_GetTaskStartEvent(soap, &soap_tmp_KLPRTS_GetTaskStartEvent);
	soap->encodingStyle = NULL;
	soap_get_KLPRTS_GetTaskStartEvent(soap, &soap_tmp_KLPRTS_GetTaskStartEvent, "KLPRTS-GetTaskStartEvent", NULL);
	if (soap->error)
		return soap->error;
	
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
#ifndef WITH_LEANER
	 || soap_resolve_attachments(soap)
#endif
	 || soap_end_recv(soap))
		return soap->error;
	soap->error = KLPRTS_GetTaskStartEvent(soap, soap_tmp_KLPRTS_GetTaskStartEvent.sServerObjectID, soap_tmp_KLPRTS_GetTaskStartEvent.TaskID, rc);
	if (soap->error)
		return soap->error;
	soap_serializeheader(soap);
	soap_serialize_KLPRTS_GET_TASK_START_EVENT_RESPONSE(soap, &rc);
	soap_begin_count(soap);
	if (soap->mode & SOAP_IO_LENGTH)
	{	soap_envelope_begin_out(soap);
		soap_putheader(soap);
		soap_body_begin_out(soap);
		soap_put_KLPRTS_GET_TASK_START_EVENT_RESPONSE(soap, &rc, "KLPRTS-GET-TASK-START-EVENT-RESPONSE", "");
		soap_body_end_out(soap);
		soap_envelope_end_out(soap);
	};
	if (soap_response(soap, SOAP_OK)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put_KLPRTS_GET_TASK_START_EVENT_RESPONSE(soap, &rc, "KLPRTS-GET-TASK-START-EVENT-RESPONSE", "")
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap->error;
	soap_closesock(soap);
	return SOAP_OK;
}

SOAP_FMAC5 int SOAP_FMAC6 soap_serve_KLPRTS_UpdateTask2(struct soap *soap)
{	struct KLPRTS_UpdateTask2 soap_tmp_KLPRTS_UpdateTask2;
	struct param_error rc;
	soap_default_param_error(soap, &rc);
	soap_default_KLPRTS_UpdateTask2(soap, &soap_tmp_KLPRTS_UpdateTask2);
	soap->encodingStyle = NULL;
	soap_get_KLPRTS_UpdateTask2(soap, &soap_tmp_KLPRTS_UpdateTask2, "KLPRTS-UpdateTask2", NULL);
	if (soap->error)
		return soap->error;
	
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
#ifndef WITH_LEANER
	 || soap_resolve_attachments(soap)
#endif
	 || soap_end_recv(soap))
		return soap->error;
	soap->error = KLPRTS_UpdateTask2(soap, soap_tmp_KLPRTS_UpdateTask2.sServerObjectID, soap_tmp_KLPRTS_UpdateTask2.TaskID, soap_tmp_KLPRTS_UpdateTask2.parTaskParams, rc);
	if (soap->error)
		return soap->error;
	soap_serializeheader(soap);
	soap_serialize_param_error(soap, &rc);
	soap_begin_count(soap);
	if (soap->mode & SOAP_IO_LENGTH)
	{	soap_envelope_begin_out(soap);
		soap_putheader(soap);
		soap_body_begin_out(soap);
		soap_put_param_error(soap, &rc, "param-error", "");
		soap_body_end_out(soap);
		soap_envelope_end_out(soap);
	};
	if (soap_response(soap, SOAP_OK)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put_param_error(soap, &rc, "param-error", "")
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap->error;
	soap_closesock(soap);
	return SOAP_OK;
}

SOAP_FMAC5 int SOAP_FMAC6 soap_serve_KLPRTS_ReplaceTask(struct soap *soap)
{	struct KLPRTS_ReplaceTask soap_tmp_KLPRTS_ReplaceTask;
	struct param_error rc;
	soap_default_param_error(soap, &rc);
	soap_default_KLPRTS_ReplaceTask(soap, &soap_tmp_KLPRTS_ReplaceTask);
	soap->encodingStyle = NULL;
	soap_get_KLPRTS_ReplaceTask(soap, &soap_tmp_KLPRTS_ReplaceTask, "KLPRTS-ReplaceTask", NULL);
	if (soap->error)
		return soap->error;
	
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
#ifndef WITH_LEANER
	 || soap_resolve_attachments(soap)
#endif
	 || soap_end_recv(soap))
		return soap->error;
	soap->error = KLPRTS_ReplaceTask(soap, soap_tmp_KLPRTS_ReplaceTask.sServerObjectID, soap_tmp_KLPRTS_ReplaceTask.TaskID, soap_tmp_KLPRTS_ReplaceTask.parTaskParams, rc);
	if (soap->error)
		return soap->error;
	soap_serializeheader(soap);
	soap_serialize_param_error(soap, &rc);
	soap_begin_count(soap);
	if (soap->mode & SOAP_IO_LENGTH)
	{	soap_envelope_begin_out(soap);
		soap_putheader(soap);
		soap_body_begin_out(soap);
		soap_put_param_error(soap, &rc, "param-error", "");
		soap_body_end_out(soap);
		soap_envelope_end_out(soap);
	};
	if (soap_response(soap, SOAP_OK)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put_param_error(soap, &rc, "param-error", "")
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap->error;
	soap_closesock(soap);
	return SOAP_OK;
}

SOAP_FMAC5 int SOAP_FMAC6 soap_serve_klsssrv_Close(struct soap *soap)
{	struct klsssrv_Close soap_tmp_klsssrv_Close;
	struct klsssrv_CloseResponse r;
	soap_default_klsssrv_CloseResponse(soap, &r);
	soap_default_klsssrv_Close(soap, &soap_tmp_klsssrv_Close);
	soap->encodingStyle = NULL;
	soap_get_klsssrv_Close(soap, &soap_tmp_klsssrv_Close, "klsssrv-Close", NULL);
	if (soap->error)
		return soap->error;
	
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
#ifndef WITH_LEANER
	 || soap_resolve_attachments(soap)
#endif
	 || soap_end_recv(soap))
		return soap->error;
	soap->error = klsssrv_Close(soap, soap_tmp_klsssrv_Close.wstrIdSSS, soap_tmp_klsssrv_Close.wstrProxyId, r);
	if (soap->error)
		return soap->error;
	soap_serializeheader(soap);
	soap_serialize_klsssrv_CloseResponse(soap, &r);
	soap_begin_count(soap);
	if (soap->mode & SOAP_IO_LENGTH)
	{	soap_envelope_begin_out(soap);
		soap_putheader(soap);
		soap_body_begin_out(soap);
		soap_put_klsssrv_CloseResponse(soap, &r, "klsssrv-CloseResponse", "");
		soap_body_end_out(soap);
		soap_envelope_end_out(soap);
	};
	if (soap_response(soap, SOAP_OK)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put_klsssrv_CloseResponse(soap, &r, "klsssrv-CloseResponse", "")
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap->error;
	soap_closesock(soap);
	return SOAP_OK;
}

SOAP_FMAC5 int SOAP_FMAC6 soap_serve_klsssrv_CreateSettingsStorage(struct soap *soap)
{	struct klsssrv_CreateSettingsStorage soap_tmp_klsssrv_CreateSettingsStorage;
	struct klsssrv_CreateSettingsStorageResponse r;
	soap_default_klsssrv_CreateSettingsStorageResponse(soap, &r);
	soap_default_klsssrv_CreateSettingsStorage(soap, &soap_tmp_klsssrv_CreateSettingsStorage);
	soap->encodingStyle = NULL;
	soap_get_klsssrv_CreateSettingsStorage(soap, &soap_tmp_klsssrv_CreateSettingsStorage, "klsssrv-CreateSettingsStorage", NULL);
	if (soap->error)
		return soap->error;
	
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
#ifndef WITH_LEANER
	 || soap_resolve_attachments(soap)
#endif
	 || soap_end_recv(soap))
		return soap->error;
	soap->error = klsssrv_CreateSettingsStorage(soap, soap_tmp_klsssrv_CreateSettingsStorage.wstrIdSSS, soap_tmp_klsssrv_CreateSettingsStorage.wstrLocation, soap_tmp_klsssrv_CreateSettingsStorage.nCreationFlags, soap_tmp_klsssrv_CreateSettingsStorage.nAccessFlags, soap_tmp_klsssrv_CreateSettingsStorage.options, r);
	if (soap->error)
		return soap->error;
	soap_serializeheader(soap);
	soap_serialize_klsssrv_CreateSettingsStorageResponse(soap, &r);
	soap_begin_count(soap);
	if (soap->mode & SOAP_IO_LENGTH)
	{	soap_envelope_begin_out(soap);
		soap_putheader(soap);
		soap_body_begin_out(soap);
		soap_put_klsssrv_CreateSettingsStorageResponse(soap, &r, "klsssrv-CreateSettingsStorageResponse", "");
		soap_body_end_out(soap);
		soap_envelope_end_out(soap);
	};
	if (soap_response(soap, SOAP_OK)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put_klsssrv_CreateSettingsStorageResponse(soap, &r, "klsssrv-CreateSettingsStorageResponse", "")
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap->error;
	soap_closesock(soap);
	return SOAP_OK;
}

SOAP_FMAC5 int SOAP_FMAC6 soap_serve_klsssrv_Read(struct soap *soap)
{	struct klsssrv_Read soap_tmp_klsssrv_Read;
	struct klsssrv_ReadResponse r;
	soap_default_klsssrv_ReadResponse(soap, &r);
	soap_default_klsssrv_Read(soap, &soap_tmp_klsssrv_Read);
	soap->encodingStyle = NULL;
	soap_get_klsssrv_Read(soap, &soap_tmp_klsssrv_Read, "klsssrv-Read", NULL);
	if (soap->error)
		return soap->error;
	
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
#ifndef WITH_LEANER
	 || soap_resolve_attachments(soap)
#endif
	 || soap_end_recv(soap))
		return soap->error;
	soap->error = klsssrv_Read(soap, soap_tmp_klsssrv_Read.wstrIdSSS, soap_tmp_klsssrv_Read.wstrProxyId, soap_tmp_klsssrv_Read.wstrName, soap_tmp_klsssrv_Read.wstrVersion, soap_tmp_klsssrv_Read.wstrSection, soap_tmp_klsssrv_Read.extra, r);
	if (soap->error)
		return soap->error;
	soap_serializeheader(soap);
	soap_serialize_klsssrv_ReadResponse(soap, &r);
	soap_begin_count(soap);
	if (soap->mode & SOAP_IO_LENGTH)
	{	soap_envelope_begin_out(soap);
		soap_putheader(soap);
		soap_body_begin_out(soap);
		soap_put_klsssrv_ReadResponse(soap, &r, "klsssrv-ReadResponse", "");
		soap_body_end_out(soap);
		soap_envelope_end_out(soap);
	};
	if (soap_response(soap, SOAP_OK)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put_klsssrv_ReadResponse(soap, &r, "klsssrv-ReadResponse", "")
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap->error;
	soap_closesock(soap);
	return SOAP_OK;
}

SOAP_FMAC5 int SOAP_FMAC6 soap_serve_klsssrv_Write(struct soap *soap)
{	struct klsssrv_Write soap_tmp_klsssrv_Write;
	struct klsssrv_WriteResponse r;
	soap_default_klsssrv_WriteResponse(soap, &r);
	soap_default_klsssrv_Write(soap, &soap_tmp_klsssrv_Write);
	soap->encodingStyle = NULL;
	soap_get_klsssrv_Write(soap, &soap_tmp_klsssrv_Write, "klsssrv-Write", NULL);
	if (soap->error)
		return soap->error;
	
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
#ifndef WITH_LEANER
	 || soap_resolve_attachments(soap)
#endif
	 || soap_end_recv(soap))
		return soap->error;
	soap->error = klsssrv_Write(soap, soap_tmp_klsssrv_Write.wstrIdSSS, soap_tmp_klsssrv_Write.wstrProxyId, soap_tmp_klsssrv_Write.wstrName, soap_tmp_klsssrv_Write.wstrVersion, soap_tmp_klsssrv_Write.wstrSection, soap_tmp_klsssrv_Write.nFlags, soap_tmp_klsssrv_Write.data, r);
	if (soap->error)
		return soap->error;
	soap_serializeheader(soap);
	soap_serialize_klsssrv_WriteResponse(soap, &r);
	soap_begin_count(soap);
	if (soap->mode & SOAP_IO_LENGTH)
	{	soap_envelope_begin_out(soap);
		soap_putheader(soap);
		soap_body_begin_out(soap);
		soap_put_klsssrv_WriteResponse(soap, &r, "klsssrv-WriteResponse", "");
		soap_body_end_out(soap);
		soap_envelope_end_out(soap);
	};
	if (soap_response(soap, SOAP_OK)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put_klsssrv_WriteResponse(soap, &r, "klsssrv-WriteResponse", "")
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap->error;
	soap_closesock(soap);
	return SOAP_OK;
}

SOAP_FMAC5 int SOAP_FMAC6 soap_serve_klsssrv_CreateSection(struct soap *soap)
{	struct klsssrv_CreateSection soap_tmp_klsssrv_CreateSection;
	struct klsssrv_CreateSectionResponse r;
	soap_default_klsssrv_CreateSectionResponse(soap, &r);
	soap_default_klsssrv_CreateSection(soap, &soap_tmp_klsssrv_CreateSection);
	soap->encodingStyle = NULL;
	soap_get_klsssrv_CreateSection(soap, &soap_tmp_klsssrv_CreateSection, "klsssrv-CreateSection", NULL);
	if (soap->error)
		return soap->error;
	
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
#ifndef WITH_LEANER
	 || soap_resolve_attachments(soap)
#endif
	 || soap_end_recv(soap))
		return soap->error;
	soap->error = klsssrv_CreateSection(soap, soap_tmp_klsssrv_CreateSection.wstrIdSSS, soap_tmp_klsssrv_CreateSection.wstrProxyId, soap_tmp_klsssrv_CreateSection.wstrName, soap_tmp_klsssrv_CreateSection.wstrVersion, soap_tmp_klsssrv_CreateSection.wstrSection, r);
	if (soap->error)
		return soap->error;
	soap_serializeheader(soap);
	soap_serialize_klsssrv_CreateSectionResponse(soap, &r);
	soap_begin_count(soap);
	if (soap->mode & SOAP_IO_LENGTH)
	{	soap_envelope_begin_out(soap);
		soap_putheader(soap);
		soap_body_begin_out(soap);
		soap_put_klsssrv_CreateSectionResponse(soap, &r, "klsssrv-CreateSectionResponse", "");
		soap_body_end_out(soap);
		soap_envelope_end_out(soap);
	};
	if (soap_response(soap, SOAP_OK)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put_klsssrv_CreateSectionResponse(soap, &r, "klsssrv-CreateSectionResponse", "")
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap->error;
	soap_closesock(soap);
	return SOAP_OK;
}

SOAP_FMAC5 int SOAP_FMAC6 soap_serve_klsssrv_DeleteSection(struct soap *soap)
{	struct klsssrv_DeleteSection soap_tmp_klsssrv_DeleteSection;
	struct klsssrv_DeleteSectionResponse r;
	soap_default_klsssrv_DeleteSectionResponse(soap, &r);
	soap_default_klsssrv_DeleteSection(soap, &soap_tmp_klsssrv_DeleteSection);
	soap->encodingStyle = NULL;
	soap_get_klsssrv_DeleteSection(soap, &soap_tmp_klsssrv_DeleteSection, "klsssrv-DeleteSection", NULL);
	if (soap->error)
		return soap->error;
	
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
#ifndef WITH_LEANER
	 || soap_resolve_attachments(soap)
#endif
	 || soap_end_recv(soap))
		return soap->error;
	soap->error = klsssrv_DeleteSection(soap, soap_tmp_klsssrv_DeleteSection.wstrIdSSS, soap_tmp_klsssrv_DeleteSection.wstrProxyId, soap_tmp_klsssrv_DeleteSection.wstrName, soap_tmp_klsssrv_DeleteSection.wstrVersion, soap_tmp_klsssrv_DeleteSection.wstrSection, r);
	if (soap->error)
		return soap->error;
	soap_serializeheader(soap);
	soap_serialize_klsssrv_DeleteSectionResponse(soap, &r);
	soap_begin_count(soap);
	if (soap->mode & SOAP_IO_LENGTH)
	{	soap_envelope_begin_out(soap);
		soap_putheader(soap);
		soap_body_begin_out(soap);
		soap_put_klsssrv_DeleteSectionResponse(soap, &r, "klsssrv-DeleteSectionResponse", "");
		soap_body_end_out(soap);
		soap_envelope_end_out(soap);
	};
	if (soap_response(soap, SOAP_OK)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put_klsssrv_DeleteSectionResponse(soap, &r, "klsssrv-DeleteSectionResponse", "")
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap->error;
	soap_closesock(soap);
	return SOAP_OK;
}

SOAP_FMAC5 int SOAP_FMAC6 soap_serve_klsssrv_SetTimeout(struct soap *soap)
{	struct klsssrv_SetTimeout soap_tmp_klsssrv_SetTimeout;
	struct klsssrv_SetTimeoutResponse r;
	soap_default_klsssrv_SetTimeoutResponse(soap, &r);
	soap_default_klsssrv_SetTimeout(soap, &soap_tmp_klsssrv_SetTimeout);
	soap->encodingStyle = NULL;
	soap_get_klsssrv_SetTimeout(soap, &soap_tmp_klsssrv_SetTimeout, "klsssrv-SetTimeout", NULL);
	if (soap->error)
		return soap->error;
	
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
#ifndef WITH_LEANER
	 || soap_resolve_attachments(soap)
#endif
	 || soap_end_recv(soap))
		return soap->error;
	soap->error = klsssrv_SetTimeout(soap, soap_tmp_klsssrv_SetTimeout.wstrIdSSS, soap_tmp_klsssrv_SetTimeout.wstrProxyId, soap_tmp_klsssrv_SetTimeout.lTimeout, r);
	if (soap->error)
		return soap->error;
	soap_serializeheader(soap);
	soap_serialize_klsssrv_SetTimeoutResponse(soap, &r);
	soap_begin_count(soap);
	if (soap->mode & SOAP_IO_LENGTH)
	{	soap_envelope_begin_out(soap);
		soap_putheader(soap);
		soap_body_begin_out(soap);
		soap_put_klsssrv_SetTimeoutResponse(soap, &r, "klsssrv-SetTimeoutResponse", "");
		soap_body_end_out(soap);
		soap_envelope_end_out(soap);
	};
	if (soap_response(soap, SOAP_OK)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put_klsssrv_SetTimeoutResponse(soap, &r, "klsssrv-SetTimeoutResponse", "")
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap->error;
	soap_closesock(soap);
	return SOAP_OK;
}

SOAP_FMAC5 int SOAP_FMAC6 soap_serve_klsssrv_GetNames(struct soap *soap)
{	struct klsssrv_GetNames soap_tmp_klsssrv_GetNames;
	struct klsssrv_GetNamesResponse r;
	soap_default_klsssrv_GetNamesResponse(soap, &r);
	soap_default_klsssrv_GetNames(soap, &soap_tmp_klsssrv_GetNames);
	soap->encodingStyle = NULL;
	soap_get_klsssrv_GetNames(soap, &soap_tmp_klsssrv_GetNames, "klsssrv-GetNames", NULL);
	if (soap->error)
		return soap->error;
	
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
#ifndef WITH_LEANER
	 || soap_resolve_attachments(soap)
#endif
	 || soap_end_recv(soap))
		return soap->error;
	soap->error = klsssrv_GetNames(soap, soap_tmp_klsssrv_GetNames.wstrIdSSS, soap_tmp_klsssrv_GetNames.wstrProxyId, soap_tmp_klsssrv_GetNames.wstrName, soap_tmp_klsssrv_GetNames.wstrVersion, r);
	if (soap->error)
		return soap->error;
	soap_serializeheader(soap);
	soap_serialize_klsssrv_GetNamesResponse(soap, &r);
	soap_begin_count(soap);
	if (soap->mode & SOAP_IO_LENGTH)
	{	soap_envelope_begin_out(soap);
		soap_putheader(soap);
		soap_body_begin_out(soap);
		soap_put_klsssrv_GetNamesResponse(soap, &r, "klsssrv-GetNamesResponse", "");
		soap_body_end_out(soap);
		soap_envelope_end_out(soap);
	};
	if (soap_response(soap, SOAP_OK)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put_klsssrv_GetNamesResponse(soap, &r, "klsssrv-GetNamesResponse", "")
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap->error;
	soap_closesock(soap);
	return SOAP_OK;
}

SOAP_FMAC5 int SOAP_FMAC6 soap_serve_klsssrv_AttrRead(struct soap *soap)
{	struct klsssrv_AttrRead soap_tmp_klsssrv_AttrRead;
	struct klsssrv_AttrReadResponse r;
	soap_default_klsssrv_AttrReadResponse(soap, &r);
	soap_default_klsssrv_AttrRead(soap, &soap_tmp_klsssrv_AttrRead);
	soap->encodingStyle = NULL;
	soap_get_klsssrv_AttrRead(soap, &soap_tmp_klsssrv_AttrRead, "klsssrv-AttrRead", NULL);
	if (soap->error)
		return soap->error;
	
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
#ifndef WITH_LEANER
	 || soap_resolve_attachments(soap)
#endif
	 || soap_end_recv(soap))
		return soap->error;
	soap->error = klsssrv_AttrRead(soap, soap_tmp_klsssrv_AttrRead.wstrIdSSS, soap_tmp_klsssrv_AttrRead.wstrProxyId, soap_tmp_klsssrv_AttrRead.wstrName, soap_tmp_klsssrv_AttrRead.wstrVersion, soap_tmp_klsssrv_AttrRead.wstrSection, soap_tmp_klsssrv_AttrRead.wstrAttr, r);
	if (soap->error)
		return soap->error;
	soap_serializeheader(soap);
	soap_serialize_klsssrv_AttrReadResponse(soap, &r);
	soap_begin_count(soap);
	if (soap->mode & SOAP_IO_LENGTH)
	{	soap_envelope_begin_out(soap);
		soap_putheader(soap);
		soap_body_begin_out(soap);
		soap_put_klsssrv_AttrReadResponse(soap, &r, "klsssrv-AttrReadResponse", "");
		soap_body_end_out(soap);
		soap_envelope_end_out(soap);
	};
	if (soap_response(soap, SOAP_OK)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put_klsssrv_AttrReadResponse(soap, &r, "klsssrv-AttrReadResponse", "")
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap->error;
	soap_closesock(soap);
	return SOAP_OK;
}

SOAP_FMAC5 int SOAP_FMAC6 soap_serve_klagent_StartTaskStorageTask(struct soap *soap)
{	struct klagent_StartTaskStorageTask soap_tmp_klagent_StartTaskStorageTask;
	struct klagent_StartTaskStorageTaskResponse r;
	soap_default_klagent_StartTaskStorageTaskResponse(soap, &r);
	soap_default_klagent_StartTaskStorageTask(soap, &soap_tmp_klagent_StartTaskStorageTask);
	soap->encodingStyle = NULL;
	soap_get_klagent_StartTaskStorageTask(soap, &soap_tmp_klagent_StartTaskStorageTask, "klagent-StartTaskStorageTask", NULL);
	if (soap->error)
		return soap->error;
	
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
#ifndef WITH_LEANER
	 || soap_resolve_attachments(soap)
#endif
	 || soap_end_recv(soap))
		return soap->error;
	soap->error = klagent_StartTaskStorageTask(soap, soap_tmp_klagent_StartTaskStorageTask.idTask, soap_tmp_klagent_StartTaskStorageTask.luid, soap_tmp_klagent_StartTaskStorageTask.lTimeout, r);
	if (soap->error)
		return soap->error;
	soap_serializeheader(soap);
	soap_serialize_klagent_StartTaskStorageTaskResponse(soap, &r);
	soap_begin_count(soap);
	if (soap->mode & SOAP_IO_LENGTH)
	{	soap_envelope_begin_out(soap);
		soap_putheader(soap);
		soap_body_begin_out(soap);
		soap_put_klagent_StartTaskStorageTaskResponse(soap, &r, "klagent-StartTaskStorageTaskResponse", "");
		soap_body_end_out(soap);
		soap_envelope_end_out(soap);
	};
	if (soap_response(soap, SOAP_OK)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put_klagent_StartTaskStorageTaskResponse(soap, &r, "klagent-StartTaskStorageTaskResponse", "")
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap->error;
	soap_closesock(soap);
	return SOAP_OK;
}

SOAP_FMAC5 int SOAP_FMAC6 soap_serve_klagent_StartComponentEx(struct soap *soap)
{	struct klagent_StartComponentEx soap_tmp_klagent_StartComponentEx;
	struct klagent_StartComponentExResponse r;
	soap_default_klagent_StartComponentExResponse(soap, &r);
	soap_default_klagent_StartComponentEx(soap, &soap_tmp_klagent_StartComponentEx);
	soap->encodingStyle = NULL;
	soap_get_klagent_StartComponentEx(soap, &soap_tmp_klagent_StartComponentEx, "klagent-StartComponentEx", NULL);
	if (soap->error)
		return soap->error;
	
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
#ifndef WITH_LEANER
	 || soap_resolve_attachments(soap)
#endif
	 || soap_end_recv(soap))
		return soap->error;
	soap->error = klagent_StartComponentEx(soap, soap_tmp_klagent_StartComponentEx.componentId, soap_tmp_klagent_StartComponentEx.startParams, soap_tmp_klagent_StartComponentEx.asyncId, soap_tmp_klagent_StartComponentEx.flags, soap_tmp_klagent_StartComponentEx.asyncTimeout, soap_tmp_klagent_StartComponentEx.timeoutStop, soap_tmp_klagent_StartComponentEx.logonType, soap_tmp_klagent_StartComponentEx.user, soap_tmp_klagent_StartComponentEx.domain, soap_tmp_klagent_StartComponentEx.password, soap_tmp_klagent_StartComponentEx.extraInParams, r);
	if (soap->error)
		return soap->error;
	soap_serializeheader(soap);
	soap_serialize_klagent_StartComponentExResponse(soap, &r);
	soap_begin_count(soap);
	if (soap->mode & SOAP_IO_LENGTH)
	{	soap_envelope_begin_out(soap);
		soap_putheader(soap);
		soap_body_begin_out(soap);
		soap_put_klagent_StartComponentExResponse(soap, &r, "klagent-StartComponentExResponse", "");
		soap_body_end_out(soap);
		soap_envelope_end_out(soap);
	};
	if (soap_response(soap, SOAP_OK)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put_klagent_StartComponentExResponse(soap, &r, "klagent-StartComponentExResponse", "")
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap->error;
	soap_closesock(soap);
	return SOAP_OK;
}

SOAP_FMAC5 int SOAP_FMAC6 soap_serve_klagent_GetStartedComponentsList(struct soap *soap)
{	struct klagent_GetStartedComponentsList soap_tmp_klagent_GetStartedComponentsList;
	struct klagent_GetStartedComponentsListResponse r;
	soap_default_klagent_GetStartedComponentsListResponse(soap, &r);
	soap_default_klagent_GetStartedComponentsList(soap, &soap_tmp_klagent_GetStartedComponentsList);
	soap->encodingStyle = NULL;
	soap_get_klagent_GetStartedComponentsList(soap, &soap_tmp_klagent_GetStartedComponentsList, "klagent-GetStartedComponentsList", NULL);
	if (soap->error)
		return soap->error;
	
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
#ifndef WITH_LEANER
	 || soap_resolve_attachments(soap)
#endif
	 || soap_end_recv(soap))
		return soap->error;
	soap->error = klagent_GetStartedComponentsList(soap, soap_tmp_klagent_GetStartedComponentsList.filter, r);
	if (soap->error)
		return soap->error;
	soap_serializeheader(soap);
	soap_serialize_klagent_GetStartedComponentsListResponse(soap, &r);
	soap_begin_count(soap);
	if (soap->mode & SOAP_IO_LENGTH)
	{	soap_envelope_begin_out(soap);
		soap_putheader(soap);
		soap_body_begin_out(soap);
		soap_put_klagent_GetStartedComponentsListResponse(soap, &r, "klagent-GetStartedComponentsListResponse", "");
		soap_body_end_out(soap);
		soap_envelope_end_out(soap);
	};
	if (soap_response(soap, SOAP_OK)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put_klagent_GetStartedComponentsListResponse(soap, &r, "klagent-GetStartedComponentsListResponse", "")
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap->error;
	soap_closesock(soap);
	return SOAP_OK;
}

SOAP_FMAC5 int SOAP_FMAC6 soap_serve_klagent_IsComponentStarted(struct soap *soap)
{	struct klagent_IsComponentStarted soap_tmp_klagent_IsComponentStarted;
	struct klagent_IsComponentStartedResponse r;
	soap_default_klagent_IsComponentStartedResponse(soap, &r);
	soap_default_klagent_IsComponentStarted(soap, &soap_tmp_klagent_IsComponentStarted);
	soap->encodingStyle = NULL;
	soap_get_klagent_IsComponentStarted(soap, &soap_tmp_klagent_IsComponentStarted, "klagent-IsComponentStarted", NULL);
	if (soap->error)
		return soap->error;
	
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
#ifndef WITH_LEANER
	 || soap_resolve_attachments(soap)
#endif
	 || soap_end_recv(soap))
		return soap->error;
	soap->error = klagent_IsComponentStarted(soap, soap_tmp_klagent_IsComponentStarted.componentId, r);
	if (soap->error)
		return soap->error;
	soap_serializeheader(soap);
	soap_serialize_klagent_IsComponentStartedResponse(soap, &r);
	soap_begin_count(soap);
	if (soap->mode & SOAP_IO_LENGTH)
	{	soap_envelope_begin_out(soap);
		soap_putheader(soap);
		soap_body_begin_out(soap);
		soap_put_klagent_IsComponentStartedResponse(soap, &r, "klagent-IsComponentStartedResponse", "");
		soap_body_end_out(soap);
		soap_envelope_end_out(soap);
	};
	if (soap_response(soap, SOAP_OK)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put_klagent_IsComponentStartedResponse(soap, &r, "klagent-IsComponentStartedResponse", "")
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap->error;
	soap_closesock(soap);
	return SOAP_OK;
}

SOAP_FMAC5 int SOAP_FMAC6 soap_serve_klagent_GetComponentStartParameters(struct soap *soap)
{	struct klagent_GetComponentStartParameters soap_tmp_klagent_GetComponentStartParameters;
	struct klagent_GetComponentStartParametersResponse r;
	soap_default_klagent_GetComponentStartParametersResponse(soap, &r);
	soap_default_klagent_GetComponentStartParameters(soap, &soap_tmp_klagent_GetComponentStartParameters);
	soap->encodingStyle = NULL;
	soap_get_klagent_GetComponentStartParameters(soap, &soap_tmp_klagent_GetComponentStartParameters, "klagent-GetComponentStartParameters", NULL);
	if (soap->error)
		return soap->error;
	
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
#ifndef WITH_LEANER
	 || soap_resolve_attachments(soap)
#endif
	 || soap_end_recv(soap))
		return soap->error;
	soap->error = klagent_GetComponentStartParameters(soap, soap_tmp_klagent_GetComponentStartParameters.componentId, r);
	if (soap->error)
		return soap->error;
	soap_serializeheader(soap);
	soap_serialize_klagent_GetComponentStartParametersResponse(soap, &r);
	soap_begin_count(soap);
	if (soap->mode & SOAP_IO_LENGTH)
	{	soap_envelope_begin_out(soap);
		soap_putheader(soap);
		soap_body_begin_out(soap);
		soap_put_klagent_GetComponentStartParametersResponse(soap, &r, "klagent-GetComponentStartParametersResponse", "");
		soap_body_end_out(soap);
		soap_envelope_end_out(soap);
	};
	if (soap_response(soap, SOAP_OK)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put_klagent_GetComponentStartParametersResponse(soap, &r, "klagent-GetComponentStartParametersResponse", "")
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap->error;
	soap_closesock(soap);
	return SOAP_OK;
}

SOAP_FMAC5 int SOAP_FMAC6 soap_serve_klagent_GetComponentPort(struct soap *soap)
{	struct klagent_GetComponentPort soap_tmp_klagent_GetComponentPort;
	struct klagent_GetComponentPortResponse r;
	soap_default_klagent_GetComponentPortResponse(soap, &r);
	soap_default_klagent_GetComponentPort(soap, &soap_tmp_klagent_GetComponentPort);
	soap->encodingStyle = NULL;
	soap_get_klagent_GetComponentPort(soap, &soap_tmp_klagent_GetComponentPort, "klagent-GetComponentPort", NULL);
	if (soap->error)
		return soap->error;
	
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
#ifndef WITH_LEANER
	 || soap_resolve_attachments(soap)
#endif
	 || soap_end_recv(soap))
		return soap->error;
	soap->error = klagent_GetComponentPort(soap, soap_tmp_klagent_GetComponentPort.componentId, r);
	if (soap->error)
		return soap->error;
	soap_serializeheader(soap);
	soap_serialize_klagent_GetComponentPortResponse(soap, &r);
	soap_begin_count(soap);
	if (soap->mode & SOAP_IO_LENGTH)
	{	soap_envelope_begin_out(soap);
		soap_putheader(soap);
		soap_body_begin_out(soap);
		soap_put_klagent_GetComponentPortResponse(soap, &r, "klagent-GetComponentPortResponse", "");
		soap_body_end_out(soap);
		soap_envelope_end_out(soap);
	};
	if (soap_response(soap, SOAP_OK)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put_klagent_GetComponentPortResponse(soap, &r, "klagent-GetComponentPortResponse", "")
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap->error;
	soap_closesock(soap);
	return SOAP_OK;
}

SOAP_FMAC5 int SOAP_FMAC6 soap_serve_klevprop_ResetIterator(struct soap *soap)
{	struct klevprop_ResetIterator soap_tmp_klevprop_ResetIterator;
	struct klevprop_ResetIteratorResponse r;
	soap_default_klevprop_ResetIteratorResponse(soap, &r);
	soap_default_klevprop_ResetIterator(soap, &soap_tmp_klevprop_ResetIterator);
	soap->encodingStyle = NULL;
	soap_get_klevprop_ResetIterator(soap, &soap_tmp_klevprop_ResetIterator, "klevprop-ResetIterator", NULL);
	if (soap->error)
		return soap->error;
	
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
#ifndef WITH_LEANER
	 || soap_resolve_attachments(soap)
#endif
	 || soap_end_recv(soap))
		return soap->error;
	soap->error = klevprop_ResetIterator(soap, soap_tmp_klevprop_ResetIterator.type, soap_tmp_klevprop_ResetIterator.paramIteratorDescr, soap_tmp_klevprop_ResetIterator.fields, soap_tmp_klevprop_ResetIterator.fields_to_order, soap_tmp_klevprop_ResetIterator.lifetime, r);
	if (soap->error)
		return soap->error;
	soap_serializeheader(soap);
	soap_serialize_klevprop_ResetIteratorResponse(soap, &r);
	soap_begin_count(soap);
	if (soap->mode & SOAP_IO_LENGTH)
	{	soap_envelope_begin_out(soap);
		soap_putheader(soap);
		soap_body_begin_out(soap);
		soap_put_klevprop_ResetIteratorResponse(soap, &r, "klevprop-ResetIteratorResponse", "");
		soap_body_end_out(soap);
		soap_envelope_end_out(soap);
	};
	if (soap_response(soap, SOAP_OK)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put_klevprop_ResetIteratorResponse(soap, &r, "klevprop-ResetIteratorResponse", "")
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap->error;
	soap_closesock(soap);
	return SOAP_OK;
}

SOAP_FMAC5 int SOAP_FMAC6 soap_serve_klevprop_GetRecordCount(struct soap *soap)
{	struct klevprop_GetRecordCount soap_tmp_klevprop_GetRecordCount;
	struct klevprop_GetRecordCountResponse r;
	soap_default_klevprop_GetRecordCountResponse(soap, &r);
	soap_default_klevprop_GetRecordCount(soap, &soap_tmp_klevprop_GetRecordCount);
	soap->encodingStyle = NULL;
	soap_get_klevprop_GetRecordCount(soap, &soap_tmp_klevprop_GetRecordCount, "klevprop-GetRecordCount", NULL);
	if (soap->error)
		return soap->error;
	
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
#ifndef WITH_LEANER
	 || soap_resolve_attachments(soap)
#endif
	 || soap_end_recv(soap))
		return soap->error;
	soap->error = klevprop_GetRecordCount(soap, soap_tmp_klevprop_GetRecordCount.iteratorId, r);
	if (soap->error)
		return soap->error;
	soap_serializeheader(soap);
	soap_serialize_klevprop_GetRecordCountResponse(soap, &r);
	soap_begin_count(soap);
	if (soap->mode & SOAP_IO_LENGTH)
	{	soap_envelope_begin_out(soap);
		soap_putheader(soap);
		soap_body_begin_out(soap);
		soap_put_klevprop_GetRecordCountResponse(soap, &r, "klevprop-GetRecordCountResponse", "");
		soap_body_end_out(soap);
		soap_envelope_end_out(soap);
	};
	if (soap_response(soap, SOAP_OK)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put_klevprop_GetRecordCountResponse(soap, &r, "klevprop-GetRecordCountResponse", "")
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap->error;
	soap_closesock(soap);
	return SOAP_OK;
}

SOAP_FMAC5 int SOAP_FMAC6 soap_serve_klevprop_GetRecordRange(struct soap *soap)
{	struct klevprop_GetRecordRange soap_tmp_klevprop_GetRecordRange;
	struct klevprop_GetRecordRangeResponse r;
	soap_default_klevprop_GetRecordRangeResponse(soap, &r);
	soap_default_klevprop_GetRecordRange(soap, &soap_tmp_klevprop_GetRecordRange);
	soap->encodingStyle = NULL;
	soap_get_klevprop_GetRecordRange(soap, &soap_tmp_klevprop_GetRecordRange, "klevprop-GetRecordRange", NULL);
	if (soap->error)
		return soap->error;
	
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
#ifndef WITH_LEANER
	 || soap_resolve_attachments(soap)
#endif
	 || soap_end_recv(soap))
		return soap->error;
	soap->error = klevprop_GetRecordRange(soap, soap_tmp_klevprop_GetRecordRange.iteratorId, soap_tmp_klevprop_GetRecordRange.nStart, soap_tmp_klevprop_GetRecordRange.nEnd, r);
	if (soap->error)
		return soap->error;
	soap_serializeheader(soap);
	soap_serialize_klevprop_GetRecordRangeResponse(soap, &r);
	soap_begin_count(soap);
	if (soap->mode & SOAP_IO_LENGTH)
	{	soap_envelope_begin_out(soap);
		soap_putheader(soap);
		soap_body_begin_out(soap);
		soap_put_klevprop_GetRecordRangeResponse(soap, &r, "klevprop-GetRecordRangeResponse", "");
		soap_body_end_out(soap);
		soap_envelope_end_out(soap);
	};
	if (soap_response(soap, SOAP_OK)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put_klevprop_GetRecordRangeResponse(soap, &r, "klevprop-GetRecordRangeResponse", "")
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap->error;
	soap_closesock(soap);
	return SOAP_OK;
}

SOAP_FMAC5 int SOAP_FMAC6 soap_serve_klevprop_FindRecordByFirstChars(struct soap *soap)
{	struct klevprop_FindRecordByFirstChars soap_tmp_klevprop_FindRecordByFirstChars;
	struct klevprop_FindRecordByFirstCharsResponse r;
	soap_default_klevprop_FindRecordByFirstCharsResponse(soap, &r);
	soap_default_klevprop_FindRecordByFirstChars(soap, &soap_tmp_klevprop_FindRecordByFirstChars);
	soap->encodingStyle = NULL;
	soap_get_klevprop_FindRecordByFirstChars(soap, &soap_tmp_klevprop_FindRecordByFirstChars, "klevprop-FindRecordByFirstChars", NULL);
	if (soap->error)
		return soap->error;
	
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
#ifndef WITH_LEANER
	 || soap_resolve_attachments(soap)
#endif
	 || soap_end_recv(soap))
		return soap->error;
	soap->error = klevprop_FindRecordByFirstChars(soap, soap_tmp_klevprop_FindRecordByFirstChars.iteratorId, soap_tmp_klevprop_FindRecordByFirstChars.wstrFieldToSearch, soap_tmp_klevprop_FindRecordByFirstChars.wstrFirstChars, r);
	if (soap->error)
		return soap->error;
	soap_serializeheader(soap);
	soap_serialize_klevprop_FindRecordByFirstCharsResponse(soap, &r);
	soap_begin_count(soap);
	if (soap->mode & SOAP_IO_LENGTH)
	{	soap_envelope_begin_out(soap);
		soap_putheader(soap);
		soap_body_begin_out(soap);
		soap_put_klevprop_FindRecordByFirstCharsResponse(soap, &r, "klevprop-FindRecordByFirstCharsResponse", "");
		soap_body_end_out(soap);
		soap_envelope_end_out(soap);
	};
	if (soap_response(soap, SOAP_OK)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put_klevprop_FindRecordByFirstCharsResponse(soap, &r, "klevprop-FindRecordByFirstCharsResponse", "")
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap->error;
	soap_closesock(soap);
	return SOAP_OK;
}

SOAP_FMAC5 int SOAP_FMAC6 soap_serve_klevprop_DeleteProperties(struct soap *soap)
{	struct klevprop_DeleteProperties soap_tmp_klevprop_DeleteProperties;
	struct klevprop_DeletePropertiesResponse r;
	soap_default_klevprop_DeletePropertiesResponse(soap, &r);
	soap_default_klevprop_DeleteProperties(soap, &soap_tmp_klevprop_DeleteProperties);
	soap->encodingStyle = NULL;
	soap_get_klevprop_DeleteProperties(soap, &soap_tmp_klevprop_DeleteProperties, "klevprop-DeleteProperties", NULL);
	if (soap->error)
		return soap->error;
	
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
#ifndef WITH_LEANER
	 || soap_resolve_attachments(soap)
#endif
	 || soap_end_recv(soap))
		return soap->error;
	soap->error = klevprop_DeleteProperties(soap, soap_tmp_klevprop_DeleteProperties.id_array, r);
	if (soap->error)
		return soap->error;
	soap_serializeheader(soap);
	soap_serialize_klevprop_DeletePropertiesResponse(soap, &r);
	soap_begin_count(soap);
	if (soap->mode & SOAP_IO_LENGTH)
	{	soap_envelope_begin_out(soap);
		soap_putheader(soap);
		soap_body_begin_out(soap);
		soap_put_klevprop_DeletePropertiesResponse(soap, &r, "klevprop-DeletePropertiesResponse", "");
		soap_body_end_out(soap);
		soap_envelope_end_out(soap);
	};
	if (soap_response(soap, SOAP_OK)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put_klevprop_DeletePropertiesResponse(soap, &r, "klevprop-DeletePropertiesResponse", "")
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap->error;
	soap_closesock(soap);
	return SOAP_OK;
}

SOAP_FMAC5 int SOAP_FMAC6 soap_serve_klevprop_InitiateDelete(struct soap *soap)
{	struct klevprop_InitiateDelete soap_tmp_klevprop_InitiateDelete;
	struct klevprop_InitiateDeleteResponse r;
	soap_default_klevprop_InitiateDeleteResponse(soap, &r);
	soap_default_klevprop_InitiateDelete(soap, &soap_tmp_klevprop_InitiateDelete);
	soap->encodingStyle = NULL;
	soap_get_klevprop_InitiateDelete(soap, &soap_tmp_klevprop_InitiateDelete, "klevprop-InitiateDelete", NULL);
	if (soap->error)
		return soap->error;
	
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
#ifndef WITH_LEANER
	 || soap_resolve_attachments(soap)
#endif
	 || soap_end_recv(soap))
		return soap->error;
	soap->error = klevprop_InitiateDelete(soap, soap_tmp_klevprop_InitiateDelete.paramSettings, r);
	if (soap->error)
		return soap->error;
	soap_serializeheader(soap);
	soap_serialize_klevprop_InitiateDeleteResponse(soap, &r);
	soap_begin_count(soap);
	if (soap->mode & SOAP_IO_LENGTH)
	{	soap_envelope_begin_out(soap);
		soap_putheader(soap);
		soap_body_begin_out(soap);
		soap_put_klevprop_InitiateDeleteResponse(soap, &r, "klevprop-InitiateDeleteResponse", "");
		soap_body_end_out(soap);
		soap_envelope_end_out(soap);
	};
	if (soap_response(soap, SOAP_OK)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put_klevprop_InitiateDeleteResponse(soap, &r, "klevprop-InitiateDeleteResponse", "")
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap->error;
	soap_closesock(soap);
	return SOAP_OK;
}

SOAP_FMAC5 int SOAP_FMAC6 soap_serve_klevprop_CancelDelete(struct soap *soap)
{	struct klevprop_CancelDelete soap_tmp_klevprop_CancelDelete;
	struct klevprop_CancelDeleteResponse r;
	soap_default_klevprop_CancelDeleteResponse(soap, &r);
	soap_default_klevprop_CancelDelete(soap, &soap_tmp_klevprop_CancelDelete);
	soap->encodingStyle = NULL;
	soap_get_klevprop_CancelDelete(soap, &soap_tmp_klevprop_CancelDelete, "klevprop-CancelDelete", NULL);
	if (soap->error)
		return soap->error;
	
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
#ifndef WITH_LEANER
	 || soap_resolve_attachments(soap)
#endif
	 || soap_end_recv(soap))
		return soap->error;
	soap->error = klevprop_CancelDelete(soap, soap_tmp_klevprop_CancelDelete.paramSettings, r);
	if (soap->error)
		return soap->error;
	soap_serializeheader(soap);
	soap_serialize_klevprop_CancelDeleteResponse(soap, &r);
	soap_begin_count(soap);
	if (soap->mode & SOAP_IO_LENGTH)
	{	soap_envelope_begin_out(soap);
		soap_putheader(soap);
		soap_body_begin_out(soap);
		soap_put_klevprop_CancelDeleteResponse(soap, &r, "klevprop-CancelDeleteResponse", "");
		soap_body_end_out(soap);
		soap_envelope_end_out(soap);
	};
	if (soap_response(soap, SOAP_OK)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put_klevprop_CancelDeleteResponse(soap, &r, "klevprop-CancelDeleteResponse", "")
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap->error;
	soap_closesock(soap);
	return SOAP_OK;
}

SOAP_FMAC5 int SOAP_FMAC6 soap_serve_klevprop_ReleaseIterator(struct soap *soap)
{	struct klevprop_ReleaseIterator soap_tmp_klevprop_ReleaseIterator;
	struct klevprop_ReleaseIteratorResponse r;
	soap_default_klevprop_ReleaseIteratorResponse(soap, &r);
	soap_default_klevprop_ReleaseIterator(soap, &soap_tmp_klevprop_ReleaseIterator);
	soap->encodingStyle = NULL;
	soap_get_klevprop_ReleaseIterator(soap, &soap_tmp_klevprop_ReleaseIterator, "klevprop-ReleaseIterator", NULL);
	if (soap->error)
		return soap->error;
	
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
#ifndef WITH_LEANER
	 || soap_resolve_attachments(soap)
#endif
	 || soap_end_recv(soap))
		return soap->error;
	soap->error = klevprop_ReleaseIterator(soap, soap_tmp_klevprop_ReleaseIterator.iteratorId, r);
	if (soap->error)
		return soap->error;
	soap_serializeheader(soap);
	soap_serialize_klevprop_ReleaseIteratorResponse(soap, &r);
	soap_begin_count(soap);
	if (soap->mode & SOAP_IO_LENGTH)
	{	soap_envelope_begin_out(soap);
		soap_putheader(soap);
		soap_body_begin_out(soap);
		soap_put_klevprop_ReleaseIteratorResponse(soap, &r, "klevprop-ReleaseIteratorResponse", "");
		soap_body_end_out(soap);
		soap_envelope_end_out(soap);
	};
	if (soap_response(soap, SOAP_OK)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put_klevprop_ReleaseIteratorResponse(soap, &r, "klevprop-ReleaseIteratorResponse", "")
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap->error;
	soap_closesock(soap);
	return SOAP_OK;
}

SOAP_FMAC5 int SOAP_FMAC6 soap_serve_klevproc_Process(struct soap *soap)
{	struct klevproc_Process soap_tmp_klevproc_Process;
	struct klevproc_ProcessResponse r;
	soap_default_klevproc_ProcessResponse(soap, &r);
	soap_default_klevproc_Process(soap, &soap_tmp_klevproc_Process);
	soap->encodingStyle = NULL;
	soap_get_klevproc_Process(soap, &soap_tmp_klevproc_Process, "klevproc-Process", NULL);
	if (soap->error)
		return soap->error;
	
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
#ifndef WITH_LEANER
	 || soap_resolve_attachments(soap)
#endif
	 || soap_end_recv(soap))
		return soap->error;
	soap->error = klevproc_Process(soap, soap_tmp_klevproc_Process.parEventInfoArray, soap_tmp_klevproc_Process.deliveryId, soap_tmp_klevproc_Process.domain, soap_tmp_klevproc_Process.hostName, soap_tmp_klevproc_Process.agentId, r);
	if (soap->error)
		return soap->error;
	soap_serializeheader(soap);
	soap_serialize_klevproc_ProcessResponse(soap, &r);
	soap_begin_count(soap);
	if (soap->mode & SOAP_IO_LENGTH)
	{	soap_envelope_begin_out(soap);
		soap_putheader(soap);
		soap_body_begin_out(soap);
		soap_put_klevproc_ProcessResponse(soap, &r, "klevproc-ProcessResponse", "");
		soap_body_end_out(soap);
		soap_envelope_end_out(soap);
	};
	if (soap_response(soap, SOAP_OK)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put_klevproc_ProcessResponse(soap, &r, "klevproc-ProcessResponse", "")
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap->error;
	soap_closesock(soap);
	return SOAP_OK;
}

SOAP_FMAC5 int SOAP_FMAC6 soap_serve_klevpnp_GetDefaultSettings(struct soap *soap)
{	struct klevpnp_GetDefaultSettings soap_tmp_klevpnp_GetDefaultSettings;
	struct klevpnp_GetDefaultSettingsResponse r;
	soap_default_klevpnp_GetDefaultSettingsResponse(soap, &r);
	soap_default_klevpnp_GetDefaultSettings(soap, &soap_tmp_klevpnp_GetDefaultSettings);
	soap->encodingStyle = NULL;
	soap_get_klevpnp_GetDefaultSettings(soap, &soap_tmp_klevpnp_GetDefaultSettings, "klevpnp-GetDefaultSettings", NULL);
	if (soap->error)
		return soap->error;
	
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
#ifndef WITH_LEANER
	 || soap_resolve_attachments(soap)
#endif
	 || soap_end_recv(soap))
		return soap->error;
	soap->error = klevpnp_GetDefaultSettings(soap, soap_tmp_klevpnp_GetDefaultSettings._, r);
	if (soap->error)
		return soap->error;
	soap_serializeheader(soap);
	soap_serialize_klevpnp_GetDefaultSettingsResponse(soap, &r);
	soap_begin_count(soap);
	if (soap->mode & SOAP_IO_LENGTH)
	{	soap_envelope_begin_out(soap);
		soap_putheader(soap);
		soap_body_begin_out(soap);
		soap_put_klevpnp_GetDefaultSettingsResponse(soap, &r, "klevpnp-GetDefaultSettingsResponse", "");
		soap_body_end_out(soap);
		soap_envelope_end_out(soap);
	};
	if (soap_response(soap, SOAP_OK)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put_klevpnp_GetDefaultSettingsResponse(soap, &r, "klevpnp-GetDefaultSettingsResponse", "")
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap->error;
	soap_closesock(soap);
	return SOAP_OK;
}

SOAP_FMAC5 int SOAP_FMAC6 soap_serve_klevpnp_SetDefaultSettings(struct soap *soap)
{	struct klevpnp_SetDefaultSettings soap_tmp_klevpnp_SetDefaultSettings;
	struct klevpnp_SetDefaultSettingsResponse r;
	soap_default_klevpnp_SetDefaultSettingsResponse(soap, &r);
	soap_default_klevpnp_SetDefaultSettings(soap, &soap_tmp_klevpnp_SetDefaultSettings);
	soap->encodingStyle = NULL;
	soap_get_klevpnp_SetDefaultSettings(soap, &soap_tmp_klevpnp_SetDefaultSettings, "klevpnp-SetDefaultSettings", NULL);
	if (soap->error)
		return soap->error;
	
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
#ifndef WITH_LEANER
	 || soap_resolve_attachments(soap)
#endif
	 || soap_end_recv(soap))
		return soap->error;
	soap->error = klevpnp_SetDefaultSettings(soap, soap_tmp_klevpnp_SetDefaultSettings.paramDefaultSettings, r);
	if (soap->error)
		return soap->error;
	soap_serializeheader(soap);
	soap_serialize_klevpnp_SetDefaultSettingsResponse(soap, &r);
	soap_begin_count(soap);
	if (soap->mode & SOAP_IO_LENGTH)
	{	soap_envelope_begin_out(soap);
		soap_putheader(soap);
		soap_body_begin_out(soap);
		soap_put_klevpnp_SetDefaultSettingsResponse(soap, &r, "klevpnp-SetDefaultSettingsResponse", "");
		soap_body_end_out(soap);
		soap_envelope_end_out(soap);
	};
	if (soap_response(soap, SOAP_OK)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put_klevpnp_SetDefaultSettingsResponse(soap, &r, "klevpnp-SetDefaultSettingsResponse", "")
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap->error;
	soap_closesock(soap);
	return SOAP_OK;
}

SOAP_FMAC5 int SOAP_FMAC6 soap_serve_klevpnp_TestNotification(struct soap *soap)
{	struct klevpnp_TestNotification soap_tmp_klevpnp_TestNotification;
	struct klevpnp_TestNotificationResponse r;
	soap_default_klevpnp_TestNotificationResponse(soap, &r);
	soap_default_klevpnp_TestNotification(soap, &soap_tmp_klevpnp_TestNotification);
	soap->encodingStyle = NULL;
	soap_get_klevpnp_TestNotification(soap, &soap_tmp_klevpnp_TestNotification, "klevpnp-TestNotification", NULL);
	if (soap->error)
		return soap->error;
	
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
#ifndef WITH_LEANER
	 || soap_resolve_attachments(soap)
#endif
	 || soap_end_recv(soap))
		return soap->error;
	soap->error = klevpnp_TestNotification(soap, soap_tmp_klevpnp_TestNotification.paramSettings, r);
	if (soap->error)
		return soap->error;
	soap_serializeheader(soap);
	soap_serialize_klevpnp_TestNotificationResponse(soap, &r);
	soap_begin_count(soap);
	if (soap->mode & SOAP_IO_LENGTH)
	{	soap_envelope_begin_out(soap);
		soap_putheader(soap);
		soap_body_begin_out(soap);
		soap_put_klevpnp_TestNotificationResponse(soap, &r, "klevpnp-TestNotificationResponse", "");
		soap_body_end_out(soap);
		soap_envelope_end_out(soap);
	};
	if (soap_response(soap, SOAP_OK)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put_klevpnp_TestNotificationResponse(soap, &r, "klevpnp-TestNotificationResponse", "")
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap->error;
	soap_closesock(soap);
	return SOAP_OK;
}

SOAP_FMAC5 int SOAP_FMAC6 soap_serve_klevpnp_SetNotificationLimits(struct soap *soap)
{	struct klevpnp_SetNotificationLimits soap_tmp_klevpnp_SetNotificationLimits;
	struct klevpnp_SetNotificationLimitsResponse r;
	soap_default_klevpnp_SetNotificationLimitsResponse(soap, &r);
	soap_default_klevpnp_SetNotificationLimits(soap, &soap_tmp_klevpnp_SetNotificationLimits);
	soap->encodingStyle = NULL;
	soap_get_klevpnp_SetNotificationLimits(soap, &soap_tmp_klevpnp_SetNotificationLimits, "klevpnp-SetNotificationLimits", NULL);
	if (soap->error)
		return soap->error;
	
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
#ifndef WITH_LEANER
	 || soap_resolve_attachments(soap)
#endif
	 || soap_end_recv(soap))
		return soap->error;
	soap->error = klevpnp_SetNotificationLimits(soap, soap_tmp_klevpnp_SetNotificationLimits.paramSettings, r);
	if (soap->error)
		return soap->error;
	soap_serializeheader(soap);
	soap_serialize_klevpnp_SetNotificationLimitsResponse(soap, &r);
	soap_begin_count(soap);
	if (soap->mode & SOAP_IO_LENGTH)
	{	soap_envelope_begin_out(soap);
		soap_putheader(soap);
		soap_body_begin_out(soap);
		soap_put_klevpnp_SetNotificationLimitsResponse(soap, &r, "klevpnp-SetNotificationLimitsResponse", "");
		soap_body_end_out(soap);
		soap_envelope_end_out(soap);
	};
	if (soap_response(soap, SOAP_OK)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put_klevpnp_SetNotificationLimitsResponse(soap, &r, "klevpnp-SetNotificationLimitsResponse", "")
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap->error;
	soap_closesock(soap);
	return SOAP_OK;
}

SOAP_FMAC5 int SOAP_FMAC6 soap_serve_klevpnp_GetNotificationLimits(struct soap *soap)
{	struct klevpnp_GetNotificationLimits soap_tmp_klevpnp_GetNotificationLimits;
	struct klevpnp_GetNotificationLimitsResponse r;
	soap_default_klevpnp_GetNotificationLimitsResponse(soap, &r);
	soap_default_klevpnp_GetNotificationLimits(soap, &soap_tmp_klevpnp_GetNotificationLimits);
	soap->encodingStyle = NULL;
	soap_get_klevpnp_GetNotificationLimits(soap, &soap_tmp_klevpnp_GetNotificationLimits, "klevpnp-GetNotificationLimits", NULL);
	if (soap->error)
		return soap->error;
	
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
#ifndef WITH_LEANER
	 || soap_resolve_attachments(soap)
#endif
	 || soap_end_recv(soap))
		return soap->error;
	soap->error = klevpnp_GetNotificationLimits(soap, soap_tmp_klevpnp_GetNotificationLimits._, r);
	if (soap->error)
		return soap->error;
	soap_serializeheader(soap);
	soap_serialize_klevpnp_GetNotificationLimitsResponse(soap, &r);
	soap_begin_count(soap);
	if (soap->mode & SOAP_IO_LENGTH)
	{	soap_envelope_begin_out(soap);
		soap_putheader(soap);
		soap_body_begin_out(soap);
		soap_put_klevpnp_GetNotificationLimitsResponse(soap, &r, "klevpnp-GetNotificationLimitsResponse", "");
		soap_body_end_out(soap);
		soap_envelope_end_out(soap);
	};
	if (soap_response(soap, SOAP_OK)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put_klevpnp_GetNotificationLimitsResponse(soap, &r, "klevpnp-GetNotificationLimitsResponse", "")
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap->error;
	soap_closesock(soap);
	return SOAP_OK;
}

SOAP_FMAC5 int SOAP_FMAC6 soap_serve_klevpnp_GetCommonProperties(struct soap *soap)
{	struct klevpnp_GetCommonProperties soap_tmp_klevpnp_GetCommonProperties;
	struct klevpnp_GetCommonPropertiesResponse r;
	soap_default_klevpnp_GetCommonPropertiesResponse(soap, &r);
	soap_default_klevpnp_GetCommonProperties(soap, &soap_tmp_klevpnp_GetCommonProperties);
	soap->encodingStyle = NULL;
	soap_get_klevpnp_GetCommonProperties(soap, &soap_tmp_klevpnp_GetCommonProperties, "klevpnp-GetCommonProperties", NULL);
	if (soap->error)
		return soap->error;
	
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
#ifndef WITH_LEANER
	 || soap_resolve_attachments(soap)
#endif
	 || soap_end_recv(soap))
		return soap->error;
	soap->error = klevpnp_GetCommonProperties(soap, soap_tmp_klevpnp_GetCommonProperties._, r);
	if (soap->error)
		return soap->error;
	soap_serializeheader(soap);
	soap_serialize_klevpnp_GetCommonPropertiesResponse(soap, &r);
	soap_begin_count(soap);
	if (soap->mode & SOAP_IO_LENGTH)
	{	soap_envelope_begin_out(soap);
		soap_putheader(soap);
		soap_body_begin_out(soap);
		soap_put_klevpnp_GetCommonPropertiesResponse(soap, &r, "klevpnp-GetCommonPropertiesResponse", "");
		soap_body_end_out(soap);
		soap_envelope_end_out(soap);
	};
	if (soap_response(soap, SOAP_OK)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put_klevpnp_GetCommonPropertiesResponse(soap, &r, "klevpnp-GetCommonPropertiesResponse", "")
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap->error;
	soap_closesock(soap);
	return SOAP_OK;
}

SOAP_FMAC5 int SOAP_FMAC6 soap_serve_klevpnp_GetGroupProperties(struct soap *soap)
{	struct klevpnp_GetGroupProperties soap_tmp_klevpnp_GetGroupProperties;
	struct klevpnp_GetGroupPropertiesResponse r;
	soap_default_klevpnp_GetGroupPropertiesResponse(soap, &r);
	soap_default_klevpnp_GetGroupProperties(soap, &soap_tmp_klevpnp_GetGroupProperties);
	soap->encodingStyle = NULL;
	soap_get_klevpnp_GetGroupProperties(soap, &soap_tmp_klevpnp_GetGroupProperties, "klevpnp-GetGroupProperties", NULL);
	if (soap->error)
		return soap->error;
	
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
#ifndef WITH_LEANER
	 || soap_resolve_attachments(soap)
#endif
	 || soap_end_recv(soap))
		return soap->error;
	soap->error = klevpnp_GetGroupProperties(soap, soap_tmp_klevpnp_GetGroupProperties.nGroupId, r);
	if (soap->error)
		return soap->error;
	soap_serializeheader(soap);
	soap_serialize_klevpnp_GetGroupPropertiesResponse(soap, &r);
	soap_begin_count(soap);
	if (soap->mode & SOAP_IO_LENGTH)
	{	soap_envelope_begin_out(soap);
		soap_putheader(soap);
		soap_body_begin_out(soap);
		soap_put_klevpnp_GetGroupPropertiesResponse(soap, &r, "klevpnp-GetGroupPropertiesResponse", "");
		soap_body_end_out(soap);
		soap_envelope_end_out(soap);
	};
	if (soap_response(soap, SOAP_OK)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put_klevpnp_GetGroupPropertiesResponse(soap, &r, "klevpnp-GetGroupPropertiesResponse", "")
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap->error;
	soap_closesock(soap);
	return SOAP_OK;
}

SOAP_FMAC5 int SOAP_FMAC6 soap_serve_klevpnp_GetTaskProperties(struct soap *soap)
{	struct klevpnp_GetTaskProperties soap_tmp_klevpnp_GetTaskProperties;
	struct klevpnp_GetTaskPropertiesResponse r;
	soap_default_klevpnp_GetTaskPropertiesResponse(soap, &r);
	soap_default_klevpnp_GetTaskProperties(soap, &soap_tmp_klevpnp_GetTaskProperties);
	soap->encodingStyle = NULL;
	soap_get_klevpnp_GetTaskProperties(soap, &soap_tmp_klevpnp_GetTaskProperties, "klevpnp-GetTaskProperties", NULL);
	if (soap->error)
		return soap->error;
	
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
#ifndef WITH_LEANER
	 || soap_resolve_attachments(soap)
#endif
	 || soap_end_recv(soap))
		return soap->error;
	soap->error = klevpnp_GetTaskProperties(soap, soap_tmp_klevpnp_GetTaskProperties.wstrTaskId, r);
	if (soap->error)
		return soap->error;
	soap_serializeheader(soap);
	soap_serialize_klevpnp_GetTaskPropertiesResponse(soap, &r);
	soap_begin_count(soap);
	if (soap->mode & SOAP_IO_LENGTH)
	{	soap_envelope_begin_out(soap);
		soap_putheader(soap);
		soap_body_begin_out(soap);
		soap_put_klevpnp_GetTaskPropertiesResponse(soap, &r, "klevpnp-GetTaskPropertiesResponse", "");
		soap_body_end_out(soap);
		soap_envelope_end_out(soap);
	};
	if (soap_response(soap, SOAP_OK)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put_klevpnp_GetTaskPropertiesResponse(soap, &r, "klevpnp-GetTaskPropertiesResponse", "")
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap->error;
	soap_closesock(soap);
	return SOAP_OK;
}

SOAP_FMAC5 int SOAP_FMAC6 soap_serve_klevpnp_SetCommonProperties(struct soap *soap)
{	struct klevpnp_SetCommonProperties soap_tmp_klevpnp_SetCommonProperties;
	struct klevpnp_SetCommonPropertiesResponse r;
	soap_default_klevpnp_SetCommonPropertiesResponse(soap, &r);
	soap_default_klevpnp_SetCommonProperties(soap, &soap_tmp_klevpnp_SetCommonProperties);
	soap->encodingStyle = NULL;
	soap_get_klevpnp_SetCommonProperties(soap, &soap_tmp_klevpnp_SetCommonProperties, "klevpnp-SetCommonProperties", NULL);
	if (soap->error)
		return soap->error;
	
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
#ifndef WITH_LEANER
	 || soap_resolve_attachments(soap)
#endif
	 || soap_end_recv(soap))
		return soap->error;
	soap->error = klevpnp_SetCommonProperties(soap, soap_tmp_klevpnp_SetCommonProperties.notificationDescrArray, r);
	if (soap->error)
		return soap->error;
	soap_serializeheader(soap);
	soap_serialize_klevpnp_SetCommonPropertiesResponse(soap, &r);
	soap_begin_count(soap);
	if (soap->mode & SOAP_IO_LENGTH)
	{	soap_envelope_begin_out(soap);
		soap_putheader(soap);
		soap_body_begin_out(soap);
		soap_put_klevpnp_SetCommonPropertiesResponse(soap, &r, "klevpnp-SetCommonPropertiesResponse", "");
		soap_body_end_out(soap);
		soap_envelope_end_out(soap);
	};
	if (soap_response(soap, SOAP_OK)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put_klevpnp_SetCommonPropertiesResponse(soap, &r, "klevpnp-SetCommonPropertiesResponse", "")
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap->error;
	soap_closesock(soap);
	return SOAP_OK;
}

SOAP_FMAC5 int SOAP_FMAC6 soap_serve_klevpnp_SetGroupProperties(struct soap *soap)
{	struct klevpnp_SetGroupProperties soap_tmp_klevpnp_SetGroupProperties;
	struct klevpnp_SetGroupPropertiesResponse r;
	soap_default_klevpnp_SetGroupPropertiesResponse(soap, &r);
	soap_default_klevpnp_SetGroupProperties(soap, &soap_tmp_klevpnp_SetGroupProperties);
	soap->encodingStyle = NULL;
	soap_get_klevpnp_SetGroupProperties(soap, &soap_tmp_klevpnp_SetGroupProperties, "klevpnp-SetGroupProperties", NULL);
	if (soap->error)
		return soap->error;
	
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
#ifndef WITH_LEANER
	 || soap_resolve_attachments(soap)
#endif
	 || soap_end_recv(soap))
		return soap->error;
	soap->error = klevpnp_SetGroupProperties(soap, soap_tmp_klevpnp_SetGroupProperties.nGroupId, soap_tmp_klevpnp_SetGroupProperties.notificationDescrArray, r);
	if (soap->error)
		return soap->error;
	soap_serializeheader(soap);
	soap_serialize_klevpnp_SetGroupPropertiesResponse(soap, &r);
	soap_begin_count(soap);
	if (soap->mode & SOAP_IO_LENGTH)
	{	soap_envelope_begin_out(soap);
		soap_putheader(soap);
		soap_body_begin_out(soap);
		soap_put_klevpnp_SetGroupPropertiesResponse(soap, &r, "klevpnp-SetGroupPropertiesResponse", "");
		soap_body_end_out(soap);
		soap_envelope_end_out(soap);
	};
	if (soap_response(soap, SOAP_OK)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put_klevpnp_SetGroupPropertiesResponse(soap, &r, "klevpnp-SetGroupPropertiesResponse", "")
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap->error;
	soap_closesock(soap);
	return SOAP_OK;
}

SOAP_FMAC5 int SOAP_FMAC6 soap_serve_klevpnp_SetTaskProperties(struct soap *soap)
{	struct klevpnp_SetTaskProperties soap_tmp_klevpnp_SetTaskProperties;
	struct klevpnp_SetTaskPropertiesResponse r;
	soap_default_klevpnp_SetTaskPropertiesResponse(soap, &r);
	soap_default_klevpnp_SetTaskProperties(soap, &soap_tmp_klevpnp_SetTaskProperties);
	soap->encodingStyle = NULL;
	soap_get_klevpnp_SetTaskProperties(soap, &soap_tmp_klevpnp_SetTaskProperties, "klevpnp-SetTaskProperties", NULL);
	if (soap->error)
		return soap->error;
	
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
#ifndef WITH_LEANER
	 || soap_resolve_attachments(soap)
#endif
	 || soap_end_recv(soap))
		return soap->error;
	soap->error = klevpnp_SetTaskProperties(soap, soap_tmp_klevpnp_SetTaskProperties.wstrTaskId, soap_tmp_klevpnp_SetTaskProperties.notificationDescrArray, r);
	if (soap->error)
		return soap->error;
	soap_serializeheader(soap);
	soap_serialize_klevpnp_SetTaskPropertiesResponse(soap, &r);
	soap_begin_count(soap);
	if (soap->mode & SOAP_IO_LENGTH)
	{	soap_envelope_begin_out(soap);
		soap_putheader(soap);
		soap_body_begin_out(soap);
		soap_put_klevpnp_SetTaskPropertiesResponse(soap, &r, "klevpnp-SetTaskPropertiesResponse", "");
		soap_body_end_out(soap);
		soap_envelope_end_out(soap);
	};
	if (soap_response(soap, SOAP_OK)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put_klevpnp_SetTaskPropertiesResponse(soap, &r, "klevpnp-SetTaskPropertiesResponse", "")
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap->error;
	soap_closesock(soap);
	return SOAP_OK;
}

SOAP_FMAC5 int SOAP_FMAC6 soap_serve_klnag_RemoveStores(struct soap *soap)
{	struct klnag_RemoveStores soap_tmp_klnag_RemoveStores;
	struct klnag_RemoveStoresResponse r;
	soap_default_klnag_RemoveStoresResponse(soap, &r);
	soap_default_klnag_RemoveStores(soap, &soap_tmp_klnag_RemoveStores);
	soap->encodingStyle = NULL;
	soap_get_klnag_RemoveStores(soap, &soap_tmp_klnag_RemoveStores, "klnag-RemoveStores", NULL);
	if (soap->error)
		return soap->error;
	
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
#ifndef WITH_LEANER
	 || soap_resolve_attachments(soap)
#endif
	 || soap_end_recv(soap))
		return soap->error;
	soap->error = klnag_RemoveStores(soap, soap_tmp_klnag_RemoveStores.stores, r);
	if (soap->error)
		return soap->error;
	soap_serializeheader(soap);
	soap_serialize_klnag_RemoveStoresResponse(soap, &r);
	soap_begin_count(soap);
	if (soap->mode & SOAP_IO_LENGTH)
	{	soap_envelope_begin_out(soap);
		soap_putheader(soap);
		soap_body_begin_out(soap);
		soap_put_klnag_RemoveStoresResponse(soap, &r, "klnag-RemoveStoresResponse", "");
		soap_body_end_out(soap);
		soap_envelope_end_out(soap);
	};
	if (soap_response(soap, SOAP_OK)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put_klnag_RemoveStoresResponse(soap, &r, "klnag-RemoveStoresResponse", "")
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap->error;
	soap_closesock(soap);
	return SOAP_OK;
}

SOAP_FMAC5 int SOAP_FMAC6 soap_serve_klnag_StartNewIntegration(struct soap *soap)
{	struct klnag_StartNewIntegration soap_tmp_klnag_StartNewIntegration;
	struct klnag_StartNewIntegrationResponse r;
	soap_default_klnag_StartNewIntegrationResponse(soap, &r);
	soap_default_klnag_StartNewIntegration(soap, &soap_tmp_klnag_StartNewIntegration);
	soap->encodingStyle = NULL;
	soap_get_klnag_StartNewIntegration(soap, &soap_tmp_klnag_StartNewIntegration, "klnag-StartNewIntegration", NULL);
	if (soap->error)
		return soap->error;
	
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
#ifndef WITH_LEANER
	 || soap_resolve_attachments(soap)
#endif
	 || soap_end_recv(soap))
		return soap->error;
	soap->error = klnag_StartNewIntegration(soap, soap_tmp_klnag_StartNewIntegration.hostid, r);
	if (soap->error)
		return soap->error;
	soap_serializeheader(soap);
	soap_serialize_klnag_StartNewIntegrationResponse(soap, &r);
	soap_begin_count(soap);
	if (soap->mode & SOAP_IO_LENGTH)
	{	soap_envelope_begin_out(soap);
		soap_putheader(soap);
		soap_body_begin_out(soap);
		soap_put_klnag_StartNewIntegrationResponse(soap, &r, "klnag-StartNewIntegrationResponse", "");
		soap_body_end_out(soap);
		soap_envelope_end_out(soap);
	};
	if (soap_response(soap, SOAP_OK)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put_klnag_StartNewIntegrationResponse(soap, &r, "klnag-StartNewIntegrationResponse", "")
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap->error;
	soap_closesock(soap);
	return SOAP_OK;
}

SOAP_FMAC5 int SOAP_FMAC6 soap_serve_klnag_NotifySSChange(struct soap *soap)
{	struct klnag_NotifySSChange soap_tmp_klnag_NotifySSChange;
	struct klnag_NotifySSChangeResponse r;
	soap_default_klnag_NotifySSChangeResponse(soap, &r);
	soap_default_klnag_NotifySSChange(soap, &soap_tmp_klnag_NotifySSChange);
	soap->encodingStyle = NULL;
	soap_get_klnag_NotifySSChange(soap, &soap_tmp_klnag_NotifySSChange, "klnag-NotifySSChange", NULL);
	if (soap->error)
		return soap->error;
	
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
#ifndef WITH_LEANER
	 || soap_resolve_attachments(soap)
#endif
	 || soap_end_recv(soap))
		return soap->error;
	soap->error = klnag_NotifySSChange(soap, soap_tmp_klnag_NotifySSChange.product, soap_tmp_klnag_NotifySSChange.version, soap_tmp_klnag_NotifySSChange.section, soap_tmp_klnag_NotifySSChange.ss_type, r);
	if (soap->error)
		return soap->error;
	soap_serializeheader(soap);
	soap_serialize_klnag_NotifySSChangeResponse(soap, &r);
	soap_begin_count(soap);
	if (soap->mode & SOAP_IO_LENGTH)
	{	soap_envelope_begin_out(soap);
		soap_putheader(soap);
		soap_body_begin_out(soap);
		soap_put_klnag_NotifySSChangeResponse(soap, &r, "klnag-NotifySSChangeResponse", "");
		soap_body_end_out(soap);
		soap_envelope_end_out(soap);
	};
	if (soap_response(soap, SOAP_OK)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put_klnag_NotifySSChangeResponse(soap, &r, "klnag-NotifySSChangeResponse", "")
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap->error;
	soap_closesock(soap);
	return SOAP_OK;
}

SOAP_FMAC5 int SOAP_FMAC6 soap_serve_klnag_OnPing(struct soap *soap)
{	struct klnag_OnPing soap_tmp_klnag_OnPing;
	struct klnag_OnPingResponse r;
	soap_default_klnag_OnPingResponse(soap, &r);
	soap_default_klnag_OnPing(soap, &soap_tmp_klnag_OnPing);
	soap->encodingStyle = NULL;
	soap_get_klnag_OnPing(soap, &soap_tmp_klnag_OnPing, "klnag-OnPing", NULL);
	if (soap->error)
		return soap->error;
	
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
#ifndef WITH_LEANER
	 || soap_resolve_attachments(soap)
#endif
	 || soap_end_recv(soap))
		return soap->error;
	soap->error = klnag_OnPing(soap, soap_tmp_klnag_OnPing.info, r);
	if (soap->error)
		return soap->error;
	soap_serializeheader(soap);
	soap_serialize_klnag_OnPingResponse(soap, &r);
	soap_begin_count(soap);
	if (soap->mode & SOAP_IO_LENGTH)
	{	soap_envelope_begin_out(soap);
		soap_putheader(soap);
		soap_body_begin_out(soap);
		soap_put_klnag_OnPingResponse(soap, &r, "klnag-OnPingResponse", "");
		soap_body_end_out(soap);
		soap_envelope_end_out(soap);
	};
	if (soap_response(soap, SOAP_OK)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put_klnag_OnPingResponse(soap, &r, "klnag-OnPingResponse", "")
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap->error;
	soap_closesock(soap);
	return SOAP_OK;
}

SOAP_FMAC5 int SOAP_FMAC6 soap_serve_klnag_WatchdogPing(struct soap *soap)
{	struct klnag_WatchdogPing soap_tmp_klnag_WatchdogPing;
	struct klnag_WatchdogPingResponse r;
	soap_default_klnag_WatchdogPingResponse(soap, &r);
	soap_default_klnag_WatchdogPing(soap, &soap_tmp_klnag_WatchdogPing);
	soap->encodingStyle = NULL;
	soap_get_klnag_WatchdogPing(soap, &soap_tmp_klnag_WatchdogPing, "klnag-WatchdogPing", NULL);
	if (soap->error)
		return soap->error;
	
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
#ifndef WITH_LEANER
	 || soap_resolve_attachments(soap)
#endif
	 || soap_end_recv(soap))
		return soap->error;
	soap->error = klnag_WatchdogPing(soap, r);
	if (soap->error)
		return soap->error;
	soap_serializeheader(soap);
	soap_serialize_klnag_WatchdogPingResponse(soap, &r);
	soap_begin_count(soap);
	if (soap->mode & SOAP_IO_LENGTH)
	{	soap_envelope_begin_out(soap);
		soap_putheader(soap);
		soap_body_begin_out(soap);
		soap_put_klnag_WatchdogPingResponse(soap, &r, "klnag-WatchdogPingResponse", "");
		soap_body_end_out(soap);
		soap_envelope_end_out(soap);
	};
	if (soap_response(soap, SOAP_OK)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put_klnag_WatchdogPingResponse(soap, &r, "klnag-WatchdogPingResponse", "")
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap->error;
	soap_closesock(soap);
	return SOAP_OK;
}

SOAP_FMAC5 int SOAP_FMAC6 soap_serve_klnag_GetRunTimeInfo(struct soap *soap)
{	struct klnag_GetRunTimeInfo soap_tmp_klnag_GetRunTimeInfo;
	struct klnag_GetRunTimeInfoResponse r;
	soap_default_klnag_GetRunTimeInfoResponse(soap, &r);
	soap_default_klnag_GetRunTimeInfo(soap, &soap_tmp_klnag_GetRunTimeInfo);
	soap->encodingStyle = NULL;
	soap_get_klnag_GetRunTimeInfo(soap, &soap_tmp_klnag_GetRunTimeInfo, "klnag-GetRunTimeInfo", NULL);
	if (soap->error)
		return soap->error;
	
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
#ifndef WITH_LEANER
	 || soap_resolve_attachments(soap)
#endif
	 || soap_end_recv(soap))
		return soap->error;
	soap->error = klnag_GetRunTimeInfo(soap, soap_tmp_klnag_GetRunTimeInfo.filter, r);
	if (soap->error)
		return soap->error;
	soap_serializeheader(soap);
	soap_serialize_klnag_GetRunTimeInfoResponse(soap, &r);
	soap_begin_count(soap);
	if (soap->mode & SOAP_IO_LENGTH)
	{	soap_envelope_begin_out(soap);
		soap_putheader(soap);
		soap_body_begin_out(soap);
		soap_put_klnag_GetRunTimeInfoResponse(soap, &r, "klnag-GetRunTimeInfoResponse", "");
		soap_body_end_out(soap);
		soap_envelope_end_out(soap);
	};
	if (soap_response(soap, SOAP_OK)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put_klnag_GetRunTimeInfoResponse(soap, &r, "klnag-GetRunTimeInfoResponse", "")
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap->error;
	soap_closesock(soap);
	return SOAP_OK;
}

SOAP_FMAC5 int SOAP_FMAC6 soap_serve_klnag_GetStaticInfo(struct soap *soap)
{	struct klnag_GetStaticInfo soap_tmp_klnag_GetStaticInfo;
	struct klnag_GetStaticInfoResponse r;
	soap_default_klnag_GetStaticInfoResponse(soap, &r);
	soap_default_klnag_GetStaticInfo(soap, &soap_tmp_klnag_GetStaticInfo);
	soap->encodingStyle = NULL;
	soap_get_klnag_GetStaticInfo(soap, &soap_tmp_klnag_GetStaticInfo, "klnag-GetStaticInfo", NULL);
	if (soap->error)
		return soap->error;
	
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
#ifndef WITH_LEANER
	 || soap_resolve_attachments(soap)
#endif
	 || soap_end_recv(soap))
		return soap->error;
	soap->error = klnag_GetStaticInfo(soap, soap_tmp_klnag_GetStaticInfo.filter, r);
	if (soap->error)
		return soap->error;
	soap_serializeheader(soap);
	soap_serialize_klnag_GetStaticInfoResponse(soap, &r);
	soap_begin_count(soap);
	if (soap->mode & SOAP_IO_LENGTH)
	{	soap_envelope_begin_out(soap);
		soap_putheader(soap);
		soap_body_begin_out(soap);
		soap_put_klnag_GetStaticInfoResponse(soap, &r, "klnag-GetStaticInfoResponse", "");
		soap_body_end_out(soap);
		soap_envelope_end_out(soap);
	};
	if (soap_response(soap, SOAP_OK)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put_klnag_GetStaticInfoResponse(soap, &r, "klnag-GetStaticInfoResponse", "")
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap->error;
	soap_closesock(soap);
	return SOAP_OK;
}

SOAP_FMAC5 int SOAP_FMAC6 soap_serve_klnag_GetStatistics(struct soap *soap)
{	struct klnag_GetStatistics soap_tmp_klnag_GetStatistics;
	struct klnag_GetStatisticsResponse r;
	soap_default_klnag_GetStatisticsResponse(soap, &r);
	soap_default_klnag_GetStatistics(soap, &soap_tmp_klnag_GetStatistics);
	soap->encodingStyle = NULL;
	soap_get_klnag_GetStatistics(soap, &soap_tmp_klnag_GetStatistics, "klnag-GetStatistics", NULL);
	if (soap->error)
		return soap->error;
	
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
#ifndef WITH_LEANER
	 || soap_resolve_attachments(soap)
#endif
	 || soap_end_recv(soap))
		return soap->error;
	soap->error = klnag_GetStatistics(soap, soap_tmp_klnag_GetStatistics.filter, r);
	if (soap->error)
		return soap->error;
	soap_serializeheader(soap);
	soap_serialize_klnag_GetStatisticsResponse(soap, &r);
	soap_begin_count(soap);
	if (soap->mode & SOAP_IO_LENGTH)
	{	soap_envelope_begin_out(soap);
		soap_putheader(soap);
		soap_body_begin_out(soap);
		soap_put_klnag_GetStatisticsResponse(soap, &r, "klnag-GetStatisticsResponse", "");
		soap_body_end_out(soap);
		soap_envelope_end_out(soap);
	};
	if (soap_response(soap, SOAP_OK)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put_klnag_GetStatisticsResponse(soap, &r, "klnag-GetStatisticsResponse", "")
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap->error;
	soap_closesock(soap);
	return SOAP_OK;
}

SOAP_FMAC5 int SOAP_FMAC6 soap_serve_klnag_GetInstancePort(struct soap *soap)
{	struct klnag_GetInstancePort soap_tmp_klnag_GetInstancePort;
	struct klnag_GetInstancePortResponse r;
	soap_default_klnag_GetInstancePortResponse(soap, &r);
	soap_default_klnag_GetInstancePort(soap, &soap_tmp_klnag_GetInstancePort);
	soap->encodingStyle = NULL;
	soap_get_klnag_GetInstancePort(soap, &soap_tmp_klnag_GetInstancePort, "klnag-GetInstancePort", NULL);
	if (soap->error)
		return soap->error;
	
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
#ifndef WITH_LEANER
	 || soap_resolve_attachments(soap)
#endif
	 || soap_end_recv(soap))
		return soap->error;
	soap->error = klnag_GetInstancePort(soap, soap_tmp_klnag_GetInstancePort.product, soap_tmp_klnag_GetInstancePort.version, soap_tmp_klnag_GetInstancePort.component, soap_tmp_klnag_GetInstancePort.instance, r);
	if (soap->error)
		return soap->error;
	soap_serializeheader(soap);
	soap_serialize_klnag_GetInstancePortResponse(soap, &r);
	soap_begin_count(soap);
	if (soap->mode & SOAP_IO_LENGTH)
	{	soap_envelope_begin_out(soap);
		soap_putheader(soap);
		soap_body_begin_out(soap);
		soap_put_klnag_GetInstancePortResponse(soap, &r, "klnag-GetInstancePortResponse", "");
		soap_body_end_out(soap);
		soap_envelope_end_out(soap);
	};
	if (soap_response(soap, SOAP_OK)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put_klnag_GetInstancePortResponse(soap, &r, "klnag-GetInstancePortResponse", "")
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap->error;
	soap_closesock(soap);
	return SOAP_OK;
}

SOAP_FMAC5 int SOAP_FMAC6 soap_serve_klnag_StartProduct(struct soap *soap)
{	struct klnag_StartProduct soap_tmp_klnag_StartProduct;
	struct klnag_StartProductResponse r;
	soap_default_klnag_StartProductResponse(soap, &r);
	soap_default_klnag_StartProduct(soap, &soap_tmp_klnag_StartProduct);
	soap->encodingStyle = NULL;
	soap_get_klnag_StartProduct(soap, &soap_tmp_klnag_StartProduct, "klnag-StartProduct", NULL);
	if (soap->error)
		return soap->error;
	
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
#ifndef WITH_LEANER
	 || soap_resolve_attachments(soap)
#endif
	 || soap_end_recv(soap))
		return soap->error;
	soap->error = klnag_StartProduct(soap, soap_tmp_klnag_StartProduct.productname, soap_tmp_klnag_StartProduct.productversion, soap_tmp_klnag_StartProduct.extraparams, r);
	if (soap->error)
		return soap->error;
	soap_serializeheader(soap);
	soap_serialize_klnag_StartProductResponse(soap, &r);
	soap_begin_count(soap);
	if (soap->mode & SOAP_IO_LENGTH)
	{	soap_envelope_begin_out(soap);
		soap_putheader(soap);
		soap_body_begin_out(soap);
		soap_put_klnag_StartProductResponse(soap, &r, "klnag-StartProductResponse", "");
		soap_body_end_out(soap);
		soap_envelope_end_out(soap);
	};
	if (soap_response(soap, SOAP_OK)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put_klnag_StartProductResponse(soap, &r, "klnag-StartProductResponse", "")
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap->error;
	soap_closesock(soap);
	return SOAP_OK;
}

SOAP_FMAC5 int SOAP_FMAC6 soap_serve_klnag_StopProduct(struct soap *soap)
{	struct klnag_StopProduct soap_tmp_klnag_StopProduct;
	struct klnag_StopProductResponse r;
	soap_default_klnag_StopProductResponse(soap, &r);
	soap_default_klnag_StopProduct(soap, &soap_tmp_klnag_StopProduct);
	soap->encodingStyle = NULL;
	soap_get_klnag_StopProduct(soap, &soap_tmp_klnag_StopProduct, "klnag-StopProduct", NULL);
	if (soap->error)
		return soap->error;
	
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
#ifndef WITH_LEANER
	 || soap_resolve_attachments(soap)
#endif
	 || soap_end_recv(soap))
		return soap->error;
	soap->error = klnag_StopProduct(soap, soap_tmp_klnag_StopProduct.productname, soap_tmp_klnag_StopProduct.productversion, soap_tmp_klnag_StopProduct.extraparams, r);
	if (soap->error)
		return soap->error;
	soap_serializeheader(soap);
	soap_serialize_klnag_StopProductResponse(soap, &r);
	soap_begin_count(soap);
	if (soap->mode & SOAP_IO_LENGTH)
	{	soap_envelope_begin_out(soap);
		soap_putheader(soap);
		soap_body_begin_out(soap);
		soap_put_klnag_StopProductResponse(soap, &r, "klnag-StopProductResponse", "");
		soap_body_end_out(soap);
		soap_envelope_end_out(soap);
	};
	if (soap_response(soap, SOAP_OK)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put_klnag_StopProductResponse(soap, &r, "klnag-StopProductResponse", "")
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap->error;
	soap_closesock(soap);
	return SOAP_OK;
}

SOAP_FMAC5 int SOAP_FMAC6 soap_serve_klnag_OnStartRemoteInstallTask(struct soap *soap)
{	struct klnag_OnStartRemoteInstallTask soap_tmp_klnag_OnStartRemoteInstallTask;
	struct klnag_OnStartRemoteInstallTaskResponse r;
	soap_default_klnag_OnStartRemoteInstallTaskResponse(soap, &r);
	soap_default_klnag_OnStartRemoteInstallTask(soap, &soap_tmp_klnag_OnStartRemoteInstallTask);
	soap->encodingStyle = NULL;
	soap_get_klnag_OnStartRemoteInstallTask(soap, &soap_tmp_klnag_OnStartRemoteInstallTask, "klnag-OnStartRemoteInstallTask", NULL);
	if (soap->error)
		return soap->error;
	
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
#ifndef WITH_LEANER
	 || soap_resolve_attachments(soap)
#endif
	 || soap_end_recv(soap))
		return soap->error;
	soap->error = klnag_OnStartRemoteInstallTask(soap, soap_tmp_klnag_OnStartRemoteInstallTask.taskId, r);
	if (soap->error)
		return soap->error;
	soap_serializeheader(soap);
	soap_serialize_klnag_OnStartRemoteInstallTaskResponse(soap, &r);
	soap_begin_count(soap);
	if (soap->mode & SOAP_IO_LENGTH)
	{	soap_envelope_begin_out(soap);
		soap_putheader(soap);
		soap_body_begin_out(soap);
		soap_put_klnag_OnStartRemoteInstallTaskResponse(soap, &r, "klnag-OnStartRemoteInstallTaskResponse", "");
		soap_body_end_out(soap);
		soap_envelope_end_out(soap);
	};
	if (soap_response(soap, SOAP_OK)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put_klnag_OnStartRemoteInstallTaskResponse(soap, &r, "klnag-OnStartRemoteInstallTaskResponse", "")
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap->error;
	soap_closesock(soap);
	return SOAP_OK;
}

SOAP_FMAC5 int SOAP_FMAC6 soap_serve_klnag_OnInstallerNotification(struct soap *soap)
{	struct klnag_OnInstallerNotification soap_tmp_klnag_OnInstallerNotification;
	struct klnag_OnInstallerNotificationResponse r;
	soap_default_klnag_OnInstallerNotificationResponse(soap, &r);
	soap_default_klnag_OnInstallerNotification(soap, &soap_tmp_klnag_OnInstallerNotification);
	soap->encodingStyle = NULL;
	soap_get_klnag_OnInstallerNotification(soap, &soap_tmp_klnag_OnInstallerNotification, "klnag-OnInstallerNotification", NULL);
	if (soap->error)
		return soap->error;
	
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
#ifndef WITH_LEANER
	 || soap_resolve_attachments(soap)
#endif
	 || soap_end_recv(soap))
		return soap->error;
	soap->error = klnag_OnInstallerNotification(soap, soap_tmp_klnag_OnInstallerNotification.info, r);
	if (soap->error)
		return soap->error;
	soap_serializeheader(soap);
	soap_serialize_klnag_OnInstallerNotificationResponse(soap, &r);
	soap_begin_count(soap);
	if (soap->mode & SOAP_IO_LENGTH)
	{	soap_envelope_begin_out(soap);
		soap_putheader(soap);
		soap_body_begin_out(soap);
		soap_put_klnag_OnInstallerNotificationResponse(soap, &r, "klnag-OnInstallerNotificationResponse", "");
		soap_body_end_out(soap);
		soap_envelope_end_out(soap);
	};
	if (soap_response(soap, SOAP_OK)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put_klnag_OnInstallerNotificationResponse(soap, &r, "klnag-OnInstallerNotificationResponse", "")
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap->error;
	soap_closesock(soap);
	return SOAP_OK;
}

SOAP_FMAC5 int SOAP_FMAC6 soap_serve_klnag_GetHostPublicKey(struct soap *soap)
{	struct klnag_GetHostPublicKey soap_tmp_klnag_GetHostPublicKey;
	struct klnag_GetHostPublicKeyResponse r;
	soap_default_klnag_GetHostPublicKeyResponse(soap, &r);
	soap_default_klnag_GetHostPublicKey(soap, &soap_tmp_klnag_GetHostPublicKey);
	soap->encodingStyle = NULL;
	soap_get_klnag_GetHostPublicKey(soap, &soap_tmp_klnag_GetHostPublicKey, "klnag-GetHostPublicKey", NULL);
	if (soap->error)
		return soap->error;
	
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
#ifndef WITH_LEANER
	 || soap_resolve_attachments(soap)
#endif
	 || soap_end_recv(soap))
		return soap->error;
	soap->error = klnag_GetHostPublicKey(soap, r);
	if (soap->error)
		return soap->error;
	soap_serializeheader(soap);
	soap_serialize_klnag_GetHostPublicKeyResponse(soap, &r);
	soap_begin_count(soap);
	if (soap->mode & SOAP_IO_LENGTH)
	{	soap_envelope_begin_out(soap);
		soap_putheader(soap);
		soap_body_begin_out(soap);
		soap_put_klnag_GetHostPublicKeyResponse(soap, &r, "klnag-GetHostPublicKeyResponse", "");
		soap_body_end_out(soap);
		soap_envelope_end_out(soap);
	};
	if (soap_response(soap, SOAP_OK)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put_klnag_GetHostPublicKeyResponse(soap, &r, "klnag-GetHostPublicKeyResponse", "")
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap->error;
	soap_closesock(soap);
	return SOAP_OK;
}

SOAP_FMAC5 int SOAP_FMAC6 soap_serve_klnag_PutGlobalKeys(struct soap *soap)
{	struct klnag_PutGlobalKeys soap_tmp_klnag_PutGlobalKeys;
	struct klnag_PutGlobalKeysResponse r;
	soap_default_klnag_PutGlobalKeysResponse(soap, &r);
	soap_default_klnag_PutGlobalKeys(soap, &soap_tmp_klnag_PutGlobalKeys);
	soap->encodingStyle = NULL;
	soap_get_klnag_PutGlobalKeys(soap, &soap_tmp_klnag_PutGlobalKeys, "klnag-PutGlobalKeys", NULL);
	if (soap->error)
		return soap->error;
	
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
#ifndef WITH_LEANER
	 || soap_resolve_attachments(soap)
#endif
	 || soap_end_recv(soap))
		return soap->error;
	soap->error = klnag_PutGlobalKeys(soap, soap_tmp_klnag_PutGlobalKeys.key1, soap_tmp_klnag_PutGlobalKeys.key2, r);
	if (soap->error)
		return soap->error;
	soap_serializeheader(soap);
	soap_serialize_klnag_PutGlobalKeysResponse(soap, &r);
	soap_begin_count(soap);
	if (soap->mode & SOAP_IO_LENGTH)
	{	soap_envelope_begin_out(soap);
		soap_putheader(soap);
		soap_body_begin_out(soap);
		soap_put_klnag_PutGlobalKeysResponse(soap, &r, "klnag-PutGlobalKeysResponse", "");
		soap_body_end_out(soap);
		soap_envelope_end_out(soap);
	};
	if (soap_response(soap, SOAP_OK)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put_klnag_PutGlobalKeysResponse(soap, &r, "klnag-PutGlobalKeysResponse", "")
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap->error;
	soap_closesock(soap);
	return SOAP_OK;
}

SOAP_FMAC5 int SOAP_FMAC6 soap_serve_klnag_OnUserForceSyncRequest(struct soap *soap)
{	struct klnag_OnUserForceSyncRequest soap_tmp_klnag_OnUserForceSyncRequest;
	struct klnag_OnUserForceSyncRequestResponse r;
	soap_default_klnag_OnUserForceSyncRequestResponse(soap, &r);
	soap_default_klnag_OnUserForceSyncRequest(soap, &soap_tmp_klnag_OnUserForceSyncRequest);
	soap->encodingStyle = NULL;
	soap_get_klnag_OnUserForceSyncRequest(soap, &soap_tmp_klnag_OnUserForceSyncRequest, "klnag-OnUserForceSyncRequest", NULL);
	if (soap->error)
		return soap->error;
	
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
#ifndef WITH_LEANER
	 || soap_resolve_attachments(soap)
#endif
	 || soap_end_recv(soap))
		return soap->error;
	soap->error = klnag_OnUserForceSyncRequest(soap, soap_tmp_klnag_OnUserForceSyncRequest.info, r);
	if (soap->error)
		return soap->error;
	soap_serializeheader(soap);
	soap_serialize_klnag_OnUserForceSyncRequestResponse(soap, &r);
	soap_begin_count(soap);
	if (soap->mode & SOAP_IO_LENGTH)
	{	soap_envelope_begin_out(soap);
		soap_putheader(soap);
		soap_body_begin_out(soap);
		soap_put_klnag_OnUserForceSyncRequestResponse(soap, &r, "klnag-OnUserForceSyncRequestResponse", "");
		soap_body_end_out(soap);
		soap_envelope_end_out(soap);
	};
	if (soap_response(soap, SOAP_OK)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put_klnag_OnUserForceSyncRequestResponse(soap, &r, "klnag-OnUserForceSyncRequestResponse", "")
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap->error;
	soap_closesock(soap);
	return SOAP_OK;
}

SOAP_FMAC5 int SOAP_FMAC6 soap_serve_klftbridge_CreateReceiver(struct soap *soap)
{	struct klftbridge_CreateReceiver soap_tmp_klftbridge_CreateReceiver;
	struct klftbridge_CreateReceiverResponse r;
	soap_default_klftbridge_CreateReceiverResponse(soap, &r);
	soap_default_klftbridge_CreateReceiver(soap, &soap_tmp_klftbridge_CreateReceiver);
	soap->encodingStyle = NULL;
	soap_get_klftbridge_CreateReceiver(soap, &soap_tmp_klftbridge_CreateReceiver, "klftbridge-CreateReceiver", NULL);
	if (soap->error)
		return soap->error;
	
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
#ifndef WITH_LEANER
	 || soap_resolve_attachments(soap)
#endif
	 || soap_end_recv(soap))
		return soap->error;
	soap->error = klftbridge_CreateReceiver(soap, soap_tmp_klftbridge_CreateReceiver.useUpdaterFolder, r);
	if (soap->error)
		return soap->error;
	soap_serializeheader(soap);
	soap_serialize_klftbridge_CreateReceiverResponse(soap, &r);
	soap_begin_count(soap);
	if (soap->mode & SOAP_IO_LENGTH)
	{	soap_envelope_begin_out(soap);
		soap_putheader(soap);
		soap_body_begin_out(soap);
		soap_put_klftbridge_CreateReceiverResponse(soap, &r, "klftbridge-CreateReceiverResponse", "");
		soap_body_end_out(soap);
		soap_envelope_end_out(soap);
	};
	if (soap_response(soap, SOAP_OK)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put_klftbridge_CreateReceiverResponse(soap, &r, "klftbridge-CreateReceiverResponse", "")
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap->error;
	soap_closesock(soap);
	return SOAP_OK;
}

SOAP_FMAC5 int SOAP_FMAC6 soap_serve_klftbridge_Connect(struct soap *soap)
{	struct klftbridge_Connect soap_tmp_klftbridge_Connect;
	struct klftbridge_ConnectResponse r;
	soap_default_klftbridge_ConnectResponse(soap, &r);
	soap_default_klftbridge_Connect(soap, &soap_tmp_klftbridge_Connect);
	soap->encodingStyle = NULL;
	soap_get_klftbridge_Connect(soap, &soap_tmp_klftbridge_Connect, "klftbridge-Connect", NULL);
	if (soap->error)
		return soap->error;
	
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
#ifndef WITH_LEANER
	 || soap_resolve_attachments(soap)
#endif
	 || soap_end_recv(soap))
		return soap->error;
	soap->error = klftbridge_Connect(soap, soap_tmp_klftbridge_Connect.receiverId, soap_tmp_klftbridge_Connect.toMasterServer, r);
	if (soap->error)
		return soap->error;
	soap_serializeheader(soap);
	soap_serialize_klftbridge_ConnectResponse(soap, &r);
	soap_begin_count(soap);
	if (soap->mode & SOAP_IO_LENGTH)
	{	soap_envelope_begin_out(soap);
		soap_putheader(soap);
		soap_body_begin_out(soap);
		soap_put_klftbridge_ConnectResponse(soap, &r, "klftbridge-ConnectResponse", "");
		soap_body_end_out(soap);
		soap_envelope_end_out(soap);
	};
	if (soap_response(soap, SOAP_OK)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put_klftbridge_ConnectResponse(soap, &r, "klftbridge-ConnectResponse", "")
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap->error;
	soap_closesock(soap);
	return SOAP_OK;
}

SOAP_FMAC5 int SOAP_FMAC6 soap_serve_klftbridge_GetFileInfo(struct soap *soap)
{	struct klftbridge_GetFileInfo soap_tmp_klftbridge_GetFileInfo;
	struct klftbridge_GetFileInfoResponse r;
	soap_default_klftbridge_GetFileInfoResponse(soap, &r);
	soap_default_klftbridge_GetFileInfo(soap, &soap_tmp_klftbridge_GetFileInfo);
	soap->encodingStyle = NULL;
	soap_get_klftbridge_GetFileInfo(soap, &soap_tmp_klftbridge_GetFileInfo, "klftbridge-GetFileInfo", NULL);
	if (soap->error)
		return soap->error;
	
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
#ifndef WITH_LEANER
	 || soap_resolve_attachments(soap)
#endif
	 || soap_end_recv(soap))
		return soap->error;
	soap->error = klftbridge_GetFileInfo(soap, soap_tmp_klftbridge_GetFileInfo.receiverId, soap_tmp_klftbridge_GetFileInfo.fileName, r);
	if (soap->error)
		return soap->error;
	soap_serializeheader(soap);
	soap_serialize_klftbridge_GetFileInfoResponse(soap, &r);
	soap_begin_count(soap);
	if (soap->mode & SOAP_IO_LENGTH)
	{	soap_envelope_begin_out(soap);
		soap_putheader(soap);
		soap_body_begin_out(soap);
		soap_put_klftbridge_GetFileInfoResponse(soap, &r, "klftbridge-GetFileInfoResponse", "");
		soap_body_end_out(soap);
		soap_envelope_end_out(soap);
	};
	if (soap_response(soap, SOAP_OK)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put_klftbridge_GetFileInfoResponse(soap, &r, "klftbridge-GetFileInfoResponse", "")
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap->error;
	soap_closesock(soap);
	return SOAP_OK;
}

SOAP_FMAC5 int SOAP_FMAC6 soap_serve_klftbridge_GetNextFileChunk(struct soap *soap)
{	struct klftbridge_GetNextFileChunk soap_tmp_klftbridge_GetNextFileChunk;
	struct klftbridge_GetNextFileChunkResponse r;
	soap_default_klftbridge_GetNextFileChunkResponse(soap, &r);
	soap_default_klftbridge_GetNextFileChunk(soap, &soap_tmp_klftbridge_GetNextFileChunk);
	soap->encodingStyle = NULL;
	soap_get_klftbridge_GetNextFileChunk(soap, &soap_tmp_klftbridge_GetNextFileChunk, "klftbridge-GetNextFileChunk", NULL);
	if (soap->error)
		return soap->error;
	
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
#ifndef WITH_LEANER
	 || soap_resolve_attachments(soap)
#endif
	 || soap_end_recv(soap))
		return soap->error;
	soap->error = klftbridge_GetNextFileChunk(soap, soap_tmp_klftbridge_GetNextFileChunk.receiverId, soap_tmp_klftbridge_GetNextFileChunk.fileName, soap_tmp_klftbridge_GetNextFileChunk.startFilePos, soap_tmp_klftbridge_GetNextFileChunk.neededSize, r);
	if (soap->error)
		return soap->error;
	soap_serializeheader(soap);
	soap_serialize_klftbridge_GetNextFileChunkResponse(soap, &r);
	soap_begin_count(soap);
	if (soap->mode & SOAP_IO_LENGTH)
	{	soap_envelope_begin_out(soap);
		soap_putheader(soap);
		soap_body_begin_out(soap);
		soap_put_klftbridge_GetNextFileChunkResponse(soap, &r, "klftbridge-GetNextFileChunkResponse", "");
		soap_body_end_out(soap);
		soap_envelope_end_out(soap);
	};
	if (soap_response(soap, SOAP_OK)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put_klftbridge_GetNextFileChunkResponse(soap, &r, "klftbridge-GetNextFileChunkResponse", "")
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap->error;
	soap_closesock(soap);
	return SOAP_OK;
}

SOAP_FMAC5 int SOAP_FMAC6 soap_serve_klftbridge_ReleaseReceiver(struct soap *soap)
{	struct klftbridge_ReleaseReceiver soap_tmp_klftbridge_ReleaseReceiver;
	struct klftbridge_ReleaseReceiverResponse r;
	soap_default_klftbridge_ReleaseReceiverResponse(soap, &r);
	soap_default_klftbridge_ReleaseReceiver(soap, &soap_tmp_klftbridge_ReleaseReceiver);
	soap->encodingStyle = NULL;
	soap_get_klftbridge_ReleaseReceiver(soap, &soap_tmp_klftbridge_ReleaseReceiver, "klftbridge-ReleaseReceiver", NULL);
	if (soap->error)
		return soap->error;
	
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
#ifndef WITH_LEANER
	 || soap_resolve_attachments(soap)
#endif
	 || soap_end_recv(soap))
		return soap->error;
	soap->error = klftbridge_ReleaseReceiver(soap, soap_tmp_klftbridge_ReleaseReceiver.receiverId, r);
	if (soap->error)
		return soap->error;
	soap_serializeheader(soap);
	soap_serialize_klftbridge_ReleaseReceiverResponse(soap, &r);
	soap_begin_count(soap);
	if (soap->mode & SOAP_IO_LENGTH)
	{	soap_envelope_begin_out(soap);
		soap_putheader(soap);
		soap_body_begin_out(soap);
		soap_put_klftbridge_ReleaseReceiverResponse(soap, &r, "klftbridge-ReleaseReceiverResponse", "");
		soap_body_end_out(soap);
		soap_envelope_end_out(soap);
	};
	if (soap_response(soap, SOAP_OK)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put_klftbridge_ReleaseReceiverResponse(soap, &r, "klftbridge-ReleaseReceiverResponse", "")
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap->error;
	soap_closesock(soap);
	return SOAP_OK;
}

SOAP_FMAC5 int SOAP_FMAC6 soap_serve_klft_InitiateFileUpload(struct soap *soap)
{	struct klft_InitiateFileUpload soap_tmp_klft_InitiateFileUpload;
	struct klft_InitiateFileUploadResponse r;
	soap_default_klft_InitiateFileUploadResponse(soap, &r);
	soap_default_klft_InitiateFileUpload(soap, &soap_tmp_klft_InitiateFileUpload);
	soap->encodingStyle = NULL;
	soap_get_klft_InitiateFileUpload(soap, &soap_tmp_klft_InitiateFileUpload, "klft-InitiateFileUpload", NULL);
	if (soap->error)
		return soap->error;
	
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
#ifndef WITH_LEANER
	 || soap_resolve_attachments(soap)
#endif
	 || soap_end_recv(soap))
		return soap->error;
	soap->error = klft_InitiateFileUpload(soap, soap_tmp_klft_InitiateFileUpload.fileName, soap_tmp_klft_InitiateFileUpload.fileId, soap_tmp_klft_InitiateFileUpload.description, soap_tmp_klft_InitiateFileUpload.dirFlag, soap_tmp_klft_InitiateFileUpload.fullFileSize, soap_tmp_klft_InitiateFileUpload.serverComponent, soap_tmp_klft_InitiateFileUpload.remoteClientName, soap_tmp_klft_InitiateFileUpload.uploadDelay, soap_tmp_klft_InitiateFileUpload.nextChunkDelay, soap_tmp_klft_InitiateFileUpload.fileType, soap_tmp_klft_InitiateFileUpload.forUpdateAgentFlag, soap_tmp_klft_InitiateFileUpload.updatesAgents, r);
	if (soap->error)
		return soap->error;
	soap_serializeheader(soap);
	soap_serialize_klft_InitiateFileUploadResponse(soap, &r);
	soap_begin_count(soap);
	if (soap->mode & SOAP_IO_LENGTH)
	{	soap_envelope_begin_out(soap);
		soap_putheader(soap);
		soap_body_begin_out(soap);
		soap_put_klft_InitiateFileUploadResponse(soap, &r, "klft-InitiateFileUploadResponse", "");
		soap_body_end_out(soap);
		soap_envelope_end_out(soap);
	};
	if (soap_response(soap, SOAP_OK)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put_klft_InitiateFileUploadResponse(soap, &r, "klft-InitiateFileUploadResponse", "")
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap->error;
	soap_closesock(soap);
	return SOAP_OK;
}

SOAP_FMAC5 int SOAP_FMAC6 soap_serve_klft_RegisterUpdateAgent(struct soap *soap)
{	struct klft_RegisterUpdateAgent soap_tmp_klft_RegisterUpdateAgent;
	struct klft_RegisterUpdateAgentResponse r;
	soap_default_klft_RegisterUpdateAgentResponse(soap, &r);
	soap_default_klft_RegisterUpdateAgent(soap, &soap_tmp_klft_RegisterUpdateAgent);
	soap->encodingStyle = NULL;
	soap_get_klft_RegisterUpdateAgent(soap, &soap_tmp_klft_RegisterUpdateAgent, "klft-RegisterUpdateAgent", NULL);
	if (soap->error)
		return soap->error;
	
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
#ifndef WITH_LEANER
	 || soap_resolve_attachments(soap)
#endif
	 || soap_end_recv(soap))
		return soap->error;
	soap->error = klft_RegisterUpdateAgent(soap, soap_tmp_klft_RegisterUpdateAgent.strAddress, soap_tmp_klft_RegisterUpdateAgent.strNoSSLAddress, soap_tmp_klft_RegisterUpdateAgent.strMulticastIp, soap_tmp_klft_RegisterUpdateAgent.pParOptions, r);
	if (soap->error)
		return soap->error;
	soap_serializeheader(soap);
	soap_serialize_klft_RegisterUpdateAgentResponse(soap, &r);
	soap_begin_count(soap);
	if (soap->mode & SOAP_IO_LENGTH)
	{	soap_envelope_begin_out(soap);
		soap_putheader(soap);
		soap_body_begin_out(soap);
		soap_put_klft_RegisterUpdateAgentResponse(soap, &r, "klft-RegisterUpdateAgentResponse", "");
		soap_body_end_out(soap);
		soap_envelope_end_out(soap);
	};
	if (soap_response(soap, SOAP_OK)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put_klft_RegisterUpdateAgentResponse(soap, &r, "klft-RegisterUpdateAgentResponse", "")
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap->error;
	soap_closesock(soap);
	return SOAP_OK;
}

SOAP_FMAC5 int SOAP_FMAC6 soap_serve_klft_InitiateServerFileUpload(struct soap *soap)
{	struct klft_InitiateServerFileUpload soap_tmp_klft_InitiateServerFileUpload;
	struct klft_InitiateServerFileUploadResponse r;
	soap_default_klft_InitiateServerFileUploadResponse(soap, &r);
	soap_default_klft_InitiateServerFileUpload(soap, &soap_tmp_klft_InitiateServerFileUpload);
	soap->encodingStyle = NULL;
	soap_get_klft_InitiateServerFileUpload(soap, &soap_tmp_klft_InitiateServerFileUpload, "klft-InitiateServerFileUpload", NULL);
	if (soap->error)
		return soap->error;
	
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
#ifndef WITH_LEANER
	 || soap_resolve_attachments(soap)
#endif
	 || soap_end_recv(soap))
		return soap->error;
	soap->error = klft_InitiateServerFileUpload(soap, soap_tmp_klft_InitiateServerFileUpload.fileId, soap_tmp_klft_InitiateServerFileUpload.dirFlag, soap_tmp_klft_InitiateServerFileUpload.lifeTime, soap_tmp_klft_InitiateServerFileUpload.fullFileSize, r);
	if (soap->error)
		return soap->error;
	soap_serializeheader(soap);
	soap_serialize_klft_InitiateServerFileUploadResponse(soap, &r);
	soap_begin_count(soap);
	if (soap->mode & SOAP_IO_LENGTH)
	{	soap_envelope_begin_out(soap);
		soap_putheader(soap);
		soap_body_begin_out(soap);
		soap_put_klft_InitiateServerFileUploadResponse(soap, &r, "klft-InitiateServerFileUploadResponse", "");
		soap_body_end_out(soap);
		soap_envelope_end_out(soap);
	};
	if (soap_response(soap, SOAP_OK)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put_klft_InitiateServerFileUploadResponse(soap, &r, "klft-InitiateServerFileUploadResponse", "")
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap->error;
	soap_closesock(soap);
	return SOAP_OK;
}

SOAP_FMAC5 int SOAP_FMAC6 soap_serve_klft_CancelServerFileUpload(struct soap *soap)
{	struct klft_CancelServerFileUpload soap_tmp_klft_CancelServerFileUpload;
	struct klft_CancelServerFileUploadResponse r;
	soap_default_klft_CancelServerFileUploadResponse(soap, &r);
	soap_default_klft_CancelServerFileUpload(soap, &soap_tmp_klft_CancelServerFileUpload);
	soap->encodingStyle = NULL;
	soap_get_klft_CancelServerFileUpload(soap, &soap_tmp_klft_CancelServerFileUpload, "klft-CancelServerFileUpload", NULL);
	if (soap->error)
		return soap->error;
	
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
#ifndef WITH_LEANER
	 || soap_resolve_attachments(soap)
#endif
	 || soap_end_recv(soap))
		return soap->error;
	soap->error = klft_CancelServerFileUpload(soap, soap_tmp_klft_CancelServerFileUpload.fileId, r);
	if (soap->error)
		return soap->error;
	soap_serializeheader(soap);
	soap_serialize_klft_CancelServerFileUploadResponse(soap, &r);
	soap_begin_count(soap);
	if (soap->mode & SOAP_IO_LENGTH)
	{	soap_envelope_begin_out(soap);
		soap_putheader(soap);
		soap_body_begin_out(soap);
		soap_put_klft_CancelServerFileUploadResponse(soap, &r, "klft-CancelServerFileUploadResponse", "");
		soap_body_end_out(soap);
		soap_envelope_end_out(soap);
	};
	if (soap_response(soap, SOAP_OK)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put_klft_CancelServerFileUploadResponse(soap, &r, "klft-CancelServerFileUploadResponse", "")
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap->error;
	soap_closesock(soap);
	return SOAP_OK;
}

SOAP_FMAC5 int SOAP_FMAC6 soap_serve_klft_PutNextFileChunk(struct soap *soap)
{	struct klft_PutNextFileChunk soap_tmp_klft_PutNextFileChunk;
	struct klft_PutNextFileChunkResponse r;
	soap_default_klft_PutNextFileChunkResponse(soap, &r);
	soap_default_klft_PutNextFileChunk(soap, &soap_tmp_klft_PutNextFileChunk);
	soap->encodingStyle = NULL;
	soap_get_klft_PutNextFileChunk(soap, &soap_tmp_klft_PutNextFileChunk, "klft-PutNextFileChunk", NULL);
	if (soap->error)
		return soap->error;
	
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
#ifndef WITH_LEANER
	 || soap_resolve_attachments(soap)
#endif
	 || soap_end_recv(soap))
		return soap->error;
	soap->error = klft_PutNextFileChunk(soap, soap_tmp_klft_PutNextFileChunk.fileId, soap_tmp_klft_PutNextFileChunk.chunk, r);
	if (soap->error)
		return soap->error;
	soap_serializeheader(soap);
	soap_serialize_klft_PutNextFileChunkResponse(soap, &r);
	soap_begin_count(soap);
	if (soap->mode & SOAP_IO_LENGTH)
	{	soap_envelope_begin_out(soap);
		soap_putheader(soap);
		soap_body_begin_out(soap);
		soap_put_klft_PutNextFileChunkResponse(soap, &r, "klft-PutNextFileChunkResponse", "");
		soap_body_end_out(soap);
		soap_envelope_end_out(soap);
	};
	if (soap_response(soap, SOAP_OK)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put_klft_PutNextFileChunkResponse(soap, &r, "klft-PutNextFileChunkResponse", "")
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap->error;
	soap_closesock(soap);
	return SOAP_OK;
}

SOAP_FMAC5 int SOAP_FMAC6 soap_serve_klft_GetSyncFolderDiff(struct soap *soap)
{	struct klft_GetSyncFolderDiff soap_tmp_klft_GetSyncFolderDiff;
	struct klft_GetSyncFolderDiffResponse r;
	soap_default_klft_GetSyncFolderDiffResponse(soap, &r);
	soap_default_klft_GetSyncFolderDiff(soap, &soap_tmp_klft_GetSyncFolderDiff);
	soap->encodingStyle = NULL;
	soap_get_klft_GetSyncFolderDiff(soap, &soap_tmp_klft_GetSyncFolderDiff, "klft-GetSyncFolderDiff", NULL);
	if (soap->error)
		return soap->error;
	
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
#ifndef WITH_LEANER
	 || soap_resolve_attachments(soap)
#endif
	 || soap_end_recv(soap))
		return soap->error;
	soap->error = klft_GetSyncFolderDiff(soap, soap_tmp_klft_GetSyncFolderDiff.fileDescription, soap_tmp_klft_GetSyncFolderDiff.clientFilesList, soap_tmp_klft_GetSyncFolderDiff.subfoldersOptions, r);
	if (soap->error)
		return soap->error;
	soap_serializeheader(soap);
	soap_serialize_klft_GetSyncFolderDiffResponse(soap, &r);
	soap_begin_count(soap);
	if (soap->mode & SOAP_IO_LENGTH)
	{	soap_envelope_begin_out(soap);
		soap_putheader(soap);
		soap_body_begin_out(soap);
		soap_put_klft_GetSyncFolderDiffResponse(soap, &r, "klft-GetSyncFolderDiffResponse", "");
		soap_body_end_out(soap);
		soap_envelope_end_out(soap);
	};
	if (soap_response(soap, SOAP_OK)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put_klft_GetSyncFolderDiffResponse(soap, &r, "klft-GetSyncFolderDiffResponse", "")
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap->error;
	soap_closesock(soap);
	return SOAP_OK;
}

SOAP_FMAC5 int SOAP_FMAC6 soap_serve_klft_GetSyncFolderFileInfo(struct soap *soap)
{	struct klft_GetSyncFolderFileInfo soap_tmp_klft_GetSyncFolderFileInfo;
	struct klft_GetSyncFolderFileInfoResponse r;
	soap_default_klft_GetSyncFolderFileInfoResponse(soap, &r);
	soap_default_klft_GetSyncFolderFileInfo(soap, &soap_tmp_klft_GetSyncFolderFileInfo);
	soap->encodingStyle = NULL;
	soap_get_klft_GetSyncFolderFileInfo(soap, &soap_tmp_klft_GetSyncFolderFileInfo, "klft-GetSyncFolderFileInfo", NULL);
	if (soap->error)
		return soap->error;
	
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
#ifndef WITH_LEANER
	 || soap_resolve_attachments(soap)
#endif
	 || soap_end_recv(soap))
		return soap->error;
	soap->error = klft_GetSyncFolderFileInfo(soap, soap_tmp_klft_GetSyncFolderFileInfo.syncFolderFileId, soap_tmp_klft_GetSyncFolderFileInfo.folderFileName, r);
	if (soap->error)
		return soap->error;
	soap_serializeheader(soap);
	soap_serialize_klft_GetSyncFolderFileInfoResponse(soap, &r);
	soap_begin_count(soap);
	if (soap->mode & SOAP_IO_LENGTH)
	{	soap_envelope_begin_out(soap);
		soap_putheader(soap);
		soap_body_begin_out(soap);
		soap_put_klft_GetSyncFolderFileInfoResponse(soap, &r, "klft-GetSyncFolderFileInfoResponse", "");
		soap_body_end_out(soap);
		soap_envelope_end_out(soap);
	};
	if (soap_response(soap, SOAP_OK)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put_klft_GetSyncFolderFileInfoResponse(soap, &r, "klft-GetSyncFolderFileInfoResponse", "")
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap->error;
	soap_closesock(soap);
	return SOAP_OK;
}

SOAP_FMAC5 int SOAP_FMAC6 soap_serve_klft_GetSyncFolderFileChunk(struct soap *soap)
{	struct klft_GetSyncFolderFileChunk soap_tmp_klft_GetSyncFolderFileChunk;
	struct klft_GetSyncFolderFileChunkResponse r;
	soap_default_klft_GetSyncFolderFileChunkResponse(soap, &r);
	soap_default_klft_GetSyncFolderFileChunk(soap, &soap_tmp_klft_GetSyncFolderFileChunk);
	soap->encodingStyle = NULL;
	soap_get_klft_GetSyncFolderFileChunk(soap, &soap_tmp_klft_GetSyncFolderFileChunk, "klft-GetSyncFolderFileChunk", NULL);
	if (soap->error)
		return soap->error;
	
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
#ifndef WITH_LEANER
	 || soap_resolve_attachments(soap)
#endif
	 || soap_end_recv(soap))
		return soap->error;
	soap->error = klft_GetSyncFolderFileChunk(soap, soap_tmp_klft_GetSyncFolderFileChunk.syncFolderFileId, soap_tmp_klft_GetSyncFolderFileChunk.folderFileName, soap_tmp_klft_GetSyncFolderFileChunk.startFilePos, soap_tmp_klft_GetSyncFolderFileChunk.neededSize, r);
	if (soap->error)
		return soap->error;
	soap_serializeheader(soap);
	soap_serialize_klft_GetSyncFolderFileChunkResponse(soap, &r);
	soap_begin_count(soap);
	if (soap->mode & SOAP_IO_LENGTH)
	{	soap_envelope_begin_out(soap);
		soap_putheader(soap);
		soap_body_begin_out(soap);
		soap_put_klft_GetSyncFolderFileChunkResponse(soap, &r, "klft-GetSyncFolderFileChunkResponse", "");
		soap_body_end_out(soap);
		soap_envelope_end_out(soap);
	};
	if (soap_response(soap, SOAP_OK)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put_klft_GetSyncFolderFileChunkResponse(soap, &r, "klft-GetSyncFolderFileChunkResponse", "")
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap->error;
	soap_closesock(soap);
	return SOAP_OK;
}

SOAP_FMAC5 int SOAP_FMAC6 soap_serve_sync_putData(struct soap *soap)
{	struct sync_putData soap_tmp_sync_putData;
	struct sync_putDataResponse r;
	soap_default_sync_putDataResponse(soap, &r);
	soap_default_sync_putData(soap, &soap_tmp_sync_putData);
	soap->encodingStyle = NULL;
	soap_get_sync_putData(soap, &soap_tmp_sync_putData, "sync-putData", NULL);
	if (soap->error)
		return soap->error;
	
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
#ifndef WITH_LEANER
	 || soap_resolve_attachments(soap)
#endif
	 || soap_end_recv(soap))
		return soap->error;
	soap->error = sync_putData(soap, soap_tmp_sync_putData.wstrID, soap_tmp_sync_putData.data, r);
	if (soap->error)
		return soap->error;
	soap_serializeheader(soap);
	soap_serialize_sync_putDataResponse(soap, &r);
	soap_begin_count(soap);
	if (soap->mode & SOAP_IO_LENGTH)
	{	soap_envelope_begin_out(soap);
		soap_putheader(soap);
		soap_body_begin_out(soap);
		soap_put_sync_putDataResponse(soap, &r, "sync-putDataResponse", "");
		soap_body_end_out(soap);
		soap_envelope_end_out(soap);
	};
	if (soap_response(soap, SOAP_OK)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put_sync_putDataResponse(soap, &r, "sync-putDataResponse", "")
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap->error;
	soap_closesock(soap);
	return SOAP_OK;
}

SOAP_FMAC5 int SOAP_FMAC6 soap_serve_sync_Call(struct soap *soap)
{	struct sync_Call soap_tmp_sync_Call;
	struct sync_CallResponse r;
	soap_default_sync_CallResponse(soap, &r);
	soap_default_sync_Call(soap, &soap_tmp_sync_Call);
	soap->encodingStyle = NULL;
	soap_get_sync_Call(soap, &soap_tmp_sync_Call, "sync-Call", NULL);
	if (soap->error)
		return soap->error;
	
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
#ifndef WITH_LEANER
	 || soap_resolve_attachments(soap)
#endif
	 || soap_end_recv(soap))
		return soap->error;
	soap->error = sync_Call(soap, soap_tmp_sync_Call.wstrIDTo, soap_tmp_sync_Call.wstrIDFrom, soap_tmp_sync_Call.parInputData, r);
	if (soap->error)
		return soap->error;
	soap_serializeheader(soap);
	soap_serialize_sync_CallResponse(soap, &r);
	soap_begin_count(soap);
	if (soap->mode & SOAP_IO_LENGTH)
	{	soap_envelope_begin_out(soap);
		soap_putheader(soap);
		soap_body_begin_out(soap);
		soap_put_sync_CallResponse(soap, &r, "sync-CallResponse", "");
		soap_body_end_out(soap);
		soap_envelope_end_out(soap);
	};
	if (soap_response(soap, SOAP_OK)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put_sync_CallResponse(soap, &r, "sync-CallResponse", "")
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap->error;
	soap_closesock(soap);
	return SOAP_OK;
}

SOAP_FMAC5 int SOAP_FMAC6 soap_serve_sync_start(struct soap *soap)
{	struct sync_start soap_tmp_sync_start;
	struct sync_startResponse r;
	soap_default_sync_startResponse(soap, &r);
	soap_default_sync_start(soap, &soap_tmp_sync_start);
	soap->encodingStyle = NULL;
	soap_get_sync_start(soap, &soap_tmp_sync_start, "sync-start", NULL);
	if (soap->error)
		return soap->error;
	
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
#ifndef WITH_LEANER
	 || soap_resolve_attachments(soap)
#endif
	 || soap_end_recv(soap))
		return soap->error;
	soap->error = sync_start(soap, soap_tmp_sync_start.wstrType, soap_tmp_sync_start.wstrIDFrom, soap_tmp_sync_start.parOptions, r);
	if (soap->error)
		return soap->error;
	soap_serializeheader(soap);
	soap_serialize_sync_startResponse(soap, &r);
	soap_begin_count(soap);
	if (soap->mode & SOAP_IO_LENGTH)
	{	soap_envelope_begin_out(soap);
		soap_putheader(soap);
		soap_body_begin_out(soap);
		soap_put_sync_startResponse(soap, &r, "sync-startResponse", "");
		soap_body_end_out(soap);
		soap_envelope_end_out(soap);
	};
	if (soap_response(soap, SOAP_OK)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put_sync_startResponse(soap, &r, "sync-startResponse", "")
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap->error;
	soap_closesock(soap);
	return SOAP_OK;
}

SOAP_FMAC5 int SOAP_FMAC6 soap_serve_klhst_UseKeepConnection(struct soap *soap)
{	struct klhst_UseKeepConnection soap_tmp_klhst_UseKeepConnection;
	struct klhst_UseKeepConnectionResponse r;
	soap_default_klhst_UseKeepConnectionResponse(soap, &r);
	soap_default_klhst_UseKeepConnection(soap, &soap_tmp_klhst_UseKeepConnection);
	soap->encodingStyle = NULL;
	soap_get_klhst_UseKeepConnection(soap, &soap_tmp_klhst_UseKeepConnection, "klhst-UseKeepConnection", NULL);
	if (soap->error)
		return soap->error;
	
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
#ifndef WITH_LEANER
	 || soap_resolve_attachments(soap)
#endif
	 || soap_end_recv(soap))
		return soap->error;
	soap->error = klhst_UseKeepConnection(soap, soap_tmp_klhst_UseKeepConnection.host, r);
	if (soap->error)
		return soap->error;
	soap_serializeheader(soap);
	soap_serialize_klhst_UseKeepConnectionResponse(soap, &r);
	soap_begin_count(soap);
	if (soap->mode & SOAP_IO_LENGTH)
	{	soap_envelope_begin_out(soap);
		soap_putheader(soap);
		soap_body_begin_out(soap);
		soap_put_klhst_UseKeepConnectionResponse(soap, &r, "klhst-UseKeepConnectionResponse", "");
		soap_body_end_out(soap);
		soap_envelope_end_out(soap);
	};
	if (soap_response(soap, SOAP_OK)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put_klhst_UseKeepConnectionResponse(soap, &r, "klhst-UseKeepConnectionResponse", "")
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap->error;
	soap_closesock(soap);
	return SOAP_OK;
}

SOAP_FMAC5 int SOAP_FMAC6 soap_serve_klhst_AddHosts(struct soap *soap)
{	struct klhst_AddHosts soap_tmp_klhst_AddHosts;
	struct klhst_AddHostsResponse r;
	soap_default_klhst_AddHostsResponse(soap, &r);
	soap_default_klhst_AddHosts(soap, &soap_tmp_klhst_AddHosts);
	soap->encodingStyle = NULL;
	soap_get_klhst_AddHosts(soap, &soap_tmp_klhst_AddHosts, "klhst-AddHosts", NULL);
	if (soap->error)
		return soap->error;
	
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
#ifndef WITH_LEANER
	 || soap_resolve_attachments(soap)
#endif
	 || soap_end_recv(soap))
		return soap->error;
	soap->error = klhst_AddHosts(soap, soap_tmp_klhst_AddHosts.info, r);
	if (soap->error)
		return soap->error;
	soap_serializeheader(soap);
	soap_serialize_klhst_AddHostsResponse(soap, &r);
	soap_begin_count(soap);
	if (soap->mode & SOAP_IO_LENGTH)
	{	soap_envelope_begin_out(soap);
		soap_putheader(soap);
		soap_body_begin_out(soap);
		soap_put_klhst_AddHostsResponse(soap, &r, "klhst-AddHostsResponse", "");
		soap_body_end_out(soap);
		soap_envelope_end_out(soap);
	};
	if (soap_response(soap, SOAP_OK)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put_klhst_AddHostsResponse(soap, &r, "klhst-AddHostsResponse", "")
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap->error;
	soap_closesock(soap);
	return SOAP_OK;
}

SOAP_FMAC5 int SOAP_FMAC6 soap_serve_klhst_GetHostTasks(struct soap *soap)
{	struct klhst_GetHostTasks soap_tmp_klhst_GetHostTasks;
	struct klhst_GetHostTasksResponse r;
	soap_default_klhst_GetHostTasksResponse(soap, &r);
	soap_default_klhst_GetHostTasks(soap, &soap_tmp_klhst_GetHostTasks);
	soap->encodingStyle = NULL;
	soap_get_klhst_GetHostTasks(soap, &soap_tmp_klhst_GetHostTasks, "klhst-GetHostTasks", NULL);
	if (soap->error)
		return soap->error;
	
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
#ifndef WITH_LEANER
	 || soap_resolve_attachments(soap)
#endif
	 || soap_end_recv(soap))
		return soap->error;
	soap->error = klhst_GetHostTasks(soap, soap_tmp_klhst_GetHostTasks.host, soap_tmp_klhst_GetHostTasks.product, soap_tmp_klhst_GetHostTasks.version, soap_tmp_klhst_GetHostTasks.lifetime, r);
	if (soap->error)
		return soap->error;
	soap_serializeheader(soap);
	soap_serialize_klhst_GetHostTasksResponse(soap, &r);
	soap_begin_count(soap);
	if (soap->mode & SOAP_IO_LENGTH)
	{	soap_envelope_begin_out(soap);
		soap_putheader(soap);
		soap_body_begin_out(soap);
		soap_put_klhst_GetHostTasksResponse(soap, &r, "klhst-GetHostTasksResponse", "");
		soap_body_end_out(soap);
		soap_envelope_end_out(soap);
	};
	if (soap_response(soap, SOAP_OK)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put_klhst_GetHostTasksResponse(soap, &r, "klhst-GetHostTasksResponse", "")
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap->error;
	soap_closesock(soap);
	return SOAP_OK;
}

SOAP_FMAC5 int SOAP_FMAC6 soap_serve_klhst_GetDomains(struct soap *soap)
{	struct klhst_GetDomains soap_tmp_klhst_GetDomains;
	struct klhst_GetDomainsResponse r;
	soap_default_klhst_GetDomainsResponse(soap, &r);
	soap_default_klhst_GetDomains(soap, &soap_tmp_klhst_GetDomains);
	soap->encodingStyle = NULL;
	soap_get_klhst_GetDomains(soap, &soap_tmp_klhst_GetDomains, "klhst-GetDomains", NULL);
	if (soap->error)
		return soap->error;
	
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
#ifndef WITH_LEANER
	 || soap_resolve_attachments(soap)
#endif
	 || soap_end_recv(soap))
		return soap->error;
	soap->error = klhst_GetDomains(soap, soap_tmp_klhst_GetDomains._, r);
	if (soap->error)
		return soap->error;
	soap_serializeheader(soap);
	soap_serialize_klhst_GetDomainsResponse(soap, &r);
	soap_begin_count(soap);
	if (soap->mode & SOAP_IO_LENGTH)
	{	soap_envelope_begin_out(soap);
		soap_putheader(soap);
		soap_body_begin_out(soap);
		soap_put_klhst_GetDomainsResponse(soap, &r, "klhst-GetDomainsResponse", "");
		soap_body_end_out(soap);
		soap_envelope_end_out(soap);
	};
	if (soap_response(soap, SOAP_OK)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put_klhst_GetDomainsResponse(soap, &r, "klhst-GetDomainsResponse", "")
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap->error;
	soap_closesock(soap);
	return SOAP_OK;
}

SOAP_FMAC5 int SOAP_FMAC6 soap_serve_klhst_GetDomainHosts(struct soap *soap)
{	struct klhst_GetDomainHosts soap_tmp_klhst_GetDomainHosts;
	struct klhst_GetDomainHostsResponse r;
	soap_default_klhst_GetDomainHostsResponse(soap, &r);
	soap_default_klhst_GetDomainHosts(soap, &soap_tmp_klhst_GetDomainHosts);
	soap->encodingStyle = NULL;
	soap_get_klhst_GetDomainHosts(soap, &soap_tmp_klhst_GetDomainHosts, "klhst-GetDomainHosts", NULL);
	if (soap->error)
		return soap->error;
	
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
#ifndef WITH_LEANER
	 || soap_resolve_attachments(soap)
#endif
	 || soap_end_recv(soap))
		return soap->error;
	soap->error = klhst_GetDomainHosts(soap, soap_tmp_klhst_GetDomainHosts.domain, r);
	if (soap->error)
		return soap->error;
	soap_serializeheader(soap);
	soap_serialize_klhst_GetDomainHostsResponse(soap, &r);
	soap_begin_count(soap);
	if (soap->mode & SOAP_IO_LENGTH)
	{	soap_envelope_begin_out(soap);
		soap_putheader(soap);
		soap_body_begin_out(soap);
		soap_put_klhst_GetDomainHostsResponse(soap, &r, "klhst-GetDomainHostsResponse", "");
		soap_body_end_out(soap);
		soap_envelope_end_out(soap);
	};
	if (soap_response(soap, SOAP_OK)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put_klhst_GetDomainHostsResponse(soap, &r, "klhst-GetDomainHostsResponse", "")
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap->error;
	soap_closesock(soap);
	return SOAP_OK;
}

SOAP_FMAC5 int SOAP_FMAC6 soap_serve_klhst_GetHostInfo(struct soap *soap)
{	struct klhst_GetHostInfo soap_tmp_klhst_GetHostInfo;
	struct klhst_GetHostInfoResponse r;
	soap_default_klhst_GetHostInfoResponse(soap, &r);
	soap_default_klhst_GetHostInfo(soap, &soap_tmp_klhst_GetHostInfo);
	soap->encodingStyle = NULL;
	soap_get_klhst_GetHostInfo(soap, &soap_tmp_klhst_GetHostInfo, "klhst-GetHostInfo", NULL);
	if (soap->error)
		return soap->error;
	
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
#ifndef WITH_LEANER
	 || soap_resolve_attachments(soap)
#endif
	 || soap_end_recv(soap))
		return soap->error;
	soap->error = klhst_GetHostInfo(soap, soap_tmp_klhst_GetHostInfo.name, soap_tmp_klhst_GetHostInfo.fields, r);
	if (soap->error)
		return soap->error;
	soap_serializeheader(soap);
	soap_serialize_klhst_GetHostInfoResponse(soap, &r);
	soap_begin_count(soap);
	if (soap->mode & SOAP_IO_LENGTH)
	{	soap_envelope_begin_out(soap);
		soap_putheader(soap);
		soap_body_begin_out(soap);
		soap_put_klhst_GetHostInfoResponse(soap, &r, "klhst-GetHostInfoResponse", "");
		soap_body_end_out(soap);
		soap_envelope_end_out(soap);
	};
	if (soap_response(soap, SOAP_OK)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put_klhst_GetHostInfoResponse(soap, &r, "klhst-GetHostInfoResponse", "")
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap->error;
	soap_closesock(soap);
	return SOAP_OK;
}

SOAP_FMAC5 int SOAP_FMAC6 soap_serve_klhst_AddDomain(struct soap *soap)
{	struct klhst_AddDomain soap_tmp_klhst_AddDomain;
	struct klhst_AddDomainResponse r;
	soap_default_klhst_AddDomainResponse(soap, &r);
	soap_default_klhst_AddDomain(soap, &soap_tmp_klhst_AddDomain);
	soap->encodingStyle = NULL;
	soap_get_klhst_AddDomain(soap, &soap_tmp_klhst_AddDomain, "klhst-AddDomain", NULL);
	if (soap->error)
		return soap->error;
	
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
#ifndef WITH_LEANER
	 || soap_resolve_attachments(soap)
#endif
	 || soap_end_recv(soap))
		return soap->error;
	soap->error = klhst_AddDomain(soap, soap_tmp_klhst_AddDomain.domain, soap_tmp_klhst_AddDomain.type, r);
	if (soap->error)
		return soap->error;
	soap_serializeheader(soap);
	soap_serialize_klhst_AddDomainResponse(soap, &r);
	soap_begin_count(soap);
	if (soap->mode & SOAP_IO_LENGTH)
	{	soap_envelope_begin_out(soap);
		soap_putheader(soap);
		soap_body_begin_out(soap);
		soap_put_klhst_AddDomainResponse(soap, &r, "klhst-AddDomainResponse", "");
		soap_body_end_out(soap);
		soap_envelope_end_out(soap);
	};
	if (soap_response(soap, SOAP_OK)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put_klhst_AddDomainResponse(soap, &r, "klhst-AddDomainResponse", "")
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap->error;
	soap_closesock(soap);
	return SOAP_OK;
}

SOAP_FMAC5 int SOAP_FMAC6 soap_serve_klhst_DelDomain(struct soap *soap)
{	struct klhst_DelDomain soap_tmp_klhst_DelDomain;
	struct klhst_DelDomainResponse r;
	soap_default_klhst_DelDomainResponse(soap, &r);
	soap_default_klhst_DelDomain(soap, &soap_tmp_klhst_DelDomain);
	soap->encodingStyle = NULL;
	soap_get_klhst_DelDomain(soap, &soap_tmp_klhst_DelDomain, "klhst-DelDomain", NULL);
	if (soap->error)
		return soap->error;
	
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
#ifndef WITH_LEANER
	 || soap_resolve_attachments(soap)
#endif
	 || soap_end_recv(soap))
		return soap->error;
	soap->error = klhst_DelDomain(soap, soap_tmp_klhst_DelDomain.domain, r);
	if (soap->error)
		return soap->error;
	soap_serializeheader(soap);
	soap_serialize_klhst_DelDomainResponse(soap, &r);
	soap_begin_count(soap);
	if (soap->mode & SOAP_IO_LENGTH)
	{	soap_envelope_begin_out(soap);
		soap_putheader(soap);
		soap_body_begin_out(soap);
		soap_put_klhst_DelDomainResponse(soap, &r, "klhst-DelDomainResponse", "");
		soap_body_end_out(soap);
		soap_envelope_end_out(soap);
	};
	if (soap_response(soap, SOAP_OK)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put_klhst_DelDomainResponse(soap, &r, "klhst-DelDomainResponse", "")
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap->error;
	soap_closesock(soap);
	return SOAP_OK;
}

SOAP_FMAC5 int SOAP_FMAC6 soap_serve_klhst_AddHost(struct soap *soap)
{	struct klhst_AddHost soap_tmp_klhst_AddHost;
	struct klhst_AddHostResponse r;
	soap_default_klhst_AddHostResponse(soap, &r);
	soap_default_klhst_AddHost(soap, &soap_tmp_klhst_AddHost);
	soap->encodingStyle = NULL;
	soap_get_klhst_AddHost(soap, &soap_tmp_klhst_AddHost, "klhst-AddHost", NULL);
	if (soap->error)
		return soap->error;
	
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
#ifndef WITH_LEANER
	 || soap_resolve_attachments(soap)
#endif
	 || soap_end_recv(soap))
		return soap->error;
	soap->error = klhst_AddHost(soap, soap_tmp_klhst_AddHost.info, r);
	if (soap->error)
		return soap->error;
	soap_serializeheader(soap);
	soap_serialize_klhst_AddHostResponse(soap, &r);
	soap_begin_count(soap);
	if (soap->mode & SOAP_IO_LENGTH)
	{	soap_envelope_begin_out(soap);
		soap_putheader(soap);
		soap_body_begin_out(soap);
		soap_put_klhst_AddHostResponse(soap, &r, "klhst-AddHostResponse", "");
		soap_body_end_out(soap);
		soap_envelope_end_out(soap);
	};
	if (soap_response(soap, SOAP_OK)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put_klhst_AddHostResponse(soap, &r, "klhst-AddHostResponse", "")
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap->error;
	soap_closesock(soap);
	return SOAP_OK;
}

SOAP_FMAC5 int SOAP_FMAC6 soap_serve_klhst_DelHost(struct soap *soap)
{	struct klhst_DelHost soap_tmp_klhst_DelHost;
	struct klhst_DelHostResponse r;
	soap_default_klhst_DelHostResponse(soap, &r);
	soap_default_klhst_DelHost(soap, &soap_tmp_klhst_DelHost);
	soap->encodingStyle = NULL;
	soap_get_klhst_DelHost(soap, &soap_tmp_klhst_DelHost, "klhst-DelHost", NULL);
	if (soap->error)
		return soap->error;
	
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
#ifndef WITH_LEANER
	 || soap_resolve_attachments(soap)
#endif
	 || soap_end_recv(soap))
		return soap->error;
	soap->error = klhst_DelHost(soap, soap_tmp_klhst_DelHost.name, r);
	if (soap->error)
		return soap->error;
	soap_serializeheader(soap);
	soap_serialize_klhst_DelHostResponse(soap, &r);
	soap_begin_count(soap);
	if (soap->mode & SOAP_IO_LENGTH)
	{	soap_envelope_begin_out(soap);
		soap_putheader(soap);
		soap_body_begin_out(soap);
		soap_put_klhst_DelHostResponse(soap, &r, "klhst-DelHostResponse", "");
		soap_body_end_out(soap);
		soap_envelope_end_out(soap);
	};
	if (soap_response(soap, SOAP_OK)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put_klhst_DelHostResponse(soap, &r, "klhst-DelHostResponse", "")
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap->error;
	soap_closesock(soap);
	return SOAP_OK;
}

SOAP_FMAC5 int SOAP_FMAC6 soap_serve_klhst_UpdateHost(struct soap *soap)
{	struct klhst_UpdateHost soap_tmp_klhst_UpdateHost;
	struct klhst_UpdateHostResponse r;
	soap_default_klhst_UpdateHostResponse(soap, &r);
	soap_default_klhst_UpdateHost(soap, &soap_tmp_klhst_UpdateHost);
	soap->encodingStyle = NULL;
	soap_get_klhst_UpdateHost(soap, &soap_tmp_klhst_UpdateHost, "klhst-UpdateHost", NULL);
	if (soap->error)
		return soap->error;
	
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
#ifndef WITH_LEANER
	 || soap_resolve_attachments(soap)
#endif
	 || soap_end_recv(soap))
		return soap->error;
	soap->error = klhst_UpdateHost(soap, soap_tmp_klhst_UpdateHost.name, soap_tmp_klhst_UpdateHost.info, r);
	if (soap->error)
		return soap->error;
	soap_serializeheader(soap);
	soap_serialize_klhst_UpdateHostResponse(soap, &r);
	soap_begin_count(soap);
	if (soap->mode & SOAP_IO_LENGTH)
	{	soap_envelope_begin_out(soap);
		soap_putheader(soap);
		soap_body_begin_out(soap);
		soap_put_klhst_UpdateHostResponse(soap, &r, "klhst-UpdateHostResponse", "");
		soap_body_end_out(soap);
		soap_envelope_end_out(soap);
	};
	if (soap_response(soap, SOAP_OK)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put_klhst_UpdateHostResponse(soap, &r, "klhst-UpdateHostResponse", "")
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap->error;
	soap_closesock(soap);
	return SOAP_OK;
}

SOAP_FMAC5 int SOAP_FMAC6 soap_serve_klhst_GetHostProducts(struct soap *soap)
{	struct klhst_GetHostProducts soap_tmp_klhst_GetHostProducts;
	struct klhst_GetHostProductsResponse r;
	soap_default_klhst_GetHostProductsResponse(soap, &r);
	soap_default_klhst_GetHostProducts(soap, &soap_tmp_klhst_GetHostProducts);
	soap->encodingStyle = NULL;
	soap_get_klhst_GetHostProducts(soap, &soap_tmp_klhst_GetHostProducts, "klhst-GetHostProducts", NULL);
	if (soap->error)
		return soap->error;
	
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
#ifndef WITH_LEANER
	 || soap_resolve_attachments(soap)
#endif
	 || soap_end_recv(soap))
		return soap->error;
	soap->error = klhst_GetHostProducts(soap, soap_tmp_klhst_GetHostProducts.name, r);
	if (soap->error)
		return soap->error;
	soap_serializeheader(soap);
	soap_serialize_klhst_GetHostProductsResponse(soap, &r);
	soap_begin_count(soap);
	if (soap->mode & SOAP_IO_LENGTH)
	{	soap_envelope_begin_out(soap);
		soap_putheader(soap);
		soap_body_begin_out(soap);
		soap_put_klhst_GetHostProductsResponse(soap, &r, "klhst-GetHostProductsResponse", "");
		soap_body_end_out(soap);
		soap_envelope_end_out(soap);
	};
	if (soap_response(soap, SOAP_OK)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put_klhst_GetHostProductsResponse(soap, &r, "klhst-GetHostProductsResponse", "")
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap->error;
	soap_closesock(soap);
	return SOAP_OK;
}

SOAP_FMAC5 int SOAP_FMAC6 soap_serve_klhst_SS_Read(struct soap *soap)
{	struct klhst_SS_Read soap_tmp_klhst_SS_Read;
	struct klhst_SS_ReadResponse r;
	soap_default_klhst_SS_ReadResponse(soap, &r);
	soap_default_klhst_SS_Read(soap, &soap_tmp_klhst_SS_Read);
	soap->encodingStyle = NULL;
	soap_get_klhst_SS_Read(soap, &soap_tmp_klhst_SS_Read, "klhst-SS-Read", NULL);
	if (soap->error)
		return soap->error;
	
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
#ifndef WITH_LEANER
	 || soap_resolve_attachments(soap)
#endif
	 || soap_end_recv(soap))
		return soap->error;
	soap->error = klhst_SS_Read(soap, soap_tmp_klhst_SS_Read.name, soap_tmp_klhst_SS_Read.type, soap_tmp_klhst_SS_Read.product, soap_tmp_klhst_SS_Read.version, soap_tmp_klhst_SS_Read.section, soap_tmp_klhst_SS_Read.timeout, r);
	if (soap->error)
		return soap->error;
	soap_serializeheader(soap);
	soap_serialize_klhst_SS_ReadResponse(soap, &r);
	soap_begin_count(soap);
	if (soap->mode & SOAP_IO_LENGTH)
	{	soap_envelope_begin_out(soap);
		soap_putheader(soap);
		soap_body_begin_out(soap);
		soap_put_klhst_SS_ReadResponse(soap, &r, "klhst-SS-ReadResponse", "");
		soap_body_end_out(soap);
		soap_envelope_end_out(soap);
	};
	if (soap_response(soap, SOAP_OK)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put_klhst_SS_ReadResponse(soap, &r, "klhst-SS-ReadResponse", "")
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap->error;
	soap_closesock(soap);
	return SOAP_OK;
}

SOAP_FMAC5 int SOAP_FMAC6 soap_serve_klhst_SS_Write(struct soap *soap)
{	struct klhst_SS_Write soap_tmp_klhst_SS_Write;
	struct klhst_SS_WriteResponse r;
	soap_default_klhst_SS_WriteResponse(soap, &r);
	soap_default_klhst_SS_Write(soap, &soap_tmp_klhst_SS_Write);
	soap->encodingStyle = NULL;
	soap_get_klhst_SS_Write(soap, &soap_tmp_klhst_SS_Write, "klhst-SS-Write", NULL);
	if (soap->error)
		return soap->error;
	
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
#ifndef WITH_LEANER
	 || soap_resolve_attachments(soap)
#endif
	 || soap_end_recv(soap))
		return soap->error;
	soap->error = klhst_SS_Write(soap, soap_tmp_klhst_SS_Write.name, soap_tmp_klhst_SS_Write.type, soap_tmp_klhst_SS_Write.product, soap_tmp_klhst_SS_Write.version, soap_tmp_klhst_SS_Write.section, soap_tmp_klhst_SS_Write.flags, soap_tmp_klhst_SS_Write.data, soap_tmp_klhst_SS_Write.timeout, r);
	if (soap->error)
		return soap->error;
	soap_serializeheader(soap);
	soap_serialize_klhst_SS_WriteResponse(soap, &r);
	soap_begin_count(soap);
	if (soap->mode & SOAP_IO_LENGTH)
	{	soap_envelope_begin_out(soap);
		soap_putheader(soap);
		soap_body_begin_out(soap);
		soap_put_klhst_SS_WriteResponse(soap, &r, "klhst-SS-WriteResponse", "");
		soap_body_end_out(soap);
		soap_envelope_end_out(soap);
	};
	if (soap_response(soap, SOAP_OK)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put_klhst_SS_WriteResponse(soap, &r, "klhst-SS-WriteResponse", "")
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap->error;
	soap_closesock(soap);
	return SOAP_OK;
}

SOAP_FMAC5 int SOAP_FMAC6 soap_serve_klhst_SS_CreateSection(struct soap *soap)
{	struct klhst_SS_CreateSection soap_tmp_klhst_SS_CreateSection;
	struct klhst_SS_CreateSectionResponse r;
	soap_default_klhst_SS_CreateSectionResponse(soap, &r);
	soap_default_klhst_SS_CreateSection(soap, &soap_tmp_klhst_SS_CreateSection);
	soap->encodingStyle = NULL;
	soap_get_klhst_SS_CreateSection(soap, &soap_tmp_klhst_SS_CreateSection, "klhst-SS-CreateSection", NULL);
	if (soap->error)
		return soap->error;
	
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
#ifndef WITH_LEANER
	 || soap_resolve_attachments(soap)
#endif
	 || soap_end_recv(soap))
		return soap->error;
	soap->error = klhst_SS_CreateSection(soap, soap_tmp_klhst_SS_CreateSection.name, soap_tmp_klhst_SS_CreateSection.type, soap_tmp_klhst_SS_CreateSection.product, soap_tmp_klhst_SS_CreateSection.version, soap_tmp_klhst_SS_CreateSection.section, soap_tmp_klhst_SS_CreateSection.timeout, r);
	if (soap->error)
		return soap->error;
	soap_serializeheader(soap);
	soap_serialize_klhst_SS_CreateSectionResponse(soap, &r);
	soap_begin_count(soap);
	if (soap->mode & SOAP_IO_LENGTH)
	{	soap_envelope_begin_out(soap);
		soap_putheader(soap);
		soap_body_begin_out(soap);
		soap_put_klhst_SS_CreateSectionResponse(soap, &r, "klhst-SS-CreateSectionResponse", "");
		soap_body_end_out(soap);
		soap_envelope_end_out(soap);
	};
	if (soap_response(soap, SOAP_OK)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put_klhst_SS_CreateSectionResponse(soap, &r, "klhst-SS-CreateSectionResponse", "")
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap->error;
	soap_closesock(soap);
	return SOAP_OK;
}

SOAP_FMAC5 int SOAP_FMAC6 soap_serve_klhst_SS_DeleteSection(struct soap *soap)
{	struct klhst_SS_DeleteSection soap_tmp_klhst_SS_DeleteSection;
	struct klhst_SS_DeleteSectionResponse r;
	soap_default_klhst_SS_DeleteSectionResponse(soap, &r);
	soap_default_klhst_SS_DeleteSection(soap, &soap_tmp_klhst_SS_DeleteSection);
	soap->encodingStyle = NULL;
	soap_get_klhst_SS_DeleteSection(soap, &soap_tmp_klhst_SS_DeleteSection, "klhst-SS-DeleteSection", NULL);
	if (soap->error)
		return soap->error;
	
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
#ifndef WITH_LEANER
	 || soap_resolve_attachments(soap)
#endif
	 || soap_end_recv(soap))
		return soap->error;
	soap->error = klhst_SS_DeleteSection(soap, soap_tmp_klhst_SS_DeleteSection.name, soap_tmp_klhst_SS_DeleteSection.type, soap_tmp_klhst_SS_DeleteSection.product, soap_tmp_klhst_SS_DeleteSection.version, soap_tmp_klhst_SS_DeleteSection.section, soap_tmp_klhst_SS_DeleteSection.timeout, r);
	if (soap->error)
		return soap->error;
	soap_serializeheader(soap);
	soap_serialize_klhst_SS_DeleteSectionResponse(soap, &r);
	soap_begin_count(soap);
	if (soap->mode & SOAP_IO_LENGTH)
	{	soap_envelope_begin_out(soap);
		soap_putheader(soap);
		soap_body_begin_out(soap);
		soap_put_klhst_SS_DeleteSectionResponse(soap, &r, "klhst-SS-DeleteSectionResponse", "");
		soap_body_end_out(soap);
		soap_envelope_end_out(soap);
	};
	if (soap_response(soap, SOAP_OK)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put_klhst_SS_DeleteSectionResponse(soap, &r, "klhst-SS-DeleteSectionResponse", "")
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap->error;
	soap_closesock(soap);
	return SOAP_OK;
}

SOAP_FMAC5 int SOAP_FMAC6 soap_serve_klhst_SS_GetNames(struct soap *soap)
{	struct klhst_SS_GetNames soap_tmp_klhst_SS_GetNames;
	struct klhst_SS_GetNamesResponse r;
	soap_default_klhst_SS_GetNamesResponse(soap, &r);
	soap_default_klhst_SS_GetNames(soap, &soap_tmp_klhst_SS_GetNames);
	soap->encodingStyle = NULL;
	soap_get_klhst_SS_GetNames(soap, &soap_tmp_klhst_SS_GetNames, "klhst-SS-GetNames", NULL);
	if (soap->error)
		return soap->error;
	
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
#ifndef WITH_LEANER
	 || soap_resolve_attachments(soap)
#endif
	 || soap_end_recv(soap))
		return soap->error;
	soap->error = klhst_SS_GetNames(soap, soap_tmp_klhst_SS_GetNames.name, soap_tmp_klhst_SS_GetNames.type, soap_tmp_klhst_SS_GetNames.product, soap_tmp_klhst_SS_GetNames.version, soap_tmp_klhst_SS_GetNames.timeout, r);
	if (soap->error)
		return soap->error;
	soap_serializeheader(soap);
	soap_serialize_klhst_SS_GetNamesResponse(soap, &r);
	soap_begin_count(soap);
	if (soap->mode & SOAP_IO_LENGTH)
	{	soap_envelope_begin_out(soap);
		soap_putheader(soap);
		soap_body_begin_out(soap);
		soap_put_klhst_SS_GetNamesResponse(soap, &r, "klhst-SS-GetNamesResponse", "");
		soap_body_end_out(soap);
		soap_envelope_end_out(soap);
	};
	if (soap_response(soap, SOAP_OK)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put_klhst_SS_GetNamesResponse(soap, &r, "klhst-SS-GetNamesResponse", "")
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap->error;
	soap_closesock(soap);
	return SOAP_OK;
}

SOAP_FMAC5 int SOAP_FMAC6 soap_serve_klhst_CallGetRunTimeInfo(struct soap *soap)
{	struct klhst_CallGetRunTimeInfo soap_tmp_klhst_CallGetRunTimeInfo;
	struct klhst_CallGetRunTimeInfoResponse r;
	soap_default_klhst_CallGetRunTimeInfoResponse(soap, &r);
	soap_default_klhst_CallGetRunTimeInfo(soap, &soap_tmp_klhst_CallGetRunTimeInfo);
	soap->encodingStyle = NULL;
	soap_get_klhst_CallGetRunTimeInfo(soap, &soap_tmp_klhst_CallGetRunTimeInfo, "klhst-CallGetRunTimeInfo", NULL);
	if (soap->error)
		return soap->error;
	
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
#ifndef WITH_LEANER
	 || soap_resolve_attachments(soap)
#endif
	 || soap_end_recv(soap))
		return soap->error;
	soap->error = klhst_CallGetRunTimeInfo(soap, soap_tmp_klhst_CallGetRunTimeInfo.name, soap_tmp_klhst_CallGetRunTimeInfo.filter, r);
	if (soap->error)
		return soap->error;
	soap_serializeheader(soap);
	soap_serialize_klhst_CallGetRunTimeInfoResponse(soap, &r);
	soap_begin_count(soap);
	if (soap->mode & SOAP_IO_LENGTH)
	{	soap_envelope_begin_out(soap);
		soap_putheader(soap);
		soap_body_begin_out(soap);
		soap_put_klhst_CallGetRunTimeInfoResponse(soap, &r, "klhst-CallGetRunTimeInfoResponse", "");
		soap_body_end_out(soap);
		soap_envelope_end_out(soap);
	};
	if (soap_response(soap, SOAP_OK)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put_klhst_CallGetRunTimeInfoResponse(soap, &r, "klhst-CallGetRunTimeInfoResponse", "")
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap->error;
	soap_closesock(soap);
	return SOAP_OK;
}

SOAP_FMAC5 int SOAP_FMAC6 soap_serve_klhst_CallGetStaticInfo(struct soap *soap)
{	struct klhst_CallGetStaticInfo soap_tmp_klhst_CallGetStaticInfo;
	struct klhst_CallGetStaticInfoResponse r;
	soap_default_klhst_CallGetStaticInfoResponse(soap, &r);
	soap_default_klhst_CallGetStaticInfo(soap, &soap_tmp_klhst_CallGetStaticInfo);
	soap->encodingStyle = NULL;
	soap_get_klhst_CallGetStaticInfo(soap, &soap_tmp_klhst_CallGetStaticInfo, "klhst-CallGetStaticInfo", NULL);
	if (soap->error)
		return soap->error;
	
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
#ifndef WITH_LEANER
	 || soap_resolve_attachments(soap)
#endif
	 || soap_end_recv(soap))
		return soap->error;
	soap->error = klhst_CallGetStaticInfo(soap, soap_tmp_klhst_CallGetStaticInfo.name, soap_tmp_klhst_CallGetStaticInfo.filter, r);
	if (soap->error)
		return soap->error;
	soap_serializeheader(soap);
	soap_serialize_klhst_CallGetStaticInfoResponse(soap, &r);
	soap_begin_count(soap);
	if (soap->mode & SOAP_IO_LENGTH)
	{	soap_envelope_begin_out(soap);
		soap_putheader(soap);
		soap_body_begin_out(soap);
		soap_put_klhst_CallGetStaticInfoResponse(soap, &r, "klhst-CallGetStaticInfoResponse", "");
		soap_body_end_out(soap);
		soap_envelope_end_out(soap);
	};
	if (soap_response(soap, SOAP_OK)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put_klhst_CallGetStaticInfoResponse(soap, &r, "klhst-CallGetStaticInfoResponse", "")
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap->error;
	soap_closesock(soap);
	return SOAP_OK;
}

SOAP_FMAC5 int SOAP_FMAC6 soap_serve_klhst_CallGetStatistics(struct soap *soap)
{	struct klhst_CallGetStatistics soap_tmp_klhst_CallGetStatistics;
	struct klhst_CallGetStatisticsResponse r;
	soap_default_klhst_CallGetStatisticsResponse(soap, &r);
	soap_default_klhst_CallGetStatistics(soap, &soap_tmp_klhst_CallGetStatistics);
	soap->encodingStyle = NULL;
	soap_get_klhst_CallGetStatistics(soap, &soap_tmp_klhst_CallGetStatistics, "klhst-CallGetStatistics", NULL);
	if (soap->error)
		return soap->error;
	
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
#ifndef WITH_LEANER
	 || soap_resolve_attachments(soap)
#endif
	 || soap_end_recv(soap))
		return soap->error;
	soap->error = klhst_CallGetStatistics(soap, soap_tmp_klhst_CallGetStatistics.name, soap_tmp_klhst_CallGetStatistics.filter, r);
	if (soap->error)
		return soap->error;
	soap_serializeheader(soap);
	soap_serialize_klhst_CallGetStatisticsResponse(soap, &r);
	soap_begin_count(soap);
	if (soap->mode & SOAP_IO_LENGTH)
	{	soap_envelope_begin_out(soap);
		soap_putheader(soap);
		soap_body_begin_out(soap);
		soap_put_klhst_CallGetStatisticsResponse(soap, &r, "klhst-CallGetStatisticsResponse", "");
		soap_body_end_out(soap);
		soap_envelope_end_out(soap);
	};
	if (soap_response(soap, SOAP_OK)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put_klhst_CallGetStatisticsResponse(soap, &r, "klhst-CallGetStatisticsResponse", "")
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap->error;
	soap_closesock(soap);
	return SOAP_OK;
}

SOAP_FMAC5 int SOAP_FMAC6 soap_serve_klhst_CallGetInstancePort(struct soap *soap)
{	struct klhst_CallGetInstancePort soap_tmp_klhst_CallGetInstancePort;
	struct klhst_CallGetInstancePortResponse r;
	soap_default_klhst_CallGetInstancePortResponse(soap, &r);
	soap_default_klhst_CallGetInstancePort(soap, &soap_tmp_klhst_CallGetInstancePort);
	soap->encodingStyle = NULL;
	soap_get_klhst_CallGetInstancePort(soap, &soap_tmp_klhst_CallGetInstancePort, "klhst-CallGetInstancePort", NULL);
	if (soap->error)
		return soap->error;
	
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
#ifndef WITH_LEANER
	 || soap_resolve_attachments(soap)
#endif
	 || soap_end_recv(soap))
		return soap->error;
	soap->error = klhst_CallGetInstancePort(soap, soap_tmp_klhst_CallGetInstancePort.name, soap_tmp_klhst_CallGetInstancePort.product, soap_tmp_klhst_CallGetInstancePort.version, soap_tmp_klhst_CallGetInstancePort.component, soap_tmp_klhst_CallGetInstancePort.instance, r);
	if (soap->error)
		return soap->error;
	soap_serializeheader(soap);
	soap_serialize_klhst_CallGetInstancePortResponse(soap, &r);
	soap_begin_count(soap);
	if (soap->mode & SOAP_IO_LENGTH)
	{	soap_envelope_begin_out(soap);
		soap_putheader(soap);
		soap_body_begin_out(soap);
		soap_put_klhst_CallGetInstancePortResponse(soap, &r, "klhst-CallGetInstancePortResponse", "");
		soap_body_end_out(soap);
		soap_envelope_end_out(soap);
	};
	if (soap_response(soap, SOAP_OK)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put_klhst_CallGetInstancePortResponse(soap, &r, "klhst-CallGetInstancePortResponse", "")
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap->error;
	soap_closesock(soap);
	return SOAP_OK;
}

SOAP_FMAC5 int SOAP_FMAC6 soap_serve_klhst_NotifyTask(struct soap *soap)
{	struct klhst_NotifyTask soap_tmp_klhst_NotifyTask;
	struct klhst_NotifyTaskResponse r;
	soap_default_klhst_NotifyTaskResponse(soap, &r);
	soap_default_klhst_NotifyTask(soap, &soap_tmp_klhst_NotifyTask);
	soap->encodingStyle = NULL;
	soap_get_klhst_NotifyTask(soap, &soap_tmp_klhst_NotifyTask, "klhst-NotifyTask", NULL);
	if (soap->error)
		return soap->error;
	
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
#ifndef WITH_LEANER
	 || soap_resolve_attachments(soap)
#endif
	 || soap_end_recv(soap))
		return soap->error;
	soap->error = klhst_NotifyTask(soap, soap_tmp_klhst_NotifyTask.name, r);
	if (soap->error)
		return soap->error;
	soap_serializeheader(soap);
	soap_serialize_klhst_NotifyTaskResponse(soap, &r);
	soap_begin_count(soap);
	if (soap->mode & SOAP_IO_LENGTH)
	{	soap_envelope_begin_out(soap);
		soap_putheader(soap);
		soap_body_begin_out(soap);
		soap_put_klhst_NotifyTaskResponse(soap, &r, "klhst-NotifyTaskResponse", "");
		soap_body_end_out(soap);
		soap_envelope_end_out(soap);
	};
	if (soap_response(soap, SOAP_OK)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put_klhst_NotifyTaskResponse(soap, &r, "klhst-NotifyTaskResponse", "")
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap->error;
	soap_closesock(soap);
	return SOAP_OK;
}

SOAP_FMAC5 int SOAP_FMAC6 soap_serve_klupdt_GetUpdatesInfo(struct soap *soap)
{	struct klupdt_GetUpdatesInfo soap_tmp_klupdt_GetUpdatesInfo;
	struct klupdt_GetUpdatesInfoResponse r;
	soap_default_klupdt_GetUpdatesInfoResponse(soap, &r);
	soap_default_klupdt_GetUpdatesInfo(soap, &soap_tmp_klupdt_GetUpdatesInfo);
	soap->encodingStyle = NULL;
	soap_get_klupdt_GetUpdatesInfo(soap, &soap_tmp_klupdt_GetUpdatesInfo, "klupdt-GetUpdatesInfo", NULL);
	if (soap->error)
		return soap->error;
	
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
#ifndef WITH_LEANER
	 || soap_resolve_attachments(soap)
#endif
	 || soap_end_recv(soap))
		return soap->error;
	soap->error = klupdt_GetUpdatesInfo(soap, soap_tmp_klupdt_GetUpdatesInfo.filter, r);
	if (soap->error)
		return soap->error;
	soap_serializeheader(soap);
	soap_serialize_klupdt_GetUpdatesInfoResponse(soap, &r);
	soap_begin_count(soap);
	if (soap->mode & SOAP_IO_LENGTH)
	{	soap_envelope_begin_out(soap);
		soap_putheader(soap);
		soap_body_begin_out(soap);
		soap_put_klupdt_GetUpdatesInfoResponse(soap, &r, "klupdt-GetUpdatesInfoResponse", "");
		soap_body_end_out(soap);
		soap_envelope_end_out(soap);
	};
	if (soap_response(soap, SOAP_OK)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put_klupdt_GetUpdatesInfoResponse(soap, &r, "klupdt-GetUpdatesInfoResponse", "")
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap->error;
	soap_closesock(soap);
	return SOAP_OK;
}

SOAP_FMAC5 int SOAP_FMAC6 soap_serve_klupdt_SetBundleOptions(struct soap *soap)
{	struct klupdt_SetBundleOptions soap_tmp_klupdt_SetBundleOptions;
	struct klupdt_SetBundleOptionsResponse r;
	soap_default_klupdt_SetBundleOptionsResponse(soap, &r);
	soap_default_klupdt_SetBundleOptions(soap, &soap_tmp_klupdt_SetBundleOptions);
	soap->encodingStyle = NULL;
	soap_get_klupdt_SetBundleOptions(soap, &soap_tmp_klupdt_SetBundleOptions, "klupdt-SetBundleOptions", NULL);
	if (soap->error)
		return soap->error;
	
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
#ifndef WITH_LEANER
	 || soap_resolve_attachments(soap)
#endif
	 || soap_end_recv(soap))
		return soap->error;
	soap->error = klupdt_SetBundleOptions(soap, soap_tmp_klupdt_SetBundleOptions.paramOptions, r);
	if (soap->error)
		return soap->error;
	soap_serializeheader(soap);
	soap_serialize_klupdt_SetBundleOptionsResponse(soap, &r);
	soap_begin_count(soap);
	if (soap->mode & SOAP_IO_LENGTH)
	{	soap_envelope_begin_out(soap);
		soap_putheader(soap);
		soap_body_begin_out(soap);
		soap_put_klupdt_SetBundleOptionsResponse(soap, &r, "klupdt-SetBundleOptionsResponse", "");
		soap_body_end_out(soap);
		soap_envelope_end_out(soap);
	};
	if (soap_response(soap, SOAP_OK)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put_klupdt_SetBundleOptionsResponse(soap, &r, "klupdt-SetBundleOptionsResponse", "")
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap->error;
	soap_closesock(soap);
	return SOAP_OK;
}

SOAP_FMAC5 int SOAP_FMAC6 soap_serve_klupdt_SetGeneralOptions(struct soap *soap)
{	struct klupdt_SetGeneralOptions soap_tmp_klupdt_SetGeneralOptions;
	struct klupdt_SetGeneralOptionsResponse r;
	soap_default_klupdt_SetGeneralOptionsResponse(soap, &r);
	soap_default_klupdt_SetGeneralOptions(soap, &soap_tmp_klupdt_SetGeneralOptions);
	soap->encodingStyle = NULL;
	soap_get_klupdt_SetGeneralOptions(soap, &soap_tmp_klupdt_SetGeneralOptions, "klupdt-SetGeneralOptions", NULL);
	if (soap->error)
		return soap->error;
	
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
#ifndef WITH_LEANER
	 || soap_resolve_attachments(soap)
#endif
	 || soap_end_recv(soap))
		return soap->error;
	soap->error = klupdt_SetGeneralOptions(soap, soap_tmp_klupdt_SetGeneralOptions.paramOptions, r);
	if (soap->error)
		return soap->error;
	soap_serializeheader(soap);
	soap_serialize_klupdt_SetGeneralOptionsResponse(soap, &r);
	soap_begin_count(soap);
	if (soap->mode & SOAP_IO_LENGTH)
	{	soap_envelope_begin_out(soap);
		soap_putheader(soap);
		soap_body_begin_out(soap);
		soap_put_klupdt_SetGeneralOptionsResponse(soap, &r, "klupdt-SetGeneralOptionsResponse", "");
		soap_body_end_out(soap);
		soap_envelope_end_out(soap);
	};
	if (soap_response(soap, SOAP_OK)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put_klupdt_SetGeneralOptionsResponse(soap, &r, "klupdt-SetGeneralOptionsResponse", "")
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap->error;
	soap_closesock(soap);
	return SOAP_OK;
}

SOAP_FMAC5 int SOAP_FMAC6 soap_serve_klupdt_GetGeneralOptions(struct soap *soap)
{	struct klupdt_GetGeneralOptions soap_tmp_klupdt_GetGeneralOptions;
	struct klupdt_GetGeneralOptionsResponse r;
	soap_default_klupdt_GetGeneralOptionsResponse(soap, &r);
	soap_default_klupdt_GetGeneralOptions(soap, &soap_tmp_klupdt_GetGeneralOptions);
	soap->encodingStyle = NULL;
	soap_get_klupdt_GetGeneralOptions(soap, &soap_tmp_klupdt_GetGeneralOptions, "klupdt-GetGeneralOptions", NULL);
	if (soap->error)
		return soap->error;
	
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
#ifndef WITH_LEANER
	 || soap_resolve_attachments(soap)
#endif
	 || soap_end_recv(soap))
		return soap->error;
	soap->error = klupdt_GetGeneralOptions(soap, soap_tmp_klupdt_GetGeneralOptions.data, r);
	if (soap->error)
		return soap->error;
	soap_serializeheader(soap);
	soap_serialize_klupdt_GetGeneralOptionsResponse(soap, &r);
	soap_begin_count(soap);
	if (soap->mode & SOAP_IO_LENGTH)
	{	soap_envelope_begin_out(soap);
		soap_putheader(soap);
		soap_body_begin_out(soap);
		soap_put_klupdt_GetGeneralOptionsResponse(soap, &r, "klupdt-GetGeneralOptionsResponse", "");
		soap_body_end_out(soap);
		soap_envelope_end_out(soap);
	};
	if (soap_response(soap, SOAP_OK)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put_klupdt_GetGeneralOptionsResponse(soap, &r, "klupdt-GetGeneralOptionsResponse", "")
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap->error;
	soap_closesock(soap);
	return SOAP_OK;
}

SOAP_FMAC5 int SOAP_FMAC6 soap_serve_klupdt_GetAvailableUpdatesInfo(struct soap *soap)
{	struct klupdt_GetAvailableUpdatesInfo soap_tmp_klupdt_GetAvailableUpdatesInfo;
	struct klupdt_GetAvailableUpdatesInfoResponse r;
	soap_default_klupdt_GetAvailableUpdatesInfoResponse(soap, &r);
	soap_default_klupdt_GetAvailableUpdatesInfo(soap, &soap_tmp_klupdt_GetAvailableUpdatesInfo);
	soap->encodingStyle = NULL;
	soap_get_klupdt_GetAvailableUpdatesInfo(soap, &soap_tmp_klupdt_GetAvailableUpdatesInfo, "klupdt-GetAvailableUpdatesInfo", NULL);
	if (soap->error)
		return soap->error;
	
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
#ifndef WITH_LEANER
	 || soap_resolve_attachments(soap)
#endif
	 || soap_end_recv(soap))
		return soap->error;
	soap->error = klupdt_GetAvailableUpdatesInfo(soap, soap_tmp_klupdt_GetAvailableUpdatesInfo.wstrLocalization, r);
	if (soap->error)
		return soap->error;
	soap_serializeheader(soap);
	soap_serialize_klupdt_GetAvailableUpdatesInfoResponse(soap, &r);
	soap_begin_count(soap);
	if (soap->mode & SOAP_IO_LENGTH)
	{	soap_envelope_begin_out(soap);
		soap_putheader(soap);
		soap_body_begin_out(soap);
		soap_put_klupdt_GetAvailableUpdatesInfoResponse(soap, &r, "klupdt-GetAvailableUpdatesInfoResponse", "");
		soap_body_end_out(soap);
		soap_envelope_end_out(soap);
	};
	if (soap_response(soap, SOAP_OK)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put_klupdt_GetAvailableUpdatesInfoResponse(soap, &r, "klupdt-GetAvailableUpdatesInfoResponse", "")
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap->error;
	soap_closesock(soap);
	return SOAP_OK;
}

SOAP_FMAC5 int SOAP_FMAC6 soap_serve_klupdt_GetRequiedUpdatesInfo(struct soap *soap)
{	struct klupdt_GetRequiedUpdatesInfo soap_tmp_klupdt_GetRequiedUpdatesInfo;
	struct klupdt_GetRequiedUpdatesInfoResponse r;
	soap_default_klupdt_GetRequiedUpdatesInfoResponse(soap, &r);
	soap_default_klupdt_GetRequiedUpdatesInfo(soap, &soap_tmp_klupdt_GetRequiedUpdatesInfo);
	soap->encodingStyle = NULL;
	soap_get_klupdt_GetRequiedUpdatesInfo(soap, &soap_tmp_klupdt_GetRequiedUpdatesInfo, "klupdt-GetRequiedUpdatesInfo", NULL);
	if (soap->error)
		return soap->error;
	
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
#ifndef WITH_LEANER
	 || soap_resolve_attachments(soap)
#endif
	 || soap_end_recv(soap))
		return soap->error;
	soap->error = klupdt_GetRequiedUpdatesInfo(soap, soap_tmp_klupdt_GetRequiedUpdatesInfo.nDummy, r);
	if (soap->error)
		return soap->error;
	soap_serializeheader(soap);
	soap_serialize_klupdt_GetRequiedUpdatesInfoResponse(soap, &r);
	soap_begin_count(soap);
	if (soap->mode & SOAP_IO_LENGTH)
	{	soap_envelope_begin_out(soap);
		soap_putheader(soap);
		soap_body_begin_out(soap);
		soap_put_klupdt_GetRequiedUpdatesInfoResponse(soap, &r, "klupdt-GetRequiedUpdatesInfoResponse", "");
		soap_body_end_out(soap);
		soap_envelope_end_out(soap);
	};
	if (soap_response(soap, SOAP_OK)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put_klupdt_GetRequiedUpdatesInfoResponse(soap, &r, "klupdt-GetRequiedUpdatesInfoResponse", "")
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap->error;
	soap_closesock(soap);
	return SOAP_OK;
}

SOAP_FMAC5 int SOAP_FMAC6 soap_serve_kllicsrv_GetKeysInfo(struct soap *soap)
{	struct kllicsrv_GetKeysInfo soap_tmp_kllicsrv_GetKeysInfo;
	struct kllicsrv_GetKeysInfoResponse r;
	soap_default_kllicsrv_GetKeysInfoResponse(soap, &r);
	soap_default_kllicsrv_GetKeysInfo(soap, &soap_tmp_kllicsrv_GetKeysInfo);
	soap->encodingStyle = NULL;
	soap_get_kllicsrv_GetKeysInfo(soap, &soap_tmp_kllicsrv_GetKeysInfo, "kllicsrv-GetKeysInfo", NULL);
	if (soap->error)
		return soap->error;
	
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
#ifndef WITH_LEANER
	 || soap_resolve_attachments(soap)
#endif
	 || soap_end_recv(soap))
		return soap->error;
	soap->error = kllicsrv_GetKeysInfo(soap, soap_tmp_kllicsrv_GetKeysInfo.fields, soap_tmp_kllicsrv_GetKeysInfo.filter, soap_tmp_kllicsrv_GetKeysInfo.lTimeout, soap_tmp_kllicsrv_GetKeysInfo.options, r);
	if (soap->error)
		return soap->error;
	soap_serializeheader(soap);
	soap_serialize_kllicsrv_GetKeysInfoResponse(soap, &r);
	soap_begin_count(soap);
	if (soap->mode & SOAP_IO_LENGTH)
	{	soap_envelope_begin_out(soap);
		soap_putheader(soap);
		soap_body_begin_out(soap);
		soap_put_kllicsrv_GetKeysInfoResponse(soap, &r, "kllicsrv-GetKeysInfoResponse", "");
		soap_body_end_out(soap);
		soap_envelope_end_out(soap);
	};
	if (soap_response(soap, SOAP_OK)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put_kllicsrv_GetKeysInfoResponse(soap, &r, "kllicsrv-GetKeysInfoResponse", "")
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap->error;
	soap_closesock(soap);
	return SOAP_OK;
}

SOAP_FMAC5 int SOAP_FMAC6 soap_serve_kllicsrv_GetKeyInfo(struct soap *soap)
{	struct kllicsrv_GetKeyInfo soap_tmp_kllicsrv_GetKeyInfo;
	struct kllicsrv_GetKeyInfoResponse r;
	soap_default_kllicsrv_GetKeyInfoResponse(soap, &r);
	soap_default_kllicsrv_GetKeyInfo(soap, &soap_tmp_kllicsrv_GetKeyInfo);
	soap->encodingStyle = NULL;
	soap_get_kllicsrv_GetKeyInfo(soap, &soap_tmp_kllicsrv_GetKeyInfo, "kllicsrv-GetKeyInfo", NULL);
	if (soap->error)
		return soap->error;
	
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
#ifndef WITH_LEANER
	 || soap_resolve_attachments(soap)
#endif
	 || soap_end_recv(soap))
		return soap->error;
	soap->error = kllicsrv_GetKeyInfo(soap, soap_tmp_kllicsrv_GetKeyInfo.fields, soap_tmp_kllicsrv_GetKeyInfo.fieldsToOrder, soap_tmp_kllicsrv_GetKeyInfo.serial, soap_tmp_kllicsrv_GetKeyInfo.lTimeout, r);
	if (soap->error)
		return soap->error;
	soap_serializeheader(soap);
	soap_serialize_kllicsrv_GetKeyInfoResponse(soap, &r);
	soap_begin_count(soap);
	if (soap->mode & SOAP_IO_LENGTH)
	{	soap_envelope_begin_out(soap);
		soap_putheader(soap);
		soap_body_begin_out(soap);
		soap_put_kllicsrv_GetKeyInfoResponse(soap, &r, "kllicsrv-GetKeyInfoResponse", "");
		soap_body_end_out(soap);
		soap_envelope_end_out(soap);
	};
	if (soap_response(soap, SOAP_OK)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put_kllicsrv_GetKeyInfoResponse(soap, &r, "kllicsrv-GetKeyInfoResponse", "")
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap->error;
	soap_closesock(soap);
	return SOAP_OK;
}

SOAP_FMAC5 int SOAP_FMAC6 soap_serve_kllicsrv_DeleteKeyInfo(struct soap *soap)
{	struct kllicsrv_DeleteKeyInfo soap_tmp_kllicsrv_DeleteKeyInfo;
	struct kllicsrv_DeleteKeyInfoResponse r;
	soap_default_kllicsrv_DeleteKeyInfoResponse(soap, &r);
	soap_default_kllicsrv_DeleteKeyInfo(soap, &soap_tmp_kllicsrv_DeleteKeyInfo);
	soap->encodingStyle = NULL;
	soap_get_kllicsrv_DeleteKeyInfo(soap, &soap_tmp_kllicsrv_DeleteKeyInfo, "kllicsrv-DeleteKeyInfo", NULL);
	if (soap->error)
		return soap->error;
	
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
#ifndef WITH_LEANER
	 || soap_resolve_attachments(soap)
#endif
	 || soap_end_recv(soap))
		return soap->error;
	soap->error = kllicsrv_DeleteKeyInfo(soap, soap_tmp_kllicsrv_DeleteKeyInfo.serial, r);
	if (soap->error)
		return soap->error;
	soap_serializeheader(soap);
	soap_serialize_kllicsrv_DeleteKeyInfoResponse(soap, &r);
	soap_begin_count(soap);
	if (soap->mode & SOAP_IO_LENGTH)
	{	soap_envelope_begin_out(soap);
		soap_putheader(soap);
		soap_body_begin_out(soap);
		soap_put_kllicsrv_DeleteKeyInfoResponse(soap, &r, "kllicsrv-DeleteKeyInfoResponse", "");
		soap_body_end_out(soap);
		soap_envelope_end_out(soap);
	};
	if (soap_response(soap, SOAP_OK)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put_kllicsrv_DeleteKeyInfoResponse(soap, &r, "kllicsrv-DeleteKeyInfoResponse", "")
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap->error;
	soap_closesock(soap);
	return SOAP_OK;
}

SOAP_FMAC5 int SOAP_FMAC6 soap_serve_kllicsrv_InstallKey(struct soap *soap)
{	struct kllicsrv_InstallKey soap_tmp_kllicsrv_InstallKey;
	struct kllicsrv_InstallKeyResponse r;
	soap_default_kllicsrv_InstallKeyResponse(soap, &r);
	soap_default_kllicsrv_InstallKey(soap, &soap_tmp_kllicsrv_InstallKey);
	soap->encodingStyle = NULL;
	soap_get_kllicsrv_InstallKey(soap, &soap_tmp_kllicsrv_InstallKey, "kllicsrv-InstallKey", NULL);
	if (soap->error)
		return soap->error;
	
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
#ifndef WITH_LEANER
	 || soap_resolve_attachments(soap)
#endif
	 || soap_end_recv(soap))
		return soap->error;
	soap->error = kllicsrv_InstallKey(soap, soap_tmp_kllicsrv_InstallKey.keyinfo, r);
	if (soap->error)
		return soap->error;
	soap_serializeheader(soap);
	soap_serialize_kllicsrv_InstallKeyResponse(soap, &r);
	soap_begin_count(soap);
	if (soap->mode & SOAP_IO_LENGTH)
	{	soap_envelope_begin_out(soap);
		soap_putheader(soap);
		soap_body_begin_out(soap);
		soap_put_kllicsrv_InstallKeyResponse(soap, &r, "kllicsrv-InstallKeyResponse", "");
		soap_body_end_out(soap);
		soap_envelope_end_out(soap);
	};
	if (soap_response(soap, SOAP_OK)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put_kllicsrv_InstallKeyResponse(soap, &r, "kllicsrv-InstallKeyResponse", "")
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap->error;
	soap_closesock(soap);
	return SOAP_OK;
}

SOAP_FMAC5 int SOAP_FMAC6 soap_serve_kllicsrv_UninstallKey(struct soap *soap)
{	struct kllicsrv_UninstallKey soap_tmp_kllicsrv_UninstallKey;
	struct kllicsrv_UninstallKeyResponse r;
	soap_default_kllicsrv_UninstallKeyResponse(soap, &r);
	soap_default_kllicsrv_UninstallKey(soap, &soap_tmp_kllicsrv_UninstallKey);
	soap->encodingStyle = NULL;
	soap_get_kllicsrv_UninstallKey(soap, &soap_tmp_kllicsrv_UninstallKey, "kllicsrv-UninstallKey", NULL);
	if (soap->error)
		return soap->error;
	
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
#ifndef WITH_LEANER
	 || soap_resolve_attachments(soap)
#endif
	 || soap_end_recv(soap))
		return soap->error;
	soap->error = kllicsrv_UninstallKey(soap, soap_tmp_kllicsrv_UninstallKey.keyinfo, r);
	if (soap->error)
		return soap->error;
	soap_serializeheader(soap);
	soap_serialize_kllicsrv_UninstallKeyResponse(soap, &r);
	soap_begin_count(soap);
	if (soap->mode & SOAP_IO_LENGTH)
	{	soap_envelope_begin_out(soap);
		soap_putheader(soap);
		soap_body_begin_out(soap);
		soap_put_kllicsrv_UninstallKeyResponse(soap, &r, "kllicsrv-UninstallKeyResponse", "");
		soap_body_end_out(soap);
		soap_envelope_end_out(soap);
	};
	if (soap_response(soap, SOAP_OK)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put_kllicsrv_UninstallKeyResponse(soap, &r, "kllicsrv-UninstallKeyResponse", "")
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap->error;
	soap_closesock(soap);
	return SOAP_OK;
}

SOAP_FMAC5 int SOAP_FMAC6 soap_serve_kllicsrv_GetKeyData(struct soap *soap)
{	struct kllicsrv_GetKeyData soap_tmp_kllicsrv_GetKeyData;
	struct kllicsrv_GetKeyDataResponse r;
	soap_default_kllicsrv_GetKeyDataResponse(soap, &r);
	soap_default_kllicsrv_GetKeyData(soap, &soap_tmp_kllicsrv_GetKeyData);
	soap->encodingStyle = NULL;
	soap_get_kllicsrv_GetKeyData(soap, &soap_tmp_kllicsrv_GetKeyData, "kllicsrv-GetKeyData", NULL);
	if (soap->error)
		return soap->error;
	
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
#ifndef WITH_LEANER
	 || soap_resolve_attachments(soap)
#endif
	 || soap_end_recv(soap))
		return soap->error;
	soap->error = kllicsrv_GetKeyData(soap, soap_tmp_kllicsrv_GetKeyData.indata, r);
	if (soap->error)
		return soap->error;
	soap_serializeheader(soap);
	soap_serialize_kllicsrv_GetKeyDataResponse(soap, &r);
	soap_begin_count(soap);
	if (soap->mode & SOAP_IO_LENGTH)
	{	soap_envelope_begin_out(soap);
		soap_putheader(soap);
		soap_body_begin_out(soap);
		soap_put_kllicsrv_GetKeyDataResponse(soap, &r, "kllicsrv-GetKeyDataResponse", "");
		soap_body_end_out(soap);
		soap_envelope_end_out(soap);
	};
	if (soap_response(soap, SOAP_OK)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put_kllicsrv_GetKeyDataResponse(soap, &r, "kllicsrv-GetKeyDataResponse", "")
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap->error;
	soap_closesock(soap);
	return SOAP_OK;
}

SOAP_FMAC5 int SOAP_FMAC6 soap_serve_kllicsrv_AdjustFlexibleKey(struct soap *soap)
{	struct kllicsrv_AdjustFlexibleKey soap_tmp_kllicsrv_AdjustFlexibleKey;
	struct kllicsrv_AdjustFlexibleKeyResponse r;
	soap_default_kllicsrv_AdjustFlexibleKeyResponse(soap, &r);
	soap_default_kllicsrv_AdjustFlexibleKey(soap, &soap_tmp_kllicsrv_AdjustFlexibleKey);
	soap->encodingStyle = NULL;
	soap_get_kllicsrv_AdjustFlexibleKey(soap, &soap_tmp_kllicsrv_AdjustFlexibleKey, "kllicsrv-AdjustFlexibleKey", NULL);
	if (soap->error)
		return soap->error;
	
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
#ifndef WITH_LEANER
	 || soap_resolve_attachments(soap)
#endif
	 || soap_end_recv(soap))
		return soap->error;
	soap->error = kllicsrv_AdjustFlexibleKey(soap, soap_tmp_kllicsrv_AdjustFlexibleKey.keyinfo, r);
	if (soap->error)
		return soap->error;
	soap_serializeheader(soap);
	soap_serialize_kllicsrv_AdjustFlexibleKeyResponse(soap, &r);
	soap_begin_count(soap);
	if (soap->mode & SOAP_IO_LENGTH)
	{	soap_envelope_begin_out(soap);
		soap_putheader(soap);
		soap_body_begin_out(soap);
		soap_put_kllicsrv_AdjustFlexibleKeyResponse(soap, &r, "kllicsrv-AdjustFlexibleKeyResponse", "");
		soap_body_end_out(soap);
		soap_envelope_end_out(soap);
	};
	if (soap_response(soap, SOAP_OK)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put_kllicsrv_AdjustFlexibleKeyResponse(soap, &r, "kllicsrv-AdjustFlexibleKeyResponse", "")
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap->error;
	soap_closesock(soap);
	return SOAP_OK;
}

SOAP_FMAC5 int SOAP_FMAC6 soap_serve_kllicsrv_EnumKeys(struct soap *soap)
{	struct kllicsrv_EnumKeys soap_tmp_kllicsrv_EnumKeys;
	struct kllicsrv_EnumKeysResponse r;
	soap_default_kllicsrv_EnumKeysResponse(soap, &r);
	soap_default_kllicsrv_EnumKeys(soap, &soap_tmp_kllicsrv_EnumKeys);
	soap->encodingStyle = NULL;
	soap_get_kllicsrv_EnumKeys(soap, &soap_tmp_kllicsrv_EnumKeys, "kllicsrv-EnumKeys", NULL);
	if (soap->error)
		return soap->error;
	
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
#ifndef WITH_LEANER
	 || soap_resolve_attachments(soap)
#endif
	 || soap_end_recv(soap))
		return soap->error;
	soap->error = kllicsrv_EnumKeys(soap, soap_tmp_kllicsrv_EnumKeys.fields, soap_tmp_kllicsrv_EnumKeys.fieldsToOrder, soap_tmp_kllicsrv_EnumKeys.options, soap_tmp_kllicsrv_EnumKeys.lTimeout, r);
	if (soap->error)
		return soap->error;
	soap_serializeheader(soap);
	soap_serialize_kllicsrv_EnumKeysResponse(soap, &r);
	soap_begin_count(soap);
	if (soap->mode & SOAP_IO_LENGTH)
	{	soap_envelope_begin_out(soap);
		soap_putheader(soap);
		soap_body_begin_out(soap);
		soap_put_kllicsrv_EnumKeysResponse(soap, &r, "kllicsrv-EnumKeysResponse", "");
		soap_body_end_out(soap);
		soap_envelope_end_out(soap);
	};
	if (soap_response(soap, SOAP_OK)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put_kllicsrv_EnumKeysResponse(soap, &r, "kllicsrv-EnumKeysResponse", "")
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap->error;
	soap_closesock(soap);
	return SOAP_OK;
}

SOAP_FMAC5 int SOAP_FMAC6 soap_serve_klhst_MoveRulesAddRule(struct soap *soap)
{	struct klhst_MoveRulesAddRule soap_tmp_klhst_MoveRulesAddRule;
	struct klhst_MoveRulesAddRuleResponse r;
	soap_default_klhst_MoveRulesAddRuleResponse(soap, &r);
	soap_default_klhst_MoveRulesAddRule(soap, &soap_tmp_klhst_MoveRulesAddRule);
	soap->encodingStyle = NULL;
	soap_get_klhst_MoveRulesAddRule(soap, &soap_tmp_klhst_MoveRulesAddRule, "klhst-MoveRulesAddRule", NULL);
	if (soap->error)
		return soap->error;
	
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
#ifndef WITH_LEANER
	 || soap_resolve_attachments(soap)
#endif
	 || soap_end_recv(soap))
		return soap->error;
	soap->error = klhst_MoveRulesAddRule(soap, soap_tmp_klhst_MoveRulesAddRule.ruleinfo, r);
	if (soap->error)
		return soap->error;
	soap_serializeheader(soap);
	soap_serialize_klhst_MoveRulesAddRuleResponse(soap, &r);
	soap_begin_count(soap);
	if (soap->mode & SOAP_IO_LENGTH)
	{	soap_envelope_begin_out(soap);
		soap_putheader(soap);
		soap_body_begin_out(soap);
		soap_put_klhst_MoveRulesAddRuleResponse(soap, &r, "klhst-MoveRulesAddRuleResponse", "");
		soap_body_end_out(soap);
		soap_envelope_end_out(soap);
	};
	if (soap_response(soap, SOAP_OK)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put_klhst_MoveRulesAddRuleResponse(soap, &r, "klhst-MoveRulesAddRuleResponse", "")
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap->error;
	soap_closesock(soap);
	return SOAP_OK;
}

SOAP_FMAC5 int SOAP_FMAC6 soap_serve_klhst_MoveRulesUpdateRule(struct soap *soap)
{	struct klhst_MoveRulesUpdateRule soap_tmp_klhst_MoveRulesUpdateRule;
	struct klhst_MoveRulesUpdateRuleResponse r;
	soap_default_klhst_MoveRulesUpdateRuleResponse(soap, &r);
	soap_default_klhst_MoveRulesUpdateRule(soap, &soap_tmp_klhst_MoveRulesUpdateRule);
	soap->encodingStyle = NULL;
	soap_get_klhst_MoveRulesUpdateRule(soap, &soap_tmp_klhst_MoveRulesUpdateRule, "klhst-MoveRulesUpdateRule", NULL);
	if (soap->error)
		return soap->error;
	
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
#ifndef WITH_LEANER
	 || soap_resolve_attachments(soap)
#endif
	 || soap_end_recv(soap))
		return soap->error;
	soap->error = klhst_MoveRulesUpdateRule(soap, soap_tmp_klhst_MoveRulesUpdateRule.nRule, soap_tmp_klhst_MoveRulesUpdateRule.ruleinfo, r);
	if (soap->error)
		return soap->error;
	soap_serializeheader(soap);
	soap_serialize_klhst_MoveRulesUpdateRuleResponse(soap, &r);
	soap_begin_count(soap);
	if (soap->mode & SOAP_IO_LENGTH)
	{	soap_envelope_begin_out(soap);
		soap_putheader(soap);
		soap_body_begin_out(soap);
		soap_put_klhst_MoveRulesUpdateRuleResponse(soap, &r, "klhst-MoveRulesUpdateRuleResponse", "");
		soap_body_end_out(soap);
		soap_envelope_end_out(soap);
	};
	if (soap_response(soap, SOAP_OK)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put_klhst_MoveRulesUpdateRuleResponse(soap, &r, "klhst-MoveRulesUpdateRuleResponse", "")
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap->error;
	soap_closesock(soap);
	return SOAP_OK;
}

SOAP_FMAC5 int SOAP_FMAC6 soap_serve_klhst_MoveRulesDeleteRule(struct soap *soap)
{	struct klhst_MoveRulesDeleteRule soap_tmp_klhst_MoveRulesDeleteRule;
	struct klhst_MoveRulesDeleteRuleResponse r;
	soap_default_klhst_MoveRulesDeleteRuleResponse(soap, &r);
	soap_default_klhst_MoveRulesDeleteRule(soap, &soap_tmp_klhst_MoveRulesDeleteRule);
	soap->encodingStyle = NULL;
	soap_get_klhst_MoveRulesDeleteRule(soap, &soap_tmp_klhst_MoveRulesDeleteRule, "klhst-MoveRulesDeleteRule", NULL);
	if (soap->error)
		return soap->error;
	
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
#ifndef WITH_LEANER
	 || soap_resolve_attachments(soap)
#endif
	 || soap_end_recv(soap))
		return soap->error;
	soap->error = klhst_MoveRulesDeleteRule(soap, soap_tmp_klhst_MoveRulesDeleteRule.nRule, r);
	if (soap->error)
		return soap->error;
	soap_serializeheader(soap);
	soap_serialize_klhst_MoveRulesDeleteRuleResponse(soap, &r);
	soap_begin_count(soap);
	if (soap->mode & SOAP_IO_LENGTH)
	{	soap_envelope_begin_out(soap);
		soap_putheader(soap);
		soap_body_begin_out(soap);
		soap_put_klhst_MoveRulesDeleteRuleResponse(soap, &r, "klhst-MoveRulesDeleteRuleResponse", "");
		soap_body_end_out(soap);
		soap_envelope_end_out(soap);
	};
	if (soap_response(soap, SOAP_OK)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put_klhst_MoveRulesDeleteRuleResponse(soap, &r, "klhst-MoveRulesDeleteRuleResponse", "")
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap->error;
	soap_closesock(soap);
	return SOAP_OK;
}

SOAP_FMAC5 int SOAP_FMAC6 soap_serve_klhst_MoveRulesSetRulesOrder(struct soap *soap)
{	struct klhst_MoveRulesSetRulesOrder soap_tmp_klhst_MoveRulesSetRulesOrder;
	struct klhst_MoveRulesSetRulesOrderResponse r;
	soap_default_klhst_MoveRulesSetRulesOrderResponse(soap, &r);
	soap_default_klhst_MoveRulesSetRulesOrder(soap, &soap_tmp_klhst_MoveRulesSetRulesOrder);
	soap->encodingStyle = NULL;
	soap_get_klhst_MoveRulesSetRulesOrder(soap, &soap_tmp_klhst_MoveRulesSetRulesOrder, "klhst-MoveRulesSetRulesOrder", NULL);
	if (soap->error)
		return soap->error;
	
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
#ifndef WITH_LEANER
	 || soap_resolve_attachments(soap)
#endif
	 || soap_end_recv(soap))
		return soap->error;
	soap->error = klhst_MoveRulesSetRulesOrder(soap, soap_tmp_klhst_MoveRulesSetRulesOrder.arr, r);
	if (soap->error)
		return soap->error;
	soap_serializeheader(soap);
	soap_serialize_klhst_MoveRulesSetRulesOrderResponse(soap, &r);
	soap_begin_count(soap);
	if (soap->mode & SOAP_IO_LENGTH)
	{	soap_envelope_begin_out(soap);
		soap_putheader(soap);
		soap_body_begin_out(soap);
		soap_put_klhst_MoveRulesSetRulesOrderResponse(soap, &r, "klhst-MoveRulesSetRulesOrderResponse", "");
		soap_body_end_out(soap);
		soap_envelope_end_out(soap);
	};
	if (soap_response(soap, SOAP_OK)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put_klhst_MoveRulesSetRulesOrderResponse(soap, &r, "klhst-MoveRulesSetRulesOrderResponse", "")
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap->error;
	soap_closesock(soap);
	return SOAP_OK;
}

SOAP_FMAC5 int SOAP_FMAC6 soap_serve_klhst_MoveRulesGetRule(struct soap *soap)
{	struct klhst_MoveRulesGetRule soap_tmp_klhst_MoveRulesGetRule;
	struct klhst_MoveRulesGetRuleResponse r;
	soap_default_klhst_MoveRulesGetRuleResponse(soap, &r);
	soap_default_klhst_MoveRulesGetRule(soap, &soap_tmp_klhst_MoveRulesGetRule);
	soap->encodingStyle = NULL;
	soap_get_klhst_MoveRulesGetRule(soap, &soap_tmp_klhst_MoveRulesGetRule, "klhst-MoveRulesGetRule", NULL);
	if (soap->error)
		return soap->error;
	
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
#ifndef WITH_LEANER
	 || soap_resolve_attachments(soap)
#endif
	 || soap_end_recv(soap))
		return soap->error;
	soap->error = klhst_MoveRulesGetRule(soap, soap_tmp_klhst_MoveRulesGetRule.nRule, r);
	if (soap->error)
		return soap->error;
	soap_serializeheader(soap);
	soap_serialize_klhst_MoveRulesGetRuleResponse(soap, &r);
	soap_begin_count(soap);
	if (soap->mode & SOAP_IO_LENGTH)
	{	soap_envelope_begin_out(soap);
		soap_putheader(soap);
		soap_body_begin_out(soap);
		soap_put_klhst_MoveRulesGetRuleResponse(soap, &r, "klhst-MoveRulesGetRuleResponse", "");
		soap_body_end_out(soap);
		soap_envelope_end_out(soap);
	};
	if (soap_response(soap, SOAP_OK)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put_klhst_MoveRulesGetRuleResponse(soap, &r, "klhst-MoveRulesGetRuleResponse", "")
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap->error;
	soap_closesock(soap);
	return SOAP_OK;
}

SOAP_FMAC5 int SOAP_FMAC6 soap_serve_klhst_MoveRulesGetRules(struct soap *soap)
{	struct klhst_MoveRulesGetRules soap_tmp_klhst_MoveRulesGetRules;
	struct klhst_MoveRulesGetRulesResponse r;
	soap_default_klhst_MoveRulesGetRulesResponse(soap, &r);
	soap_default_klhst_MoveRulesGetRules(soap, &soap_tmp_klhst_MoveRulesGetRules);
	soap->encodingStyle = NULL;
	soap_get_klhst_MoveRulesGetRules(soap, &soap_tmp_klhst_MoveRulesGetRules, "klhst-MoveRulesGetRules", NULL);
	if (soap->error)
		return soap->error;
	
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
#ifndef WITH_LEANER
	 || soap_resolve_attachments(soap)
#endif
	 || soap_end_recv(soap))
		return soap->error;
	soap->error = klhst_MoveRulesGetRules(soap, soap_tmp_klhst_MoveRulesGetRules.fields, r);
	if (soap->error)
		return soap->error;
	soap_serializeheader(soap);
	soap_serialize_klhst_MoveRulesGetRulesResponse(soap, &r);
	soap_begin_count(soap);
	if (soap->mode & SOAP_IO_LENGTH)
	{	soap_envelope_begin_out(soap);
		soap_putheader(soap);
		soap_body_begin_out(soap);
		soap_put_klhst_MoveRulesGetRulesResponse(soap, &r, "klhst-MoveRulesGetRulesResponse", "");
		soap_body_end_out(soap);
		soap_envelope_end_out(soap);
	};
	if (soap_response(soap, SOAP_OK)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put_klhst_MoveRulesGetRulesResponse(soap, &r, "klhst-MoveRulesGetRulesResponse", "")
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap->error;
	soap_closesock(soap);
	return SOAP_OK;
}

SOAP_FMAC5 int SOAP_FMAC6 soap_serve_kldpns_AddDiapason(struct soap *soap)
{	struct kldpns_AddDiapason soap_tmp_kldpns_AddDiapason;
	struct kldpns_AddDiapasonResponse r;
	soap_default_kldpns_AddDiapasonResponse(soap, &r);
	soap_default_kldpns_AddDiapason(soap, &soap_tmp_kldpns_AddDiapason);
	soap->encodingStyle = NULL;
	soap_get_kldpns_AddDiapason(soap, &soap_tmp_kldpns_AddDiapason, "kldpns-AddDiapason", NULL);
	if (soap->error)
		return soap->error;
	
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
#ifndef WITH_LEANER
	 || soap_resolve_attachments(soap)
#endif
	 || soap_end_recv(soap))
		return soap->error;
	soap->error = kldpns_AddDiapason(soap, soap_tmp_kldpns_AddDiapason.data, r);
	if (soap->error)
		return soap->error;
	soap_serializeheader(soap);
	soap_serialize_kldpns_AddDiapasonResponse(soap, &r);
	soap_begin_count(soap);
	if (soap->mode & SOAP_IO_LENGTH)
	{	soap_envelope_begin_out(soap);
		soap_putheader(soap);
		soap_body_begin_out(soap);
		soap_put_kldpns_AddDiapasonResponse(soap, &r, "kldpns-AddDiapasonResponse", "");
		soap_body_end_out(soap);
		soap_envelope_end_out(soap);
	};
	if (soap_response(soap, SOAP_OK)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put_kldpns_AddDiapasonResponse(soap, &r, "kldpns-AddDiapasonResponse", "")
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap->error;
	soap_closesock(soap);
	return SOAP_OK;
}

SOAP_FMAC5 int SOAP_FMAC6 soap_serve_kldpns_UpdateDiapason(struct soap *soap)
{	struct kldpns_UpdateDiapason soap_tmp_kldpns_UpdateDiapason;
	struct kldpns_UpdateDiapasonResponse r;
	soap_default_kldpns_UpdateDiapasonResponse(soap, &r);
	soap_default_kldpns_UpdateDiapason(soap, &soap_tmp_kldpns_UpdateDiapason);
	soap->encodingStyle = NULL;
	soap_get_kldpns_UpdateDiapason(soap, &soap_tmp_kldpns_UpdateDiapason, "kldpns-UpdateDiapason", NULL);
	if (soap->error)
		return soap->error;
	
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
#ifndef WITH_LEANER
	 || soap_resolve_attachments(soap)
#endif
	 || soap_end_recv(soap))
		return soap->error;
	soap->error = kldpns_UpdateDiapason(soap, soap_tmp_kldpns_UpdateDiapason.id, soap_tmp_kldpns_UpdateDiapason.data, r);
	if (soap->error)
		return soap->error;
	soap_serializeheader(soap);
	soap_serialize_kldpns_UpdateDiapasonResponse(soap, &r);
	soap_begin_count(soap);
	if (soap->mode & SOAP_IO_LENGTH)
	{	soap_envelope_begin_out(soap);
		soap_putheader(soap);
		soap_body_begin_out(soap);
		soap_put_kldpns_UpdateDiapasonResponse(soap, &r, "kldpns-UpdateDiapasonResponse", "");
		soap_body_end_out(soap);
		soap_envelope_end_out(soap);
	};
	if (soap_response(soap, SOAP_OK)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put_kldpns_UpdateDiapasonResponse(soap, &r, "kldpns-UpdateDiapasonResponse", "")
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap->error;
	soap_closesock(soap);
	return SOAP_OK;
}

SOAP_FMAC5 int SOAP_FMAC6 soap_serve_kldpns_RemoveDiapason(struct soap *soap)
{	struct kldpns_RemoveDiapason soap_tmp_kldpns_RemoveDiapason;
	struct kldpns_RemoveDiapasonResponse r;
	soap_default_kldpns_RemoveDiapasonResponse(soap, &r);
	soap_default_kldpns_RemoveDiapason(soap, &soap_tmp_kldpns_RemoveDiapason);
	soap->encodingStyle = NULL;
	soap_get_kldpns_RemoveDiapason(soap, &soap_tmp_kldpns_RemoveDiapason, "kldpns-RemoveDiapason", NULL);
	if (soap->error)
		return soap->error;
	
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
#ifndef WITH_LEANER
	 || soap_resolve_attachments(soap)
#endif
	 || soap_end_recv(soap))
		return soap->error;
	soap->error = kldpns_RemoveDiapason(soap, soap_tmp_kldpns_RemoveDiapason.id, r);
	if (soap->error)
		return soap->error;
	soap_serializeheader(soap);
	soap_serialize_kldpns_RemoveDiapasonResponse(soap, &r);
	soap_begin_count(soap);
	if (soap->mode & SOAP_IO_LENGTH)
	{	soap_envelope_begin_out(soap);
		soap_putheader(soap);
		soap_body_begin_out(soap);
		soap_put_kldpns_RemoveDiapasonResponse(soap, &r, "kldpns-RemoveDiapasonResponse", "");
		soap_body_end_out(soap);
		soap_envelope_end_out(soap);
	};
	if (soap_response(soap, SOAP_OK)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put_kldpns_RemoveDiapasonResponse(soap, &r, "kldpns-RemoveDiapasonResponse", "")
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap->error;
	soap_closesock(soap);
	return SOAP_OK;
}

SOAP_FMAC5 int SOAP_FMAC6 soap_serve_kldpns_GetDiapasons(struct soap *soap)
{	struct kldpns_GetDiapasons soap_tmp_kldpns_GetDiapasons;
	struct kldpns_GetDiapasonsResponse r;
	soap_default_kldpns_GetDiapasonsResponse(soap, &r);
	soap_default_kldpns_GetDiapasons(soap, &soap_tmp_kldpns_GetDiapasons);
	soap->encodingStyle = NULL;
	soap_get_kldpns_GetDiapasons(soap, &soap_tmp_kldpns_GetDiapasons, "kldpns-GetDiapasons", NULL);
	if (soap->error)
		return soap->error;
	
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
#ifndef WITH_LEANER
	 || soap_resolve_attachments(soap)
#endif
	 || soap_end_recv(soap))
		return soap->error;
	soap->error = kldpns_GetDiapasons(soap, soap_tmp_kldpns_GetDiapasons.fields, soap_tmp_kldpns_GetDiapasons.lTimeout, r);
	if (soap->error)
		return soap->error;
	soap_serializeheader(soap);
	soap_serialize_kldpns_GetDiapasonsResponse(soap, &r);
	soap_begin_count(soap);
	if (soap->mode & SOAP_IO_LENGTH)
	{	soap_envelope_begin_out(soap);
		soap_putheader(soap);
		soap_body_begin_out(soap);
		soap_put_kldpns_GetDiapasonsResponse(soap, &r, "kldpns-GetDiapasonsResponse", "");
		soap_body_end_out(soap);
		soap_envelope_end_out(soap);
	};
	if (soap_response(soap, SOAP_OK)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put_kldpns_GetDiapasonsResponse(soap, &r, "kldpns-GetDiapasonsResponse", "")
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap->error;
	soap_closesock(soap);
	return SOAP_OK;
}

SOAP_FMAC5 int SOAP_FMAC6 soap_serve_kldpns_GetDiapason(struct soap *soap)
{	struct kldpns_GetDiapason soap_tmp_kldpns_GetDiapason;
	struct kldpns_GetDiapasonResponse r;
	soap_default_kldpns_GetDiapasonResponse(soap, &r);
	soap_default_kldpns_GetDiapason(soap, &soap_tmp_kldpns_GetDiapason);
	soap->encodingStyle = NULL;
	soap_get_kldpns_GetDiapason(soap, &soap_tmp_kldpns_GetDiapason, "kldpns-GetDiapason", NULL);
	if (soap->error)
		return soap->error;
	
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
#ifndef WITH_LEANER
	 || soap_resolve_attachments(soap)
#endif
	 || soap_end_recv(soap))
		return soap->error;
	soap->error = kldpns_GetDiapason(soap, soap_tmp_kldpns_GetDiapason.id, soap_tmp_kldpns_GetDiapason.fields, r);
	if (soap->error)
		return soap->error;
	soap_serializeheader(soap);
	soap_serialize_kldpns_GetDiapasonResponse(soap, &r);
	soap_begin_count(soap);
	if (soap->mode & SOAP_IO_LENGTH)
	{	soap_envelope_begin_out(soap);
		soap_putheader(soap);
		soap_body_begin_out(soap);
		soap_put_kldpns_GetDiapasonResponse(soap, &r, "kldpns-GetDiapasonResponse", "");
		soap_body_end_out(soap);
		soap_envelope_end_out(soap);
	};
	if (soap_response(soap, SOAP_OK)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put_kldpns_GetDiapasonResponse(soap, &r, "kldpns-GetDiapasonResponse", "")
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap->error;
	soap_closesock(soap);
	return SOAP_OK;
}

SOAP_FMAC5 int SOAP_FMAC6 soap_serve_kldpns_NotifyDpnsTask(struct soap *soap)
{	struct kldpns_NotifyDpnsTask soap_tmp_kldpns_NotifyDpnsTask;
	struct kldpns_NotifyDpnsTaskResponse r;
	soap_default_kldpns_NotifyDpnsTaskResponse(soap, &r);
	soap_default_kldpns_NotifyDpnsTask(soap, &soap_tmp_kldpns_NotifyDpnsTask);
	soap->encodingStyle = NULL;
	soap_get_kldpns_NotifyDpnsTask(soap, &soap_tmp_kldpns_NotifyDpnsTask, "kldpns-NotifyDpnsTask", NULL);
	if (soap->error)
		return soap->error;
	
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
#ifndef WITH_LEANER
	 || soap_resolve_attachments(soap)
#endif
	 || soap_end_recv(soap))
		return soap->error;
	soap->error = kldpns_NotifyDpnsTask(soap, r);
	if (soap->error)
		return soap->error;
	soap_serializeheader(soap);
	soap_serialize_kldpns_NotifyDpnsTaskResponse(soap, &r);
	soap_begin_count(soap);
	if (soap->mode & SOAP_IO_LENGTH)
	{	soap_envelope_begin_out(soap);
		soap_putheader(soap);
		soap_body_begin_out(soap);
		soap_put_kldpns_NotifyDpnsTaskResponse(soap, &r, "kldpns-NotifyDpnsTaskResponse", "");
		soap_body_end_out(soap);
		soap_envelope_end_out(soap);
	};
	if (soap_response(soap, SOAP_OK)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put_kldpns_NotifyDpnsTaskResponse(soap, &r, "kldpns-NotifyDpnsTaskResponse", "")
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap->error;
	soap_closesock(soap);
	return SOAP_OK;
}

SOAP_FMAC5 int SOAP_FMAC6 soap_serve_klgrp_GetGroups(struct soap *soap)
{	struct klgrp_GetGroups soap_tmp_klgrp_GetGroups;
	struct klgrp_GetGroupsResponse r;
	soap_default_klgrp_GetGroupsResponse(soap, &r);
	soap_default_klgrp_GetGroups(soap, &soap_tmp_klgrp_GetGroups);
	soap->encodingStyle = NULL;
	soap_get_klgrp_GetGroups(soap, &soap_tmp_klgrp_GetGroups, "klgrp-GetGroups", NULL);
	if (soap->error)
		return soap->error;
	
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
#ifndef WITH_LEANER
	 || soap_resolve_attachments(soap)
#endif
	 || soap_end_recv(soap))
		return soap->error;
	soap->error = klgrp_GetGroups(soap, soap_tmp_klgrp_GetGroups.parent, soap_tmp_klgrp_GetGroups.depth, r);
	if (soap->error)
		return soap->error;
	soap_serializeheader(soap);
	soap_serialize_klgrp_GetGroupsResponse(soap, &r);
	soap_begin_count(soap);
	if (soap->mode & SOAP_IO_LENGTH)
	{	soap_envelope_begin_out(soap);
		soap_putheader(soap);
		soap_body_begin_out(soap);
		soap_put_klgrp_GetGroupsResponse(soap, &r, "klgrp-GetGroupsResponse", "");
		soap_body_end_out(soap);
		soap_envelope_end_out(soap);
	};
	if (soap_response(soap, SOAP_OK)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put_klgrp_GetGroupsResponse(soap, &r, "klgrp-GetGroupsResponse", "")
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap->error;
	soap_closesock(soap);
	return SOAP_OK;
}

SOAP_FMAC5 int SOAP_FMAC6 soap_serve_klgrp_GetUnassignedGroupId(struct soap *soap)
{	struct klgrp_GetUnassignedGroupId soap_tmp_klgrp_GetUnassignedGroupId;
	struct klgrp_GetUnassignedGroupIdResponse r;
	soap_default_klgrp_GetUnassignedGroupIdResponse(soap, &r);
	soap_default_klgrp_GetUnassignedGroupId(soap, &soap_tmp_klgrp_GetUnassignedGroupId);
	soap->encodingStyle = NULL;
	soap_get_klgrp_GetUnassignedGroupId(soap, &soap_tmp_klgrp_GetUnassignedGroupId, "klgrp-GetUnassignedGroupId", NULL);
	if (soap->error)
		return soap->error;
	
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
#ifndef WITH_LEANER
	 || soap_resolve_attachments(soap)
#endif
	 || soap_end_recv(soap))
		return soap->error;
	soap->error = klgrp_GetUnassignedGroupId(soap, soap_tmp_klgrp_GetUnassignedGroupId._, r);
	if (soap->error)
		return soap->error;
	soap_serializeheader(soap);
	soap_serialize_klgrp_GetUnassignedGroupIdResponse(soap, &r);
	soap_begin_count(soap);
	if (soap->mode & SOAP_IO_LENGTH)
	{	soap_envelope_begin_out(soap);
		soap_putheader(soap);
		soap_body_begin_out(soap);
		soap_put_klgrp_GetUnassignedGroupIdResponse(soap, &r, "klgrp-GetUnassignedGroupIdResponse", "");
		soap_body_end_out(soap);
		soap_envelope_end_out(soap);
	};
	if (soap_response(soap, SOAP_OK)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put_klgrp_GetUnassignedGroupIdResponse(soap, &r, "klgrp-GetUnassignedGroupIdResponse", "")
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap->error;
	soap_closesock(soap);
	return SOAP_OK;
}

SOAP_FMAC5 int SOAP_FMAC6 soap_serve_klgrp_GetGroupInfo(struct soap *soap)
{	struct klgrp_GetGroupInfo soap_tmp_klgrp_GetGroupInfo;
	struct klgrp_GetGroupInfoResponse r;
	soap_default_klgrp_GetGroupInfoResponse(soap, &r);
	soap_default_klgrp_GetGroupInfo(soap, &soap_tmp_klgrp_GetGroupInfo);
	soap->encodingStyle = NULL;
	soap_get_klgrp_GetGroupInfo(soap, &soap_tmp_klgrp_GetGroupInfo, "klgrp-GetGroupInfo", NULL);
	if (soap->error)
		return soap->error;
	
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
#ifndef WITH_LEANER
	 || soap_resolve_attachments(soap)
#endif
	 || soap_end_recv(soap))
		return soap->error;
	soap->error = klgrp_GetGroupInfo(soap, soap_tmp_klgrp_GetGroupInfo.id, soap_tmp_klgrp_GetGroupInfo.info, r);
	if (soap->error)
		return soap->error;
	soap_serializeheader(soap);
	soap_serialize_klgrp_GetGroupInfoResponse(soap, &r);
	soap_begin_count(soap);
	if (soap->mode & SOAP_IO_LENGTH)
	{	soap_envelope_begin_out(soap);
		soap_putheader(soap);
		soap_body_begin_out(soap);
		soap_put_klgrp_GetGroupInfoResponse(soap, &r, "klgrp-GetGroupInfoResponse", "");
		soap_body_end_out(soap);
		soap_envelope_end_out(soap);
	};
	if (soap_response(soap, SOAP_OK)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put_klgrp_GetGroupInfoResponse(soap, &r, "klgrp-GetGroupInfoResponse", "")
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap->error;
	soap_closesock(soap);
	return SOAP_OK;
}

SOAP_FMAC5 int SOAP_FMAC6 soap_serve_klgrp_AddGroup(struct soap *soap)
{	struct klgrp_AddGroup soap_tmp_klgrp_AddGroup;
	struct klgrp_AddGroupResponse r;
	soap_default_klgrp_AddGroupResponse(soap, &r);
	soap_default_klgrp_AddGroup(soap, &soap_tmp_klgrp_AddGroup);
	soap->encodingStyle = NULL;
	soap_get_klgrp_AddGroup(soap, &soap_tmp_klgrp_AddGroup, "klgrp-AddGroup", NULL);
	if (soap->error)
		return soap->error;
	
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
#ifndef WITH_LEANER
	 || soap_resolve_attachments(soap)
#endif
	 || soap_end_recv(soap))
		return soap->error;
	soap->error = klgrp_AddGroup(soap, soap_tmp_klgrp_AddGroup.info, r);
	if (soap->error)
		return soap->error;
	soap_serializeheader(soap);
	soap_serialize_klgrp_AddGroupResponse(soap, &r);
	soap_begin_count(soap);
	if (soap->mode & SOAP_IO_LENGTH)
	{	soap_envelope_begin_out(soap);
		soap_putheader(soap);
		soap_body_begin_out(soap);
		soap_put_klgrp_AddGroupResponse(soap, &r, "klgrp-AddGroupResponse", "");
		soap_body_end_out(soap);
		soap_envelope_end_out(soap);
	};
	if (soap_response(soap, SOAP_OK)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put_klgrp_AddGroupResponse(soap, &r, "klgrp-AddGroupResponse", "")
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap->error;
	soap_closesock(soap);
	return SOAP_OK;
}

SOAP_FMAC5 int SOAP_FMAC6 soap_serve_klgrp_DelGroup(struct soap *soap)
{	struct klgrp_DelGroup soap_tmp_klgrp_DelGroup;
	struct klgrp_DelGroupResponse r;
	soap_default_klgrp_DelGroupResponse(soap, &r);
	soap_default_klgrp_DelGroup(soap, &soap_tmp_klgrp_DelGroup);
	soap->encodingStyle = NULL;
	soap_get_klgrp_DelGroup(soap, &soap_tmp_klgrp_DelGroup, "klgrp-DelGroup", NULL);
	if (soap->error)
		return soap->error;
	
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
#ifndef WITH_LEANER
	 || soap_resolve_attachments(soap)
#endif
	 || soap_end_recv(soap))
		return soap->error;
	soap->error = klgrp_DelGroup(soap, soap_tmp_klgrp_DelGroup.id, r);
	if (soap->error)
		return soap->error;
	soap_serializeheader(soap);
	soap_serialize_klgrp_DelGroupResponse(soap, &r);
	soap_begin_count(soap);
	if (soap->mode & SOAP_IO_LENGTH)
	{	soap_envelope_begin_out(soap);
		soap_putheader(soap);
		soap_body_begin_out(soap);
		soap_put_klgrp_DelGroupResponse(soap, &r, "klgrp-DelGroupResponse", "");
		soap_body_end_out(soap);
		soap_envelope_end_out(soap);
	};
	if (soap_response(soap, SOAP_OK)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put_klgrp_DelGroupResponse(soap, &r, "klgrp-DelGroupResponse", "")
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap->error;
	soap_closesock(soap);
	return SOAP_OK;
}

SOAP_FMAC5 int SOAP_FMAC6 soap_serve_klgrp_UpdateGroup(struct soap *soap)
{	struct klgrp_UpdateGroup soap_tmp_klgrp_UpdateGroup;
	struct klgrp_UpdateGroupResponse r;
	soap_default_klgrp_UpdateGroupResponse(soap, &r);
	soap_default_klgrp_UpdateGroup(soap, &soap_tmp_klgrp_UpdateGroup);
	soap->encodingStyle = NULL;
	soap_get_klgrp_UpdateGroup(soap, &soap_tmp_klgrp_UpdateGroup, "klgrp-UpdateGroup", NULL);
	if (soap->error)
		return soap->error;
	
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
#ifndef WITH_LEANER
	 || soap_resolve_attachments(soap)
#endif
	 || soap_end_recv(soap))
		return soap->error;
	soap->error = klgrp_UpdateGroup(soap, soap_tmp_klgrp_UpdateGroup.id, soap_tmp_klgrp_UpdateGroup.info, r);
	if (soap->error)
		return soap->error;
	soap_serializeheader(soap);
	soap_serialize_klgrp_UpdateGroupResponse(soap, &r);
	soap_begin_count(soap);
	if (soap->mode & SOAP_IO_LENGTH)
	{	soap_envelope_begin_out(soap);
		soap_putheader(soap);
		soap_body_begin_out(soap);
		soap_put_klgrp_UpdateGroupResponse(soap, &r, "klgrp-UpdateGroupResponse", "");
		soap_body_end_out(soap);
		soap_envelope_end_out(soap);
	};
	if (soap_response(soap, SOAP_OK)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put_klgrp_UpdateGroupResponse(soap, &r, "klgrp-UpdateGroupResponse", "")
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap->error;
	soap_closesock(soap);
	return SOAP_OK;
}

SOAP_FMAC5 int SOAP_FMAC6 soap_serve_klgrp_SetGroupHosts(struct soap *soap)
{	struct klgrp_SetGroupHosts soap_tmp_klgrp_SetGroupHosts;
	struct klgrp_SetGroupHostsResponse r;
	soap_default_klgrp_SetGroupHostsResponse(soap, &r);
	soap_default_klgrp_SetGroupHosts(soap, &soap_tmp_klgrp_SetGroupHosts);
	soap->encodingStyle = NULL;
	soap_get_klgrp_SetGroupHosts(soap, &soap_tmp_klgrp_SetGroupHosts, "klgrp-SetGroupHosts", NULL);
	if (soap->error)
		return soap->error;
	
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
#ifndef WITH_LEANER
	 || soap_resolve_attachments(soap)
#endif
	 || soap_end_recv(soap))
		return soap->error;
	soap->error = klgrp_SetGroupHosts(soap, soap_tmp_klgrp_SetGroupHosts.id, soap_tmp_klgrp_SetGroupHosts.hosts, r);
	if (soap->error)
		return soap->error;
	soap_serializeheader(soap);
	soap_serialize_klgrp_SetGroupHostsResponse(soap, &r);
	soap_begin_count(soap);
	if (soap->mode & SOAP_IO_LENGTH)
	{	soap_envelope_begin_out(soap);
		soap_putheader(soap);
		soap_body_begin_out(soap);
		soap_put_klgrp_SetGroupHostsResponse(soap, &r, "klgrp-SetGroupHostsResponse", "");
		soap_body_end_out(soap);
		soap_envelope_end_out(soap);
	};
	if (soap_response(soap, SOAP_OK)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put_klgrp_SetGroupHostsResponse(soap, &r, "klgrp-SetGroupHostsResponse", "")
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap->error;
	soap_closesock(soap);
	return SOAP_OK;
}

SOAP_FMAC5 int SOAP_FMAC6 soap_serve_klgrp_RemoveHosts(struct soap *soap)
{	struct klgrp_RemoveHosts soap_tmp_klgrp_RemoveHosts;
	struct klgrp_RemoveHostsResponse r;
	soap_default_klgrp_RemoveHostsResponse(soap, &r);
	soap_default_klgrp_RemoveHosts(soap, &soap_tmp_klgrp_RemoveHosts);
	soap->encodingStyle = NULL;
	soap_get_klgrp_RemoveHosts(soap, &soap_tmp_klgrp_RemoveHosts, "klgrp-RemoveHosts", NULL);
	if (soap->error)
		return soap->error;
	
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
#ifndef WITH_LEANER
	 || soap_resolve_attachments(soap)
#endif
	 || soap_end_recv(soap))
		return soap->error;
	soap->error = klgrp_RemoveHosts(soap, soap_tmp_klgrp_RemoveHosts.hosts, r);
	if (soap->error)
		return soap->error;
	soap_serializeheader(soap);
	soap_serialize_klgrp_RemoveHostsResponse(soap, &r);
	soap_begin_count(soap);
	if (soap->mode & SOAP_IO_LENGTH)
	{	soap_envelope_begin_out(soap);
		soap_putheader(soap);
		soap_body_begin_out(soap);
		soap_put_klgrp_RemoveHostsResponse(soap, &r, "klgrp-RemoveHostsResponse", "");
		soap_body_end_out(soap);
		soap_envelope_end_out(soap);
	};
	if (soap_response(soap, SOAP_OK)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put_klgrp_RemoveHostsResponse(soap, &r, "klgrp-RemoveHostsResponse", "")
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap->error;
	soap_closesock(soap);
	return SOAP_OK;
}

SOAP_FMAC5 int SOAP_FMAC6 soap_serve_klgrp_ResetGroupHostsIterator(struct soap *soap)
{	struct klgrp_ResetGroupHostsIterator soap_tmp_klgrp_ResetGroupHostsIterator;
	struct klgrp_ResetGroupHostsIteratorResponse r;
	soap_default_klgrp_ResetGroupHostsIteratorResponse(soap, &r);
	soap_default_klgrp_ResetGroupHostsIterator(soap, &soap_tmp_klgrp_ResetGroupHostsIterator);
	soap->encodingStyle = NULL;
	soap_get_klgrp_ResetGroupHostsIterator(soap, &soap_tmp_klgrp_ResetGroupHostsIterator, "klgrp-ResetGroupHostsIterator", NULL);
	if (soap->error)
		return soap->error;
	
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
#ifndef WITH_LEANER
	 || soap_resolve_attachments(soap)
#endif
	 || soap_end_recv(soap))
		return soap->error;
	soap->error = klgrp_ResetGroupHostsIterator(soap, soap_tmp_klgrp_ResetGroupHostsIterator.id, soap_tmp_klgrp_ResetGroupHostsIterator.fields, soap_tmp_klgrp_ResetGroupHostsIterator.lifetime, r);
	if (soap->error)
		return soap->error;
	soap_serializeheader(soap);
	soap_serialize_klgrp_ResetGroupHostsIteratorResponse(soap, &r);
	soap_begin_count(soap);
	if (soap->mode & SOAP_IO_LENGTH)
	{	soap_envelope_begin_out(soap);
		soap_putheader(soap);
		soap_body_begin_out(soap);
		soap_put_klgrp_ResetGroupHostsIteratorResponse(soap, &r, "klgrp-ResetGroupHostsIteratorResponse", "");
		soap_body_end_out(soap);
		soap_envelope_end_out(soap);
	};
	if (soap_response(soap, SOAP_OK)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put_klgrp_ResetGroupHostsIteratorResponse(soap, &r, "klgrp-ResetGroupHostsIteratorResponse", "")
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap->error;
	soap_closesock(soap);
	return SOAP_OK;
}

SOAP_FMAC5 int SOAP_FMAC6 soap_serve_klgrp_ReleaseGroupHostsIterator(struct soap *soap)
{	struct klgrp_ReleaseGroupHostsIterator soap_tmp_klgrp_ReleaseGroupHostsIterator;
	struct klgrp_ReleaseGroupHostsIteratorResponse r;
	soap_default_klgrp_ReleaseGroupHostsIteratorResponse(soap, &r);
	soap_default_klgrp_ReleaseGroupHostsIterator(soap, &soap_tmp_klgrp_ReleaseGroupHostsIterator);
	soap->encodingStyle = NULL;
	soap_get_klgrp_ReleaseGroupHostsIterator(soap, &soap_tmp_klgrp_ReleaseGroupHostsIterator, "klgrp-ReleaseGroupHostsIterator", NULL);
	if (soap->error)
		return soap->error;
	
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
#ifndef WITH_LEANER
	 || soap_resolve_attachments(soap)
#endif
	 || soap_end_recv(soap))
		return soap->error;
	soap->error = klgrp_ReleaseGroupHostsIterator(soap, soap_tmp_klgrp_ReleaseGroupHostsIterator.it, r);
	if (soap->error)
		return soap->error;
	soap_serializeheader(soap);
	soap_serialize_klgrp_ReleaseGroupHostsIteratorResponse(soap, &r);
	soap_begin_count(soap);
	if (soap->mode & SOAP_IO_LENGTH)
	{	soap_envelope_begin_out(soap);
		soap_putheader(soap);
		soap_body_begin_out(soap);
		soap_put_klgrp_ReleaseGroupHostsIteratorResponse(soap, &r, "klgrp-ReleaseGroupHostsIteratorResponse", "");
		soap_body_end_out(soap);
		soap_envelope_end_out(soap);
	};
	if (soap_response(soap, SOAP_OK)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put_klgrp_ReleaseGroupHostsIteratorResponse(soap, &r, "klgrp-ReleaseGroupHostsIteratorResponse", "")
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap->error;
	soap_closesock(soap);
	return SOAP_OK;
}

SOAP_FMAC5 int SOAP_FMAC6 soap_serve_klgrp_GetNextGroupHost(struct soap *soap)
{	struct klgrp_GetNextGroupHost soap_tmp_klgrp_GetNextGroupHost;
	struct klgrp_GetNextGroupHostResponse r;
	soap_default_klgrp_GetNextGroupHostResponse(soap, &r);
	soap_default_klgrp_GetNextGroupHost(soap, &soap_tmp_klgrp_GetNextGroupHost);
	soap->encodingStyle = NULL;
	soap_get_klgrp_GetNextGroupHost(soap, &soap_tmp_klgrp_GetNextGroupHost, "klgrp-GetNextGroupHost", NULL);
	if (soap->error)
		return soap->error;
	
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
#ifndef WITH_LEANER
	 || soap_resolve_attachments(soap)
#endif
	 || soap_end_recv(soap))
		return soap->error;
	soap->error = klgrp_GetNextGroupHost(soap, soap_tmp_klgrp_GetNextGroupHost.it, soap_tmp_klgrp_GetNextGroupHost.nCount, r);
	if (soap->error)
		return soap->error;
	soap_serializeheader(soap);
	soap_serialize_klgrp_GetNextGroupHostResponse(soap, &r);
	soap_begin_count(soap);
	if (soap->mode & SOAP_IO_LENGTH)
	{	soap_envelope_begin_out(soap);
		soap_putheader(soap);
		soap_body_begin_out(soap);
		soap_put_klgrp_GetNextGroupHostResponse(soap, &r, "klgrp-GetNextGroupHostResponse", "");
		soap_body_end_out(soap);
		soap_envelope_end_out(soap);
	};
	if (soap_response(soap, SOAP_OK)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put_klgrp_GetNextGroupHostResponse(soap, &r, "klgrp-GetNextGroupHostResponse", "")
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap->error;
	soap_closesock(soap);
	return SOAP_OK;
}

SOAP_FMAC5 int SOAP_FMAC6 soap_serve_klgrp_FindHosts(struct soap *soap)
{	struct klgrp_FindHosts soap_tmp_klgrp_FindHosts;
	struct klgrp_FindHostsResponse r;
	soap_default_klgrp_FindHostsResponse(soap, &r);
	soap_default_klgrp_FindHosts(soap, &soap_tmp_klgrp_FindHosts);
	soap->encodingStyle = NULL;
	soap_get_klgrp_FindHosts(soap, &soap_tmp_klgrp_FindHosts, "klgrp-FindHosts", NULL);
	if (soap->error)
		return soap->error;
	
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
#ifndef WITH_LEANER
	 || soap_resolve_attachments(soap)
#endif
	 || soap_end_recv(soap))
		return soap->error;
	soap->error = klgrp_FindHosts(soap, soap_tmp_klgrp_FindHosts.wstrFilter, soap_tmp_klgrp_FindHosts.arrFields, soap_tmp_klgrp_FindHosts.arrFieldsToOrder, soap_tmp_klgrp_FindHosts.params, soap_tmp_klgrp_FindHosts.lTimeout, soap_tmp_klgrp_FindHosts.wstrRequestId, r);
	if (soap->error)
		return soap->error;
	soap_serializeheader(soap);
	soap_serialize_klgrp_FindHostsResponse(soap, &r);
	soap_begin_count(soap);
	if (soap->mode & SOAP_IO_LENGTH)
	{	soap_envelope_begin_out(soap);
		soap_putheader(soap);
		soap_body_begin_out(soap);
		soap_put_klgrp_FindHostsResponse(soap, &r, "klgrp-FindHostsResponse", "");
		soap_body_end_out(soap);
		soap_envelope_end_out(soap);
	};
	if (soap_response(soap, SOAP_OK)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put_klgrp_FindHostsResponse(soap, &r, "klgrp-FindHostsResponse", "")
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap->error;
	soap_closesock(soap);
	return SOAP_OK;
}

SOAP_FMAC5 int SOAP_FMAC6 soap_serve_klgrp_FindHostsCancel(struct soap *soap)
{	struct klgrp_FindHostsCancel soap_tmp_klgrp_FindHostsCancel;
	struct klgrp_FindHostsCancelResponse r;
	soap_default_klgrp_FindHostsCancelResponse(soap, &r);
	soap_default_klgrp_FindHostsCancel(soap, &soap_tmp_klgrp_FindHostsCancel);
	soap->encodingStyle = NULL;
	soap_get_klgrp_FindHostsCancel(soap, &soap_tmp_klgrp_FindHostsCancel, "klgrp-FindHostsCancel", NULL);
	if (soap->error)
		return soap->error;
	
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
#ifndef WITH_LEANER
	 || soap_resolve_attachments(soap)
#endif
	 || soap_end_recv(soap))
		return soap->error;
	soap->error = klgrp_FindHostsCancel(soap, soap_tmp_klgrp_FindHostsCancel.wstrRequestId, r);
	if (soap->error)
		return soap->error;
	soap_serializeheader(soap);
	soap_serialize_klgrp_FindHostsCancelResponse(soap, &r);
	soap_begin_count(soap);
	if (soap->mode & SOAP_IO_LENGTH)
	{	soap_envelope_begin_out(soap);
		soap_putheader(soap);
		soap_body_begin_out(soap);
		soap_put_klgrp_FindHostsCancelResponse(soap, &r, "klgrp-FindHostsCancelResponse", "");
		soap_body_end_out(soap);
		soap_envelope_end_out(soap);
	};
	if (soap_response(soap, SOAP_OK)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put_klgrp_FindHostsCancelResponse(soap, &r, "klgrp-FindHostsCancelResponse", "")
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap->error;
	soap_closesock(soap);
	return SOAP_OK;
}

SOAP_FMAC5 int SOAP_FMAC6 soap_serve_klgrp_FindHostsGetAccessor(struct soap *soap)
{	struct klgrp_FindHostsGetAccessor soap_tmp_klgrp_FindHostsGetAccessor;
	struct klgrp_FindHostsGetAccessorResponse r;
	soap_default_klgrp_FindHostsGetAccessorResponse(soap, &r);
	soap_default_klgrp_FindHostsGetAccessor(soap, &soap_tmp_klgrp_FindHostsGetAccessor);
	soap->encodingStyle = NULL;
	soap_get_klgrp_FindHostsGetAccessor(soap, &soap_tmp_klgrp_FindHostsGetAccessor, "klgrp-FindHostsGetAccessor", NULL);
	if (soap->error)
		return soap->error;
	
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
#ifndef WITH_LEANER
	 || soap_resolve_attachments(soap)
#endif
	 || soap_end_recv(soap))
		return soap->error;
	soap->error = klgrp_FindHostsGetAccessor(soap, soap_tmp_klgrp_FindHostsGetAccessor.wstrRequestId, r);
	if (soap->error)
		return soap->error;
	soap_serializeheader(soap);
	soap_serialize_klgrp_FindHostsGetAccessorResponse(soap, &r);
	soap_begin_count(soap);
	if (soap->mode & SOAP_IO_LENGTH)
	{	soap_envelope_begin_out(soap);
		soap_putheader(soap);
		soap_body_begin_out(soap);
		soap_put_klgrp_FindHostsGetAccessorResponse(soap, &r, "klgrp-FindHostsGetAccessorResponse", "");
		soap_body_end_out(soap);
		soap_envelope_end_out(soap);
	};
	if (soap_response(soap, SOAP_OK)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put_klgrp_FindHostsGetAccessorResponse(soap, &r, "klgrp-FindHostsGetAccessorResponse", "")
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap->error;
	soap_closesock(soap);
	return SOAP_OK;
}

SOAP_FMAC5 int SOAP_FMAC6 soap_serve_klgrp_GetSuperGroupId(struct soap *soap)
{	struct klgrp_GetSuperGroupId soap_tmp_klgrp_GetSuperGroupId;
	struct klgrp_GetSuperGroupIdResponse r;
	soap_default_klgrp_GetSuperGroupIdResponse(soap, &r);
	soap_default_klgrp_GetSuperGroupId(soap, &soap_tmp_klgrp_GetSuperGroupId);
	soap->encodingStyle = NULL;
	soap_get_klgrp_GetSuperGroupId(soap, &soap_tmp_klgrp_GetSuperGroupId, "klgrp-GetSuperGroupId", NULL);
	if (soap->error)
		return soap->error;
	
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
#ifndef WITH_LEANER
	 || soap_resolve_attachments(soap)
#endif
	 || soap_end_recv(soap))
		return soap->error;
	soap->error = klgrp_GetSuperGroupId(soap, soap_tmp_klgrp_GetSuperGroupId._, r);
	if (soap->error)
		return soap->error;
	soap_serializeheader(soap);
	soap_serialize_klgrp_GetSuperGroupIdResponse(soap, &r);
	soap_begin_count(soap);
	if (soap->mode & SOAP_IO_LENGTH)
	{	soap_envelope_begin_out(soap);
		soap_putheader(soap);
		soap_body_begin_out(soap);
		soap_put_klgrp_GetSuperGroupIdResponse(soap, &r, "klgrp-GetSuperGroupIdResponse", "");
		soap_body_end_out(soap);
		soap_envelope_end_out(soap);
	};
	if (soap_response(soap, SOAP_OK)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put_klgrp_GetSuperGroupIdResponse(soap, &r, "klgrp-GetSuperGroupIdResponse", "")
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap->error;
	soap_closesock(soap);
	return SOAP_OK;
}

SOAP_FMAC5 int SOAP_FMAC6 soap_serve_klgrp_FindGroups(struct soap *soap)
{	struct klgrp_FindGroups soap_tmp_klgrp_FindGroups;
	struct klgrp_FindGroupsResponse r;
	soap_default_klgrp_FindGroupsResponse(soap, &r);
	soap_default_klgrp_FindGroups(soap, &soap_tmp_klgrp_FindGroups);
	soap->encodingStyle = NULL;
	soap_get_klgrp_FindGroups(soap, &soap_tmp_klgrp_FindGroups, "klgrp-FindGroups", NULL);
	if (soap->error)
		return soap->error;
	
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
#ifndef WITH_LEANER
	 || soap_resolve_attachments(soap)
#endif
	 || soap_end_recv(soap))
		return soap->error;
	soap->error = klgrp_FindGroups(soap, soap_tmp_klgrp_FindGroups.wstrFilter, soap_tmp_klgrp_FindGroups.arrFields, soap_tmp_klgrp_FindGroups.arrFieldsToOrder, soap_tmp_klgrp_FindGroups.params, soap_tmp_klgrp_FindGroups.lTimeout, soap_tmp_klgrp_FindGroups.wstrRequestId, r);
	if (soap->error)
		return soap->error;
	soap_serializeheader(soap);
	soap_serialize_klgrp_FindGroupsResponse(soap, &r);
	soap_begin_count(soap);
	if (soap->mode & SOAP_IO_LENGTH)
	{	soap_envelope_begin_out(soap);
		soap_putheader(soap);
		soap_body_begin_out(soap);
		soap_put_klgrp_FindGroupsResponse(soap, &r, "klgrp-FindGroupsResponse", "");
		soap_body_end_out(soap);
		soap_envelope_end_out(soap);
	};
	if (soap_response(soap, SOAP_OK)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put_klgrp_FindGroupsResponse(soap, &r, "klgrp-FindGroupsResponse", "")
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap->error;
	soap_closesock(soap);
	return SOAP_OK;
}

SOAP_FMAC5 int SOAP_FMAC6 soap_serve_klpol_GetPolicyCommonData(struct soap *soap)
{	struct klpol_GetPolicyCommonData soap_tmp_klpol_GetPolicyCommonData;
	struct klpol_GetPolicyCommonDataResponse r;
	soap_default_klpol_GetPolicyCommonDataResponse(soap, &r);
	soap_default_klpol_GetPolicyCommonData(soap, &soap_tmp_klpol_GetPolicyCommonData);
	soap->encodingStyle = NULL;
	soap_get_klpol_GetPolicyCommonData(soap, &soap_tmp_klpol_GetPolicyCommonData, "klpol-GetPolicyCommonData", NULL);
	if (soap->error)
		return soap->error;
	
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
#ifndef WITH_LEANER
	 || soap_resolve_attachments(soap)
#endif
	 || soap_end_recv(soap))
		return soap->error;
	soap->error = klpol_GetPolicyCommonData(soap, soap_tmp_klpol_GetPolicyCommonData.nGroupId, soap_tmp_klpol_GetPolicyCommonData.nExpectedServerVersion, r);
	if (soap->error)
		return soap->error;
	soap_serializeheader(soap);
	soap_serialize_klpol_GetPolicyCommonDataResponse(soap, &r);
	soap_begin_count(soap);
	if (soap->mode & SOAP_IO_LENGTH)
	{	soap_envelope_begin_out(soap);
		soap_putheader(soap);
		soap_body_begin_out(soap);
		soap_put_klpol_GetPolicyCommonDataResponse(soap, &r, "klpol-GetPolicyCommonDataResponse", "");
		soap_body_end_out(soap);
		soap_envelope_end_out(soap);
	};
	if (soap_response(soap, SOAP_OK)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put_klpol_GetPolicyCommonDataResponse(soap, &r, "klpol-GetPolicyCommonDataResponse", "")
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap->error;
	soap_closesock(soap);
	return SOAP_OK;
}

SOAP_FMAC5 int SOAP_FMAC6 soap_serve_klpol_GetAllAcivePoliciesForGroup(struct soap *soap)
{	struct klpol_GetAllAcivePoliciesForGroup soap_tmp_klpol_GetAllAcivePoliciesForGroup;
	struct klpol_GetAllAcivePoliciesForGroupResponse r;
	soap_default_klpol_GetAllAcivePoliciesForGroupResponse(soap, &r);
	soap_default_klpol_GetAllAcivePoliciesForGroup(soap, &soap_tmp_klpol_GetAllAcivePoliciesForGroup);
	soap->encodingStyle = NULL;
	soap_get_klpol_GetAllAcivePoliciesForGroup(soap, &soap_tmp_klpol_GetAllAcivePoliciesForGroup, "klpol-GetAllAcivePoliciesForGroup", NULL);
	if (soap->error)
		return soap->error;
	
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
#ifndef WITH_LEANER
	 || soap_resolve_attachments(soap)
#endif
	 || soap_end_recv(soap))
		return soap->error;
	soap->error = klpol_GetAllAcivePoliciesForGroup(soap, soap_tmp_klpol_GetAllAcivePoliciesForGroup.nGroupId, r);
	if (soap->error)
		return soap->error;
	soap_serializeheader(soap);
	soap_serialize_klpol_GetAllAcivePoliciesForGroupResponse(soap, &r);
	soap_begin_count(soap);
	if (soap->mode & SOAP_IO_LENGTH)
	{	soap_envelope_begin_out(soap);
		soap_putheader(soap);
		soap_body_begin_out(soap);
		soap_put_klpol_GetAllAcivePoliciesForGroupResponse(soap, &r, "klpol-GetAllAcivePoliciesForGroupResponse", "");
		soap_body_end_out(soap);
		soap_envelope_end_out(soap);
	};
	if (soap_response(soap, SOAP_OK)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put_klpol_GetAllAcivePoliciesForGroupResponse(soap, &r, "klpol-GetAllAcivePoliciesForGroupResponse", "")
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap->error;
	soap_closesock(soap);
	return SOAP_OK;
}

SOAP_FMAC5 int SOAP_FMAC6 soap_serve_klpol_GetSinglePolicyCommonData(struct soap *soap)
{	struct klpol_GetSinglePolicyCommonData soap_tmp_klpol_GetSinglePolicyCommonData;
	struct klpol_GetSinglePolicyCommonDataResponse r;
	soap_default_klpol_GetSinglePolicyCommonDataResponse(soap, &r);
	soap_default_klpol_GetSinglePolicyCommonData(soap, &soap_tmp_klpol_GetSinglePolicyCommonData);
	soap->encodingStyle = NULL;
	soap_get_klpol_GetSinglePolicyCommonData(soap, &soap_tmp_klpol_GetSinglePolicyCommonData, "klpol-GetSinglePolicyCommonData", NULL);
	if (soap->error)
		return soap->error;
	
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
#ifndef WITH_LEANER
	 || soap_resolve_attachments(soap)
#endif
	 || soap_end_recv(soap))
		return soap->error;
	soap->error = klpol_GetSinglePolicyCommonData(soap, soap_tmp_klpol_GetSinglePolicyCommonData.policyId, r);
	if (soap->error)
		return soap->error;
	soap_serializeheader(soap);
	soap_serialize_klpol_GetSinglePolicyCommonDataResponse(soap, &r);
	soap_begin_count(soap);
	if (soap->mode & SOAP_IO_LENGTH)
	{	soap_envelope_begin_out(soap);
		soap_putheader(soap);
		soap_body_begin_out(soap);
		soap_put_klpol_GetSinglePolicyCommonDataResponse(soap, &r, "klpol-GetSinglePolicyCommonDataResponse", "");
		soap_body_end_out(soap);
		soap_envelope_end_out(soap);
	};
	if (soap_response(soap, SOAP_OK)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put_klpol_GetSinglePolicyCommonDataResponse(soap, &r, "klpol-GetSinglePolicyCommonDataResponse", "")
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap->error;
	soap_closesock(soap);
	return SOAP_OK;
}

SOAP_FMAC5 int SOAP_FMAC6 soap_serve_klpol_AddPolicy(struct soap *soap)
{	struct klpol_AddPolicy soap_tmp_klpol_AddPolicy;
	struct klpol_AddPolicyResponse r;
	soap_default_klpol_AddPolicyResponse(soap, &r);
	soap_default_klpol_AddPolicy(soap, &soap_tmp_klpol_AddPolicy);
	soap->encodingStyle = NULL;
	soap_get_klpol_AddPolicy(soap, &soap_tmp_klpol_AddPolicy, "klpol-AddPolicy", NULL);
	if (soap->error)
		return soap->error;
	
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
#ifndef WITH_LEANER
	 || soap_resolve_attachments(soap)
#endif
	 || soap_end_recv(soap))
		return soap->error;
	soap->error = klpol_AddPolicy(soap, soap_tmp_klpol_AddPolicy.nGroupId, soap_tmp_klpol_AddPolicy.policy, r);
	if (soap->error)
		return soap->error;
	soap_serializeheader(soap);
	soap_serialize_klpol_AddPolicyResponse(soap, &r);
	soap_begin_count(soap);
	if (soap->mode & SOAP_IO_LENGTH)
	{	soap_envelope_begin_out(soap);
		soap_putheader(soap);
		soap_body_begin_out(soap);
		soap_put_klpol_AddPolicyResponse(soap, &r, "klpol-AddPolicyResponse", "");
		soap_body_end_out(soap);
		soap_envelope_end_out(soap);
	};
	if (soap_response(soap, SOAP_OK)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put_klpol_AddPolicyResponse(soap, &r, "klpol-AddPolicyResponse", "")
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap->error;
	soap_closesock(soap);
	return SOAP_OK;
}

SOAP_FMAC5 int SOAP_FMAC6 soap_serve_klpol_UpdatePolicyCommonData(struct soap *soap)
{	struct klpol_UpdatePolicyCommonData soap_tmp_klpol_UpdatePolicyCommonData;
	struct klpol_UpdatePolicyCommonDataResponse r;
	soap_default_klpol_UpdatePolicyCommonDataResponse(soap, &r);
	soap_default_klpol_UpdatePolicyCommonData(soap, &soap_tmp_klpol_UpdatePolicyCommonData);
	soap->encodingStyle = NULL;
	soap_get_klpol_UpdatePolicyCommonData(soap, &soap_tmp_klpol_UpdatePolicyCommonData, "klpol-UpdatePolicyCommonData", NULL);
	if (soap->error)
		return soap->error;
	
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
#ifndef WITH_LEANER
	 || soap_resolve_attachments(soap)
#endif
	 || soap_end_recv(soap))
		return soap->error;
	soap->error = klpol_UpdatePolicyCommonData(soap, soap_tmp_klpol_UpdatePolicyCommonData.policy, r);
	if (soap->error)
		return soap->error;
	soap_serializeheader(soap);
	soap_serialize_klpol_UpdatePolicyCommonDataResponse(soap, &r);
	soap_begin_count(soap);
	if (soap->mode & SOAP_IO_LENGTH)
	{	soap_envelope_begin_out(soap);
		soap_putheader(soap);
		soap_body_begin_out(soap);
		soap_put_klpol_UpdatePolicyCommonDataResponse(soap, &r, "klpol-UpdatePolicyCommonDataResponse", "");
		soap_body_end_out(soap);
		soap_envelope_end_out(soap);
	};
	if (soap_response(soap, SOAP_OK)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put_klpol_UpdatePolicyCommonDataResponse(soap, &r, "klpol-UpdatePolicyCommonDataResponse", "")
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap->error;
	soap_closesock(soap);
	return SOAP_OK;
}

SOAP_FMAC5 int SOAP_FMAC6 soap_serve_klpol_DeletePolicy(struct soap *soap)
{	struct klpol_DeletePolicy soap_tmp_klpol_DeletePolicy;
	struct klpol_DeletePolicyResponse r;
	soap_default_klpol_DeletePolicyResponse(soap, &r);
	soap_default_klpol_DeletePolicy(soap, &soap_tmp_klpol_DeletePolicy);
	soap->encodingStyle = NULL;
	soap_get_klpol_DeletePolicy(soap, &soap_tmp_klpol_DeletePolicy, "klpol-DeletePolicy", NULL);
	if (soap->error)
		return soap->error;
	
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
#ifndef WITH_LEANER
	 || soap_resolve_attachments(soap)
#endif
	 || soap_end_recv(soap))
		return soap->error;
	soap->error = klpol_DeletePolicy(soap, soap_tmp_klpol_DeletePolicy.policyId, r);
	if (soap->error)
		return soap->error;
	soap_serializeheader(soap);
	soap_serialize_klpol_DeletePolicyResponse(soap, &r);
	soap_begin_count(soap);
	if (soap->mode & SOAP_IO_LENGTH)
	{	soap_envelope_begin_out(soap);
		soap_putheader(soap);
		soap_body_begin_out(soap);
		soap_put_klpol_DeletePolicyResponse(soap, &r, "klpol-DeletePolicyResponse", "");
		soap_body_end_out(soap);
		soap_envelope_end_out(soap);
	};
	if (soap_response(soap, SOAP_OK)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put_klpol_DeletePolicyResponse(soap, &r, "klpol-DeletePolicyResponse", "")
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap->error;
	soap_closesock(soap);
	return SOAP_OK;
}

SOAP_FMAC5 int SOAP_FMAC6 soap_serve_klpol_CopyPolicyEx(struct soap *soap)
{	struct klpol_CopyPolicyEx soap_tmp_klpol_CopyPolicyEx;
	struct klpol_CopyPolicyExResponse r;
	soap_default_klpol_CopyPolicyExResponse(soap, &r);
	soap_default_klpol_CopyPolicyEx(soap, &soap_tmp_klpol_CopyPolicyEx);
	soap->encodingStyle = NULL;
	soap_get_klpol_CopyPolicyEx(soap, &soap_tmp_klpol_CopyPolicyEx, "klpol-CopyPolicyEx", NULL);
	if (soap->error)
		return soap->error;
	
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
#ifndef WITH_LEANER
	 || soap_resolve_attachments(soap)
#endif
	 || soap_end_recv(soap))
		return soap->error;
	soap->error = klpol_CopyPolicyEx(soap, soap_tmp_klpol_CopyPolicyEx.policyId, soap_tmp_klpol_CopyPolicyEx.nNewGroupId, soap_tmp_klpol_CopyPolicyEx.bDeleteOrigin, r);
	if (soap->error)
		return soap->error;
	soap_serializeheader(soap);
	soap_serialize_klpol_CopyPolicyExResponse(soap, &r);
	soap_begin_count(soap);
	if (soap->mode & SOAP_IO_LENGTH)
	{	soap_envelope_begin_out(soap);
		soap_putheader(soap);
		soap_body_begin_out(soap);
		soap_put_klpol_CopyPolicyExResponse(soap, &r, "klpol-CopyPolicyExResponse", "");
		soap_body_end_out(soap);
		soap_envelope_end_out(soap);
	};
	if (soap_response(soap, SOAP_OK)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put_klpol_CopyPolicyExResponse(soap, &r, "klpol-CopyPolicyExResponse", "")
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap->error;
	soap_closesock(soap);
	return SOAP_OK;
}

SOAP_FMAC5 int SOAP_FMAC6 soap_serve_klpol_GetSSProxyID(struct soap *soap)
{	struct klpol_GetSSProxyID soap_tmp_klpol_GetSSProxyID;
	struct klpol_GetSSProxyIDResponse r;
	soap_default_klpol_GetSSProxyIDResponse(soap, &r);
	soap_default_klpol_GetSSProxyID(soap, &soap_tmp_klpol_GetSSProxyID);
	soap->encodingStyle = NULL;
	soap_get_klpol_GetSSProxyID(soap, &soap_tmp_klpol_GetSSProxyID, "klpol-GetSSProxyID", NULL);
	if (soap->error)
		return soap->error;
	
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
#ifndef WITH_LEANER
	 || soap_resolve_attachments(soap)
#endif
	 || soap_end_recv(soap))
		return soap->error;
	soap->error = klpol_GetSSProxyID(soap, soap_tmp_klpol_GetSSProxyID.policyId, soap_tmp_klpol_GetSSProxyID.nTimeout, r);
	if (soap->error)
		return soap->error;
	soap_serializeheader(soap);
	soap_serialize_klpol_GetSSProxyIDResponse(soap, &r);
	soap_begin_count(soap);
	if (soap->mode & SOAP_IO_LENGTH)
	{	soap_envelope_begin_out(soap);
		soap_putheader(soap);
		soap_body_begin_out(soap);
		soap_put_klpol_GetSSProxyIDResponse(soap, &r, "klpol-GetSSProxyIDResponse", "");
		soap_body_end_out(soap);
		soap_envelope_end_out(soap);
	};
	if (soap_response(soap, SOAP_OK)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put_klpol_GetSSProxyIDResponse(soap, &r, "klpol-GetSSProxyIDResponse", "")
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap->error;
	soap_closesock(soap);
	return SOAP_OK;
}

SOAP_FMAC5 int SOAP_FMAC6 soap_serve_klpol_ModifySettings(struct soap *soap)
{	struct klpol_ModifySettings soap_tmp_klpol_ModifySettings;
	struct klpol_ModifySettingsResponse r;
	soap_default_klpol_ModifySettingsResponse(soap, &r);
	soap_default_klpol_ModifySettings(soap, &soap_tmp_klpol_ModifySettings);
	soap->encodingStyle = NULL;
	soap_get_klpol_ModifySettings(soap, &soap_tmp_klpol_ModifySettings, "klpol-ModifySettings", NULL);
	if (soap->error)
		return soap->error;
	
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
#ifndef WITH_LEANER
	 || soap_resolve_attachments(soap)
#endif
	 || soap_end_recv(soap))
		return soap->error;
	soap->error = klpol_ModifySettings(soap, soap_tmp_klpol_ModifySettings.policyId, r);
	if (soap->error)
		return soap->error;
	soap_serializeheader(soap);
	soap_serialize_klpol_ModifySettingsResponse(soap, &r);
	soap_begin_count(soap);
	if (soap->mode & SOAP_IO_LENGTH)
	{	soap_envelope_begin_out(soap);
		soap_putheader(soap);
		soap_body_begin_out(soap);
		soap_put_klpol_ModifySettingsResponse(soap, &r, "klpol-ModifySettingsResponse", "");
		soap_body_end_out(soap);
		soap_envelope_end_out(soap);
	};
	if (soap_response(soap, SOAP_OK)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put_klpol_ModifySettingsResponse(soap, &r, "klpol-ModifySettingsResponse", "")
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap->error;
	soap_closesock(soap);
	return SOAP_OK;
}

SOAP_FMAC5 int SOAP_FMAC6 soap_serve_klpol_MakePolicyActive(struct soap *soap)
{	struct klpol_MakePolicyActive soap_tmp_klpol_MakePolicyActive;
	struct klpol_MakePolicyActiveResponse r;
	soap_default_klpol_MakePolicyActiveResponse(soap, &r);
	soap_default_klpol_MakePolicyActive(soap, &soap_tmp_klpol_MakePolicyActive);
	soap->encodingStyle = NULL;
	soap_get_klpol_MakePolicyActive(soap, &soap_tmp_klpol_MakePolicyActive, "klpol-MakePolicyActive", NULL);
	if (soap->error)
		return soap->error;
	
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
#ifndef WITH_LEANER
	 || soap_resolve_attachments(soap)
#endif
	 || soap_end_recv(soap))
		return soap->error;
	soap->error = klpol_MakePolicyActive(soap, soap_tmp_klpol_MakePolicyActive.policyId, soap_tmp_klpol_MakePolicyActive.bActive, r);
	if (soap->error)
		return soap->error;
	soap_serializeheader(soap);
	soap_serialize_klpol_MakePolicyActiveResponse(soap, &r);
	soap_begin_count(soap);
	if (soap->mode & SOAP_IO_LENGTH)
	{	soap_envelope_begin_out(soap);
		soap_putheader(soap);
		soap_body_begin_out(soap);
		soap_put_klpol_MakePolicyActiveResponse(soap, &r, "klpol-MakePolicyActiveResponse", "");
		soap_body_end_out(soap);
		soap_envelope_end_out(soap);
	};
	if (soap_response(soap, SOAP_OK)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put_klpol_MakePolicyActiveResponse(soap, &r, "klpol-MakePolicyActiveResponse", "")
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap->error;
	soap_closesock(soap);
	return SOAP_OK;
}

SOAP_FMAC5 int SOAP_FMAC6 soap_serve_klpol_MakePolicyRoaming(struct soap *soap)
{	struct klpol_MakePolicyRoaming soap_tmp_klpol_MakePolicyRoaming;
	struct klpol_MakePolicyRoamingResponse r;
	soap_default_klpol_MakePolicyRoamingResponse(soap, &r);
	soap_default_klpol_MakePolicyRoaming(soap, &soap_tmp_klpol_MakePolicyRoaming);
	soap->encodingStyle = NULL;
	soap_get_klpol_MakePolicyRoaming(soap, &soap_tmp_klpol_MakePolicyRoaming, "klpol-MakePolicyRoaming", NULL);
	if (soap->error)
		return soap->error;
	
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
#ifndef WITH_LEANER
	 || soap_resolve_attachments(soap)
#endif
	 || soap_end_recv(soap))
		return soap->error;
	soap->error = klpol_MakePolicyRoaming(soap, soap_tmp_klpol_MakePolicyRoaming.policyId, r);
	if (soap->error)
		return soap->error;
	soap_serializeheader(soap);
	soap_serialize_klpol_MakePolicyRoamingResponse(soap, &r);
	soap_begin_count(soap);
	if (soap->mode & SOAP_IO_LENGTH)
	{	soap_envelope_begin_out(soap);
		soap_putheader(soap);
		soap_body_begin_out(soap);
		soap_put_klpol_MakePolicyRoamingResponse(soap, &r, "klpol-MakePolicyRoamingResponse", "");
		soap_body_end_out(soap);
		soap_envelope_end_out(soap);
	};
	if (soap_response(soap, SOAP_OK)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put_klpol_MakePolicyRoamingResponse(soap, &r, "klpol-MakePolicyRoamingResponse", "")
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap->error;
	soap_closesock(soap);
	return SOAP_OK;
}

SOAP_FMAC5 int SOAP_FMAC6 soap_serve_klpol_GetPoliciesForGroup(struct soap *soap)
{	struct klpol_GetPoliciesForGroup soap_tmp_klpol_GetPoliciesForGroup;
	struct klpol_GetPoliciesForGroupResponse r;
	soap_default_klpol_GetPoliciesForGroupResponse(soap, &r);
	soap_default_klpol_GetPoliciesForGroup(soap, &soap_tmp_klpol_GetPoliciesForGroup);
	soap->encodingStyle = NULL;
	soap_get_klpol_GetPoliciesForGroup(soap, &soap_tmp_klpol_GetPoliciesForGroup, "klpol-GetPoliciesForGroup", NULL);
	if (soap->error)
		return soap->error;
	
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
#ifndef WITH_LEANER
	 || soap_resolve_attachments(soap)
#endif
	 || soap_end_recv(soap))
		return soap->error;
	soap->error = klpol_GetPoliciesForGroup(soap, soap_tmp_klpol_GetPoliciesForGroup.nGroupId, soap_tmp_klpol_GetPoliciesForGroup.nExpectedServerVersion, r);
	if (soap->error)
		return soap->error;
	soap_serializeheader(soap);
	soap_serialize_klpol_GetPoliciesForGroupResponse(soap, &r);
	soap_begin_count(soap);
	if (soap->mode & SOAP_IO_LENGTH)
	{	soap_envelope_begin_out(soap);
		soap_putheader(soap);
		soap_body_begin_out(soap);
		soap_put_klpol_GetPoliciesForGroupResponse(soap, &r, "klpol-GetPoliciesForGroupResponse", "");
		soap_body_end_out(soap);
		soap_envelope_end_out(soap);
	};
	if (soap_response(soap, SOAP_OK)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put_klpol_GetPoliciesForGroupResponse(soap, &r, "klpol-GetPoliciesForGroupResponse", "")
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap->error;
	soap_closesock(soap);
	return SOAP_OK;
}

SOAP_FMAC5 int SOAP_FMAC6 soap_serve_klpol_CopyOrMovePolicy(struct soap *soap)
{	struct klpol_CopyOrMovePolicy soap_tmp_klpol_CopyOrMovePolicy;
	struct klpol_CopyOrMovePolicyResponse r;
	soap_default_klpol_CopyOrMovePolicyResponse(soap, &r);
	soap_default_klpol_CopyOrMovePolicy(soap, &soap_tmp_klpol_CopyOrMovePolicy);
	soap->encodingStyle = NULL;
	soap_get_klpol_CopyOrMovePolicy(soap, &soap_tmp_klpol_CopyOrMovePolicy, "klpol-CopyOrMovePolicy", NULL);
	if (soap->error)
		return soap->error;
	
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
#ifndef WITH_LEANER
	 || soap_resolve_attachments(soap)
#endif
	 || soap_end_recv(soap))
		return soap->error;
	soap->error = klpol_CopyOrMovePolicy(soap, soap_tmp_klpol_CopyOrMovePolicy.policyId, soap_tmp_klpol_CopyOrMovePolicy.nNewGroupId, soap_tmp_klpol_CopyOrMovePolicy.bDeleteOrigin, soap_tmp_klpol_CopyOrMovePolicy.data, r);
	if (soap->error)
		return soap->error;
	soap_serializeheader(soap);
	soap_serialize_klpol_CopyOrMovePolicyResponse(soap, &r);
	soap_begin_count(soap);
	if (soap->mode & SOAP_IO_LENGTH)
	{	soap_envelope_begin_out(soap);
		soap_putheader(soap);
		soap_body_begin_out(soap);
		soap_put_klpol_CopyOrMovePolicyResponse(soap, &r, "klpol-CopyOrMovePolicyResponse", "");
		soap_body_end_out(soap);
		soap_envelope_end_out(soap);
	};
	if (soap_response(soap, SOAP_OK)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put_klpol_CopyOrMovePolicyResponse(soap, &r, "klpol-CopyOrMovePolicyResponse", "")
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap->error;
	soap_closesock(soap);
	return SOAP_OK;
}

SOAP_FMAC5 int SOAP_FMAC6 soap_serve_klpol_SetOutbreakPolicy(struct soap *soap)
{	struct klpol_SetOutbreakPolicy soap_tmp_klpol_SetOutbreakPolicy;
	struct klpol_SetOutbreakPolicyResponse r;
	soap_default_klpol_SetOutbreakPolicyResponse(soap, &r);
	soap_default_klpol_SetOutbreakPolicy(soap, &soap_tmp_klpol_SetOutbreakPolicy);
	soap->encodingStyle = NULL;
	soap_get_klpol_SetOutbreakPolicy(soap, &soap_tmp_klpol_SetOutbreakPolicy, "klpol-SetOutbreakPolicy", NULL);
	if (soap->error)
		return soap->error;
	
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
#ifndef WITH_LEANER
	 || soap_resolve_attachments(soap)
#endif
	 || soap_end_recv(soap))
		return soap->error;
	soap->error = klpol_SetOutbreakPolicy(soap, soap_tmp_klpol_SetOutbreakPolicy.vec_policies, r);
	if (soap->error)
		return soap->error;
	soap_serializeheader(soap);
	soap_serialize_klpol_SetOutbreakPolicyResponse(soap, &r);
	soap_begin_count(soap);
	if (soap->mode & SOAP_IO_LENGTH)
	{	soap_envelope_begin_out(soap);
		soap_putheader(soap);
		soap_body_begin_out(soap);
		soap_put_klpol_SetOutbreakPolicyResponse(soap, &r, "klpol-SetOutbreakPolicyResponse", "");
		soap_body_end_out(soap);
		soap_envelope_end_out(soap);
	};
	if (soap_response(soap, SOAP_OK)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put_klpol_SetOutbreakPolicyResponse(soap, &r, "klpol-SetOutbreakPolicyResponse", "")
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap->error;
	soap_closesock(soap);
	return SOAP_OK;
}

SOAP_FMAC5 int SOAP_FMAC6 soap_serve_klpol_GetOutbreakPolicy(struct soap *soap)
{	struct klpol_GetOutbreakPolicy soap_tmp_klpol_GetOutbreakPolicy;
	struct klpol_GetOutbreakPolicyResponse r;
	soap_default_klpol_GetOutbreakPolicyResponse(soap, &r);
	soap_default_klpol_GetOutbreakPolicy(soap, &soap_tmp_klpol_GetOutbreakPolicy);
	soap->encodingStyle = NULL;
	soap_get_klpol_GetOutbreakPolicy(soap, &soap_tmp_klpol_GetOutbreakPolicy, "klpol-GetOutbreakPolicy", NULL);
	if (soap->error)
		return soap->error;
	
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
#ifndef WITH_LEANER
	 || soap_resolve_attachments(soap)
#endif
	 || soap_end_recv(soap))
		return soap->error;
	soap->error = klpol_GetOutbreakPolicy(soap, r);
	if (soap->error)
		return soap->error;
	soap_serializeheader(soap);
	soap_serialize_klpol_GetOutbreakPolicyResponse(soap, &r);
	soap_begin_count(soap);
	if (soap->mode & SOAP_IO_LENGTH)
	{	soap_envelope_begin_out(soap);
		soap_putheader(soap);
		soap_body_begin_out(soap);
		soap_put_klpol_GetOutbreakPolicyResponse(soap, &r, "klpol-GetOutbreakPolicyResponse", "");
		soap_body_end_out(soap);
		soap_envelope_end_out(soap);
	};
	if (soap_response(soap, SOAP_OK)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put_klpol_GetOutbreakPolicyResponse(soap, &r, "klpol-GetOutbreakPolicyResponse", "")
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap->error;
	soap_closesock(soap);
	return SOAP_OK;
}

SOAP_FMAC5 int SOAP_FMAC6 soap_serve_klpol_SetOutbreakPolicy2(struct soap *soap)
{	struct klpol_SetOutbreakPolicy2 soap_tmp_klpol_SetOutbreakPolicy2;
	struct klpol_SetOutbreakPolicy2Response r;
	soap_default_klpol_SetOutbreakPolicy2Response(soap, &r);
	soap_default_klpol_SetOutbreakPolicy2(soap, &soap_tmp_klpol_SetOutbreakPolicy2);
	soap->encodingStyle = NULL;
	soap_get_klpol_SetOutbreakPolicy2(soap, &soap_tmp_klpol_SetOutbreakPolicy2, "klpol-SetOutbreakPolicy2", NULL);
	if (soap->error)
		return soap->error;
	
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
#ifndef WITH_LEANER
	 || soap_resolve_attachments(soap)
#endif
	 || soap_end_recv(soap))
		return soap->error;
	soap->error = klpol_SetOutbreakPolicy2(soap, soap_tmp_klpol_SetOutbreakPolicy2.data, r);
	if (soap->error)
		return soap->error;
	soap_serializeheader(soap);
	soap_serialize_klpol_SetOutbreakPolicy2Response(soap, &r);
	soap_begin_count(soap);
	if (soap->mode & SOAP_IO_LENGTH)
	{	soap_envelope_begin_out(soap);
		soap_putheader(soap);
		soap_body_begin_out(soap);
		soap_put_klpol_SetOutbreakPolicy2Response(soap, &r, "klpol-SetOutbreakPolicy2Response", "");
		soap_body_end_out(soap);
		soap_envelope_end_out(soap);
	};
	if (soap_response(soap, SOAP_OK)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put_klpol_SetOutbreakPolicy2Response(soap, &r, "klpol-SetOutbreakPolicy2Response", "")
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap->error;
	soap_closesock(soap);
	return SOAP_OK;
}

SOAP_FMAC5 int SOAP_FMAC6 soap_serve_klpol_GetOutbreakPolicy2(struct soap *soap)
{	struct klpol_GetOutbreakPolicy2 soap_tmp_klpol_GetOutbreakPolicy2;
	struct klpol_GetOutbreakPolicy2Response r;
	soap_default_klpol_GetOutbreakPolicy2Response(soap, &r);
	soap_default_klpol_GetOutbreakPolicy2(soap, &soap_tmp_klpol_GetOutbreakPolicy2);
	soap->encodingStyle = NULL;
	soap_get_klpol_GetOutbreakPolicy2(soap, &soap_tmp_klpol_GetOutbreakPolicy2, "klpol-GetOutbreakPolicy2", NULL);
	if (soap->error)
		return soap->error;
	
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
#ifndef WITH_LEANER
	 || soap_resolve_attachments(soap)
#endif
	 || soap_end_recv(soap))
		return soap->error;
	soap->error = klpol_GetOutbreakPolicy2(soap, r);
	if (soap->error)
		return soap->error;
	soap_serializeheader(soap);
	soap_serialize_klpol_GetOutbreakPolicy2Response(soap, &r);
	soap_begin_count(soap);
	if (soap->mode & SOAP_IO_LENGTH)
	{	soap_envelope_begin_out(soap);
		soap_putheader(soap);
		soap_body_begin_out(soap);
		soap_put_klpol_GetOutbreakPolicy2Response(soap, &r, "klpol-GetOutbreakPolicy2Response", "");
		soap_body_end_out(soap);
		soap_envelope_end_out(soap);
	};
	if (soap_response(soap, SOAP_OK)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put_klpol_GetOutbreakPolicy2Response(soap, &r, "klpol-GetOutbreakPolicy2Response", "")
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap->error;
	soap_closesock(soap);
	return SOAP_OK;
}

SOAP_FMAC5 int SOAP_FMAC6 soap_serve_klprssp_SS_Read(struct soap *soap)
{	struct klprssp_SS_Read soap_tmp_klprssp_SS_Read;
	struct klprssp_SS_ReadResponse r;
	soap_default_klprssp_SS_ReadResponse(soap, &r);
	soap_default_klprssp_SS_Read(soap, &soap_tmp_klprssp_SS_Read);
	soap->encodingStyle = NULL;
	soap_get_klprssp_SS_Read(soap, &soap_tmp_klprssp_SS_Read, "klprssp-SS-Read", NULL);
	if (soap->error)
		return soap->error;
	
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
#ifndef WITH_LEANER
	 || soap_resolve_attachments(soap)
#endif
	 || soap_end_recv(soap))
		return soap->error;
	soap->error = klprssp_SS_Read(soap, soap_tmp_klprssp_SS_Read.storage_descr, soap_tmp_klprssp_SS_Read.name, soap_tmp_klprssp_SS_Read.version, soap_tmp_klprssp_SS_Read.section, r);
	if (soap->error)
		return soap->error;
	soap_serializeheader(soap);
	soap_serialize_klprssp_SS_ReadResponse(soap, &r);
	soap_begin_count(soap);
	if (soap->mode & SOAP_IO_LENGTH)
	{	soap_envelope_begin_out(soap);
		soap_putheader(soap);
		soap_body_begin_out(soap);
		soap_put_klprssp_SS_ReadResponse(soap, &r, "klprssp-SS-ReadResponse", "");
		soap_body_end_out(soap);
		soap_envelope_end_out(soap);
	};
	if (soap_response(soap, SOAP_OK)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put_klprssp_SS_ReadResponse(soap, &r, "klprssp-SS-ReadResponse", "")
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap->error;
	soap_closesock(soap);
	return SOAP_OK;
}

SOAP_FMAC5 int SOAP_FMAC6 soap_serve_klprssp_SS_Write(struct soap *soap)
{	struct klprssp_SS_Write soap_tmp_klprssp_SS_Write;
	struct klprssp_SS_WriteResponse r;
	soap_default_klprssp_SS_WriteResponse(soap, &r);
	soap_default_klprssp_SS_Write(soap, &soap_tmp_klprssp_SS_Write);
	soap->encodingStyle = NULL;
	soap_get_klprssp_SS_Write(soap, &soap_tmp_klprssp_SS_Write, "klprssp-SS-Write", NULL);
	if (soap->error)
		return soap->error;
	
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
#ifndef WITH_LEANER
	 || soap_resolve_attachments(soap)
#endif
	 || soap_end_recv(soap))
		return soap->error;
	soap->error = klprssp_SS_Write(soap, soap_tmp_klprssp_SS_Write.storage_descr, soap_tmp_klprssp_SS_Write.name, soap_tmp_klprssp_SS_Write.version, soap_tmp_klprssp_SS_Write.section, soap_tmp_klprssp_SS_Write.data, soap_tmp_klprssp_SS_Write.operation_type, r);
	if (soap->error)
		return soap->error;
	soap_serializeheader(soap);
	soap_serialize_klprssp_SS_WriteResponse(soap, &r);
	soap_begin_count(soap);
	if (soap->mode & SOAP_IO_LENGTH)
	{	soap_envelope_begin_out(soap);
		soap_putheader(soap);
		soap_body_begin_out(soap);
		soap_put_klprssp_SS_WriteResponse(soap, &r, "klprssp-SS-WriteResponse", "");
		soap_body_end_out(soap);
		soap_envelope_end_out(soap);
	};
	if (soap_response(soap, SOAP_OK)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put_klprssp_SS_WriteResponse(soap, &r, "klprssp-SS-WriteResponse", "")
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap->error;
	soap_closesock(soap);
	return SOAP_OK;
}

SOAP_FMAC5 int SOAP_FMAC6 soap_serve_klprssp_SS_SectionOperation(struct soap *soap)
{	struct klprssp_SS_SectionOperation soap_tmp_klprssp_SS_SectionOperation;
	struct klprssp_SS_SectionOperationResponse r;
	soap_default_klprssp_SS_SectionOperationResponse(soap, &r);
	soap_default_klprssp_SS_SectionOperation(soap, &soap_tmp_klprssp_SS_SectionOperation);
	soap->encodingStyle = NULL;
	soap_get_klprssp_SS_SectionOperation(soap, &soap_tmp_klprssp_SS_SectionOperation, "klprssp-SS-SectionOperation", NULL);
	if (soap->error)
		return soap->error;
	
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
#ifndef WITH_LEANER
	 || soap_resolve_attachments(soap)
#endif
	 || soap_end_recv(soap))
		return soap->error;
	soap->error = klprssp_SS_SectionOperation(soap, soap_tmp_klprssp_SS_SectionOperation.storage_descr, soap_tmp_klprssp_SS_SectionOperation.name, soap_tmp_klprssp_SS_SectionOperation.version, soap_tmp_klprssp_SS_SectionOperation.section, soap_tmp_klprssp_SS_SectionOperation.operation_type, r);
	if (soap->error)
		return soap->error;
	soap_serializeheader(soap);
	soap_serialize_klprssp_SS_SectionOperationResponse(soap, &r);
	soap_begin_count(soap);
	if (soap->mode & SOAP_IO_LENGTH)
	{	soap_envelope_begin_out(soap);
		soap_putheader(soap);
		soap_body_begin_out(soap);
		soap_put_klprssp_SS_SectionOperationResponse(soap, &r, "klprssp-SS-SectionOperationResponse", "");
		soap_body_end_out(soap);
		soap_envelope_end_out(soap);
	};
	if (soap_response(soap, SOAP_OK)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put_klprssp_SS_SectionOperationResponse(soap, &r, "klprssp-SS-SectionOperationResponse", "")
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap->error;
	soap_closesock(soap);
	return SOAP_OK;
}

SOAP_FMAC5 int SOAP_FMAC6 soap_serve_klprssp_SS_GetNames(struct soap *soap)
{	struct klprssp_SS_GetNames soap_tmp_klprssp_SS_GetNames;
	struct klprssp_SS_GetNamesResponse r;
	soap_default_klprssp_SS_GetNamesResponse(soap, &r);
	soap_default_klprssp_SS_GetNames(soap, &soap_tmp_klprssp_SS_GetNames);
	soap->encodingStyle = NULL;
	soap_get_klprssp_SS_GetNames(soap, &soap_tmp_klprssp_SS_GetNames, "klprssp-SS-GetNames", NULL);
	if (soap->error)
		return soap->error;
	
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
#ifndef WITH_LEANER
	 || soap_resolve_attachments(soap)
#endif
	 || soap_end_recv(soap))
		return soap->error;
	soap->error = klprssp_SS_GetNames(soap, soap_tmp_klprssp_SS_GetNames.storage_descr, soap_tmp_klprssp_SS_GetNames.name, soap_tmp_klprssp_SS_GetNames.version, r);
	if (soap->error)
		return soap->error;
	soap_serializeheader(soap);
	soap_serialize_klprssp_SS_GetNamesResponse(soap, &r);
	soap_begin_count(soap);
	if (soap->mode & SOAP_IO_LENGTH)
	{	soap_envelope_begin_out(soap);
		soap_putheader(soap);
		soap_body_begin_out(soap);
		soap_put_klprssp_SS_GetNamesResponse(soap, &r, "klprssp-SS-GetNamesResponse", "");
		soap_body_end_out(soap);
		soap_envelope_end_out(soap);
	};
	if (soap_response(soap, SOAP_OK)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put_klprssp_SS_GetNamesResponse(soap, &r, "klprssp-SS-GetNamesResponse", "")
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap->error;
	soap_closesock(soap);
	return SOAP_OK;
}

SOAP_FMAC5 int SOAP_FMAC6 soap_serve_klprssp_SS_ApplyChanges(struct soap *soap)
{	struct klprssp_SS_ApplyChanges soap_tmp_klprssp_SS_ApplyChanges;
	struct klprssp_SS_ApplyChangesResponse r;
	soap_default_klprssp_SS_ApplyChangesResponse(soap, &r);
	soap_default_klprssp_SS_ApplyChanges(soap, &soap_tmp_klprssp_SS_ApplyChanges);
	soap->encodingStyle = NULL;
	soap_get_klprssp_SS_ApplyChanges(soap, &soap_tmp_klprssp_SS_ApplyChanges, "klprssp-SS-ApplyChanges", NULL);
	if (soap->error)
		return soap->error;
	
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
#ifndef WITH_LEANER
	 || soap_resolve_attachments(soap)
#endif
	 || soap_end_recv(soap))
		return soap->error;
	soap->error = klprssp_SS_ApplyChanges(soap, soap_tmp_klprssp_SS_ApplyChanges.storage_descr, r);
	if (soap->error)
		return soap->error;
	soap_serializeheader(soap);
	soap_serialize_klprssp_SS_ApplyChangesResponse(soap, &r);
	soap_begin_count(soap);
	if (soap->mode & SOAP_IO_LENGTH)
	{	soap_envelope_begin_out(soap);
		soap_putheader(soap);
		soap_body_begin_out(soap);
		soap_put_klprssp_SS_ApplyChangesResponse(soap, &r, "klprssp-SS-ApplyChangesResponse", "");
		soap_body_end_out(soap);
		soap_envelope_end_out(soap);
	};
	if (soap_response(soap, SOAP_OK)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put_klprssp_SS_ApplyChangesResponse(soap, &r, "klprssp-SS-ApplyChangesResponse", "")
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap->error;
	soap_closesock(soap);
	return SOAP_OK;
}

SOAP_FMAC5 int SOAP_FMAC6 soap_serve_klprssp_ReleaseSS(struct soap *soap)
{	struct klprssp_ReleaseSS soap_tmp_klprssp_ReleaseSS;
	struct klprssp_ReleaseSSResponse r;
	soap_default_klprssp_ReleaseSSResponse(soap, &r);
	soap_default_klprssp_ReleaseSS(soap, &soap_tmp_klprssp_ReleaseSS);
	soap->encodingStyle = NULL;
	soap_get_klprssp_ReleaseSS(soap, &soap_tmp_klprssp_ReleaseSS, "klprssp-ReleaseSS", NULL);
	if (soap->error)
		return soap->error;
	
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
#ifndef WITH_LEANER
	 || soap_resolve_attachments(soap)
#endif
	 || soap_end_recv(soap))
		return soap->error;
	soap->error = klprssp_ReleaseSS(soap, soap_tmp_klprssp_ReleaseSS.storage_descr, r);
	if (soap->error)
		return soap->error;
	soap_serializeheader(soap);
	soap_serialize_klprssp_ReleaseSSResponse(soap, &r);
	soap_begin_count(soap);
	if (soap->mode & SOAP_IO_LENGTH)
	{	soap_envelope_begin_out(soap);
		soap_putheader(soap);
		soap_body_begin_out(soap);
		soap_put_klprssp_ReleaseSSResponse(soap, &r, "klprssp-ReleaseSSResponse", "");
		soap_body_end_out(soap);
		soap_envelope_end_out(soap);
	};
	if (soap_response(soap, SOAP_OK)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put_klprssp_ReleaseSSResponse(soap, &r, "klprssp-ReleaseSSResponse", "")
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap->error;
	soap_closesock(soap);
	return SOAP_OK;
}

SOAP_FMAC5 int SOAP_FMAC6 soap_serve_adhst_GetChildComputers(struct soap *soap)
{	struct adhst_GetChildComputers soap_tmp_adhst_GetChildComputers;
	struct adhst_GetChildComputersResponse r;
	soap_default_adhst_GetChildComputersResponse(soap, &r);
	soap_default_adhst_GetChildComputers(soap, &soap_tmp_adhst_GetChildComputers);
	soap->encodingStyle = NULL;
	soap_get_adhst_GetChildComputers(soap, &soap_tmp_adhst_GetChildComputers, "adhst-GetChildComputers", NULL);
	if (soap->error)
		return soap->error;
	
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
#ifndef WITH_LEANER
	 || soap_resolve_attachments(soap)
#endif
	 || soap_end_recv(soap))
		return soap->error;
	soap->error = adhst_GetChildComputers(soap, soap_tmp_adhst_GetChildComputers.idOU, soap_tmp_adhst_GetChildComputers.fields, soap_tmp_adhst_GetChildComputers.lTimeout, r);
	if (soap->error)
		return soap->error;
	soap_serializeheader(soap);
	soap_serialize_adhst_GetChildComputersResponse(soap, &r);
	soap_begin_count(soap);
	if (soap->mode & SOAP_IO_LENGTH)
	{	soap_envelope_begin_out(soap);
		soap_putheader(soap);
		soap_body_begin_out(soap);
		soap_put_adhst_GetChildComputersResponse(soap, &r, "adhst-GetChildComputersResponse", "");
		soap_body_end_out(soap);
		soap_envelope_end_out(soap);
	};
	if (soap_response(soap, SOAP_OK)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put_adhst_GetChildComputersResponse(soap, &r, "adhst-GetChildComputersResponse", "")
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap->error;
	soap_closesock(soap);
	return SOAP_OK;
}

SOAP_FMAC5 int SOAP_FMAC6 soap_serve_adhst_GetChildOUs(struct soap *soap)
{	struct adhst_GetChildOUs soap_tmp_adhst_GetChildOUs;
	struct adhst_GetChildOUsResponse r;
	soap_default_adhst_GetChildOUsResponse(soap, &r);
	soap_default_adhst_GetChildOUs(soap, &soap_tmp_adhst_GetChildOUs);
	soap->encodingStyle = NULL;
	soap_get_adhst_GetChildOUs(soap, &soap_tmp_adhst_GetChildOUs, "adhst-GetChildOUs", NULL);
	if (soap->error)
		return soap->error;
	
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
#ifndef WITH_LEANER
	 || soap_resolve_attachments(soap)
#endif
	 || soap_end_recv(soap))
		return soap->error;
	soap->error = adhst_GetChildOUs(soap, soap_tmp_adhst_GetChildOUs.idOU, soap_tmp_adhst_GetChildOUs.fields, soap_tmp_adhst_GetChildOUs.lTimeout, r);
	if (soap->error)
		return soap->error;
	soap_serializeheader(soap);
	soap_serialize_adhst_GetChildOUsResponse(soap, &r);
	soap_begin_count(soap);
	if (soap->mode & SOAP_IO_LENGTH)
	{	soap_envelope_begin_out(soap);
		soap_putheader(soap);
		soap_body_begin_out(soap);
		soap_put_adhst_GetChildOUsResponse(soap, &r, "adhst-GetChildOUsResponse", "");
		soap_body_end_out(soap);
		soap_envelope_end_out(soap);
	};
	if (soap_response(soap, SOAP_OK)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put_adhst_GetChildOUsResponse(soap, &r, "adhst-GetChildOUsResponse", "")
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap->error;
	soap_closesock(soap);
	return SOAP_OK;
}

SOAP_FMAC5 int SOAP_FMAC6 soap_serve_adhst_GetOU(struct soap *soap)
{	struct adhst_GetOU soap_tmp_adhst_GetOU;
	struct adhst_GetOUResponse r;
	soap_default_adhst_GetOUResponse(soap, &r);
	soap_default_adhst_GetOU(soap, &soap_tmp_adhst_GetOU);
	soap->encodingStyle = NULL;
	soap_get_adhst_GetOU(soap, &soap_tmp_adhst_GetOU, "adhst-GetOU", NULL);
	if (soap->error)
		return soap->error;
	
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
#ifndef WITH_LEANER
	 || soap_resolve_attachments(soap)
#endif
	 || soap_end_recv(soap))
		return soap->error;
	soap->error = adhst_GetOU(soap, soap_tmp_adhst_GetOU.idOU, soap_tmp_adhst_GetOU.fields, r);
	if (soap->error)
		return soap->error;
	soap_serializeheader(soap);
	soap_serialize_adhst_GetOUResponse(soap, &r);
	soap_begin_count(soap);
	if (soap->mode & SOAP_IO_LENGTH)
	{	soap_envelope_begin_out(soap);
		soap_putheader(soap);
		soap_body_begin_out(soap);
		soap_put_adhst_GetOUResponse(soap, &r, "adhst-GetOUResponse", "");
		soap_body_end_out(soap);
		soap_envelope_end_out(soap);
	};
	if (soap_response(soap, SOAP_OK)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put_adhst_GetOUResponse(soap, &r, "adhst-GetOUResponse", "")
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap->error;
	soap_closesock(soap);
	return SOAP_OK;
}

SOAP_FMAC5 int SOAP_FMAC6 soap_serve_adhst_UpdateOU(struct soap *soap)
{	struct adhst_UpdateOU soap_tmp_adhst_UpdateOU;
	struct adhst_UpdateOUResponse r;
	soap_default_adhst_UpdateOUResponse(soap, &r);
	soap_default_adhst_UpdateOU(soap, &soap_tmp_adhst_UpdateOU);
	soap->encodingStyle = NULL;
	soap_get_adhst_UpdateOU(soap, &soap_tmp_adhst_UpdateOU, "adhst-UpdateOU", NULL);
	if (soap->error)
		return soap->error;
	
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
#ifndef WITH_LEANER
	 || soap_resolve_attachments(soap)
#endif
	 || soap_end_recv(soap))
		return soap->error;
	soap->error = adhst_UpdateOU(soap, soap_tmp_adhst_UpdateOU.idOU, soap_tmp_adhst_UpdateOU.parData, r);
	if (soap->error)
		return soap->error;
	soap_serializeheader(soap);
	soap_serialize_adhst_UpdateOUResponse(soap, &r);
	soap_begin_count(soap);
	if (soap->mode & SOAP_IO_LENGTH)
	{	soap_envelope_begin_out(soap);
		soap_putheader(soap);
		soap_body_begin_out(soap);
		soap_put_adhst_UpdateOUResponse(soap, &r, "adhst-UpdateOUResponse", "");
		soap_body_end_out(soap);
		soap_envelope_end_out(soap);
	};
	if (soap_response(soap, SOAP_OK)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put_adhst_UpdateOUResponse(soap, &r, "adhst-UpdateOUResponse", "")
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap->error;
	soap_closesock(soap);
	return SOAP_OK;
}

SOAP_FMAC5 int SOAP_FMAC6 soap_serve_klgsyn_GetNextItems(struct soap *soap)
{	struct klgsyn_GetNextItems soap_tmp_klgsyn_GetNextItems;
	struct klgsyn_GetNextItemsResponse r;
	soap_default_klgsyn_GetNextItemsResponse(soap, &r);
	soap_default_klgsyn_GetNextItems(soap, &soap_tmp_klgsyn_GetNextItems);
	soap->encodingStyle = NULL;
	soap_get_klgsyn_GetNextItems(soap, &soap_tmp_klgsyn_GetNextItems, "klgsyn-GetNextItems", NULL);
	if (soap->error)
		return soap->error;
	
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
#ifndef WITH_LEANER
	 || soap_resolve_attachments(soap)
#endif
	 || soap_end_recv(soap))
		return soap->error;
	soap->error = klgsyn_GetNextItems(soap, soap_tmp_klgsyn_GetNextItems.wstrIterator, soap_tmp_klgsyn_GetNextItems.nCount, r);
	if (soap->error)
		return soap->error;
	soap_serializeheader(soap);
	soap_serialize_klgsyn_GetNextItemsResponse(soap, &r);
	soap_begin_count(soap);
	if (soap->mode & SOAP_IO_LENGTH)
	{	soap_envelope_begin_out(soap);
		soap_putheader(soap);
		soap_body_begin_out(soap);
		soap_put_klgsyn_GetNextItemsResponse(soap, &r, "klgsyn-GetNextItemsResponse", "");
		soap_body_end_out(soap);
		soap_envelope_end_out(soap);
	};
	if (soap_response(soap, SOAP_OK)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put_klgsyn_GetNextItemsResponse(soap, &r, "klgsyn-GetNextItemsResponse", "")
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap->error;
	soap_closesock(soap);
	return SOAP_OK;
}

SOAP_FMAC5 int SOAP_FMAC6 soap_serve_klgsyn_ReleaseIterator(struct soap *soap)
{	struct klgsyn_ReleaseIterator soap_tmp_klgsyn_ReleaseIterator;
	struct klgsyn_ReleaseIteratorResponse r;
	soap_default_klgsyn_ReleaseIteratorResponse(soap, &r);
	soap_default_klgsyn_ReleaseIterator(soap, &soap_tmp_klgsyn_ReleaseIterator);
	soap->encodingStyle = NULL;
	soap_get_klgsyn_ReleaseIterator(soap, &soap_tmp_klgsyn_ReleaseIterator, "klgsyn-ReleaseIterator", NULL);
	if (soap->error)
		return soap->error;
	
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
#ifndef WITH_LEANER
	 || soap_resolve_attachments(soap)
#endif
	 || soap_end_recv(soap))
		return soap->error;
	soap->error = klgsyn_ReleaseIterator(soap, soap_tmp_klgsyn_ReleaseIterator.wstrIterator, r);
	if (soap->error)
		return soap->error;
	soap_serializeheader(soap);
	soap_serialize_klgsyn_ReleaseIteratorResponse(soap, &r);
	soap_begin_count(soap);
	if (soap->mode & SOAP_IO_LENGTH)
	{	soap_envelope_begin_out(soap);
		soap_putheader(soap);
		soap_body_begin_out(soap);
		soap_put_klgsyn_ReleaseIteratorResponse(soap, &r, "klgsyn-ReleaseIteratorResponse", "");
		soap_body_end_out(soap);
		soap_envelope_end_out(soap);
	};
	if (soap_response(soap, SOAP_OK)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put_klgsyn_ReleaseIteratorResponse(soap, &r, "klgsyn-ReleaseIteratorResponse", "")
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap->error;
	soap_closesock(soap);
	return SOAP_OK;
}

SOAP_FMAC5 int SOAP_FMAC6 soap_serve_klgsyn_AddSyncObjG(struct soap *soap)
{	struct klgsyn_AddSyncObjG soap_tmp_klgsyn_AddSyncObjG;
	struct klgsyn_AddSyncObjGResponse r;
	soap_default_klgsyn_AddSyncObjGResponse(soap, &r);
	soap_default_klgsyn_AddSyncObjG(soap, &soap_tmp_klgsyn_AddSyncObjG);
	soap->encodingStyle = NULL;
	soap_get_klgsyn_AddSyncObjG(soap, &soap_tmp_klgsyn_AddSyncObjG, "klgsyn-AddSyncObjG", NULL);
	if (soap->error)
		return soap->error;
	
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
#ifndef WITH_LEANER
	 || soap_resolve_attachments(soap)
#endif
	 || soap_end_recv(soap))
		return soap->error;
	soap->error = klgsyn_AddSyncObjG(soap, soap_tmp_klgsyn_AddSyncObjG.szwName, soap_tmp_klgsyn_AddSyncObjG.wstrSyncObjPath, soap_tmp_klgsyn_AddSyncObjG.nDirection, soap_tmp_klgsyn_AddSyncObjG.lGroup, soap_tmp_klgsyn_AddSyncObjG.lElapse, soap_tmp_klgsyn_AddSyncObjG.bCutoffChildren, r);
	if (soap->error)
		return soap->error;
	soap_serializeheader(soap);
	soap_serialize_klgsyn_AddSyncObjGResponse(soap, &r);
	soap_begin_count(soap);
	if (soap->mode & SOAP_IO_LENGTH)
	{	soap_envelope_begin_out(soap);
		soap_putheader(soap);
		soap_body_begin_out(soap);
		soap_put_klgsyn_AddSyncObjGResponse(soap, &r, "klgsyn-AddSyncObjGResponse", "");
		soap_body_end_out(soap);
		soap_envelope_end_out(soap);
	};
	if (soap_response(soap, SOAP_OK)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put_klgsyn_AddSyncObjGResponse(soap, &r, "klgsyn-AddSyncObjGResponse", "")
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap->error;
	soap_closesock(soap);
	return SOAP_OK;
}

SOAP_FMAC5 int SOAP_FMAC6 soap_serve_klgsyn_AddSyncObjH(struct soap *soap)
{	struct klgsyn_AddSyncObjH soap_tmp_klgsyn_AddSyncObjH;
	struct klgsyn_AddSyncObjHResponse r;
	soap_default_klgsyn_AddSyncObjHResponse(soap, &r);
	soap_default_klgsyn_AddSyncObjH(soap, &soap_tmp_klgsyn_AddSyncObjH);
	soap->encodingStyle = NULL;
	soap_get_klgsyn_AddSyncObjH(soap, &soap_tmp_klgsyn_AddSyncObjH, "klgsyn-AddSyncObjH", NULL);
	if (soap->error)
		return soap->error;
	
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
#ifndef WITH_LEANER
	 || soap_resolve_attachments(soap)
#endif
	 || soap_end_recv(soap))
		return soap->error;
	soap->error = klgsyn_AddSyncObjH(soap, soap_tmp_klgsyn_AddSyncObjH.szwName, soap_tmp_klgsyn_AddSyncObjH.wstrSyncObjPath, soap_tmp_klgsyn_AddSyncObjH.nDirection, soap_tmp_klgsyn_AddSyncObjH.arrHosts, soap_tmp_klgsyn_AddSyncObjH.lElapse, r);
	if (soap->error)
		return soap->error;
	soap_serializeheader(soap);
	soap_serialize_klgsyn_AddSyncObjHResponse(soap, &r);
	soap_begin_count(soap);
	if (soap->mode & SOAP_IO_LENGTH)
	{	soap_envelope_begin_out(soap);
		soap_putheader(soap);
		soap_body_begin_out(soap);
		soap_put_klgsyn_AddSyncObjHResponse(soap, &r, "klgsyn-AddSyncObjHResponse", "");
		soap_body_end_out(soap);
		soap_envelope_end_out(soap);
	};
	if (soap_response(soap, SOAP_OK)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put_klgsyn_AddSyncObjHResponse(soap, &r, "klgsyn-AddSyncObjHResponse", "")
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap->error;
	soap_closesock(soap);
	return SOAP_OK;
}

SOAP_FMAC5 int SOAP_FMAC6 soap_serve_klgsyn_GetSyncInfo(struct soap *soap)
{	struct klgsyn_GetSyncInfo soap_tmp_klgsyn_GetSyncInfo;
	struct klgsyn_GetSyncInfoResponse r;
	soap_default_klgsyn_GetSyncInfoResponse(soap, &r);
	soap_default_klgsyn_GetSyncInfo(soap, &soap_tmp_klgsyn_GetSyncInfo);
	soap->encodingStyle = NULL;
	soap_get_klgsyn_GetSyncInfo(soap, &soap_tmp_klgsyn_GetSyncInfo, "klgsyn-GetSyncInfo", NULL);
	if (soap->error)
		return soap->error;
	
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
#ifndef WITH_LEANER
	 || soap_resolve_attachments(soap)
#endif
	 || soap_end_recv(soap))
		return soap->error;
	soap->error = klgsyn_GetSyncInfo(soap, soap_tmp_klgsyn_GetSyncInfo.lSync, soap_tmp_klgsyn_GetSyncInfo.arrFields, r);
	if (soap->error)
		return soap->error;
	soap_serializeheader(soap);
	soap_serialize_klgsyn_GetSyncInfoResponse(soap, &r);
	soap_begin_count(soap);
	if (soap->mode & SOAP_IO_LENGTH)
	{	soap_envelope_begin_out(soap);
		soap_putheader(soap);
		soap_body_begin_out(soap);
		soap_put_klgsyn_GetSyncInfoResponse(soap, &r, "klgsyn-GetSyncInfoResponse", "");
		soap_body_end_out(soap);
		soap_envelope_end_out(soap);
	};
	if (soap_response(soap, SOAP_OK)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put_klgsyn_GetSyncInfoResponse(soap, &r, "klgsyn-GetSyncInfoResponse", "")
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap->error;
	soap_closesock(soap);
	return SOAP_OK;
}

SOAP_FMAC5 int SOAP_FMAC6 soap_serve_klgsyn_RemoveSyncObj(struct soap *soap)
{	struct klgsyn_RemoveSyncObj soap_tmp_klgsyn_RemoveSyncObj;
	struct klgsyn_RemoveSyncObjResponse r;
	soap_default_klgsyn_RemoveSyncObjResponse(soap, &r);
	soap_default_klgsyn_RemoveSyncObj(soap, &soap_tmp_klgsyn_RemoveSyncObj);
	soap->encodingStyle = NULL;
	soap_get_klgsyn_RemoveSyncObj(soap, &soap_tmp_klgsyn_RemoveSyncObj, "klgsyn-RemoveSyncObj", NULL);
	if (soap->error)
		return soap->error;
	
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
#ifndef WITH_LEANER
	 || soap_resolve_attachments(soap)
#endif
	 || soap_end_recv(soap))
		return soap->error;
	soap->error = klgsyn_RemoveSyncObj(soap, soap_tmp_klgsyn_RemoveSyncObj.lSync, r);
	if (soap->error)
		return soap->error;
	soap_serializeheader(soap);
	soap_serialize_klgsyn_RemoveSyncObjResponse(soap, &r);
	soap_begin_count(soap);
	if (soap->mode & SOAP_IO_LENGTH)
	{	soap_envelope_begin_out(soap);
		soap_putheader(soap);
		soap_body_begin_out(soap);
		soap_put_klgsyn_RemoveSyncObjResponse(soap, &r, "klgsyn-RemoveSyncObjResponse", "");
		soap_body_end_out(soap);
		soap_envelope_end_out(soap);
	};
	if (soap_response(soap, SOAP_OK)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put_klgsyn_RemoveSyncObjResponse(soap, &r, "klgsyn-RemoveSyncObjResponse", "")
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap->error;
	soap_closesock(soap);
	return SOAP_OK;
}

SOAP_FMAC5 int SOAP_FMAC6 soap_serve_klgsyn_GetSyncHostsInfo(struct soap *soap)
{	struct klgsyn_GetSyncHostsInfo soap_tmp_klgsyn_GetSyncHostsInfo;
	struct klgsyn_GetSyncHostsInfoResponse r;
	soap_default_klgsyn_GetSyncHostsInfoResponse(soap, &r);
	soap_default_klgsyn_GetSyncHostsInfo(soap, &soap_tmp_klgsyn_GetSyncHostsInfo);
	soap->encodingStyle = NULL;
	soap_get_klgsyn_GetSyncHostsInfo(soap, &soap_tmp_klgsyn_GetSyncHostsInfo, "klgsyn-GetSyncHostsInfo", NULL);
	if (soap->error)
		return soap->error;
	
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
#ifndef WITH_LEANER
	 || soap_resolve_attachments(soap)
#endif
	 || soap_end_recv(soap))
		return soap->error;
	soap->error = klgsyn_GetSyncHostsInfo(soap, soap_tmp_klgsyn_GetSyncHostsInfo.lSync, soap_tmp_klgsyn_GetSyncHostsInfo.arrFields, soap_tmp_klgsyn_GetSyncHostsInfo.lTimeout, r);
	if (soap->error)
		return soap->error;
	soap_serializeheader(soap);
	soap_serialize_klgsyn_GetSyncHostsInfoResponse(soap, &r);
	soap_begin_count(soap);
	if (soap->mode & SOAP_IO_LENGTH)
	{	soap_envelope_begin_out(soap);
		soap_putheader(soap);
		soap_body_begin_out(soap);
		soap_put_klgsyn_GetSyncHostsInfoResponse(soap, &r, "klgsyn-GetSyncHostsInfoResponse", "");
		soap_body_end_out(soap);
		soap_envelope_end_out(soap);
	};
	if (soap_response(soap, SOAP_OK)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put_klgsyn_GetSyncHostsInfoResponse(soap, &r, "klgsyn-GetSyncHostsInfoResponse", "")
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap->error;
	soap_closesock(soap);
	return SOAP_OK;
}

SOAP_FMAC5 int SOAP_FMAC6 soap_serve_klgsyn_FindHosts(struct soap *soap)
{	struct klgsyn_FindHosts soap_tmp_klgsyn_FindHosts;
	struct klgsyn_FindHostsResponse r;
	soap_default_klgsyn_FindHostsResponse(soap, &r);
	soap_default_klgsyn_FindHosts(soap, &soap_tmp_klgsyn_FindHosts);
	soap->encodingStyle = NULL;
	soap_get_klgsyn_FindHosts(soap, &soap_tmp_klgsyn_FindHosts, "klgsyn-FindHosts", NULL);
	if (soap->error)
		return soap->error;
	
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
#ifndef WITH_LEANER
	 || soap_resolve_attachments(soap)
#endif
	 || soap_end_recv(soap))
		return soap->error;
	soap->error = klgsyn_FindHosts(soap, soap_tmp_klgsyn_FindHosts.lSync, soap_tmp_klgsyn_FindHosts.wstrFilter, soap_tmp_klgsyn_FindHosts.arrFields, soap_tmp_klgsyn_FindHosts.lTimeout, r);
	if (soap->error)
		return soap->error;
	soap_serializeheader(soap);
	soap_serialize_klgsyn_FindHostsResponse(soap, &r);
	soap_begin_count(soap);
	if (soap->mode & SOAP_IO_LENGTH)
	{	soap_envelope_begin_out(soap);
		soap_putheader(soap);
		soap_body_begin_out(soap);
		soap_put_klgsyn_FindHostsResponse(soap, &r, "klgsyn-FindHostsResponse", "");
		soap_body_end_out(soap);
		soap_envelope_end_out(soap);
	};
	if (soap_response(soap, SOAP_OK)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put_klgsyn_FindHostsResponse(soap, &r, "klgsyn-FindHostsResponse", "")
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap->error;
	soap_closesock(soap);
	return SOAP_OK;
}

SOAP_FMAC5 int SOAP_FMAC6 soap_serve_klgsyn_GetSyncHostsInfo2(struct soap *soap)
{	struct klgsyn_GetSyncHostsInfo2 soap_tmp_klgsyn_GetSyncHostsInfo2;
	struct klgsyn_GetSyncHostsInfo2Response r;
	soap_default_klgsyn_GetSyncHostsInfo2Response(soap, &r);
	soap_default_klgsyn_GetSyncHostsInfo2(soap, &soap_tmp_klgsyn_GetSyncHostsInfo2);
	soap->encodingStyle = NULL;
	soap_get_klgsyn_GetSyncHostsInfo2(soap, &soap_tmp_klgsyn_GetSyncHostsInfo2, "klgsyn-GetSyncHostsInfo2", NULL);
	if (soap->error)
		return soap->error;
	
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
#ifndef WITH_LEANER
	 || soap_resolve_attachments(soap)
#endif
	 || soap_end_recv(soap))
		return soap->error;
	soap->error = klgsyn_GetSyncHostsInfo2(soap, soap_tmp_klgsyn_GetSyncHostsInfo2.lSync, soap_tmp_klgsyn_GetSyncHostsInfo2.arrFields, soap_tmp_klgsyn_GetSyncHostsInfo2.arrFieldsToOrder, soap_tmp_klgsyn_GetSyncHostsInfo2.lTimeout, r);
	if (soap->error)
		return soap->error;
	soap_serializeheader(soap);
	soap_serialize_klgsyn_GetSyncHostsInfo2Response(soap, &r);
	soap_begin_count(soap);
	if (soap->mode & SOAP_IO_LENGTH)
	{	soap_envelope_begin_out(soap);
		soap_putheader(soap);
		soap_body_begin_out(soap);
		soap_put_klgsyn_GetSyncHostsInfo2Response(soap, &r, "klgsyn-GetSyncHostsInfo2Response", "");
		soap_body_end_out(soap);
		soap_envelope_end_out(soap);
	};
	if (soap_response(soap, SOAP_OK)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put_klgsyn_GetSyncHostsInfo2Response(soap, &r, "klgsyn-GetSyncHostsInfo2Response", "")
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap->error;
	soap_closesock(soap);
	return SOAP_OK;
}

SOAP_FMAC5 int SOAP_FMAC6 soap_serve_klgsyn_FindHosts2(struct soap *soap)
{	struct klgsyn_FindHosts2 soap_tmp_klgsyn_FindHosts2;
	struct klgsyn_FindHosts2Response r;
	soap_default_klgsyn_FindHosts2Response(soap, &r);
	soap_default_klgsyn_FindHosts2(soap, &soap_tmp_klgsyn_FindHosts2);
	soap->encodingStyle = NULL;
	soap_get_klgsyn_FindHosts2(soap, &soap_tmp_klgsyn_FindHosts2, "klgsyn-FindHosts2", NULL);
	if (soap->error)
		return soap->error;
	
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
#ifndef WITH_LEANER
	 || soap_resolve_attachments(soap)
#endif
	 || soap_end_recv(soap))
		return soap->error;
	soap->error = klgsyn_FindHosts2(soap, soap_tmp_klgsyn_FindHosts2.lSync, soap_tmp_klgsyn_FindHosts2.wstrFilter, soap_tmp_klgsyn_FindHosts2.arrFields, soap_tmp_klgsyn_FindHosts2.arrFieldsToOrder, soap_tmp_klgsyn_FindHosts2.lTimeout, r);
	if (soap->error)
		return soap->error;
	soap_serializeheader(soap);
	soap_serialize_klgsyn_FindHosts2Response(soap, &r);
	soap_begin_count(soap);
	if (soap->mode & SOAP_IO_LENGTH)
	{	soap_envelope_begin_out(soap);
		soap_putheader(soap);
		soap_body_begin_out(soap);
		soap_put_klgsyn_FindHosts2Response(soap, &r, "klgsyn-FindHosts2Response", "");
		soap_body_end_out(soap);
		soap_envelope_end_out(soap);
	};
	if (soap_response(soap, SOAP_OK)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put_klgsyn_FindHosts2Response(soap, &r, "klgsyn-FindHosts2Response", "")
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap->error;
	soap_closesock(soap);
	return SOAP_OK;
}

SOAP_FMAC5 int SOAP_FMAC6 soap_serve_klgsyn_GetItemsCount(struct soap *soap)
{	struct klgsyn_GetItemsCount soap_tmp_klgsyn_GetItemsCount;
	struct klgsyn_GetItemsCountResponse r;
	soap_default_klgsyn_GetItemsCountResponse(soap, &r);
	soap_default_klgsyn_GetItemsCount(soap, &soap_tmp_klgsyn_GetItemsCount);
	soap->encodingStyle = NULL;
	soap_get_klgsyn_GetItemsCount(soap, &soap_tmp_klgsyn_GetItemsCount, "klgsyn-GetItemsCount", NULL);
	if (soap->error)
		return soap->error;
	
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
#ifndef WITH_LEANER
	 || soap_resolve_attachments(soap)
#endif
	 || soap_end_recv(soap))
		return soap->error;
	soap->error = klgsyn_GetItemsCount(soap, soap_tmp_klgsyn_GetItemsCount.wstrAccessor, r);
	if (soap->error)
		return soap->error;
	soap_serializeheader(soap);
	soap_serialize_klgsyn_GetItemsCountResponse(soap, &r);
	soap_begin_count(soap);
	if (soap->mode & SOAP_IO_LENGTH)
	{	soap_envelope_begin_out(soap);
		soap_putheader(soap);
		soap_body_begin_out(soap);
		soap_put_klgsyn_GetItemsCountResponse(soap, &r, "klgsyn-GetItemsCountResponse", "");
		soap_body_end_out(soap);
		soap_envelope_end_out(soap);
	};
	if (soap_response(soap, SOAP_OK)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put_klgsyn_GetItemsCountResponse(soap, &r, "klgsyn-GetItemsCountResponse", "")
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap->error;
	soap_closesock(soap);
	return SOAP_OK;
}

SOAP_FMAC5 int SOAP_FMAC6 soap_serve_klgsyn_GetItemsChunk(struct soap *soap)
{	struct klgsyn_GetItemsChunk soap_tmp_klgsyn_GetItemsChunk;
	struct klgsyn_GetItemsChunkResponse r;
	soap_default_klgsyn_GetItemsChunkResponse(soap, &r);
	soap_default_klgsyn_GetItemsChunk(soap, &soap_tmp_klgsyn_GetItemsChunk);
	soap->encodingStyle = NULL;
	soap_get_klgsyn_GetItemsChunk(soap, &soap_tmp_klgsyn_GetItemsChunk, "klgsyn-GetItemsChunk", NULL);
	if (soap->error)
		return soap->error;
	
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
#ifndef WITH_LEANER
	 || soap_resolve_attachments(soap)
#endif
	 || soap_end_recv(soap))
		return soap->error;
	soap->error = klgsyn_GetItemsChunk(soap, soap_tmp_klgsyn_GetItemsChunk.wstrAccessor, soap_tmp_klgsyn_GetItemsChunk.nStart, soap_tmp_klgsyn_GetItemsChunk.nCount, r);
	if (soap->error)
		return soap->error;
	soap_serializeheader(soap);
	soap_serialize_klgsyn_GetItemsChunkResponse(soap, &r);
	soap_begin_count(soap);
	if (soap->mode & SOAP_IO_LENGTH)
	{	soap_envelope_begin_out(soap);
		soap_putheader(soap);
		soap_body_begin_out(soap);
		soap_put_klgsyn_GetItemsChunkResponse(soap, &r, "klgsyn-GetItemsChunkResponse", "");
		soap_body_end_out(soap);
		soap_envelope_end_out(soap);
	};
	if (soap_response(soap, SOAP_OK)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put_klgsyn_GetItemsChunkResponse(soap, &r, "klgsyn-GetItemsChunkResponse", "")
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap->error;
	soap_closesock(soap);
	return SOAP_OK;
}

SOAP_FMAC5 int SOAP_FMAC6 soap_serve_klgsyn_ReleaseChunkAccessor(struct soap *soap)
{	struct klgsyn_ReleaseChunkAccessor soap_tmp_klgsyn_ReleaseChunkAccessor;
	struct klgsyn_ReleaseChunkAccessorResponse r;
	soap_default_klgsyn_ReleaseChunkAccessorResponse(soap, &r);
	soap_default_klgsyn_ReleaseChunkAccessor(soap, &soap_tmp_klgsyn_ReleaseChunkAccessor);
	soap->encodingStyle = NULL;
	soap_get_klgsyn_ReleaseChunkAccessor(soap, &soap_tmp_klgsyn_ReleaseChunkAccessor, "klgsyn-ReleaseChunkAccessor", NULL);
	if (soap->error)
		return soap->error;
	
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
#ifndef WITH_LEANER
	 || soap_resolve_attachments(soap)
#endif
	 || soap_end_recv(soap))
		return soap->error;
	soap->error = klgsyn_ReleaseChunkAccessor(soap, soap_tmp_klgsyn_ReleaseChunkAccessor.wstrAccessor, r);
	if (soap->error)
		return soap->error;
	soap_serializeheader(soap);
	soap_serialize_klgsyn_ReleaseChunkAccessorResponse(soap, &r);
	soap_begin_count(soap);
	if (soap->mode & SOAP_IO_LENGTH)
	{	soap_envelope_begin_out(soap);
		soap_putheader(soap);
		soap_body_begin_out(soap);
		soap_put_klgsyn_ReleaseChunkAccessorResponse(soap, &r, "klgsyn-ReleaseChunkAccessorResponse", "");
		soap_body_end_out(soap);
		soap_envelope_end_out(soap);
	};
	if (soap_response(soap, SOAP_OK)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put_klgsyn_ReleaseChunkAccessorResponse(soap, &r, "klgsyn-ReleaseChunkAccessorResponse", "")
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap->error;
	soap_closesock(soap);
	return SOAP_OK;
}

SOAP_FMAC5 int SOAP_FMAC6 soap_serve_kltsk_ForbidTaskForGroup(struct soap *soap)
{	struct kltsk_ForbidTaskForGroup soap_tmp_kltsk_ForbidTaskForGroup;
	struct kltsk_ForbidTaskForGroupResponse r;
	soap_default_kltsk_ForbidTaskForGroupResponse(soap, &r);
	soap_default_kltsk_ForbidTaskForGroup(soap, &soap_tmp_kltsk_ForbidTaskForGroup);
	soap->encodingStyle = NULL;
	soap_get_kltsk_ForbidTaskForGroup(soap, &soap_tmp_kltsk_ForbidTaskForGroup, "kltsk-ForbidTaskForGroup", NULL);
	if (soap->error)
		return soap->error;
	
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
#ifndef WITH_LEANER
	 || soap_resolve_attachments(soap)
#endif
	 || soap_end_recv(soap))
		return soap->error;
	soap->error = kltsk_ForbidTaskForGroup(soap, soap_tmp_kltsk_ForbidTaskForGroup.nGroupId, soap_tmp_kltsk_ForbidTaskForGroup.nTaskId, r);
	if (soap->error)
		return soap->error;
	soap_serializeheader(soap);
	soap_serialize_kltsk_ForbidTaskForGroupResponse(soap, &r);
	soap_begin_count(soap);
	if (soap->mode & SOAP_IO_LENGTH)
	{	soap_envelope_begin_out(soap);
		soap_putheader(soap);
		soap_body_begin_out(soap);
		soap_put_kltsk_ForbidTaskForGroupResponse(soap, &r, "kltsk-ForbidTaskForGroupResponse", "");
		soap_body_end_out(soap);
		soap_envelope_end_out(soap);
	};
	if (soap_response(soap, SOAP_OK)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put_kltsk_ForbidTaskForGroupResponse(soap, &r, "kltsk-ForbidTaskForGroupResponse", "")
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap->error;
	soap_closesock(soap);
	return SOAP_OK;
}

SOAP_FMAC5 int SOAP_FMAC6 soap_serve_kltsk_RunTaskNow(struct soap *soap)
{	struct kltsk_RunTaskNow soap_tmp_kltsk_RunTaskNow;
	struct kltsk_RunTaskNowResponse r;
	soap_default_kltsk_RunTaskNowResponse(soap, &r);
	soap_default_kltsk_RunTaskNow(soap, &soap_tmp_kltsk_RunTaskNow);
	soap->encodingStyle = NULL;
	soap_get_kltsk_RunTaskNow(soap, &soap_tmp_kltsk_RunTaskNow, "kltsk-RunTaskNow", NULL);
	if (soap->error)
		return soap->error;
	
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
#ifndef WITH_LEANER
	 || soap_resolve_attachments(soap)
#endif
	 || soap_end_recv(soap))
		return soap->error;
	soap->error = kltsk_RunTaskNow(soap, soap_tmp_kltsk_RunTaskNow.nTaskId, soap_tmp_kltsk_RunTaskNow.wstrDomainName, soap_tmp_kltsk_RunTaskNow.wstrHostName, soap_tmp_kltsk_RunTaskNow.bEvenIfAlreadySucceeded, r);
	if (soap->error)
		return soap->error;
	soap_serializeheader(soap);
	soap_serialize_kltsk_RunTaskNowResponse(soap, &r);
	soap_begin_count(soap);
	if (soap->mode & SOAP_IO_LENGTH)
	{	soap_envelope_begin_out(soap);
		soap_putheader(soap);
		soap_body_begin_out(soap);
		soap_put_kltsk_RunTaskNowResponse(soap, &r, "kltsk-RunTaskNowResponse", "");
		soap_body_end_out(soap);
		soap_envelope_end_out(soap);
	};
	if (soap_response(soap, SOAP_OK)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put_kltsk_RunTaskNowResponse(soap, &r, "kltsk-RunTaskNowResponse", "")
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap->error;
	soap_closesock(soap);
	return SOAP_OK;
}

SOAP_FMAC5 int SOAP_FMAC6 soap_serve_kltsk_SuspendTask(struct soap *soap)
{	struct kltsk_SuspendTask soap_tmp_kltsk_SuspendTask;
	struct kltsk_SuspendTaskResponse r;
	soap_default_kltsk_SuspendTaskResponse(soap, &r);
	soap_default_kltsk_SuspendTask(soap, &soap_tmp_kltsk_SuspendTask);
	soap->encodingStyle = NULL;
	soap_get_kltsk_SuspendTask(soap, &soap_tmp_kltsk_SuspendTask, "kltsk-SuspendTask", NULL);
	if (soap->error)
		return soap->error;
	
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
#ifndef WITH_LEANER
	 || soap_resolve_attachments(soap)
#endif
	 || soap_end_recv(soap))
		return soap->error;
	soap->error = kltsk_SuspendTask(soap, soap_tmp_kltsk_SuspendTask.nTaskId, r);
	if (soap->error)
		return soap->error;
	soap_serializeheader(soap);
	soap_serialize_kltsk_SuspendTaskResponse(soap, &r);
	soap_begin_count(soap);
	if (soap->mode & SOAP_IO_LENGTH)
	{	soap_envelope_begin_out(soap);
		soap_putheader(soap);
		soap_body_begin_out(soap);
		soap_put_kltsk_SuspendTaskResponse(soap, &r, "kltsk-SuspendTaskResponse", "");
		soap_body_end_out(soap);
		soap_envelope_end_out(soap);
	};
	if (soap_response(soap, SOAP_OK)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put_kltsk_SuspendTaskResponse(soap, &r, "kltsk-SuspendTaskResponse", "")
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap->error;
	soap_closesock(soap);
	return SOAP_OK;
}

SOAP_FMAC5 int SOAP_FMAC6 soap_serve_kltsk_ResumeTask(struct soap *soap)
{	struct kltsk_ResumeTask soap_tmp_kltsk_ResumeTask;
	struct kltsk_ResumeTaskResponse r;
	soap_default_kltsk_ResumeTaskResponse(soap, &r);
	soap_default_kltsk_ResumeTask(soap, &soap_tmp_kltsk_ResumeTask);
	soap->encodingStyle = NULL;
	soap_get_kltsk_ResumeTask(soap, &soap_tmp_kltsk_ResumeTask, "kltsk-ResumeTask", NULL);
	if (soap->error)
		return soap->error;
	
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
#ifndef WITH_LEANER
	 || soap_resolve_attachments(soap)
#endif
	 || soap_end_recv(soap))
		return soap->error;
	soap->error = kltsk_ResumeTask(soap, soap_tmp_kltsk_ResumeTask.nTaskId, r);
	if (soap->error)
		return soap->error;
	soap_serializeheader(soap);
	soap_serialize_kltsk_ResumeTaskResponse(soap, &r);
	soap_begin_count(soap);
	if (soap->mode & SOAP_IO_LENGTH)
	{	soap_envelope_begin_out(soap);
		soap_putheader(soap);
		soap_body_begin_out(soap);
		soap_put_kltsk_ResumeTaskResponse(soap, &r, "kltsk-ResumeTaskResponse", "");
		soap_body_end_out(soap);
		soap_envelope_end_out(soap);
	};
	if (soap_response(soap, SOAP_OK)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put_kltsk_ResumeTaskResponse(soap, &r, "kltsk-ResumeTaskResponse", "")
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap->error;
	soap_closesock(soap);
	return SOAP_OK;
}

SOAP_FMAC5 int SOAP_FMAC6 soap_serve_kltsk_CancelTask(struct soap *soap)
{	struct kltsk_CancelTask soap_tmp_kltsk_CancelTask;
	struct kltsk_CancelTaskResponse r;
	soap_default_kltsk_CancelTaskResponse(soap, &r);
	soap_default_kltsk_CancelTask(soap, &soap_tmp_kltsk_CancelTask);
	soap->encodingStyle = NULL;
	soap_get_kltsk_CancelTask(soap, &soap_tmp_kltsk_CancelTask, "kltsk-CancelTask", NULL);
	if (soap->error)
		return soap->error;
	
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
#ifndef WITH_LEANER
	 || soap_resolve_attachments(soap)
#endif
	 || soap_end_recv(soap))
		return soap->error;
	soap->error = kltsk_CancelTask(soap, soap_tmp_kltsk_CancelTask.nTaskId, r);
	if (soap->error)
		return soap->error;
	soap_serializeheader(soap);
	soap_serialize_kltsk_CancelTaskResponse(soap, &r);
	soap_begin_count(soap);
	if (soap->mode & SOAP_IO_LENGTH)
	{	soap_envelope_begin_out(soap);
		soap_putheader(soap);
		soap_body_begin_out(soap);
		soap_put_kltsk_CancelTaskResponse(soap, &r, "kltsk-CancelTaskResponse", "");
		soap_body_end_out(soap);
		soap_envelope_end_out(soap);
	};
	if (soap_response(soap, SOAP_OK)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put_kltsk_CancelTaskResponse(soap, &r, "kltsk-CancelTaskResponse", "")
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap->error;
	soap_closesock(soap);
	return SOAP_OK;
}

SOAP_FMAC5 int SOAP_FMAC6 soap_serve_kltsk_ResetTasksIterator(struct soap *soap)
{	struct kltsk_ResetTasksIterator soap_tmp_kltsk_ResetTasksIterator;
	struct kltsk_ResetTasksIteratorResponse r;
	soap_default_kltsk_ResetTasksIteratorResponse(soap, &r);
	soap_default_kltsk_ResetTasksIterator(soap, &soap_tmp_kltsk_ResetTasksIterator);
	soap->encodingStyle = NULL;
	soap_get_kltsk_ResetTasksIterator(soap, &soap_tmp_kltsk_ResetTasksIterator, "kltsk-ResetTasksIterator", NULL);
	if (soap->error)
		return soap->error;
	
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
#ifndef WITH_LEANER
	 || soap_resolve_attachments(soap)
#endif
	 || soap_end_recv(soap))
		return soap->error;
	soap->error = kltsk_ResetTasksIterator(soap, soap_tmp_kltsk_ResetTasksIterator.nGroupId, soap_tmp_kltsk_ResetTasksIterator.bGroupIdSignificant, soap_tmp_kltsk_ResetTasksIterator.compIdFilter, soap_tmp_kltsk_ResetTasksIterator.taskName, soap_tmp_kltsk_ResetTasksIterator.bIncludeSupergroups, r);
	if (soap->error)
		return soap->error;
	soap_serializeheader(soap);
	soap_serialize_kltsk_ResetTasksIteratorResponse(soap, &r);
	soap_begin_count(soap);
	if (soap->mode & SOAP_IO_LENGTH)
	{	soap_envelope_begin_out(soap);
		soap_putheader(soap);
		soap_body_begin_out(soap);
		soap_put_kltsk_ResetTasksIteratorResponse(soap, &r, "kltsk-ResetTasksIteratorResponse", "");
		soap_body_end_out(soap);
		soap_envelope_end_out(soap);
	};
	if (soap_response(soap, SOAP_OK)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put_kltsk_ResetTasksIteratorResponse(soap, &r, "kltsk-ResetTasksIteratorResponse", "")
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap->error;
	soap_closesock(soap);
	return SOAP_OK;
}

SOAP_FMAC5 int SOAP_FMAC6 soap_serve_kltsk_GetNextTask(struct soap *soap)
{	struct kltsk_GetNextTask soap_tmp_kltsk_GetNextTask;
	struct kltsk_GetNextTaskResponse r;
	soap_default_kltsk_GetNextTaskResponse(soap, &r);
	soap_default_kltsk_GetNextTask(soap, &soap_tmp_kltsk_GetNextTask);
	soap->encodingStyle = NULL;
	soap_get_kltsk_GetNextTask(soap, &soap_tmp_kltsk_GetNextTask, "kltsk-GetNextTask", NULL);
	if (soap->error)
		return soap->error;
	
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
#ifndef WITH_LEANER
	 || soap_resolve_attachments(soap)
#endif
	 || soap_end_recv(soap))
		return soap->error;
	soap->error = kltsk_GetNextTask(soap, soap_tmp_kltsk_GetNextTask.iteratorId, r);
	if (soap->error)
		return soap->error;
	soap_serializeheader(soap);
	soap_serialize_kltsk_GetNextTaskResponse(soap, &r);
	soap_begin_count(soap);
	if (soap->mode & SOAP_IO_LENGTH)
	{	soap_envelope_begin_out(soap);
		soap_putheader(soap);
		soap_body_begin_out(soap);
		soap_put_kltsk_GetNextTaskResponse(soap, &r, "kltsk-GetNextTaskResponse", "");
		soap_body_end_out(soap);
		soap_envelope_end_out(soap);
	};
	if (soap_response(soap, SOAP_OK)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put_kltsk_GetNextTaskResponse(soap, &r, "kltsk-GetNextTaskResponse", "")
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap->error;
	soap_closesock(soap);
	return SOAP_OK;
}

SOAP_FMAC5 int SOAP_FMAC6 soap_serve_kltsk_GetTaskByID(struct soap *soap)
{	struct kltsk_GetTaskByID soap_tmp_kltsk_GetTaskByID;
	struct kltsk_GetTaskByIDResponse r;
	soap_default_kltsk_GetTaskByIDResponse(soap, &r);
	soap_default_kltsk_GetTaskByID(soap, &soap_tmp_kltsk_GetTaskByID);
	soap->encodingStyle = NULL;
	soap_get_kltsk_GetTaskByID(soap, &soap_tmp_kltsk_GetTaskByID, "kltsk-GetTaskByID", NULL);
	if (soap->error)
		return soap->error;
	
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
#ifndef WITH_LEANER
	 || soap_resolve_attachments(soap)
#endif
	 || soap_end_recv(soap))
		return soap->error;
	soap->error = kltsk_GetTaskByID(soap, soap_tmp_kltsk_GetTaskByID.nTaskId, r);
	if (soap->error)
		return soap->error;
	soap_serializeheader(soap);
	soap_serialize_kltsk_GetTaskByIDResponse(soap, &r);
	soap_begin_count(soap);
	if (soap->mode & SOAP_IO_LENGTH)
	{	soap_envelope_begin_out(soap);
		soap_putheader(soap);
		soap_body_begin_out(soap);
		soap_put_kltsk_GetTaskByIDResponse(soap, &r, "kltsk-GetTaskByIDResponse", "");
		soap_body_end_out(soap);
		soap_envelope_end_out(soap);
	};
	if (soap_response(soap, SOAP_OK)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put_kltsk_GetTaskByIDResponse(soap, &r, "kltsk-GetTaskByIDResponse", "")
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap->error;
	soap_closesock(soap);
	return SOAP_OK;
}

SOAP_FMAC5 int SOAP_FMAC6 soap_serve_kltsk_GetTaskStatistics(struct soap *soap)
{	struct kltsk_GetTaskStatistics soap_tmp_kltsk_GetTaskStatistics;
	struct kltsk_GetTaskStatisticsResponse r;
	soap_default_kltsk_GetTaskStatisticsResponse(soap, &r);
	soap_default_kltsk_GetTaskStatistics(soap, &soap_tmp_kltsk_GetTaskStatistics);
	soap->encodingStyle = NULL;
	soap_get_kltsk_GetTaskStatistics(soap, &soap_tmp_kltsk_GetTaskStatistics, "kltsk-GetTaskStatistics", NULL);
	if (soap->error)
		return soap->error;
	
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
#ifndef WITH_LEANER
	 || soap_resolve_attachments(soap)
#endif
	 || soap_end_recv(soap))
		return soap->error;
	soap->error = kltsk_GetTaskStatistics(soap, soap_tmp_kltsk_GetTaskStatistics.nTaskId, r);
	if (soap->error)
		return soap->error;
	soap_serializeheader(soap);
	soap_serialize_kltsk_GetTaskStatisticsResponse(soap, &r);
	soap_begin_count(soap);
	if (soap->mode & SOAP_IO_LENGTH)
	{	soap_envelope_begin_out(soap);
		soap_putheader(soap);
		soap_body_begin_out(soap);
		soap_put_kltsk_GetTaskStatisticsResponse(soap, &r, "kltsk-GetTaskStatisticsResponse", "");
		soap_body_end_out(soap);
		soap_envelope_end_out(soap);
	};
	if (soap_response(soap, SOAP_OK)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put_kltsk_GetTaskStatisticsResponse(soap, &r, "kltsk-GetTaskStatisticsResponse", "")
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap->error;
	soap_closesock(soap);
	return SOAP_OK;
}

SOAP_FMAC5 int SOAP_FMAC6 soap_serve_kltsk_AddTask(struct soap *soap)
{	struct kltsk_AddTask soap_tmp_kltsk_AddTask;
	struct kltsk_AddTaskResponse r;
	soap_default_kltsk_AddTaskResponse(soap, &r);
	soap_default_kltsk_AddTask(soap, &soap_tmp_kltsk_AddTask);
	soap->encodingStyle = NULL;
	soap_get_kltsk_AddTask(soap, &soap_tmp_kltsk_AddTask, "kltsk-AddTask", NULL);
	if (soap->error)
		return soap->error;
	
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
#ifndef WITH_LEANER
	 || soap_resolve_attachments(soap)
#endif
	 || soap_end_recv(soap))
		return soap->error;
	soap->error = kltsk_AddTask(soap, soap_tmp_kltsk_AddTask.nGroupId, soap_tmp_kltsk_AddTask.bGroupIdSignificant, soap_tmp_kltsk_AddTask.parTaskData, r);
	if (soap->error)
		return soap->error;
	soap_serializeheader(soap);
	soap_serialize_kltsk_AddTaskResponse(soap, &r);
	soap_begin_count(soap);
	if (soap->mode & SOAP_IO_LENGTH)
	{	soap_envelope_begin_out(soap);
		soap_putheader(soap);
		soap_body_begin_out(soap);
		soap_put_kltsk_AddTaskResponse(soap, &r, "kltsk-AddTaskResponse", "");
		soap_body_end_out(soap);
		soap_envelope_end_out(soap);
	};
	if (soap_response(soap, SOAP_OK)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put_kltsk_AddTaskResponse(soap, &r, "kltsk-AddTaskResponse", "")
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap->error;
	soap_closesock(soap);
	return SOAP_OK;
}

SOAP_FMAC5 int SOAP_FMAC6 soap_serve_kltsk_UpdateTask(struct soap *soap)
{	struct kltsk_UpdateTask soap_tmp_kltsk_UpdateTask;
	struct kltsk_UpdateTaskResponse r;
	soap_default_kltsk_UpdateTaskResponse(soap, &r);
	soap_default_kltsk_UpdateTask(soap, &soap_tmp_kltsk_UpdateTask);
	soap->encodingStyle = NULL;
	soap_get_kltsk_UpdateTask(soap, &soap_tmp_kltsk_UpdateTask, "kltsk-UpdateTask", NULL);
	if (soap->error)
		return soap->error;
	
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
#ifndef WITH_LEANER
	 || soap_resolve_attachments(soap)
#endif
	 || soap_end_recv(soap))
		return soap->error;
	soap->error = kltsk_UpdateTask(soap, soap_tmp_kltsk_UpdateTask.nTaskId, soap_tmp_kltsk_UpdateTask.parTaskData, r);
	if (soap->error)
		return soap->error;
	soap_serializeheader(soap);
	soap_serialize_kltsk_UpdateTaskResponse(soap, &r);
	soap_begin_count(soap);
	if (soap->mode & SOAP_IO_LENGTH)
	{	soap_envelope_begin_out(soap);
		soap_putheader(soap);
		soap_body_begin_out(soap);
		soap_put_kltsk_UpdateTaskResponse(soap, &r, "kltsk-UpdateTaskResponse", "");
		soap_body_end_out(soap);
		soap_envelope_end_out(soap);
	};
	if (soap_response(soap, SOAP_OK)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put_kltsk_UpdateTaskResponse(soap, &r, "kltsk-UpdateTaskResponse", "")
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap->error;
	soap_closesock(soap);
	return SOAP_OK;
}

SOAP_FMAC5 int SOAP_FMAC6 soap_serve_kltsk_DeleteTask(struct soap *soap)
{	struct kltsk_DeleteTask soap_tmp_kltsk_DeleteTask;
	struct kltsk_DeleteTaskResponse r;
	soap_default_kltsk_DeleteTaskResponse(soap, &r);
	soap_default_kltsk_DeleteTask(soap, &soap_tmp_kltsk_DeleteTask);
	soap->encodingStyle = NULL;
	soap_get_kltsk_DeleteTask(soap, &soap_tmp_kltsk_DeleteTask, "kltsk-DeleteTask", NULL);
	if (soap->error)
		return soap->error;
	
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
#ifndef WITH_LEANER
	 || soap_resolve_attachments(soap)
#endif
	 || soap_end_recv(soap))
		return soap->error;
	soap->error = kltsk_DeleteTask(soap, soap_tmp_kltsk_DeleteTask.nTaskId, r);
	if (soap->error)
		return soap->error;
	soap_serializeheader(soap);
	soap_serialize_kltsk_DeleteTaskResponse(soap, &r);
	soap_begin_count(soap);
	if (soap->mode & SOAP_IO_LENGTH)
	{	soap_envelope_begin_out(soap);
		soap_putheader(soap);
		soap_body_begin_out(soap);
		soap_put_kltsk_DeleteTaskResponse(soap, &r, "kltsk-DeleteTaskResponse", "");
		soap_body_end_out(soap);
		soap_envelope_end_out(soap);
	};
	if (soap_response(soap, SOAP_OK)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put_kltsk_DeleteTaskResponse(soap, &r, "kltsk-DeleteTaskResponse", "")
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap->error;
	soap_closesock(soap);
	return SOAP_OK;
}

SOAP_FMAC5 int SOAP_FMAC6 soap_serve_kltsk_SetTaskStartEvent(struct soap *soap)
{	struct kltsk_SetTaskStartEvent soap_tmp_kltsk_SetTaskStartEvent;
	struct kltsk_SetTaskStartEventResponse r;
	soap_default_kltsk_SetTaskStartEventResponse(soap, &r);
	soap_default_kltsk_SetTaskStartEvent(soap, &soap_tmp_kltsk_SetTaskStartEvent);
	soap->encodingStyle = NULL;
	soap_get_kltsk_SetTaskStartEvent(soap, &soap_tmp_kltsk_SetTaskStartEvent, "kltsk-SetTaskStartEvent", NULL);
	if (soap->error)
		return soap->error;
	
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
#ifndef WITH_LEANER
	 || soap_resolve_attachments(soap)
#endif
	 || soap_end_recv(soap))
		return soap->error;
	soap->error = kltsk_SetTaskStartEvent(soap, soap_tmp_kltsk_SetTaskStartEvent.nTaskId, soap_tmp_kltsk_SetTaskStartEvent.compIdFilter, soap_tmp_kltsk_SetTaskStartEvent.eventType, soap_tmp_kltsk_SetTaskStartEvent.bodyFilter, r);
	if (soap->error)
		return soap->error;
	soap_serializeheader(soap);
	soap_serialize_kltsk_SetTaskStartEventResponse(soap, &r);
	soap_begin_count(soap);
	if (soap->mode & SOAP_IO_LENGTH)
	{	soap_envelope_begin_out(soap);
		soap_putheader(soap);
		soap_body_begin_out(soap);
		soap_put_kltsk_SetTaskStartEventResponse(soap, &r, "kltsk-SetTaskStartEventResponse", "");
		soap_body_end_out(soap);
		soap_envelope_end_out(soap);
	};
	if (soap_response(soap, SOAP_OK)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put_kltsk_SetTaskStartEventResponse(soap, &r, "kltsk-SetTaskStartEventResponse", "")
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap->error;
	soap_closesock(soap);
	return SOAP_OK;
}

SOAP_FMAC5 int SOAP_FMAC6 soap_serve_kltsk_GetTaskStartEvent(struct soap *soap)
{	struct kltsk_GetTaskStartEvent soap_tmp_kltsk_GetTaskStartEvent;
	struct kltsk_GetTaskStartEventResponse r;
	soap_default_kltsk_GetTaskStartEventResponse(soap, &r);
	soap_default_kltsk_GetTaskStartEvent(soap, &soap_tmp_kltsk_GetTaskStartEvent);
	soap->encodingStyle = NULL;
	soap_get_kltsk_GetTaskStartEvent(soap, &soap_tmp_kltsk_GetTaskStartEvent, "kltsk-GetTaskStartEvent", NULL);
	if (soap->error)
		return soap->error;
	
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
#ifndef WITH_LEANER
	 || soap_resolve_attachments(soap)
#endif
	 || soap_end_recv(soap))
		return soap->error;
	soap->error = kltsk_GetTaskStartEvent(soap, soap_tmp_kltsk_GetTaskStartEvent.nTaskId, r);
	if (soap->error)
		return soap->error;
	soap_serializeheader(soap);
	soap_serialize_kltsk_GetTaskStartEventResponse(soap, &r);
	soap_begin_count(soap);
	if (soap->mode & SOAP_IO_LENGTH)
	{	soap_envelope_begin_out(soap);
		soap_putheader(soap);
		soap_body_begin_out(soap);
		soap_put_kltsk_GetTaskStartEventResponse(soap, &r, "kltsk-GetTaskStartEventResponse", "");
		soap_body_end_out(soap);
		soap_envelope_end_out(soap);
	};
	if (soap_response(soap, SOAP_OK)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put_kltsk_GetTaskStartEventResponse(soap, &r, "kltsk-GetTaskStartEventResponse", "")
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap->error;
	soap_closesock(soap);
	return SOAP_OK;
}

SOAP_FMAC5 int SOAP_FMAC6 soap_serve_kltsk_ResetHostIteratorForTaskStatus(struct soap *soap)
{	struct kltsk_ResetHostIteratorForTaskStatus soap_tmp_kltsk_ResetHostIteratorForTaskStatus;
	struct kltsk_ResetHostIteratorForTaskStatusResponse r;
	soap_default_kltsk_ResetHostIteratorForTaskStatusResponse(soap, &r);
	soap_default_kltsk_ResetHostIteratorForTaskStatus(soap, &soap_tmp_kltsk_ResetHostIteratorForTaskStatus);
	soap->encodingStyle = NULL;
	soap_get_kltsk_ResetHostIteratorForTaskStatus(soap, &soap_tmp_kltsk_ResetHostIteratorForTaskStatus, "kltsk-ResetHostIteratorForTaskStatus", NULL);
	if (soap->error)
		return soap->error;
	
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
#ifndef WITH_LEANER
	 || soap_resolve_attachments(soap)
#endif
	 || soap_end_recv(soap))
		return soap->error;
	soap->error = kltsk_ResetHostIteratorForTaskStatus(soap, soap_tmp_kltsk_ResetHostIteratorForTaskStatus.wstrTaskId, soap_tmp_kltsk_ResetHostIteratorForTaskStatus.wstrDomainName, soap_tmp_kltsk_ResetHostIteratorForTaskStatus.wstrHostName, soap_tmp_kltsk_ResetHostIteratorForTaskStatus.arrFields, soap_tmp_kltsk_ResetHostIteratorForTaskStatus.hsHostStateMask, soap_tmp_kltsk_ResetHostIteratorForTaskStatus.nLifetime, r);
	if (soap->error)
		return soap->error;
	soap_serializeheader(soap);
	soap_serialize_kltsk_ResetHostIteratorForTaskStatusResponse(soap, &r);
	soap_begin_count(soap);
	if (soap->mode & SOAP_IO_LENGTH)
	{	soap_envelope_begin_out(soap);
		soap_putheader(soap);
		soap_body_begin_out(soap);
		soap_put_kltsk_ResetHostIteratorForTaskStatusResponse(soap, &r, "kltsk-ResetHostIteratorForTaskStatusResponse", "");
		soap_body_end_out(soap);
		soap_envelope_end_out(soap);
	};
	if (soap_response(soap, SOAP_OK)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put_kltsk_ResetHostIteratorForTaskStatusResponse(soap, &r, "kltsk-ResetHostIteratorForTaskStatusResponse", "")
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap->error;
	soap_closesock(soap);
	return SOAP_OK;
}

SOAP_FMAC5 int SOAP_FMAC6 soap_serve_kltsk_GetNextHostStatus(struct soap *soap)
{	struct kltsk_GetNextHostStatus soap_tmp_kltsk_GetNextHostStatus;
	struct kltsk_GetNextHostStatusResponse r;
	soap_default_kltsk_GetNextHostStatusResponse(soap, &r);
	soap_default_kltsk_GetNextHostStatus(soap, &soap_tmp_kltsk_GetNextHostStatus);
	soap->encodingStyle = NULL;
	soap_get_kltsk_GetNextHostStatus(soap, &soap_tmp_kltsk_GetNextHostStatus, "kltsk-GetNextHostStatus", NULL);
	if (soap->error)
		return soap->error;
	
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
#ifndef WITH_LEANER
	 || soap_resolve_attachments(soap)
#endif
	 || soap_end_recv(soap))
		return soap->error;
	soap->error = kltsk_GetNextHostStatus(soap, soap_tmp_kltsk_GetNextHostStatus.iteratorId, soap_tmp_kltsk_GetNextHostStatus.nCount, r);
	if (soap->error)
		return soap->error;
	soap_serializeheader(soap);
	soap_serialize_kltsk_GetNextHostStatusResponse(soap, &r);
	soap_begin_count(soap);
	if (soap->mode & SOAP_IO_LENGTH)
	{	soap_envelope_begin_out(soap);
		soap_putheader(soap);
		soap_body_begin_out(soap);
		soap_put_kltsk_GetNextHostStatusResponse(soap, &r, "kltsk-GetNextHostStatusResponse", "");
		soap_body_end_out(soap);
		soap_envelope_end_out(soap);
	};
	if (soap_response(soap, SOAP_OK)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put_kltsk_GetNextHostStatusResponse(soap, &r, "kltsk-GetNextHostStatusResponse", "")
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap->error;
	soap_closesock(soap);
	return SOAP_OK;
}

SOAP_FMAC5 int SOAP_FMAC6 soap_serve_kltsk_ResetHostIteratorForTaskStatusEx(struct soap *soap)
{	struct kltsk_ResetHostIteratorForTaskStatusEx soap_tmp_kltsk_ResetHostIteratorForTaskStatusEx;
	struct kltsk_ResetHostIteratorForTaskStatusExResponse r;
	soap_default_kltsk_ResetHostIteratorForTaskStatusExResponse(soap, &r);
	soap_default_kltsk_ResetHostIteratorForTaskStatusEx(soap, &soap_tmp_kltsk_ResetHostIteratorForTaskStatusEx);
	soap->encodingStyle = NULL;
	soap_get_kltsk_ResetHostIteratorForTaskStatusEx(soap, &soap_tmp_kltsk_ResetHostIteratorForTaskStatusEx, "kltsk-ResetHostIteratorForTaskStatusEx", NULL);
	if (soap->error)
		return soap->error;
	
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
#ifndef WITH_LEANER
	 || soap_resolve_attachments(soap)
#endif
	 || soap_end_recv(soap))
		return soap->error;
	soap->error = kltsk_ResetHostIteratorForTaskStatusEx(soap, soap_tmp_kltsk_ResetHostIteratorForTaskStatusEx.wstrTaskId, soap_tmp_kltsk_ResetHostIteratorForTaskStatusEx.wstrDomainName, soap_tmp_kltsk_ResetHostIteratorForTaskStatusEx.wstrHostName, soap_tmp_kltsk_ResetHostIteratorForTaskStatusEx.arrFields, soap_tmp_kltsk_ResetHostIteratorForTaskStatusEx.arrFiledsToOrder, soap_tmp_kltsk_ResetHostIteratorForTaskStatusEx.hsHostStateMask, soap_tmp_kltsk_ResetHostIteratorForTaskStatusEx.nLifetime, r);
	if (soap->error)
		return soap->error;
	soap_serializeheader(soap);
	soap_serialize_kltsk_ResetHostIteratorForTaskStatusExResponse(soap, &r);
	soap_begin_count(soap);
	if (soap->mode & SOAP_IO_LENGTH)
	{	soap_envelope_begin_out(soap);
		soap_putheader(soap);
		soap_body_begin_out(soap);
		soap_put_kltsk_ResetHostIteratorForTaskStatusExResponse(soap, &r, "kltsk-ResetHostIteratorForTaskStatusExResponse", "");
		soap_body_end_out(soap);
		soap_envelope_end_out(soap);
	};
	if (soap_response(soap, SOAP_OK)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put_kltsk_ResetHostIteratorForTaskStatusExResponse(soap, &r, "kltsk-ResetHostIteratorForTaskStatusExResponse", "")
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap->error;
	soap_closesock(soap);
	return SOAP_OK;
}

SOAP_FMAC5 int SOAP_FMAC6 soap_serve_kltsk_GetHostStatusRecordsCount(struct soap *soap)
{	struct kltsk_GetHostStatusRecordsCount soap_tmp_kltsk_GetHostStatusRecordsCount;
	struct kltsk_GetHostStatusRecordsCountResponse r;
	soap_default_kltsk_GetHostStatusRecordsCountResponse(soap, &r);
	soap_default_kltsk_GetHostStatusRecordsCount(soap, &soap_tmp_kltsk_GetHostStatusRecordsCount);
	soap->encodingStyle = NULL;
	soap_get_kltsk_GetHostStatusRecordsCount(soap, &soap_tmp_kltsk_GetHostStatusRecordsCount, "kltsk-GetHostStatusRecordsCount", NULL);
	if (soap->error)
		return soap->error;
	
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
#ifndef WITH_LEANER
	 || soap_resolve_attachments(soap)
#endif
	 || soap_end_recv(soap))
		return soap->error;
	soap->error = kltsk_GetHostStatusRecordsCount(soap, soap_tmp_kltsk_GetHostStatusRecordsCount.iteratorId, r);
	if (soap->error)
		return soap->error;
	soap_serializeheader(soap);
	soap_serialize_kltsk_GetHostStatusRecordsCountResponse(soap, &r);
	soap_begin_count(soap);
	if (soap->mode & SOAP_IO_LENGTH)
	{	soap_envelope_begin_out(soap);
		soap_putheader(soap);
		soap_body_begin_out(soap);
		soap_put_kltsk_GetHostStatusRecordsCountResponse(soap, &r, "kltsk-GetHostStatusRecordsCountResponse", "");
		soap_body_end_out(soap);
		soap_envelope_end_out(soap);
	};
	if (soap_response(soap, SOAP_OK)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put_kltsk_GetHostStatusRecordsCountResponse(soap, &r, "kltsk-GetHostStatusRecordsCountResponse", "")
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap->error;
	soap_closesock(soap);
	return SOAP_OK;
}

SOAP_FMAC5 int SOAP_FMAC6 soap_serve_kltsk_GetHostStatusRecordRange(struct soap *soap)
{	struct kltsk_GetHostStatusRecordRange soap_tmp_kltsk_GetHostStatusRecordRange;
	struct kltsk_GetHostStatusRecordRangeResponse r;
	soap_default_kltsk_GetHostStatusRecordRangeResponse(soap, &r);
	soap_default_kltsk_GetHostStatusRecordRange(soap, &soap_tmp_kltsk_GetHostStatusRecordRange);
	soap->encodingStyle = NULL;
	soap_get_kltsk_GetHostStatusRecordRange(soap, &soap_tmp_kltsk_GetHostStatusRecordRange, "kltsk-GetHostStatusRecordRange", NULL);
	if (soap->error)
		return soap->error;
	
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
#ifndef WITH_LEANER
	 || soap_resolve_attachments(soap)
#endif
	 || soap_end_recv(soap))
		return soap->error;
	soap->error = kltsk_GetHostStatusRecordRange(soap, soap_tmp_kltsk_GetHostStatusRecordRange.iteratorId, soap_tmp_kltsk_GetHostStatusRecordRange.nStart, soap_tmp_kltsk_GetHostStatusRecordRange.nEnd, r);
	if (soap->error)
		return soap->error;
	soap_serializeheader(soap);
	soap_serialize_kltsk_GetHostStatusRecordRangeResponse(soap, &r);
	soap_begin_count(soap);
	if (soap->mode & SOAP_IO_LENGTH)
	{	soap_envelope_begin_out(soap);
		soap_putheader(soap);
		soap_body_begin_out(soap);
		soap_put_kltsk_GetHostStatusRecordRangeResponse(soap, &r, "kltsk-GetHostStatusRecordRangeResponse", "");
		soap_body_end_out(soap);
		soap_envelope_end_out(soap);
	};
	if (soap_response(soap, SOAP_OK)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put_kltsk_GetHostStatusRecordRangeResponse(soap, &r, "kltsk-GetHostStatusRecordRangeResponse", "")
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap->error;
	soap_closesock(soap);
	return SOAP_OK;
}

SOAP_FMAC5 int SOAP_FMAC6 soap_serve_kltsk_GetAllTasksOfHost(struct soap *soap)
{	struct kltsk_GetAllTasksOfHost soap_tmp_kltsk_GetAllTasksOfHost;
	struct kltsk_GetAllTasksOfHostResponse r;
	soap_default_kltsk_GetAllTasksOfHostResponse(soap, &r);
	soap_default_kltsk_GetAllTasksOfHost(soap, &soap_tmp_kltsk_GetAllTasksOfHost);
	soap->encodingStyle = NULL;
	soap_get_kltsk_GetAllTasksOfHost(soap, &soap_tmp_kltsk_GetAllTasksOfHost, "kltsk-GetAllTasksOfHost", NULL);
	if (soap->error)
		return soap->error;
	
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
#ifndef WITH_LEANER
	 || soap_resolve_attachments(soap)
#endif
	 || soap_end_recv(soap))
		return soap->error;
	soap->error = kltsk_GetAllTasksOfHost(soap, soap_tmp_kltsk_GetAllTasksOfHost.wstrDomainName, soap_tmp_kltsk_GetAllTasksOfHost.wstrHostName, r);
	if (soap->error)
		return soap->error;
	soap_serializeheader(soap);
	soap_serialize_kltsk_GetAllTasksOfHostResponse(soap, &r);
	soap_begin_count(soap);
	if (soap->mode & SOAP_IO_LENGTH)
	{	soap_envelope_begin_out(soap);
		soap_putheader(soap);
		soap_body_begin_out(soap);
		soap_put_kltsk_GetAllTasksOfHostResponse(soap, &r, "kltsk-GetAllTasksOfHostResponse", "");
		soap_body_end_out(soap);
		soap_envelope_end_out(soap);
	};
	if (soap_response(soap, SOAP_OK)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put_kltsk_GetAllTasksOfHostResponse(soap, &r, "kltsk-GetAllTasksOfHostResponse", "")
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap->error;
	soap_closesock(soap);
	return SOAP_OK;
}

SOAP_FMAC5 int SOAP_FMAC6 soap_serve_kltsk_GetTaskGroup(struct soap *soap)
{	struct kltsk_GetTaskGroup soap_tmp_kltsk_GetTaskGroup;
	struct kltsk_GetTaskGroupResponse r;
	soap_default_kltsk_GetTaskGroupResponse(soap, &r);
	soap_default_kltsk_GetTaskGroup(soap, &soap_tmp_kltsk_GetTaskGroup);
	soap->encodingStyle = NULL;
	soap_get_kltsk_GetTaskGroup(soap, &soap_tmp_kltsk_GetTaskGroup, "kltsk-GetTaskGroup", NULL);
	if (soap->error)
		return soap->error;
	
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
#ifndef WITH_LEANER
	 || soap_resolve_attachments(soap)
#endif
	 || soap_end_recv(soap))
		return soap->error;
	soap->error = kltsk_GetTaskGroup(soap, soap_tmp_kltsk_GetTaskGroup.nTaskId, r);
	if (soap->error)
		return soap->error;
	soap_serializeheader(soap);
	soap_serialize_kltsk_GetTaskGroupResponse(soap, &r);
	soap_begin_count(soap);
	if (soap->mode & SOAP_IO_LENGTH)
	{	soap_envelope_begin_out(soap);
		soap_putheader(soap);
		soap_body_begin_out(soap);
		soap_put_kltsk_GetTaskGroupResponse(soap, &r, "kltsk-GetTaskGroupResponse", "");
		soap_body_end_out(soap);
		soap_envelope_end_out(soap);
	};
	if (soap_response(soap, SOAP_OK)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put_kltsk_GetTaskGroupResponse(soap, &r, "kltsk-GetTaskGroupResponse", "")
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap->error;
	soap_closesock(soap);
	return SOAP_OK;
}

SOAP_FMAC5 int SOAP_FMAC6 soap_serve_klpkg_GetPackages(struct soap *soap)
{	struct klpkg_GetPackages soap_tmp_klpkg_GetPackages;
	struct klpkg_GetPackagesResponse r;
	soap_default_klpkg_GetPackagesResponse(soap, &r);
	soap_default_klpkg_GetPackages(soap, &soap_tmp_klpkg_GetPackages);
	soap->encodingStyle = NULL;
	soap_get_klpkg_GetPackages(soap, &soap_tmp_klpkg_GetPackages, "klpkg-GetPackages", NULL);
	if (soap->error)
		return soap->error;
	
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
#ifndef WITH_LEANER
	 || soap_resolve_attachments(soap)
#endif
	 || soap_end_recv(soap))
		return soap->error;
	soap->error = klpkg_GetPackages(soap, soap_tmp_klpkg_GetPackages._, r);
	if (soap->error)
		return soap->error;
	soap_serializeheader(soap);
	soap_serialize_klpkg_GetPackagesResponse(soap, &r);
	soap_begin_count(soap);
	if (soap->mode & SOAP_IO_LENGTH)
	{	soap_envelope_begin_out(soap);
		soap_putheader(soap);
		soap_body_begin_out(soap);
		soap_put_klpkg_GetPackagesResponse(soap, &r, "klpkg-GetPackagesResponse", "");
		soap_body_end_out(soap);
		soap_envelope_end_out(soap);
	};
	if (soap_response(soap, SOAP_OK)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put_klpkg_GetPackagesResponse(soap, &r, "klpkg-GetPackagesResponse", "")
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap->error;
	soap_closesock(soap);
	return SOAP_OK;
}

SOAP_FMAC5 int SOAP_FMAC6 soap_serve_klpkg_RenamePackage(struct soap *soap)
{	struct klpkg_RenamePackage soap_tmp_klpkg_RenamePackage;
	struct klpkg_RenamePackageResponse r;
	soap_default_klpkg_RenamePackageResponse(soap, &r);
	soap_default_klpkg_RenamePackage(soap, &soap_tmp_klpkg_RenamePackage);
	soap->encodingStyle = NULL;
	soap_get_klpkg_RenamePackage(soap, &soap_tmp_klpkg_RenamePackage, "klpkg-RenamePackage", NULL);
	if (soap->error)
		return soap->error;
	
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
#ifndef WITH_LEANER
	 || soap_resolve_attachments(soap)
#endif
	 || soap_end_recv(soap))
		return soap->error;
	soap->error = klpkg_RenamePackage(soap, soap_tmp_klpkg_RenamePackage.nPackageId, soap_tmp_klpkg_RenamePackage.wstrNewPackageName, r);
	if (soap->error)
		return soap->error;
	soap_serializeheader(soap);
	soap_serialize_klpkg_RenamePackageResponse(soap, &r);
	soap_begin_count(soap);
	if (soap->mode & SOAP_IO_LENGTH)
	{	soap_envelope_begin_out(soap);
		soap_putheader(soap);
		soap_body_begin_out(soap);
		soap_put_klpkg_RenamePackageResponse(soap, &r, "klpkg-RenamePackageResponse", "");
		soap_body_end_out(soap);
		soap_envelope_end_out(soap);
	};
	if (soap_response(soap, SOAP_OK)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put_klpkg_RenamePackageResponse(soap, &r, "klpkg-RenamePackageResponse", "")
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap->error;
	soap_closesock(soap);
	return SOAP_OK;
}

SOAP_FMAC5 int SOAP_FMAC6 soap_serve_klpkg_GetIntranetFolderForNewPackage(struct soap *soap)
{	struct klpkg_GetIntranetFolderForNewPackage soap_tmp_klpkg_GetIntranetFolderForNewPackage;
	struct klpkg_GetIntranetFolderForNewPackageResponse r;
	soap_default_klpkg_GetIntranetFolderForNewPackageResponse(soap, &r);
	soap_default_klpkg_GetIntranetFolderForNewPackage(soap, &soap_tmp_klpkg_GetIntranetFolderForNewPackage);
	soap->encodingStyle = NULL;
	soap_get_klpkg_GetIntranetFolderForNewPackage(soap, &soap_tmp_klpkg_GetIntranetFolderForNewPackage, "klpkg-GetIntranetFolderForNewPackage", NULL);
	if (soap->error)
		return soap->error;
	
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
#ifndef WITH_LEANER
	 || soap_resolve_attachments(soap)
#endif
	 || soap_end_recv(soap))
		return soap->error;
	soap->error = klpkg_GetIntranetFolderForNewPackage(soap, soap_tmp_klpkg_GetIntranetFolderForNewPackage.wstrProductName, soap_tmp_klpkg_GetIntranetFolderForNewPackage.wstrProductVersion, r);
	if (soap->error)
		return soap->error;
	soap_serializeheader(soap);
	soap_serialize_klpkg_GetIntranetFolderForNewPackageResponse(soap, &r);
	soap_begin_count(soap);
	if (soap->mode & SOAP_IO_LENGTH)
	{	soap_envelope_begin_out(soap);
		soap_putheader(soap);
		soap_body_begin_out(soap);
		soap_put_klpkg_GetIntranetFolderForNewPackageResponse(soap, &r, "klpkg-GetIntranetFolderForNewPackageResponse", "");
		soap_body_end_out(soap);
		soap_envelope_end_out(soap);
	};
	if (soap_response(soap, SOAP_OK)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put_klpkg_GetIntranetFolderForNewPackageResponse(soap, &r, "klpkg-GetIntranetFolderForNewPackageResponse", "")
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap->error;
	soap_closesock(soap);
	return SOAP_OK;
}

SOAP_FMAC5 int SOAP_FMAC6 soap_serve_klpkg_RecordNewPackage(struct soap *soap)
{	struct klpkg_RecordNewPackage soap_tmp_klpkg_RecordNewPackage;
	struct klpkg_RecordNewPackageResponse r;
	soap_default_klpkg_RecordNewPackageResponse(soap, &r);
	soap_default_klpkg_RecordNewPackage(soap, &soap_tmp_klpkg_RecordNewPackage);
	soap->encodingStyle = NULL;
	soap_get_klpkg_RecordNewPackage(soap, &soap_tmp_klpkg_RecordNewPackage, "klpkg-RecordNewPackage", NULL);
	if (soap->error)
		return soap->error;
	
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
#ifndef WITH_LEANER
	 || soap_resolve_attachments(soap)
#endif
	 || soap_end_recv(soap))
		return soap->error;
	soap->error = klpkg_RecordNewPackage(soap, soap_tmp_klpkg_RecordNewPackage.wstrName, soap_tmp_klpkg_RecordNewPackage.wstrFolder, soap_tmp_klpkg_RecordNewPackage.wstrProductName, soap_tmp_klpkg_RecordNewPackage.wstrProductVersion, soap_tmp_klpkg_RecordNewPackage.wstrProductDisplName, soap_tmp_klpkg_RecordNewPackage.wstrProductDisplVersion, r);
	if (soap->error)
		return soap->error;
	soap_serializeheader(soap);
	soap_serialize_klpkg_RecordNewPackageResponse(soap, &r);
	soap_begin_count(soap);
	if (soap->mode & SOAP_IO_LENGTH)
	{	soap_envelope_begin_out(soap);
		soap_putheader(soap);
		soap_body_begin_out(soap);
		soap_put_klpkg_RecordNewPackageResponse(soap, &r, "klpkg-RecordNewPackageResponse", "");
		soap_body_end_out(soap);
		soap_envelope_end_out(soap);
	};
	if (soap_response(soap, SOAP_OK)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put_klpkg_RecordNewPackageResponse(soap, &r, "klpkg-RecordNewPackageResponse", "")
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap->error;
	soap_closesock(soap);
	return SOAP_OK;
}

SOAP_FMAC5 int SOAP_FMAC6 soap_serve_klpkg_RemovePackage(struct soap *soap)
{	struct klpkg_RemovePackage soap_tmp_klpkg_RemovePackage;
	struct klpkg_RemovePackageResponse r;
	soap_default_klpkg_RemovePackageResponse(soap, &r);
	soap_default_klpkg_RemovePackage(soap, &soap_tmp_klpkg_RemovePackage);
	soap->encodingStyle = NULL;
	soap_get_klpkg_RemovePackage(soap, &soap_tmp_klpkg_RemovePackage, "klpkg-RemovePackage", NULL);
	if (soap->error)
		return soap->error;
	
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
#ifndef WITH_LEANER
	 || soap_resolve_attachments(soap)
#endif
	 || soap_end_recv(soap))
		return soap->error;
	soap->error = klpkg_RemovePackage(soap, soap_tmp_klpkg_RemovePackage.nPackageId, r);
	if (soap->error)
		return soap->error;
	soap_serializeheader(soap);
	soap_serialize_klpkg_RemovePackageResponse(soap, &r);
	soap_begin_count(soap);
	if (soap->mode & SOAP_IO_LENGTH)
	{	soap_envelope_begin_out(soap);
		soap_putheader(soap);
		soap_body_begin_out(soap);
		soap_put_klpkg_RemovePackageResponse(soap, &r, "klpkg-RemovePackageResponse", "");
		soap_body_end_out(soap);
		soap_envelope_end_out(soap);
	};
	if (soap_response(soap, SOAP_OK)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put_klpkg_RemovePackageResponse(soap, &r, "klpkg-RemovePackageResponse", "")
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap->error;
	soap_closesock(soap);
	return SOAP_OK;
}

SOAP_FMAC5 int SOAP_FMAC6 soap_serve_klpkg_GetIntranetFolderForPackage(struct soap *soap)
{	struct klpkg_GetIntranetFolderForPackage soap_tmp_klpkg_GetIntranetFolderForPackage;
	struct klpkg_GetIntranetFolderForPackageResponse r;
	soap_default_klpkg_GetIntranetFolderForPackageResponse(soap, &r);
	soap_default_klpkg_GetIntranetFolderForPackage(soap, &soap_tmp_klpkg_GetIntranetFolderForPackage);
	soap->encodingStyle = NULL;
	soap_get_klpkg_GetIntranetFolderForPackage(soap, &soap_tmp_klpkg_GetIntranetFolderForPackage, "klpkg-GetIntranetFolderForPackage", NULL);
	if (soap->error)
		return soap->error;
	
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
#ifndef WITH_LEANER
	 || soap_resolve_attachments(soap)
#endif
	 || soap_end_recv(soap))
		return soap->error;
	soap->error = klpkg_GetIntranetFolderForPackage(soap, soap_tmp_klpkg_GetIntranetFolderForPackage.nPackageId, r);
	if (soap->error)
		return soap->error;
	soap_serializeheader(soap);
	soap_serialize_klpkg_GetIntranetFolderForPackageResponse(soap, &r);
	soap_begin_count(soap);
	if (soap->mode & SOAP_IO_LENGTH)
	{	soap_envelope_begin_out(soap);
		soap_putheader(soap);
		soap_body_begin_out(soap);
		soap_put_klpkg_GetIntranetFolderForPackageResponse(soap, &r, "klpkg-GetIntranetFolderForPackageResponse", "");
		soap_body_end_out(soap);
		soap_envelope_end_out(soap);
	};
	if (soap_response(soap, SOAP_OK)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put_klpkg_GetIntranetFolderForPackageResponse(soap, &r, "klpkg-GetIntranetFolderForPackageResponse", "")
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap->error;
	soap_closesock(soap);
	return SOAP_OK;
}

SOAP_FMAC5 int SOAP_FMAC6 soap_serve_klpkg_SS_Read(struct soap *soap)
{	struct klpkg_SS_Read soap_tmp_klpkg_SS_Read;
	struct klpkg_SS_ReadResponse r;
	soap_default_klpkg_SS_ReadResponse(soap, &r);
	soap_default_klpkg_SS_Read(soap, &soap_tmp_klpkg_SS_Read);
	soap->encodingStyle = NULL;
	soap_get_klpkg_SS_Read(soap, &soap_tmp_klpkg_SS_Read, "klpkg-SS-Read", NULL);
	if (soap->error)
		return soap->error;
	
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
#ifndef WITH_LEANER
	 || soap_resolve_attachments(soap)
#endif
	 || soap_end_recv(soap))
		return soap->error;
	soap->error = klpkg_SS_Read(soap, soap_tmp_klpkg_SS_Read.storage_descr, soap_tmp_klpkg_SS_Read.name, soap_tmp_klpkg_SS_Read.version, soap_tmp_klpkg_SS_Read.section, soap_tmp_klpkg_SS_Read.timeout, r);
	if (soap->error)
		return soap->error;
	soap_serializeheader(soap);
	soap_serialize_klpkg_SS_ReadResponse(soap, &r);
	soap_begin_count(soap);
	if (soap->mode & SOAP_IO_LENGTH)
	{	soap_envelope_begin_out(soap);
		soap_putheader(soap);
		soap_body_begin_out(soap);
		soap_put_klpkg_SS_ReadResponse(soap, &r, "klpkg-SS-ReadResponse", "");
		soap_body_end_out(soap);
		soap_envelope_end_out(soap);
	};
	if (soap_response(soap, SOAP_OK)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put_klpkg_SS_ReadResponse(soap, &r, "klpkg-SS-ReadResponse", "")
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap->error;
	soap_closesock(soap);
	return SOAP_OK;
}

SOAP_FMAC5 int SOAP_FMAC6 soap_serve_klpkg_SS_Write(struct soap *soap)
{	struct klpkg_SS_Write soap_tmp_klpkg_SS_Write;
	struct klpkg_SS_WriteResponse r;
	soap_default_klpkg_SS_WriteResponse(soap, &r);
	soap_default_klpkg_SS_Write(soap, &soap_tmp_klpkg_SS_Write);
	soap->encodingStyle = NULL;
	soap_get_klpkg_SS_Write(soap, &soap_tmp_klpkg_SS_Write, "klpkg-SS-Write", NULL);
	if (soap->error)
		return soap->error;
	
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
#ifndef WITH_LEANER
	 || soap_resolve_attachments(soap)
#endif
	 || soap_end_recv(soap))
		return soap->error;
	soap->error = klpkg_SS_Write(soap, soap_tmp_klpkg_SS_Write.storage_descr, soap_tmp_klpkg_SS_Write.name, soap_tmp_klpkg_SS_Write.version, soap_tmp_klpkg_SS_Write.section, soap_tmp_klpkg_SS_Write.data, soap_tmp_klpkg_SS_Write.timeout, soap_tmp_klpkg_SS_Write.operation_type, r);
	if (soap->error)
		return soap->error;
	soap_serializeheader(soap);
	soap_serialize_klpkg_SS_WriteResponse(soap, &r);
	soap_begin_count(soap);
	if (soap->mode & SOAP_IO_LENGTH)
	{	soap_envelope_begin_out(soap);
		soap_putheader(soap);
		soap_body_begin_out(soap);
		soap_put_klpkg_SS_WriteResponse(soap, &r, "klpkg-SS-WriteResponse", "");
		soap_body_end_out(soap);
		soap_envelope_end_out(soap);
	};
	if (soap_response(soap, SOAP_OK)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put_klpkg_SS_WriteResponse(soap, &r, "klpkg-SS-WriteResponse", "")
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap->error;
	soap_closesock(soap);
	return SOAP_OK;
}

SOAP_FMAC5 int SOAP_FMAC6 soap_serve_klpkg_SS_SectionOpearation(struct soap *soap)
{	struct klpkg_SS_SectionOpearation soap_tmp_klpkg_SS_SectionOpearation;
	struct klpkg_SS_SectionOpearationResponse r;
	soap_default_klpkg_SS_SectionOpearationResponse(soap, &r);
	soap_default_klpkg_SS_SectionOpearation(soap, &soap_tmp_klpkg_SS_SectionOpearation);
	soap->encodingStyle = NULL;
	soap_get_klpkg_SS_SectionOpearation(soap, &soap_tmp_klpkg_SS_SectionOpearation, "klpkg-SS-SectionOpearation", NULL);
	if (soap->error)
		return soap->error;
	
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
#ifndef WITH_LEANER
	 || soap_resolve_attachments(soap)
#endif
	 || soap_end_recv(soap))
		return soap->error;
	soap->error = klpkg_SS_SectionOpearation(soap, soap_tmp_klpkg_SS_SectionOpearation.storage_descr, soap_tmp_klpkg_SS_SectionOpearation.name, soap_tmp_klpkg_SS_SectionOpearation.version, soap_tmp_klpkg_SS_SectionOpearation.section, soap_tmp_klpkg_SS_SectionOpearation.timeout, soap_tmp_klpkg_SS_SectionOpearation.operation_type, r);
	if (soap->error)
		return soap->error;
	soap_serializeheader(soap);
	soap_serialize_klpkg_SS_SectionOpearationResponse(soap, &r);
	soap_begin_count(soap);
	if (soap->mode & SOAP_IO_LENGTH)
	{	soap_envelope_begin_out(soap);
		soap_putheader(soap);
		soap_body_begin_out(soap);
		soap_put_klpkg_SS_SectionOpearationResponse(soap, &r, "klpkg-SS-SectionOpearationResponse", "");
		soap_body_end_out(soap);
		soap_envelope_end_out(soap);
	};
	if (soap_response(soap, SOAP_OK)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put_klpkg_SS_SectionOpearationResponse(soap, &r, "klpkg-SS-SectionOpearationResponse", "")
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap->error;
	soap_closesock(soap);
	return SOAP_OK;
}

SOAP_FMAC5 int SOAP_FMAC6 soap_serve_klpkg_SS_GetNames(struct soap *soap)
{	struct klpkg_SS_GetNames soap_tmp_klpkg_SS_GetNames;
	struct klpkg_SS_GetNamesResponse r;
	soap_default_klpkg_SS_GetNamesResponse(soap, &r);
	soap_default_klpkg_SS_GetNames(soap, &soap_tmp_klpkg_SS_GetNames);
	soap->encodingStyle = NULL;
	soap_get_klpkg_SS_GetNames(soap, &soap_tmp_klpkg_SS_GetNames, "klpkg-SS-GetNames", NULL);
	if (soap->error)
		return soap->error;
	
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
#ifndef WITH_LEANER
	 || soap_resolve_attachments(soap)
#endif
	 || soap_end_recv(soap))
		return soap->error;
	soap->error = klpkg_SS_GetNames(soap, soap_tmp_klpkg_SS_GetNames.storage_descr, soap_tmp_klpkg_SS_GetNames.name, soap_tmp_klpkg_SS_GetNames.version, soap_tmp_klpkg_SS_GetNames.timeout, r);
	if (soap->error)
		return soap->error;
	soap_serializeheader(soap);
	soap_serialize_klpkg_SS_GetNamesResponse(soap, &r);
	soap_begin_count(soap);
	if (soap->mode & SOAP_IO_LENGTH)
	{	soap_envelope_begin_out(soap);
		soap_putheader(soap);
		soap_body_begin_out(soap);
		soap_put_klpkg_SS_GetNamesResponse(soap, &r, "klpkg-SS-GetNamesResponse", "");
		soap_body_end_out(soap);
		soap_envelope_end_out(soap);
	};
	if (soap_response(soap, SOAP_OK)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put_klpkg_SS_GetNamesResponse(soap, &r, "klpkg-SS-GetNamesResponse", "")
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap->error;
	soap_closesock(soap);
	return SOAP_OK;
}

SOAP_FMAC5 int SOAP_FMAC6 soap_serve_klpkg_RemovePackage2(struct soap *soap)
{	struct klpkg_RemovePackage2 soap_tmp_klpkg_RemovePackage2;
	struct klpkg_RemovePackage2Response r;
	soap_default_klpkg_RemovePackage2Response(soap, &r);
	soap_default_klpkg_RemovePackage2(soap, &soap_tmp_klpkg_RemovePackage2);
	soap->encodingStyle = NULL;
	soap_get_klpkg_RemovePackage2(soap, &soap_tmp_klpkg_RemovePackage2, "klpkg-RemovePackage2", NULL);
	if (soap->error)
		return soap->error;
	
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
#ifndef WITH_LEANER
	 || soap_resolve_attachments(soap)
#endif
	 || soap_end_recv(soap))
		return soap->error;
	soap->error = klpkg_RemovePackage2(soap, soap_tmp_klpkg_RemovePackage2.nPackageId, r);
	if (soap->error)
		return soap->error;
	soap_serializeheader(soap);
	soap_serialize_klpkg_RemovePackage2Response(soap, &r);
	soap_begin_count(soap);
	if (soap->mode & SOAP_IO_LENGTH)
	{	soap_envelope_begin_out(soap);
		soap_putheader(soap);
		soap_body_begin_out(soap);
		soap_put_klpkg_RemovePackage2Response(soap, &r, "klpkg-RemovePackage2Response", "");
		soap_body_end_out(soap);
		soap_envelope_end_out(soap);
	};
	if (soap_response(soap, SOAP_OK)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put_klpkg_RemovePackage2Response(soap, &r, "klpkg-RemovePackage2Response", "")
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap->error;
	soap_closesock(soap);
	return SOAP_OK;
}

SOAP_FMAC5 int SOAP_FMAC6 soap_serve_klpkg_GetLoginScript(struct soap *soap)
{	struct klpkg_GetLoginScript soap_tmp_klpkg_GetLoginScript;
	struct klpkg_GetLoginScriptResponse r;
	soap_default_klpkg_GetLoginScriptResponse(soap, &r);
	soap_default_klpkg_GetLoginScript(soap, &soap_tmp_klpkg_GetLoginScript);
	soap->encodingStyle = NULL;
	soap_get_klpkg_GetLoginScript(soap, &soap_tmp_klpkg_GetLoginScript, "klpkg-GetLoginScript", NULL);
	if (soap->error)
		return soap->error;
	
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
#ifndef WITH_LEANER
	 || soap_resolve_attachments(soap)
#endif
	 || soap_end_recv(soap))
		return soap->error;
	soap->error = klpkg_GetLoginScript(soap, soap_tmp_klpkg_GetLoginScript.nPackageId, soap_tmp_klpkg_GetLoginScript.wstrTaskId, r);
	if (soap->error)
		return soap->error;
	soap_serializeheader(soap);
	soap_serialize_klpkg_GetLoginScriptResponse(soap, &r);
	soap_begin_count(soap);
	if (soap->mode & SOAP_IO_LENGTH)
	{	soap_envelope_begin_out(soap);
		soap_putheader(soap);
		soap_body_begin_out(soap);
		soap_put_klpkg_GetLoginScriptResponse(soap, &r, "klpkg-GetLoginScriptResponse", "");
		soap_body_end_out(soap);
		soap_envelope_end_out(soap);
	};
	if (soap_response(soap, SOAP_OK)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put_klpkg_GetLoginScriptResponse(soap, &r, "klpkg-GetLoginScriptResponse", "")
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap->error;
	soap_closesock(soap);
	return SOAP_OK;
}

SOAP_FMAC5 int SOAP_FMAC6 soap_serve_klpkg_SetRebootOptions(struct soap *soap)
{	struct klpkg_SetRebootOptions soap_tmp_klpkg_SetRebootOptions;
	struct klpkg_SetRebootOptionsResponse r;
	soap_default_klpkg_SetRebootOptionsResponse(soap, &r);
	soap_default_klpkg_SetRebootOptions(soap, &soap_tmp_klpkg_SetRebootOptions);
	soap->encodingStyle = NULL;
	soap_get_klpkg_SetRebootOptions(soap, &soap_tmp_klpkg_SetRebootOptions, "klpkg-SetRebootOptions", NULL);
	if (soap->error)
		return soap->error;
	
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
#ifndef WITH_LEANER
	 || soap_resolve_attachments(soap)
#endif
	 || soap_end_recv(soap))
		return soap->error;
	soap->error = klpkg_SetRebootOptions(soap, soap_tmp_klpkg_SetRebootOptions.nPackageId, soap_tmp_klpkg_SetRebootOptions.bRebootImmediately, soap_tmp_klpkg_SetRebootOptions.bAskForReboot, soap_tmp_klpkg_SetRebootOptions.nAskForRebootPeriodInMin, soap_tmp_klpkg_SetRebootOptions.nForceRebootTimeInMin, soap_tmp_klpkg_SetRebootOptions.wstrAskRebootMsgText, r);
	if (soap->error)
		return soap->error;
	soap_serializeheader(soap);
	soap_serialize_klpkg_SetRebootOptionsResponse(soap, &r);
	soap_begin_count(soap);
	if (soap->mode & SOAP_IO_LENGTH)
	{	soap_envelope_begin_out(soap);
		soap_putheader(soap);
		soap_body_begin_out(soap);
		soap_put_klpkg_SetRebootOptionsResponse(soap, &r, "klpkg-SetRebootOptionsResponse", "");
		soap_body_end_out(soap);
		soap_envelope_end_out(soap);
	};
	if (soap_response(soap, SOAP_OK)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put_klpkg_SetRebootOptionsResponse(soap, &r, "klpkg-SetRebootOptionsResponse", "")
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap->error;
	soap_closesock(soap);
	return SOAP_OK;
}

SOAP_FMAC5 int SOAP_FMAC6 soap_serve_klpkg_GetRebootOptions(struct soap *soap)
{	struct klpkg_GetRebootOptions soap_tmp_klpkg_GetRebootOptions;
	struct klpkg_GetRebootOptionsResponse r;
	soap_default_klpkg_GetRebootOptionsResponse(soap, &r);
	soap_default_klpkg_GetRebootOptions(soap, &soap_tmp_klpkg_GetRebootOptions);
	soap->encodingStyle = NULL;
	soap_get_klpkg_GetRebootOptions(soap, &soap_tmp_klpkg_GetRebootOptions, "klpkg-GetRebootOptions", NULL);
	if (soap->error)
		return soap->error;
	
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
#ifndef WITH_LEANER
	 || soap_resolve_attachments(soap)
#endif
	 || soap_end_recv(soap))
		return soap->error;
	soap->error = klpkg_GetRebootOptions(soap, soap_tmp_klpkg_GetRebootOptions.nPackageId, r);
	if (soap->error)
		return soap->error;
	soap_serializeheader(soap);
	soap_serialize_klpkg_GetRebootOptionsResponse(soap, &r);
	soap_begin_count(soap);
	if (soap->mode & SOAP_IO_LENGTH)
	{	soap_envelope_begin_out(soap);
		soap_putheader(soap);
		soap_body_begin_out(soap);
		soap_put_klpkg_GetRebootOptionsResponse(soap, &r, "klpkg-GetRebootOptionsResponse", "");
		soap_body_end_out(soap);
		soap_envelope_end_out(soap);
	};
	if (soap_response(soap, SOAP_OK)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put_klpkg_GetRebootOptionsResponse(soap, &r, "klpkg-GetRebootOptionsResponse", "")
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap->error;
	soap_closesock(soap);
	return SOAP_OK;
}

SOAP_FMAC5 int SOAP_FMAC6 soap_serve_klpkg_RecordNewPackage2(struct soap *soap)
{	struct klpkg_RecordNewPackage2 soap_tmp_klpkg_RecordNewPackage2;
	struct klpkg_RecordNewPackage2Response r;
	soap_default_klpkg_RecordNewPackage2Response(soap, &r);
	soap_default_klpkg_RecordNewPackage2(soap, &soap_tmp_klpkg_RecordNewPackage2);
	soap->encodingStyle = NULL;
	soap_get_klpkg_RecordNewPackage2(soap, &soap_tmp_klpkg_RecordNewPackage2, "klpkg-RecordNewPackage2", NULL);
	if (soap->error)
		return soap->error;
	
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
#ifndef WITH_LEANER
	 || soap_resolve_attachments(soap)
#endif
	 || soap_end_recv(soap))
		return soap->error;
	soap->error = klpkg_RecordNewPackage2(soap, soap_tmp_klpkg_RecordNewPackage2.wstrName, soap_tmp_klpkg_RecordNewPackage2.wstrFileId, soap_tmp_klpkg_RecordNewPackage2.wstrProductName, soap_tmp_klpkg_RecordNewPackage2.wstrProductVersion, soap_tmp_klpkg_RecordNewPackage2.wstrProductDisplName, soap_tmp_klpkg_RecordNewPackage2.wstrProductDisplVersion, r);
	if (soap->error)
		return soap->error;
	soap_serializeheader(soap);
	soap_serialize_klpkg_RecordNewPackage2Response(soap, &r);
	soap_begin_count(soap);
	if (soap->mode & SOAP_IO_LENGTH)
	{	soap_envelope_begin_out(soap);
		soap_putheader(soap);
		soap_body_begin_out(soap);
		soap_put_klpkg_RecordNewPackage2Response(soap, &r, "klpkg-RecordNewPackage2Response", "");
		soap_body_end_out(soap);
		soap_envelope_end_out(soap);
	};
	if (soap_response(soap, SOAP_OK)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put_klpkg_RecordNewPackage2Response(soap, &r, "klpkg-RecordNewPackage2Response", "")
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap->error;
	soap_closesock(soap);
	return SOAP_OK;
}

SOAP_FMAC5 int SOAP_FMAC6 soap_serve_klpkg_GetLicenseKey(struct soap *soap)
{	struct klpkg_GetLicenseKey soap_tmp_klpkg_GetLicenseKey;
	struct klpkg_GetLicenseKeyResponse r;
	soap_default_klpkg_GetLicenseKeyResponse(soap, &r);
	soap_default_klpkg_GetLicenseKey(soap, &soap_tmp_klpkg_GetLicenseKey);
	soap->encodingStyle = NULL;
	soap_get_klpkg_GetLicenseKey(soap, &soap_tmp_klpkg_GetLicenseKey, "klpkg-GetLicenseKey", NULL);
	if (soap->error)
		return soap->error;
	
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
#ifndef WITH_LEANER
	 || soap_resolve_attachments(soap)
#endif
	 || soap_end_recv(soap))
		return soap->error;
	soap->error = klpkg_GetLicenseKey(soap, soap_tmp_klpkg_GetLicenseKey.nPackageId, r);
	if (soap->error)
		return soap->error;
	soap_serializeheader(soap);
	soap_serialize_klpkg_GetLicenseKeyResponse(soap, &r);
	soap_begin_count(soap);
	if (soap->mode & SOAP_IO_LENGTH)
	{	soap_envelope_begin_out(soap);
		soap_putheader(soap);
		soap_body_begin_out(soap);
		soap_put_klpkg_GetLicenseKeyResponse(soap, &r, "klpkg-GetLicenseKeyResponse", "");
		soap_body_end_out(soap);
		soap_envelope_end_out(soap);
	};
	if (soap_response(soap, SOAP_OK)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put_klpkg_GetLicenseKeyResponse(soap, &r, "klpkg-GetLicenseKeyResponse", "")
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap->error;
	soap_closesock(soap);
	return SOAP_OK;
}

SOAP_FMAC5 int SOAP_FMAC6 soap_serve_klpkg_SetLicenseKey(struct soap *soap)
{	struct klpkg_SetLicenseKey soap_tmp_klpkg_SetLicenseKey;
	struct klpkg_SetLicenseKeyResponse r;
	soap_default_klpkg_SetLicenseKeyResponse(soap, &r);
	soap_default_klpkg_SetLicenseKey(soap, &soap_tmp_klpkg_SetLicenseKey);
	soap->encodingStyle = NULL;
	soap_get_klpkg_SetLicenseKey(soap, &soap_tmp_klpkg_SetLicenseKey, "klpkg-SetLicenseKey", NULL);
	if (soap->error)
		return soap->error;
	
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
#ifndef WITH_LEANER
	 || soap_resolve_attachments(soap)
#endif
	 || soap_end_recv(soap))
		return soap->error;
	soap->error = klpkg_SetLicenseKey(soap, soap_tmp_klpkg_SetLicenseKey.nPackageId, soap_tmp_klpkg_SetLicenseKey.wstrKeyFileName, soap_tmp_klpkg_SetLicenseKey.data, soap_tmp_klpkg_SetLicenseKey.bRemoveExisting, r);
	if (soap->error)
		return soap->error;
	soap_serializeheader(soap);
	soap_serialize_klpkg_SetLicenseKeyResponse(soap, &r);
	soap_begin_count(soap);
	if (soap->mode & SOAP_IO_LENGTH)
	{	soap_envelope_begin_out(soap);
		soap_putheader(soap);
		soap_body_begin_out(soap);
		soap_put_klpkg_SetLicenseKeyResponse(soap, &r, "klpkg-SetLicenseKeyResponse", "");
		soap_body_end_out(soap);
		soap_envelope_end_out(soap);
	};
	if (soap_response(soap, SOAP_OK)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put_klpkg_SetLicenseKeyResponse(soap, &r, "klpkg-SetLicenseKeyResponse", "")
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap->error;
	soap_closesock(soap);
	return SOAP_OK;
}

SOAP_FMAC5 int SOAP_FMAC6 soap_serve_klpkg_ReadPkgCfgFile(struct soap *soap)
{	struct klpkg_ReadPkgCfgFile soap_tmp_klpkg_ReadPkgCfgFile;
	struct klpkg_ReadPkgCfgFileResponse r;
	soap_default_klpkg_ReadPkgCfgFileResponse(soap, &r);
	soap_default_klpkg_ReadPkgCfgFile(soap, &soap_tmp_klpkg_ReadPkgCfgFile);
	soap->encodingStyle = NULL;
	soap_get_klpkg_ReadPkgCfgFile(soap, &soap_tmp_klpkg_ReadPkgCfgFile, "klpkg-ReadPkgCfgFile", NULL);
	if (soap->error)
		return soap->error;
	
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
#ifndef WITH_LEANER
	 || soap_resolve_attachments(soap)
#endif
	 || soap_end_recv(soap))
		return soap->error;
	soap->error = klpkg_ReadPkgCfgFile(soap, soap_tmp_klpkg_ReadPkgCfgFile.nPackageId, soap_tmp_klpkg_ReadPkgCfgFile.wstrFileRelativePath, r);
	if (soap->error)
		return soap->error;
	soap_serializeheader(soap);
	soap_serialize_klpkg_ReadPkgCfgFileResponse(soap, &r);
	soap_begin_count(soap);
	if (soap->mode & SOAP_IO_LENGTH)
	{	soap_envelope_begin_out(soap);
		soap_putheader(soap);
		soap_body_begin_out(soap);
		soap_put_klpkg_ReadPkgCfgFileResponse(soap, &r, "klpkg-ReadPkgCfgFileResponse", "");
		soap_body_end_out(soap);
		soap_envelope_end_out(soap);
	};
	if (soap_response(soap, SOAP_OK)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put_klpkg_ReadPkgCfgFileResponse(soap, &r, "klpkg-ReadPkgCfgFileResponse", "")
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap->error;
	soap_closesock(soap);
	return SOAP_OK;
}

SOAP_FMAC5 int SOAP_FMAC6 soap_serve_klpkg_WritePkgCfgFile(struct soap *soap)
{	struct klpkg_WritePkgCfgFile soap_tmp_klpkg_WritePkgCfgFile;
	struct klpkg_WritePkgCfgFileResponse r;
	soap_default_klpkg_WritePkgCfgFileResponse(soap, &r);
	soap_default_klpkg_WritePkgCfgFile(soap, &soap_tmp_klpkg_WritePkgCfgFile);
	soap->encodingStyle = NULL;
	soap_get_klpkg_WritePkgCfgFile(soap, &soap_tmp_klpkg_WritePkgCfgFile, "klpkg-WritePkgCfgFile", NULL);
	if (soap->error)
		return soap->error;
	
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
#ifndef WITH_LEANER
	 || soap_resolve_attachments(soap)
#endif
	 || soap_end_recv(soap))
		return soap->error;
	soap->error = klpkg_WritePkgCfgFile(soap, soap_tmp_klpkg_WritePkgCfgFile.nPackageId, soap_tmp_klpkg_WritePkgCfgFile.wstrFileRelativePath, soap_tmp_klpkg_WritePkgCfgFile.data, r);
	if (soap->error)
		return soap->error;
	soap_serializeheader(soap);
	soap_serialize_klpkg_WritePkgCfgFileResponse(soap, &r);
	soap_begin_count(soap);
	if (soap->mode & SOAP_IO_LENGTH)
	{	soap_envelope_begin_out(soap);
		soap_putheader(soap);
		soap_body_begin_out(soap);
		soap_put_klpkg_WritePkgCfgFileResponse(soap, &r, "klpkg-WritePkgCfgFileResponse", "");
		soap_body_end_out(soap);
		soap_envelope_end_out(soap);
	};
	if (soap_response(soap, SOAP_OK)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put_klpkg_WritePkgCfgFileResponse(soap, &r, "klpkg-WritePkgCfgFileResponse", "")
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap->error;
	soap_closesock(soap);
	return SOAP_OK;
}

SOAP_FMAC5 int SOAP_FMAC6 soap_serve_klpkg_ReadKpdFile(struct soap *soap)
{	struct klpkg_ReadKpdFile soap_tmp_klpkg_ReadKpdFile;
	struct klpkg_ReadKpdFileResponse r;
	soap_default_klpkg_ReadKpdFileResponse(soap, &r);
	soap_default_klpkg_ReadKpdFile(soap, &soap_tmp_klpkg_ReadKpdFile);
	soap->encodingStyle = NULL;
	soap_get_klpkg_ReadKpdFile(soap, &soap_tmp_klpkg_ReadKpdFile, "klpkg-ReadKpdFile", NULL);
	if (soap->error)
		return soap->error;
	
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
#ifndef WITH_LEANER
	 || soap_resolve_attachments(soap)
#endif
	 || soap_end_recv(soap))
		return soap->error;
	soap->error = klpkg_ReadKpdFile(soap, soap_tmp_klpkg_ReadKpdFile.nPackageId, r);
	if (soap->error)
		return soap->error;
	soap_serializeheader(soap);
	soap_serialize_klpkg_ReadKpdFileResponse(soap, &r);
	soap_begin_count(soap);
	if (soap->mode & SOAP_IO_LENGTH)
	{	soap_envelope_begin_out(soap);
		soap_putheader(soap);
		soap_body_begin_out(soap);
		soap_put_klpkg_ReadKpdFileResponse(soap, &r, "klpkg-ReadKpdFileResponse", "");
		soap_body_end_out(soap);
		soap_envelope_end_out(soap);
	};
	if (soap_response(soap, SOAP_OK)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put_klpkg_ReadKpdFileResponse(soap, &r, "klpkg-ReadKpdFileResponse", "")
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap->error;
	soap_closesock(soap);
	return SOAP_OK;
}

SOAP_FMAC5 int SOAP_FMAC6 soap_serve_klpkg_GetKpdProfileString(struct soap *soap)
{	struct klpkg_GetKpdProfileString soap_tmp_klpkg_GetKpdProfileString;
	struct klpkg_GetKpdProfileStringResponse r;
	soap_default_klpkg_GetKpdProfileStringResponse(soap, &r);
	soap_default_klpkg_GetKpdProfileString(soap, &soap_tmp_klpkg_GetKpdProfileString);
	soap->encodingStyle = NULL;
	soap_get_klpkg_GetKpdProfileString(soap, &soap_tmp_klpkg_GetKpdProfileString, "klpkg-GetKpdProfileString", NULL);
	if (soap->error)
		return soap->error;
	
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
#ifndef WITH_LEANER
	 || soap_resolve_attachments(soap)
#endif
	 || soap_end_recv(soap))
		return soap->error;
	soap->error = klpkg_GetKpdProfileString(soap, soap_tmp_klpkg_GetKpdProfileString.nPackageId, soap_tmp_klpkg_GetKpdProfileString.wstrSection, soap_tmp_klpkg_GetKpdProfileString.wstrKey, soap_tmp_klpkg_GetKpdProfileString.wstrDefault, r);
	if (soap->error)
		return soap->error;
	soap_serializeheader(soap);
	soap_serialize_klpkg_GetKpdProfileStringResponse(soap, &r);
	soap_begin_count(soap);
	if (soap->mode & SOAP_IO_LENGTH)
	{	soap_envelope_begin_out(soap);
		soap_putheader(soap);
		soap_body_begin_out(soap);
		soap_put_klpkg_GetKpdProfileStringResponse(soap, &r, "klpkg-GetKpdProfileStringResponse", "");
		soap_body_end_out(soap);
		soap_envelope_end_out(soap);
	};
	if (soap_response(soap, SOAP_OK)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put_klpkg_GetKpdProfileStringResponse(soap, &r, "klpkg-GetKpdProfileStringResponse", "")
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap->error;
	soap_closesock(soap);
	return SOAP_OK;
}

SOAP_FMAC5 int SOAP_FMAC6 soap_serve_klpkg_WriteKpdProfileString(struct soap *soap)
{	struct klpkg_WriteKpdProfileString soap_tmp_klpkg_WriteKpdProfileString;
	struct klpkg_WriteKpdProfileStringResponse r;
	soap_default_klpkg_WriteKpdProfileStringResponse(soap, &r);
	soap_default_klpkg_WriteKpdProfileString(soap, &soap_tmp_klpkg_WriteKpdProfileString);
	soap->encodingStyle = NULL;
	soap_get_klpkg_WriteKpdProfileString(soap, &soap_tmp_klpkg_WriteKpdProfileString, "klpkg-WriteKpdProfileString", NULL);
	if (soap->error)
		return soap->error;
	
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
#ifndef WITH_LEANER
	 || soap_resolve_attachments(soap)
#endif
	 || soap_end_recv(soap))
		return soap->error;
	soap->error = klpkg_WriteKpdProfileString(soap, soap_tmp_klpkg_WriteKpdProfileString.nPackageId, soap_tmp_klpkg_WriteKpdProfileString.wstrSection, soap_tmp_klpkg_WriteKpdProfileString.wstrKey, soap_tmp_klpkg_WriteKpdProfileString.wstrValue, r);
	if (soap->error)
		return soap->error;
	soap_serializeheader(soap);
	soap_serialize_klpkg_WriteKpdProfileStringResponse(soap, &r);
	soap_begin_count(soap);
	if (soap->mode & SOAP_IO_LENGTH)
	{	soap_envelope_begin_out(soap);
		soap_putheader(soap);
		soap_body_begin_out(soap);
		soap_put_klpkg_WriteKpdProfileStringResponse(soap, &r, "klpkg-WriteKpdProfileStringResponse", "");
		soap_body_end_out(soap);
		soap_envelope_end_out(soap);
	};
	if (soap_response(soap, SOAP_OK)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put_klpkg_WriteKpdProfileStringResponse(soap, &r, "klpkg-WriteKpdProfileStringResponse", "")
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap->error;
	soap_closesock(soap);
	return SOAP_OK;
}

SOAP_FMAC5 int SOAP_FMAC6 soap_serve_klpkg_SetRebootOptionsEx(struct soap *soap)
{	struct klpkg_SetRebootOptionsEx soap_tmp_klpkg_SetRebootOptionsEx;
	struct klpkg_SetRebootOptionsExResponse r;
	soap_default_klpkg_SetRebootOptionsExResponse(soap, &r);
	soap_default_klpkg_SetRebootOptionsEx(soap, &soap_tmp_klpkg_SetRebootOptionsEx);
	soap->encodingStyle = NULL;
	soap_get_klpkg_SetRebootOptionsEx(soap, &soap_tmp_klpkg_SetRebootOptionsEx, "klpkg-SetRebootOptionsEx", NULL);
	if (soap->error)
		return soap->error;
	
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
#ifndef WITH_LEANER
	 || soap_resolve_attachments(soap)
#endif
	 || soap_end_recv(soap))
		return soap->error;
	soap->error = klpkg_SetRebootOptionsEx(soap, soap_tmp_klpkg_SetRebootOptionsEx.nPackageId, soap_tmp_klpkg_SetRebootOptionsEx.bRebootImmediately, soap_tmp_klpkg_SetRebootOptionsEx.bAskForReboot, soap_tmp_klpkg_SetRebootOptionsEx.nAskForRebootPeriodInMin, soap_tmp_klpkg_SetRebootOptionsEx.nForceRebootTimeInMin, soap_tmp_klpkg_SetRebootOptionsEx.wstrAskRebootMsgText, soap_tmp_klpkg_SetRebootOptionsEx.bForceAppsClosed, soap_tmp_klpkg_SetRebootOptionsEx.parParams, r);
	if (soap->error)
		return soap->error;
	soap_serializeheader(soap);
	soap_serialize_klpkg_SetRebootOptionsExResponse(soap, &r);
	soap_begin_count(soap);
	if (soap->mode & SOAP_IO_LENGTH)
	{	soap_envelope_begin_out(soap);
		soap_putheader(soap);
		soap_body_begin_out(soap);
		soap_put_klpkg_SetRebootOptionsExResponse(soap, &r, "klpkg-SetRebootOptionsExResponse", "");
		soap_body_end_out(soap);
		soap_envelope_end_out(soap);
	};
	if (soap_response(soap, SOAP_OK)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put_klpkg_SetRebootOptionsExResponse(soap, &r, "klpkg-SetRebootOptionsExResponse", "")
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap->error;
	soap_closesock(soap);
	return SOAP_OK;
}

SOAP_FMAC5 int SOAP_FMAC6 soap_serve_klpkg_GetRebootOptionsEx(struct soap *soap)
{	struct klpkg_GetRebootOptionsEx soap_tmp_klpkg_GetRebootOptionsEx;
	struct klpkg_GetRebootOptionsExResponse r;
	soap_default_klpkg_GetRebootOptionsExResponse(soap, &r);
	soap_default_klpkg_GetRebootOptionsEx(soap, &soap_tmp_klpkg_GetRebootOptionsEx);
	soap->encodingStyle = NULL;
	soap_get_klpkg_GetRebootOptionsEx(soap, &soap_tmp_klpkg_GetRebootOptionsEx, "klpkg-GetRebootOptionsEx", NULL);
	if (soap->error)
		return soap->error;
	
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
#ifndef WITH_LEANER
	 || soap_resolve_attachments(soap)
#endif
	 || soap_end_recv(soap))
		return soap->error;
	soap->error = klpkg_GetRebootOptionsEx(soap, soap_tmp_klpkg_GetRebootOptionsEx.nPackageId, r);
	if (soap->error)
		return soap->error;
	soap_serializeheader(soap);
	soap_serialize_klpkg_GetRebootOptionsExResponse(soap, &r);
	soap_begin_count(soap);
	if (soap->mode & SOAP_IO_LENGTH)
	{	soap_envelope_begin_out(soap);
		soap_putheader(soap);
		soap_body_begin_out(soap);
		soap_put_klpkg_GetRebootOptionsExResponse(soap, &r, "klpkg-GetRebootOptionsExResponse", "");
		soap_body_end_out(soap);
		soap_envelope_end_out(soap);
	};
	if (soap_response(soap, SOAP_OK)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put_klpkg_GetRebootOptionsExResponse(soap, &r, "klpkg-GetRebootOptionsExResponse", "")
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap->error;
	soap_closesock(soap);
	return SOAP_OK;
}

SOAP_FMAC5 int SOAP_FMAC6 soap_serve_klpkg_RecordNewPackageAsync(struct soap *soap)
{	struct klpkg_RecordNewPackageAsync soap_tmp_klpkg_RecordNewPackageAsync;
	struct klpkg_RecordNewPackageAsyncResponse r;
	soap_default_klpkg_RecordNewPackageAsyncResponse(soap, &r);
	soap_default_klpkg_RecordNewPackageAsync(soap, &soap_tmp_klpkg_RecordNewPackageAsync);
	soap->encodingStyle = NULL;
	soap_get_klpkg_RecordNewPackageAsync(soap, &soap_tmp_klpkg_RecordNewPackageAsync, "klpkg-RecordNewPackageAsync", NULL);
	if (soap->error)
		return soap->error;
	
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
#ifndef WITH_LEANER
	 || soap_resolve_attachments(soap)
#endif
	 || soap_end_recv(soap))
		return soap->error;
	soap->error = klpkg_RecordNewPackageAsync(soap, soap_tmp_klpkg_RecordNewPackageAsync.wstrName, soap_tmp_klpkg_RecordNewPackageAsync.wstrFolder, soap_tmp_klpkg_RecordNewPackageAsync.wstrProductName, soap_tmp_klpkg_RecordNewPackageAsync.wstrProductVersion, soap_tmp_klpkg_RecordNewPackageAsync.wstrProductDisplName, soap_tmp_klpkg_RecordNewPackageAsync.wstrProductDisplVersion, soap_tmp_klpkg_RecordNewPackageAsync.wstrRequestId, r);
	if (soap->error)
		return soap->error;
	soap_serializeheader(soap);
	soap_serialize_klpkg_RecordNewPackageAsyncResponse(soap, &r);
	soap_begin_count(soap);
	if (soap->mode & SOAP_IO_LENGTH)
	{	soap_envelope_begin_out(soap);
		soap_putheader(soap);
		soap_body_begin_out(soap);
		soap_put_klpkg_RecordNewPackageAsyncResponse(soap, &r, "klpkg-RecordNewPackageAsyncResponse", "");
		soap_body_end_out(soap);
		soap_envelope_end_out(soap);
	};
	if (soap_response(soap, SOAP_OK)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put_klpkg_RecordNewPackageAsyncResponse(soap, &r, "klpkg-RecordNewPackageAsyncResponse", "")
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap->error;
	soap_closesock(soap);
	return SOAP_OK;
}

SOAP_FMAC5 int SOAP_FMAC6 soap_serve_klpkg_GetPackageInfo(struct soap *soap)
{	struct klpkg_GetPackageInfo soap_tmp_klpkg_GetPackageInfo;
	struct klpkg_GetPackageInfoResponse r;
	soap_default_klpkg_GetPackageInfoResponse(soap, &r);
	soap_default_klpkg_GetPackageInfo(soap, &soap_tmp_klpkg_GetPackageInfo);
	soap->encodingStyle = NULL;
	soap_get_klpkg_GetPackageInfo(soap, &soap_tmp_klpkg_GetPackageInfo, "klpkg-GetPackageInfo", NULL);
	if (soap->error)
		return soap->error;
	
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
#ifndef WITH_LEANER
	 || soap_resolve_attachments(soap)
#endif
	 || soap_end_recv(soap))
		return soap->error;
	soap->error = klpkg_GetPackageInfo(soap, soap_tmp_klpkg_GetPackageInfo.nPackageId, r);
	if (soap->error)
		return soap->error;
	soap_serializeheader(soap);
	soap_serialize_klpkg_GetPackageInfoResponse(soap, &r);
	soap_begin_count(soap);
	if (soap->mode & SOAP_IO_LENGTH)
	{	soap_envelope_begin_out(soap);
		soap_putheader(soap);
		soap_body_begin_out(soap);
		soap_put_klpkg_GetPackageInfoResponse(soap, &r, "klpkg-GetPackageInfoResponse", "");
		soap_body_end_out(soap);
		soap_envelope_end_out(soap);
	};
	if (soap_response(soap, SOAP_OK)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put_klpkg_GetPackageInfoResponse(soap, &r, "klpkg-GetPackageInfoResponse", "")
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap->error;
	soap_closesock(soap);
	return SOAP_OK;
}

SOAP_FMAC5 int SOAP_FMAC6 soap_serve_klpkg_GetIncompatibleAppsInfo(struct soap *soap)
{	struct klpkg_GetIncompatibleAppsInfo soap_tmp_klpkg_GetIncompatibleAppsInfo;
	struct klpkg_GetIncompatibleAppsInfoResponse r;
	soap_default_klpkg_GetIncompatibleAppsInfoResponse(soap, &r);
	soap_default_klpkg_GetIncompatibleAppsInfo(soap, &soap_tmp_klpkg_GetIncompatibleAppsInfo);
	soap->encodingStyle = NULL;
	soap_get_klpkg_GetIncompatibleAppsInfo(soap, &soap_tmp_klpkg_GetIncompatibleAppsInfo, "klpkg-GetIncompatibleAppsInfo", NULL);
	if (soap->error)
		return soap->error;
	
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
#ifndef WITH_LEANER
	 || soap_resolve_attachments(soap)
#endif
	 || soap_end_recv(soap))
		return soap->error;
	soap->error = klpkg_GetIncompatibleAppsInfo(soap, soap_tmp_klpkg_GetIncompatibleAppsInfo.nPackageId, r);
	if (soap->error)
		return soap->error;
	soap_serializeheader(soap);
	soap_serialize_klpkg_GetIncompatibleAppsInfoResponse(soap, &r);
	soap_begin_count(soap);
	if (soap->mode & SOAP_IO_LENGTH)
	{	soap_envelope_begin_out(soap);
		soap_putheader(soap);
		soap_body_begin_out(soap);
		soap_put_klpkg_GetIncompatibleAppsInfoResponse(soap, &r, "klpkg-GetIncompatibleAppsInfoResponse", "");
		soap_body_end_out(soap);
		soap_envelope_end_out(soap);
	};
	if (soap_response(soap, SOAP_OK)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put_klpkg_GetIncompatibleAppsInfoResponse(soap, &r, "klpkg-GetIncompatibleAppsInfoResponse", "")
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap->error;
	soap_closesock(soap);
	return SOAP_OK;
}

SOAP_FMAC5 int SOAP_FMAC6 soap_serve_klpkg_SetRemoveIncompatibleApps(struct soap *soap)
{	struct klpkg_SetRemoveIncompatibleApps soap_tmp_klpkg_SetRemoveIncompatibleApps;
	struct klpkg_SetRemoveIncompatibleAppsResponse r;
	soap_default_klpkg_SetRemoveIncompatibleAppsResponse(soap, &r);
	soap_default_klpkg_SetRemoveIncompatibleApps(soap, &soap_tmp_klpkg_SetRemoveIncompatibleApps);
	soap->encodingStyle = NULL;
	soap_get_klpkg_SetRemoveIncompatibleApps(soap, &soap_tmp_klpkg_SetRemoveIncompatibleApps, "klpkg-SetRemoveIncompatibleApps", NULL);
	if (soap->error)
		return soap->error;
	
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
#ifndef WITH_LEANER
	 || soap_resolve_attachments(soap)
#endif
	 || soap_end_recv(soap))
		return soap->error;
	soap->error = klpkg_SetRemoveIncompatibleApps(soap, soap_tmp_klpkg_SetRemoveIncompatibleApps.nPackageId, soap_tmp_klpkg_SetRemoveIncompatibleApps.bRemoveIncompatibleApps, r);
	if (soap->error)
		return soap->error;
	soap_serializeheader(soap);
	soap_serialize_klpkg_SetRemoveIncompatibleAppsResponse(soap, &r);
	soap_begin_count(soap);
	if (soap->mode & SOAP_IO_LENGTH)
	{	soap_envelope_begin_out(soap);
		soap_putheader(soap);
		soap_body_begin_out(soap);
		soap_put_klpkg_SetRemoveIncompatibleAppsResponse(soap, &r, "klpkg-SetRemoveIncompatibleAppsResponse", "");
		soap_body_end_out(soap);
		soap_envelope_end_out(soap);
	};
	if (soap_response(soap, SOAP_OK)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put_klpkg_SetRemoveIncompatibleAppsResponse(soap, &r, "klpkg-SetRemoveIncompatibleAppsResponse", "")
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap->error;
	soap_closesock(soap);
	return SOAP_OK;
}

SOAP_FMAC5 int SOAP_FMAC6 soap_serve_klrpt_GetReportTypes(struct soap *soap)
{	struct klrpt_GetReportTypes soap_tmp_klrpt_GetReportTypes;
	struct klrpt_GetReportTypesResponse r;
	soap_default_klrpt_GetReportTypesResponse(soap, &r);
	soap_default_klrpt_GetReportTypes(soap, &soap_tmp_klrpt_GetReportTypes);
	soap->encodingStyle = NULL;
	soap_get_klrpt_GetReportTypes(soap, &soap_tmp_klrpt_GetReportTypes, "klrpt-GetReportTypes", NULL);
	if (soap->error)
		return soap->error;
	
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
#ifndef WITH_LEANER
	 || soap_resolve_attachments(soap)
#endif
	 || soap_end_recv(soap))
		return soap->error;
	soap->error = klrpt_GetReportTypes(soap, soap_tmp_klrpt_GetReportTypes._, r);
	if (soap->error)
		return soap->error;
	soap_serializeheader(soap);
	soap_serialize_klrpt_GetReportTypesResponse(soap, &r);
	soap_begin_count(soap);
	if (soap->mode & SOAP_IO_LENGTH)
	{	soap_envelope_begin_out(soap);
		soap_putheader(soap);
		soap_body_begin_out(soap);
		soap_put_klrpt_GetReportTypesResponse(soap, &r, "klrpt-GetReportTypesResponse", "");
		soap_body_end_out(soap);
		soap_envelope_end_out(soap);
	};
	if (soap_response(soap, SOAP_OK)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put_klrpt_GetReportTypesResponse(soap, &r, "klrpt-GetReportTypesResponse", "")
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap->error;
	soap_closesock(soap);
	return SOAP_OK;
}

SOAP_FMAC5 int SOAP_FMAC6 soap_serve_klrpt_GetReportTypeDetailedData(struct soap *soap)
{	struct klrpt_GetReportTypeDetailedData soap_tmp_klrpt_GetReportTypeDetailedData;
	struct klrpt_GetReportTypeDetailedDataResponse r;
	soap_default_klrpt_GetReportTypeDetailedDataResponse(soap, &r);
	soap_default_klrpt_GetReportTypeDetailedData(soap, &soap_tmp_klrpt_GetReportTypeDetailedData);
	soap->encodingStyle = NULL;
	soap_get_klrpt_GetReportTypeDetailedData(soap, &soap_tmp_klrpt_GetReportTypeDetailedData, "klrpt-GetReportTypeDetailedData", NULL);
	if (soap->error)
		return soap->error;
	
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
#ifndef WITH_LEANER
	 || soap_resolve_attachments(soap)
#endif
	 || soap_end_recv(soap))
		return soap->error;
	soap->error = klrpt_GetReportTypeDetailedData(soap, soap_tmp_klrpt_GetReportTypeDetailedData.reportType, r);
	if (soap->error)
		return soap->error;
	soap_serializeheader(soap);
	soap_serialize_klrpt_GetReportTypeDetailedDataResponse(soap, &r);
	soap_begin_count(soap);
	if (soap->mode & SOAP_IO_LENGTH)
	{	soap_envelope_begin_out(soap);
		soap_putheader(soap);
		soap_body_begin_out(soap);
		soap_put_klrpt_GetReportTypeDetailedDataResponse(soap, &r, "klrpt-GetReportTypeDetailedDataResponse", "");
		soap_body_end_out(soap);
		soap_envelope_end_out(soap);
	};
	if (soap_response(soap, SOAP_OK)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put_klrpt_GetReportTypeDetailedDataResponse(soap, &r, "klrpt-GetReportTypeDetailedDataResponse", "")
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap->error;
	soap_closesock(soap);
	return SOAP_OK;
}

SOAP_FMAC5 int SOAP_FMAC6 soap_serve_klrpt_GetReportIds(struct soap *soap)
{	struct klrpt_GetReportIds soap_tmp_klrpt_GetReportIds;
	struct klrpt_GetReportIdsResponse r;
	soap_default_klrpt_GetReportIdsResponse(soap, &r);
	soap_default_klrpt_GetReportIds(soap, &soap_tmp_klrpt_GetReportIds);
	soap->encodingStyle = NULL;
	soap_get_klrpt_GetReportIds(soap, &soap_tmp_klrpt_GetReportIds, "klrpt-GetReportIds", NULL);
	if (soap->error)
		return soap->error;
	
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
#ifndef WITH_LEANER
	 || soap_resolve_attachments(soap)
#endif
	 || soap_end_recv(soap))
		return soap->error;
	soap->error = klrpt_GetReportIds(soap, soap_tmp_klrpt_GetReportIds._, r);
	if (soap->error)
		return soap->error;
	soap_serializeheader(soap);
	soap_serialize_klrpt_GetReportIdsResponse(soap, &r);
	soap_begin_count(soap);
	if (soap->mode & SOAP_IO_LENGTH)
	{	soap_envelope_begin_out(soap);
		soap_putheader(soap);
		soap_body_begin_out(soap);
		soap_put_klrpt_GetReportIdsResponse(soap, &r, "klrpt-GetReportIdsResponse", "");
		soap_body_end_out(soap);
		soap_envelope_end_out(soap);
	};
	if (soap_response(soap, SOAP_OK)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put_klrpt_GetReportIdsResponse(soap, &r, "klrpt-GetReportIdsResponse", "")
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap->error;
	soap_closesock(soap);
	return SOAP_OK;
}

SOAP_FMAC5 int SOAP_FMAC6 soap_serve_klrpt_GetReports(struct soap *soap)
{	struct klrpt_GetReports soap_tmp_klrpt_GetReports;
	struct klrpt_GetReportsResponse r;
	soap_default_klrpt_GetReportsResponse(soap, &r);
	soap_default_klrpt_GetReports(soap, &soap_tmp_klrpt_GetReports);
	soap->encodingStyle = NULL;
	soap_get_klrpt_GetReports(soap, &soap_tmp_klrpt_GetReports, "klrpt-GetReports", NULL);
	if (soap->error)
		return soap->error;
	
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
#ifndef WITH_LEANER
	 || soap_resolve_attachments(soap)
#endif
	 || soap_end_recv(soap))
		return soap->error;
	soap->error = klrpt_GetReports(soap, soap_tmp_klrpt_GetReports._, r);
	if (soap->error)
		return soap->error;
	soap_serializeheader(soap);
	soap_serialize_klrpt_GetReportsResponse(soap, &r);
	soap_begin_count(soap);
	if (soap->mode & SOAP_IO_LENGTH)
	{	soap_envelope_begin_out(soap);
		soap_putheader(soap);
		soap_body_begin_out(soap);
		soap_put_klrpt_GetReportsResponse(soap, &r, "klrpt-GetReportsResponse", "");
		soap_body_end_out(soap);
		soap_envelope_end_out(soap);
	};
	if (soap_response(soap, SOAP_OK)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put_klrpt_GetReportsResponse(soap, &r, "klrpt-GetReportsResponse", "")
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap->error;
	soap_closesock(soap);
	return SOAP_OK;
}

SOAP_FMAC5 int SOAP_FMAC6 soap_serve_klrpt_GetReportCommonData(struct soap *soap)
{	struct klrpt_GetReportCommonData soap_tmp_klrpt_GetReportCommonData;
	struct klrpt_GetReportCommonDataResponse r;
	soap_default_klrpt_GetReportCommonDataResponse(soap, &r);
	soap_default_klrpt_GetReportCommonData(soap, &soap_tmp_klrpt_GetReportCommonData);
	soap->encodingStyle = NULL;
	soap_get_klrpt_GetReportCommonData(soap, &soap_tmp_klrpt_GetReportCommonData, "klrpt-GetReportCommonData", NULL);
	if (soap->error)
		return soap->error;
	
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
#ifndef WITH_LEANER
	 || soap_resolve_attachments(soap)
#endif
	 || soap_end_recv(soap))
		return soap->error;
	soap->error = klrpt_GetReportCommonData(soap, soap_tmp_klrpt_GetReportCommonData.reportId, r);
	if (soap->error)
		return soap->error;
	soap_serializeheader(soap);
	soap_serialize_klrpt_GetReportCommonDataResponse(soap, &r);
	soap_begin_count(soap);
	if (soap->mode & SOAP_IO_LENGTH)
	{	soap_envelope_begin_out(soap);
		soap_putheader(soap);
		soap_body_begin_out(soap);
		soap_put_klrpt_GetReportCommonDataResponse(soap, &r, "klrpt-GetReportCommonDataResponse", "");
		soap_body_end_out(soap);
		soap_envelope_end_out(soap);
	};
	if (soap_response(soap, SOAP_OK)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put_klrpt_GetReportCommonDataResponse(soap, &r, "klrpt-GetReportCommonDataResponse", "")
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap->error;
	soap_closesock(soap);
	return SOAP_OK;
}

SOAP_FMAC5 int SOAP_FMAC6 soap_serve_klrpt_GetReportDetailedData(struct soap *soap)
{	struct klrpt_GetReportDetailedData soap_tmp_klrpt_GetReportDetailedData;
	struct klrpt_GetReportDetailedDataResponse r;
	soap_default_klrpt_GetReportDetailedDataResponse(soap, &r);
	soap_default_klrpt_GetReportDetailedData(soap, &soap_tmp_klrpt_GetReportDetailedData);
	soap->encodingStyle = NULL;
	soap_get_klrpt_GetReportDetailedData(soap, &soap_tmp_klrpt_GetReportDetailedData, "klrpt-GetReportDetailedData", NULL);
	if (soap->error)
		return soap->error;
	
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
#ifndef WITH_LEANER
	 || soap_resolve_attachments(soap)
#endif
	 || soap_end_recv(soap))
		return soap->error;
	soap->error = klrpt_GetReportDetailedData(soap, soap_tmp_klrpt_GetReportDetailedData.reportId, r);
	if (soap->error)
		return soap->error;
	soap_serializeheader(soap);
	soap_serialize_klrpt_GetReportDetailedDataResponse(soap, &r);
	soap_begin_count(soap);
	if (soap->mode & SOAP_IO_LENGTH)
	{	soap_envelope_begin_out(soap);
		soap_putheader(soap);
		soap_body_begin_out(soap);
		soap_put_klrpt_GetReportDetailedDataResponse(soap, &r, "klrpt-GetReportDetailedDataResponse", "");
		soap_body_end_out(soap);
		soap_envelope_end_out(soap);
	};
	if (soap_response(soap, SOAP_OK)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put_klrpt_GetReportDetailedDataResponse(soap, &r, "klrpt-GetReportDetailedDataResponse", "")
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap->error;
	soap_closesock(soap);
	return SOAP_OK;
}

SOAP_FMAC5 int SOAP_FMAC6 soap_serve_klrpt_AddReport(struct soap *soap)
{	struct klrpt_AddReport soap_tmp_klrpt_AddReport;
	struct klrpt_AddReportResponse r;
	soap_default_klrpt_AddReportResponse(soap, &r);
	soap_default_klrpt_AddReport(soap, &soap_tmp_klrpt_AddReport);
	soap->encodingStyle = NULL;
	soap_get_klrpt_AddReport(soap, &soap_tmp_klrpt_AddReport, "klrpt-AddReport", NULL);
	if (soap->error)
		return soap->error;
	
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
#ifndef WITH_LEANER
	 || soap_resolve_attachments(soap)
#endif
	 || soap_end_recv(soap))
		return soap->error;
	soap->error = klrpt_AddReport(soap, soap_tmp_klrpt_AddReport.commonData, soap_tmp_klrpt_AddReport.details, r);
	if (soap->error)
		return soap->error;
	soap_serializeheader(soap);
	soap_serialize_klrpt_AddReportResponse(soap, &r);
	soap_begin_count(soap);
	if (soap->mode & SOAP_IO_LENGTH)
	{	soap_envelope_begin_out(soap);
		soap_putheader(soap);
		soap_body_begin_out(soap);
		soap_put_klrpt_AddReportResponse(soap, &r, "klrpt-AddReportResponse", "");
		soap_body_end_out(soap);
		soap_envelope_end_out(soap);
	};
	if (soap_response(soap, SOAP_OK)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put_klrpt_AddReportResponse(soap, &r, "klrpt-AddReportResponse", "")
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap->error;
	soap_closesock(soap);
	return SOAP_OK;
}

SOAP_FMAC5 int SOAP_FMAC6 soap_serve_klrpt_UpdateReport(struct soap *soap)
{	struct klrpt_UpdateReport soap_tmp_klrpt_UpdateReport;
	struct klrpt_UpdateReportResponse r;
	soap_default_klrpt_UpdateReportResponse(soap, &r);
	soap_default_klrpt_UpdateReport(soap, &soap_tmp_klrpt_UpdateReport);
	soap->encodingStyle = NULL;
	soap_get_klrpt_UpdateReport(soap, &soap_tmp_klrpt_UpdateReport, "klrpt-UpdateReport", NULL);
	if (soap->error)
		return soap->error;
	
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
#ifndef WITH_LEANER
	 || soap_resolve_attachments(soap)
#endif
	 || soap_end_recv(soap))
		return soap->error;
	soap->error = klrpt_UpdateReport(soap, soap_tmp_klrpt_UpdateReport.commonData, soap_tmp_klrpt_UpdateReport.details, r);
	if (soap->error)
		return soap->error;
	soap_serializeheader(soap);
	soap_serialize_klrpt_UpdateReportResponse(soap, &r);
	soap_begin_count(soap);
	if (soap->mode & SOAP_IO_LENGTH)
	{	soap_envelope_begin_out(soap);
		soap_putheader(soap);
		soap_body_begin_out(soap);
		soap_put_klrpt_UpdateReportResponse(soap, &r, "klrpt-UpdateReportResponse", "");
		soap_body_end_out(soap);
		soap_envelope_end_out(soap);
	};
	if (soap_response(soap, SOAP_OK)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put_klrpt_UpdateReportResponse(soap, &r, "klrpt-UpdateReportResponse", "")
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap->error;
	soap_closesock(soap);
	return SOAP_OK;
}

SOAP_FMAC5 int SOAP_FMAC6 soap_serve_klrpt_DeleteReport(struct soap *soap)
{	struct klrpt_DeleteReport soap_tmp_klrpt_DeleteReport;
	struct klrpt_DeleteReportResponse r;
	soap_default_klrpt_DeleteReportResponse(soap, &r);
	soap_default_klrpt_DeleteReport(soap, &soap_tmp_klrpt_DeleteReport);
	soap->encodingStyle = NULL;
	soap_get_klrpt_DeleteReport(soap, &soap_tmp_klrpt_DeleteReport, "klrpt-DeleteReport", NULL);
	if (soap->error)
		return soap->error;
	
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
#ifndef WITH_LEANER
	 || soap_resolve_attachments(soap)
#endif
	 || soap_end_recv(soap))
		return soap->error;
	soap->error = klrpt_DeleteReport(soap, soap_tmp_klrpt_DeleteReport.reportId, r);
	if (soap->error)
		return soap->error;
	soap_serializeheader(soap);
	soap_serialize_klrpt_DeleteReportResponse(soap, &r);
	soap_begin_count(soap);
	if (soap->mode & SOAP_IO_LENGTH)
	{	soap_envelope_begin_out(soap);
		soap_putheader(soap);
		soap_body_begin_out(soap);
		soap_put_klrpt_DeleteReportResponse(soap, &r, "klrpt-DeleteReportResponse", "");
		soap_body_end_out(soap);
		soap_envelope_end_out(soap);
	};
	if (soap_response(soap, SOAP_OK)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put_klrpt_DeleteReportResponse(soap, &r, "klrpt-DeleteReportResponse", "")
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap->error;
	soap_closesock(soap);
	return SOAP_OK;
}

SOAP_FMAC5 int SOAP_FMAC6 soap_serve_klrpt_ExecuteReport(struct soap *soap)
{	struct klrpt_ExecuteReport soap_tmp_klrpt_ExecuteReport;
	struct klrpt_ExecuteReportResponse r;
	soap_default_klrpt_ExecuteReportResponse(soap, &r);
	soap_default_klrpt_ExecuteReport(soap, &soap_tmp_klrpt_ExecuteReport);
	soap->encodingStyle = NULL;
	soap_get_klrpt_ExecuteReport(soap, &soap_tmp_klrpt_ExecuteReport, "klrpt-ExecuteReport", NULL);
	if (soap->error)
		return soap->error;
	
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
#ifndef WITH_LEANER
	 || soap_resolve_attachments(soap)
#endif
	 || soap_end_recv(soap))
		return soap->error;
	soap->error = klrpt_ExecuteReport(soap, soap_tmp_klrpt_ExecuteReport.reportId, soap_tmp_klrpt_ExecuteReport.input, r);
	if (soap->error)
		return soap->error;
	soap_serializeheader(soap);
	soap_serialize_klrpt_ExecuteReportResponse(soap, &r);
	soap_begin_count(soap);
	if (soap->mode & SOAP_IO_LENGTH)
	{	soap_envelope_begin_out(soap);
		soap_putheader(soap);
		soap_body_begin_out(soap);
		soap_put_klrpt_ExecuteReportResponse(soap, &r, "klrpt-ExecuteReportResponse", "");
		soap_body_end_out(soap);
		soap_envelope_end_out(soap);
	};
	if (soap_response(soap, SOAP_OK)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put_klrpt_ExecuteReportResponse(soap, &r, "klrpt-ExecuteReportResponse", "")
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap->error;
	soap_closesock(soap);
	return SOAP_OK;
}

SOAP_FMAC5 int SOAP_FMAC6 soap_serve_klrpt_GetConstantOutputForReportType(struct soap *soap)
{	struct klrpt_GetConstantOutputForReportType soap_tmp_klrpt_GetConstantOutputForReportType;
	struct klrpt_GetConstantOutputForReportTypeResponse r;
	soap_default_klrpt_GetConstantOutputForReportTypeResponse(soap, &r);
	soap_default_klrpt_GetConstantOutputForReportType(soap, &soap_tmp_klrpt_GetConstantOutputForReportType);
	soap->encodingStyle = NULL;
	soap_get_klrpt_GetConstantOutputForReportType(soap, &soap_tmp_klrpt_GetConstantOutputForReportType, "klrpt-GetConstantOutputForReportType", NULL);
	if (soap->error)
		return soap->error;
	
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
#ifndef WITH_LEANER
	 || soap_resolve_attachments(soap)
#endif
	 || soap_end_recv(soap))
		return soap->error;
	soap->error = klrpt_GetConstantOutputForReportType(soap, soap_tmp_klrpt_GetConstantOutputForReportType.reportType, soap_tmp_klrpt_GetConstantOutputForReportType.xmlTargetType, r);
	if (soap->error)
		return soap->error;
	soap_serializeheader(soap);
	soap_serialize_klrpt_GetConstantOutputForReportTypeResponse(soap, &r);
	soap_begin_count(soap);
	if (soap->mode & SOAP_IO_LENGTH)
	{	soap_envelope_begin_out(soap);
		soap_putheader(soap);
		soap_body_begin_out(soap);
		soap_put_klrpt_GetConstantOutputForReportTypeResponse(soap, &r, "klrpt-GetConstantOutputForReportTypeResponse", "");
		soap_body_end_out(soap);
		soap_envelope_end_out(soap);
	};
	if (soap_response(soap, SOAP_OK)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put_klrpt_GetConstantOutputForReportTypeResponse(soap, &r, "klrpt-GetConstantOutputForReportTypeResponse", "")
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap->error;
	soap_closesock(soap);
	return SOAP_OK;
}

SOAP_FMAC5 int SOAP_FMAC6 soap_serve_klrpt_CreateDefaultReportData(struct soap *soap)
{	struct klrpt_CreateDefaultReportData soap_tmp_klrpt_CreateDefaultReportData;
	struct klrpt_CreateDefaultReportDataResponse r;
	soap_default_klrpt_CreateDefaultReportDataResponse(soap, &r);
	soap_default_klrpt_CreateDefaultReportData(soap, &soap_tmp_klrpt_CreateDefaultReportData);
	soap->encodingStyle = NULL;
	soap_get_klrpt_CreateDefaultReportData(soap, &soap_tmp_klrpt_CreateDefaultReportData, "klrpt-CreateDefaultReportData", NULL);
	if (soap->error)
		return soap->error;
	
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
#ifndef WITH_LEANER
	 || soap_resolve_attachments(soap)
#endif
	 || soap_end_recv(soap))
		return soap->error;
	soap->error = klrpt_CreateDefaultReportData(soap, soap_tmp_klrpt_CreateDefaultReportData.reportType, r);
	if (soap->error)
		return soap->error;
	soap_serializeheader(soap);
	soap_serialize_klrpt_CreateDefaultReportDataResponse(soap, &r);
	soap_begin_count(soap);
	if (soap->mode & SOAP_IO_LENGTH)
	{	soap_envelope_begin_out(soap);
		soap_putheader(soap);
		soap_body_begin_out(soap);
		soap_put_klrpt_CreateDefaultReportDataResponse(soap, &r, "klrpt-CreateDefaultReportDataResponse", "");
		soap_body_end_out(soap);
		soap_envelope_end_out(soap);
	};
	if (soap_response(soap, SOAP_OK)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put_klrpt_CreateDefaultReportDataResponse(soap, &r, "klrpt-CreateDefaultReportDataResponse", "")
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap->error;
	soap_closesock(soap);
	return SOAP_OK;
}

SOAP_FMAC5 int SOAP_FMAC6 soap_serve_klrpt_ExecuteReportAsync(struct soap *soap)
{	struct klrpt_ExecuteReportAsync soap_tmp_klrpt_ExecuteReportAsync;
	struct klrpt_ExecuteReportAsyncResponse r;
	soap_default_klrpt_ExecuteReportAsyncResponse(soap, &r);
	soap_default_klrpt_ExecuteReportAsync(soap, &soap_tmp_klrpt_ExecuteReportAsync);
	soap->encodingStyle = NULL;
	soap_get_klrpt_ExecuteReportAsync(soap, &soap_tmp_klrpt_ExecuteReportAsync, "klrpt-ExecuteReportAsync", NULL);
	if (soap->error)
		return soap->error;
	
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
#ifndef WITH_LEANER
	 || soap_resolve_attachments(soap)
#endif
	 || soap_end_recv(soap))
		return soap->error;
	soap->error = klrpt_ExecuteReportAsync(soap, soap_tmp_klrpt_ExecuteReportAsync.reportId, soap_tmp_klrpt_ExecuteReportAsync.wstrAsyncRequestId, soap_tmp_klrpt_ExecuteReportAsync.input, r);
	if (soap->error)
		return soap->error;
	soap_serializeheader(soap);
	soap_serialize_klrpt_ExecuteReportAsyncResponse(soap, &r);
	soap_begin_count(soap);
	if (soap->mode & SOAP_IO_LENGTH)
	{	soap_envelope_begin_out(soap);
		soap_putheader(soap);
		soap_body_begin_out(soap);
		soap_put_klrpt_ExecuteReportAsyncResponse(soap, &r, "klrpt-ExecuteReportAsyncResponse", "");
		soap_body_end_out(soap);
		soap_envelope_end_out(soap);
	};
	if (soap_response(soap, SOAP_OK)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put_klrpt_ExecuteReportAsyncResponse(soap, &r, "klrpt-ExecuteReportAsyncResponse", "")
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap->error;
	soap_closesock(soap);
	return SOAP_OK;
}

SOAP_FMAC5 int SOAP_FMAC6 soap_serve_klrpt_ExecuteReportAsyncCancel(struct soap *soap)
{	struct klrpt_ExecuteReportAsyncCancel soap_tmp_klrpt_ExecuteReportAsyncCancel;
	struct klrpt_ExecuteReportAsyncCancelResponse r;
	soap_default_klrpt_ExecuteReportAsyncCancelResponse(soap, &r);
	soap_default_klrpt_ExecuteReportAsyncCancel(soap, &soap_tmp_klrpt_ExecuteReportAsyncCancel);
	soap->encodingStyle = NULL;
	soap_get_klrpt_ExecuteReportAsyncCancel(soap, &soap_tmp_klrpt_ExecuteReportAsyncCancel, "klrpt-ExecuteReportAsyncCancel", NULL);
	if (soap->error)
		return soap->error;
	
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
#ifndef WITH_LEANER
	 || soap_resolve_attachments(soap)
#endif
	 || soap_end_recv(soap))
		return soap->error;
	soap->error = klrpt_ExecuteReportAsyncCancel(soap, soap_tmp_klrpt_ExecuteReportAsyncCancel.wstrAsyncRequestId, r);
	if (soap->error)
		return soap->error;
	soap_serializeheader(soap);
	soap_serialize_klrpt_ExecuteReportAsyncCancelResponse(soap, &r);
	soap_begin_count(soap);
	if (soap->mode & SOAP_IO_LENGTH)
	{	soap_envelope_begin_out(soap);
		soap_putheader(soap);
		soap_body_begin_out(soap);
		soap_put_klrpt_ExecuteReportAsyncCancelResponse(soap, &r, "klrpt-ExecuteReportAsyncCancelResponse", "");
		soap_body_end_out(soap);
		soap_envelope_end_out(soap);
	};
	if (soap_response(soap, SOAP_OK)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put_klrpt_ExecuteReportAsyncCancelResponse(soap, &r, "klrpt-ExecuteReportAsyncCancelResponse", "")
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap->error;
	soap_closesock(soap);
	return SOAP_OK;
}

SOAP_FMAC5 int SOAP_FMAC6 soap_serve_klrpt_ExecuteReportAsyncGetData(struct soap *soap)
{	struct klrpt_ExecuteReportAsyncGetData soap_tmp_klrpt_ExecuteReportAsyncGetData;
	struct klrpt_ExecuteReportAsyncGetDataResponse r;
	soap_default_klrpt_ExecuteReportAsyncGetDataResponse(soap, &r);
	soap_default_klrpt_ExecuteReportAsyncGetData(soap, &soap_tmp_klrpt_ExecuteReportAsyncGetData);
	soap->encodingStyle = NULL;
	soap_get_klrpt_ExecuteReportAsyncGetData(soap, &soap_tmp_klrpt_ExecuteReportAsyncGetData, "klrpt-ExecuteReportAsyncGetData", NULL);
	if (soap->error)
		return soap->error;
	
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
#ifndef WITH_LEANER
	 || soap_resolve_attachments(soap)
#endif
	 || soap_end_recv(soap))
		return soap->error;
	soap->error = klrpt_ExecuteReportAsyncGetData(soap, soap_tmp_klrpt_ExecuteReportAsyncGetData.wstrAsyncRequestId, soap_tmp_klrpt_ExecuteReportAsyncGetData.nMaxDataChunkSize, r);
	if (soap->error)
		return soap->error;
	soap_serializeheader(soap);
	soap_serialize_klrpt_ExecuteReportAsyncGetDataResponse(soap, &r);
	soap_begin_count(soap);
	if (soap->mode & SOAP_IO_LENGTH)
	{	soap_envelope_begin_out(soap);
		soap_putheader(soap);
		soap_body_begin_out(soap);
		soap_put_klrpt_ExecuteReportAsyncGetDataResponse(soap, &r, "klrpt-ExecuteReportAsyncGetDataResponse", "");
		soap_body_end_out(soap);
		soap_envelope_end_out(soap);
	};
	if (soap_response(soap, SOAP_OK)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put_klrpt_ExecuteReportAsyncGetDataResponse(soap, &r, "klrpt-ExecuteReportAsyncGetDataResponse", "")
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap->error;
	soap_closesock(soap);
	return SOAP_OK;
}

SOAP_FMAC5 int SOAP_FMAC6 soap_serve_klrpt_ExecuteSlaveReportAsync(struct soap *soap)
{	struct klrpt_ExecuteSlaveReportAsync soap_tmp_klrpt_ExecuteSlaveReportAsync;
	struct klrpt_ExecuteSlaveReportAsyncResponse r;
	soap_default_klrpt_ExecuteSlaveReportAsyncResponse(soap, &r);
	soap_default_klrpt_ExecuteSlaveReportAsync(soap, &soap_tmp_klrpt_ExecuteSlaveReportAsync);
	soap->encodingStyle = NULL;
	soap_get_klrpt_ExecuteSlaveReportAsync(soap, &soap_tmp_klrpt_ExecuteSlaveReportAsync, "klrpt-ExecuteSlaveReportAsync", NULL);
	if (soap->error)
		return soap->error;
	
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
#ifndef WITH_LEANER
	 || soap_resolve_attachments(soap)
#endif
	 || soap_end_recv(soap))
		return soap->error;
	soap->error = klrpt_ExecuteSlaveReportAsync(soap, soap_tmp_klrpt_ExecuteSlaveReportAsync.commonData, soap_tmp_klrpt_ExecuteSlaveReportAsync.details, soap_tmp_klrpt_ExecuteSlaveReportAsync.paramLocalData, soap_tmp_klrpt_ExecuteSlaveReportAsync.wstrAsyncRequestId, soap_tmp_klrpt_ExecuteSlaveReportAsync.nTimeoutInSec, r);
	if (soap->error)
		return soap->error;
	soap_serializeheader(soap);
	soap_serialize_klrpt_ExecuteSlaveReportAsyncResponse(soap, &r);
	soap_begin_count(soap);
	if (soap->mode & SOAP_IO_LENGTH)
	{	soap_envelope_begin_out(soap);
		soap_putheader(soap);
		soap_body_begin_out(soap);
		soap_put_klrpt_ExecuteSlaveReportAsyncResponse(soap, &r, "klrpt-ExecuteSlaveReportAsyncResponse", "");
		soap_body_end_out(soap);
		soap_envelope_end_out(soap);
	};
	if (soap_response(soap, SOAP_OK)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put_klrpt_ExecuteSlaveReportAsyncResponse(soap, &r, "klrpt-ExecuteSlaveReportAsyncResponse", "")
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap->error;
	soap_closesock(soap);
	return SOAP_OK;
}

SOAP_FMAC5 int SOAP_FMAC6 soap_serve_klrpt_ExecuteSlaveReportAsyncCancel(struct soap *soap)
{	struct klrpt_ExecuteSlaveReportAsyncCancel soap_tmp_klrpt_ExecuteSlaveReportAsyncCancel;
	struct klrpt_ExecuteSlaveReportAsyncCancelResponse r;
	soap_default_klrpt_ExecuteSlaveReportAsyncCancelResponse(soap, &r);
	soap_default_klrpt_ExecuteSlaveReportAsyncCancel(soap, &soap_tmp_klrpt_ExecuteSlaveReportAsyncCancel);
	soap->encodingStyle = NULL;
	soap_get_klrpt_ExecuteSlaveReportAsyncCancel(soap, &soap_tmp_klrpt_ExecuteSlaveReportAsyncCancel, "klrpt-ExecuteSlaveReportAsyncCancel", NULL);
	if (soap->error)
		return soap->error;
	
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
#ifndef WITH_LEANER
	 || soap_resolve_attachments(soap)
#endif
	 || soap_end_recv(soap))
		return soap->error;
	soap->error = klrpt_ExecuteSlaveReportAsyncCancel(soap, soap_tmp_klrpt_ExecuteSlaveReportAsyncCancel.wstrAsyncRequestId, r);
	if (soap->error)
		return soap->error;
	soap_serializeheader(soap);
	soap_serialize_klrpt_ExecuteSlaveReportAsyncCancelResponse(soap, &r);
	soap_begin_count(soap);
	if (soap->mode & SOAP_IO_LENGTH)
	{	soap_envelope_begin_out(soap);
		soap_putheader(soap);
		soap_body_begin_out(soap);
		soap_put_klrpt_ExecuteSlaveReportAsyncCancelResponse(soap, &r, "klrpt-ExecuteSlaveReportAsyncCancelResponse", "");
		soap_body_end_out(soap);
		soap_envelope_end_out(soap);
	};
	if (soap_response(soap, SOAP_OK)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put_klrpt_ExecuteSlaveReportAsyncCancelResponse(soap, &r, "klrpt-ExecuteSlaveReportAsyncCancelResponse", "")
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap->error;
	soap_closesock(soap);
	return SOAP_OK;
}

SOAP_FMAC5 int SOAP_FMAC6 soap_serve_klrpt_ExecuteSlaveReportAsyncGetData(struct soap *soap)
{	struct klrpt_ExecuteSlaveReportAsyncGetData soap_tmp_klrpt_ExecuteSlaveReportAsyncGetData;
	struct klrpt_ExecuteSlaveReportAsyncGetDataResponse r;
	soap_default_klrpt_ExecuteSlaveReportAsyncGetDataResponse(soap, &r);
	soap_default_klrpt_ExecuteSlaveReportAsyncGetData(soap, &soap_tmp_klrpt_ExecuteSlaveReportAsyncGetData);
	soap->encodingStyle = NULL;
	soap_get_klrpt_ExecuteSlaveReportAsyncGetData(soap, &soap_tmp_klrpt_ExecuteSlaveReportAsyncGetData, "klrpt-ExecuteSlaveReportAsyncGetData", NULL);
	if (soap->error)
		return soap->error;
	
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
#ifndef WITH_LEANER
	 || soap_resolve_attachments(soap)
#endif
	 || soap_end_recv(soap))
		return soap->error;
	soap->error = klrpt_ExecuteSlaveReportAsyncGetData(soap, soap_tmp_klrpt_ExecuteSlaveReportAsyncGetData.wstrAsyncRequestId, soap_tmp_klrpt_ExecuteSlaveReportAsyncGetData.nRecordsCount, r);
	if (soap->error)
		return soap->error;
	soap_serializeheader(soap);
	soap_serialize_klrpt_ExecuteSlaveReportAsyncGetDataResponse(soap, &r);
	soap_begin_count(soap);
	if (soap->mode & SOAP_IO_LENGTH)
	{	soap_envelope_begin_out(soap);
		soap_putheader(soap);
		soap_body_begin_out(soap);
		soap_put_klrpt_ExecuteSlaveReportAsyncGetDataResponse(soap, &r, "klrpt-ExecuteSlaveReportAsyncGetDataResponse", "");
		soap_body_end_out(soap);
		soap_envelope_end_out(soap);
	};
	if (soap_response(soap, SOAP_OK)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put_klrpt_ExecuteSlaveReportAsyncGetDataResponse(soap, &r, "klrpt-ExecuteSlaveReportAsyncGetDataResponse", "")
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap->error;
	soap_closesock(soap);
	return SOAP_OK;
}

SOAP_FMAC5 int SOAP_FMAC6 soap_serve_klrpt_RequestStatisticsData(struct soap *soap)
{	struct klrpt_RequestStatisticsData soap_tmp_klrpt_RequestStatisticsData;
	struct klrpt_RequestStatisticsDataResponse r;
	soap_default_klrpt_RequestStatisticsDataResponse(soap, &r);
	soap_default_klrpt_RequestStatisticsData(soap, &soap_tmp_klrpt_RequestStatisticsData);
	soap->encodingStyle = NULL;
	soap_get_klrpt_RequestStatisticsData(soap, &soap_tmp_klrpt_RequestStatisticsData, "klrpt-RequestStatisticsData", NULL);
	if (soap->error)
		return soap->error;
	
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
#ifndef WITH_LEANER
	 || soap_resolve_attachments(soap)
#endif
	 || soap_end_recv(soap))
		return soap->error;
	soap->error = klrpt_RequestStatisticsData(soap, soap_tmp_klrpt_RequestStatisticsData.paramRequestParams, soap_tmp_klrpt_RequestStatisticsData.wstrRequestId, r);
	if (soap->error)
		return soap->error;
	soap_serializeheader(soap);
	soap_serialize_klrpt_RequestStatisticsDataResponse(soap, &r);
	soap_begin_count(soap);
	if (soap->mode & SOAP_IO_LENGTH)
	{	soap_envelope_begin_out(soap);
		soap_putheader(soap);
		soap_body_begin_out(soap);
		soap_put_klrpt_RequestStatisticsDataResponse(soap, &r, "klrpt-RequestStatisticsDataResponse", "");
		soap_body_end_out(soap);
		soap_envelope_end_out(soap);
	};
	if (soap_response(soap, SOAP_OK)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put_klrpt_RequestStatisticsDataResponse(soap, &r, "klrpt-RequestStatisticsDataResponse", "")
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap->error;
	soap_closesock(soap);
	return SOAP_OK;
}

SOAP_FMAC5 int SOAP_FMAC6 soap_serve_klrpt_CancelStatisticsRequest(struct soap *soap)
{	struct klrpt_CancelStatisticsRequest soap_tmp_klrpt_CancelStatisticsRequest;
	struct klrpt_CancelStatisticsRequestResponse r;
	soap_default_klrpt_CancelStatisticsRequestResponse(soap, &r);
	soap_default_klrpt_CancelStatisticsRequest(soap, &soap_tmp_klrpt_CancelStatisticsRequest);
	soap->encodingStyle = NULL;
	soap_get_klrpt_CancelStatisticsRequest(soap, &soap_tmp_klrpt_CancelStatisticsRequest, "klrpt-CancelStatisticsRequest", NULL);
	if (soap->error)
		return soap->error;
	
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
#ifndef WITH_LEANER
	 || soap_resolve_attachments(soap)
#endif
	 || soap_end_recv(soap))
		return soap->error;
	soap->error = klrpt_CancelStatisticsRequest(soap, soap_tmp_klrpt_CancelStatisticsRequest.wstrRequestId, r);
	if (soap->error)
		return soap->error;
	soap_serializeheader(soap);
	soap_serialize_klrpt_CancelStatisticsRequestResponse(soap, &r);
	soap_begin_count(soap);
	if (soap->mode & SOAP_IO_LENGTH)
	{	soap_envelope_begin_out(soap);
		soap_putheader(soap);
		soap_body_begin_out(soap);
		soap_put_klrpt_CancelStatisticsRequestResponse(soap, &r, "klrpt-CancelStatisticsRequestResponse", "");
		soap_body_end_out(soap);
		soap_envelope_end_out(soap);
	};
	if (soap_response(soap, SOAP_OK)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put_klrpt_CancelStatisticsRequestResponse(soap, &r, "klrpt-CancelStatisticsRequestResponse", "")
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap->error;
	soap_closesock(soap);
	return SOAP_OK;
}

SOAP_FMAC5 int SOAP_FMAC6 soap_serve_klrpt_GetStatisticsData(struct soap *soap)
{	struct klrpt_GetStatisticsData soap_tmp_klrpt_GetStatisticsData;
	struct klrpt_GetStatisticsDataResponse r;
	soap_default_klrpt_GetStatisticsDataResponse(soap, &r);
	soap_default_klrpt_GetStatisticsData(soap, &soap_tmp_klrpt_GetStatisticsData);
	soap->encodingStyle = NULL;
	soap_get_klrpt_GetStatisticsData(soap, &soap_tmp_klrpt_GetStatisticsData, "klrpt-GetStatisticsData", NULL);
	if (soap->error)
		return soap->error;
	
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
#ifndef WITH_LEANER
	 || soap_resolve_attachments(soap)
#endif
	 || soap_end_recv(soap))
		return soap->error;
	soap->error = klrpt_GetStatisticsData(soap, soap_tmp_klrpt_GetStatisticsData.wstrRequestId, r);
	if (soap->error)
		return soap->error;
	soap_serializeheader(soap);
	soap_serialize_klrpt_GetStatisticsDataResponse(soap, &r);
	soap_begin_count(soap);
	if (soap->mode & SOAP_IO_LENGTH)
	{	soap_envelope_begin_out(soap);
		soap_putheader(soap);
		soap_body_begin_out(soap);
		soap_put_klrpt_GetStatisticsDataResponse(soap, &r, "klrpt-GetStatisticsDataResponse", "");
		soap_body_end_out(soap);
		soap_envelope_end_out(soap);
	};
	if (soap_response(soap, SOAP_OK)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put_klrpt_GetStatisticsDataResponse(soap, &r, "klrpt-GetStatisticsDataResponse", "")
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap->error;
	soap_closesock(soap);
	return SOAP_OK;
}

SOAP_FMAC5 int SOAP_FMAC6 soap_serve_klrpt_GetFilterSettings(struct soap *soap)
{	struct klrpt_GetFilterSettings soap_tmp_klrpt_GetFilterSettings;
	struct klrpt_GetFilterSettingsResponse r;
	soap_default_klrpt_GetFilterSettingsResponse(soap, &r);
	soap_default_klrpt_GetFilterSettings(soap, &soap_tmp_klrpt_GetFilterSettings);
	soap->encodingStyle = NULL;
	soap_get_klrpt_GetFilterSettings(soap, &soap_tmp_klrpt_GetFilterSettings, "klrpt-GetFilterSettings", NULL);
	if (soap->error)
		return soap->error;
	
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
#ifndef WITH_LEANER
	 || soap_resolve_attachments(soap)
#endif
	 || soap_end_recv(soap))
		return soap->error;
	soap->error = klrpt_GetFilterSettings(soap, soap_tmp_klrpt_GetFilterSettings.reportType, r);
	if (soap->error)
		return soap->error;
	soap_serializeheader(soap);
	soap_serialize_klrpt_GetFilterSettingsResponse(soap, &r);
	soap_begin_count(soap);
	if (soap->mode & SOAP_IO_LENGTH)
	{	soap_envelope_begin_out(soap);
		soap_putheader(soap);
		soap_body_begin_out(soap);
		soap_put_klrpt_GetFilterSettingsResponse(soap, &r, "klrpt-GetFilterSettingsResponse", "");
		soap_body_end_out(soap);
		soap_envelope_end_out(soap);
	};
	if (soap_response(soap, SOAP_OK)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put_klrpt_GetFilterSettingsResponse(soap, &r, "klrpt-GetFilterSettingsResponse", "")
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap->error;
	soap_closesock(soap);
	return SOAP_OK;
}

SOAP_FMAC5 int SOAP_FMAC6 soap_serve_klrpt_ExecuteReportAsyncCancelWaitingForSlaves(struct soap *soap)
{	struct klrpt_ExecuteReportAsyncCancelWaitingForSlaves soap_tmp_klrpt_ExecuteReportAsyncCancelWaitingForSlaves;
	struct klrpt_ExecuteReportAsyncCancelWaitingForSlavesResponse r;
	soap_default_klrpt_ExecuteReportAsyncCancelWaitingForSlavesResponse(soap, &r);
	soap_default_klrpt_ExecuteReportAsyncCancelWaitingForSlaves(soap, &soap_tmp_klrpt_ExecuteReportAsyncCancelWaitingForSlaves);
	soap->encodingStyle = NULL;
	soap_get_klrpt_ExecuteReportAsyncCancelWaitingForSlaves(soap, &soap_tmp_klrpt_ExecuteReportAsyncCancelWaitingForSlaves, "klrpt-ExecuteReportAsyncCancelWaitingForSlaves", NULL);
	if (soap->error)
		return soap->error;
	
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
#ifndef WITH_LEANER
	 || soap_resolve_attachments(soap)
#endif
	 || soap_end_recv(soap))
		return soap->error;
	soap->error = klrpt_ExecuteReportAsyncCancelWaitingForSlaves(soap, soap_tmp_klrpt_ExecuteReportAsyncCancelWaitingForSlaves.wstrAsyncRequestId, r);
	if (soap->error)
		return soap->error;
	soap_serializeheader(soap);
	soap_serialize_klrpt_ExecuteReportAsyncCancelWaitingForSlavesResponse(soap, &r);
	soap_begin_count(soap);
	if (soap->mode & SOAP_IO_LENGTH)
	{	soap_envelope_begin_out(soap);
		soap_putheader(soap);
		soap_body_begin_out(soap);
		soap_put_klrpt_ExecuteReportAsyncCancelWaitingForSlavesResponse(soap, &r, "klrpt-ExecuteReportAsyncCancelWaitingForSlavesResponse", "");
		soap_body_end_out(soap);
		soap_envelope_end_out(soap);
	};
	if (soap_response(soap, SOAP_OK)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put_klrpt_ExecuteReportAsyncCancelWaitingForSlavesResponse(soap, &r, "klrpt-ExecuteReportAsyncCancelWaitingForSlavesResponse", "")
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap->error;
	soap_closesock(soap);
	return SOAP_OK;
}

SOAP_FMAC5 int SOAP_FMAC6 soap_serve_klrpt_ResetStatisticsData(struct soap *soap)
{	struct klrpt_ResetStatisticsData soap_tmp_klrpt_ResetStatisticsData;
	struct klrpt_ResetStatisticsDataResponse r;
	soap_default_klrpt_ResetStatisticsDataResponse(soap, &r);
	soap_default_klrpt_ResetStatisticsData(soap, &soap_tmp_klrpt_ResetStatisticsData);
	soap->encodingStyle = NULL;
	soap_get_klrpt_ResetStatisticsData(soap, &soap_tmp_klrpt_ResetStatisticsData, "klrpt-ResetStatisticsData", NULL);
	if (soap->error)
		return soap->error;
	
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
#ifndef WITH_LEANER
	 || soap_resolve_attachments(soap)
#endif
	 || soap_end_recv(soap))
		return soap->error;
	soap->error = klrpt_ResetStatisticsData(soap, soap_tmp_klrpt_ResetStatisticsData.paramRequestParams, r);
	if (soap->error)
		return soap->error;
	soap_serializeheader(soap);
	soap_serialize_klrpt_ResetStatisticsDataResponse(soap, &r);
	soap_begin_count(soap);
	if (soap->mode & SOAP_IO_LENGTH)
	{	soap_envelope_begin_out(soap);
		soap_putheader(soap);
		soap_body_begin_out(soap);
		soap_put_klrpt_ResetStatisticsDataResponse(soap, &r, "klrpt-ResetStatisticsDataResponse", "");
		soap_body_end_out(soap);
		soap_envelope_end_out(soap);
	};
	if (soap_response(soap, SOAP_OK)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put_klrpt_ResetStatisticsDataResponse(soap, &r, "klrpt-ResetStatisticsDataResponse", "")
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap->error;
	soap_closesock(soap);
	return SOAP_OK;
}

SOAP_FMAC5 int SOAP_FMAC6 soap_serve_klsrvh_GetChildServers(struct soap *soap)
{	struct klsrvh_GetChildServers soap_tmp_klsrvh_GetChildServers;
	struct klsrvh_GetChildServersResponse r;
	soap_default_klsrvh_GetChildServersResponse(soap, &r);
	soap_default_klsrvh_GetChildServers(soap, &soap_tmp_klsrvh_GetChildServers);
	soap->encodingStyle = NULL;
	soap_get_klsrvh_GetChildServers(soap, &soap_tmp_klsrvh_GetChildServers, "klsrvh-GetChildServers", NULL);
	if (soap->error)
		return soap->error;
	
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
#ifndef WITH_LEANER
	 || soap_resolve_attachments(soap)
#endif
	 || soap_end_recv(soap))
		return soap->error;
	soap->error = klsrvh_GetChildServers(soap, soap_tmp_klsrvh_GetChildServers.nGroupId, r);
	if (soap->error)
		return soap->error;
	soap_serializeheader(soap);
	soap_serialize_klsrvh_GetChildServersResponse(soap, &r);
	soap_begin_count(soap);
	if (soap->mode & SOAP_IO_LENGTH)
	{	soap_envelope_begin_out(soap);
		soap_putheader(soap);
		soap_body_begin_out(soap);
		soap_put_klsrvh_GetChildServersResponse(soap, &r, "klsrvh-GetChildServersResponse", "");
		soap_body_end_out(soap);
		soap_envelope_end_out(soap);
	};
	if (soap_response(soap, SOAP_OK)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put_klsrvh_GetChildServersResponse(soap, &r, "klsrvh-GetChildServersResponse", "")
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap->error;
	soap_closesock(soap);
	return SOAP_OK;
}

SOAP_FMAC5 int SOAP_FMAC6 soap_serve_klsrvh_GetServerInfo(struct soap *soap)
{	struct klsrvh_GetServerInfo soap_tmp_klsrvh_GetServerInfo;
	struct klsrvh_GetServerInfoResponse r;
	soap_default_klsrvh_GetServerInfoResponse(soap, &r);
	soap_default_klsrvh_GetServerInfo(soap, &soap_tmp_klsrvh_GetServerInfo);
	soap->encodingStyle = NULL;
	soap_get_klsrvh_GetServerInfo(soap, &soap_tmp_klsrvh_GetServerInfo, "klsrvh-GetServerInfo", NULL);
	if (soap->error)
		return soap->error;
	
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
#ifndef WITH_LEANER
	 || soap_resolve_attachments(soap)
#endif
	 || soap_end_recv(soap))
		return soap->error;
	soap->error = klsrvh_GetServerInfo(soap, soap_tmp_klsrvh_GetServerInfo.nId, soap_tmp_klsrvh_GetServerInfo.fields, r);
	if (soap->error)
		return soap->error;
	soap_serializeheader(soap);
	soap_serialize_klsrvh_GetServerInfoResponse(soap, &r);
	soap_begin_count(soap);
	if (soap->mode & SOAP_IO_LENGTH)
	{	soap_envelope_begin_out(soap);
		soap_putheader(soap);
		soap_body_begin_out(soap);
		soap_put_klsrvh_GetServerInfoResponse(soap, &r, "klsrvh-GetServerInfoResponse", "");
		soap_body_end_out(soap);
		soap_envelope_end_out(soap);
	};
	if (soap_response(soap, SOAP_OK)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put_klsrvh_GetServerInfoResponse(soap, &r, "klsrvh-GetServerInfoResponse", "")
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap->error;
	soap_closesock(soap);
	return SOAP_OK;
}

SOAP_FMAC5 int SOAP_FMAC6 soap_serve_klsrvh_RegisterServer(struct soap *soap)
{	struct klsrvh_RegisterServer soap_tmp_klsrvh_RegisterServer;
	struct klsrvh_RegisterServerResponse r;
	soap_default_klsrvh_RegisterServerResponse(soap, &r);
	soap_default_klsrvh_RegisterServer(soap, &soap_tmp_klsrvh_RegisterServer);
	soap->encodingStyle = NULL;
	soap_get_klsrvh_RegisterServer(soap, &soap_tmp_klsrvh_RegisterServer, "klsrvh-RegisterServer", NULL);
	if (soap->error)
		return soap->error;
	
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
#ifndef WITH_LEANER
	 || soap_resolve_attachments(soap)
#endif
	 || soap_end_recv(soap))
		return soap->error;
	soap->error = klsrvh_RegisterServer(soap, soap_tmp_klsrvh_RegisterServer.baseInfo, soap_tmp_klsrvh_RegisterServer.addInfo, r);
	if (soap->error)
		return soap->error;
	soap_serializeheader(soap);
	soap_serialize_klsrvh_RegisterServerResponse(soap, &r);
	soap_begin_count(soap);
	if (soap->mode & SOAP_IO_LENGTH)
	{	soap_envelope_begin_out(soap);
		soap_putheader(soap);
		soap_body_begin_out(soap);
		soap_put_klsrvh_RegisterServerResponse(soap, &r, "klsrvh-RegisterServerResponse", "");
		soap_body_end_out(soap);
		soap_envelope_end_out(soap);
	};
	if (soap_response(soap, SOAP_OK)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put_klsrvh_RegisterServerResponse(soap, &r, "klsrvh-RegisterServerResponse", "")
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap->error;
	soap_closesock(soap);
	return SOAP_OK;
}

SOAP_FMAC5 int SOAP_FMAC6 soap_serve_klsrvh_DelServer(struct soap *soap)
{	struct klsrvh_DelServer soap_tmp_klsrvh_DelServer;
	struct klsrvh_DelServerResponse r;
	soap_default_klsrvh_DelServerResponse(soap, &r);
	soap_default_klsrvh_DelServer(soap, &soap_tmp_klsrvh_DelServer);
	soap->encodingStyle = NULL;
	soap_get_klsrvh_DelServer(soap, &soap_tmp_klsrvh_DelServer, "klsrvh-DelServer", NULL);
	if (soap->error)
		return soap->error;
	
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
#ifndef WITH_LEANER
	 || soap_resolve_attachments(soap)
#endif
	 || soap_end_recv(soap))
		return soap->error;
	soap->error = klsrvh_DelServer(soap, soap_tmp_klsrvh_DelServer.nId, r);
	if (soap->error)
		return soap->error;
	soap_serializeheader(soap);
	soap_serialize_klsrvh_DelServerResponse(soap, &r);
	soap_begin_count(soap);
	if (soap->mode & SOAP_IO_LENGTH)
	{	soap_envelope_begin_out(soap);
		soap_putheader(soap);
		soap_body_begin_out(soap);
		soap_put_klsrvh_DelServerResponse(soap, &r, "klsrvh-DelServerResponse", "");
		soap_body_end_out(soap);
		soap_envelope_end_out(soap);
	};
	if (soap_response(soap, SOAP_OK)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put_klsrvh_DelServerResponse(soap, &r, "klsrvh-DelServerResponse", "")
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap->error;
	soap_closesock(soap);
	return SOAP_OK;
}

SOAP_FMAC5 int SOAP_FMAC6 soap_serve_klsrvh_UpdateServer(struct soap *soap)
{	struct klsrvh_UpdateServer soap_tmp_klsrvh_UpdateServer;
	struct klsrvh_UpdateServerResponse r;
	soap_default_klsrvh_UpdateServerResponse(soap, &r);
	soap_default_klsrvh_UpdateServer(soap, &soap_tmp_klsrvh_UpdateServer);
	soap->encodingStyle = NULL;
	soap_get_klsrvh_UpdateServer(soap, &soap_tmp_klsrvh_UpdateServer, "klsrvh-UpdateServer", NULL);
	if (soap->error)
		return soap->error;
	
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
#ifndef WITH_LEANER
	 || soap_resolve_attachments(soap)
#endif
	 || soap_end_recv(soap))
		return soap->error;
	soap->error = klsrvh_UpdateServer(soap, soap_tmp_klsrvh_UpdateServer.nId, soap_tmp_klsrvh_UpdateServer.info, r);
	if (soap->error)
		return soap->error;
	soap_serializeheader(soap);
	soap_serialize_klsrvh_UpdateServerResponse(soap, &r);
	soap_begin_count(soap);
	if (soap->mode & SOAP_IO_LENGTH)
	{	soap_envelope_begin_out(soap);
		soap_putheader(soap);
		soap_body_begin_out(soap);
		soap_put_klsrvh_UpdateServerResponse(soap, &r, "klsrvh-UpdateServerResponse", "");
		soap_body_end_out(soap);
		soap_envelope_end_out(soap);
	};
	if (soap_response(soap, SOAP_OK)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put_klsrvh_UpdateServerResponse(soap, &r, "klsrvh-UpdateServerResponse", "")
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap->error;
	soap_closesock(soap);
	return SOAP_OK;
}

SOAP_FMAC5 int SOAP_FMAC6 soap_serve_klsrvh_InitialPingMaster(struct soap *soap)
{	struct klsrvh_InitialPingMaster soap_tmp_klsrvh_InitialPingMaster;
	struct klsrvh_InitialPingMasterResponse r;
	soap_default_klsrvh_InitialPingMasterResponse(soap, &r);
	soap_default_klsrvh_InitialPingMaster(soap, &soap_tmp_klsrvh_InitialPingMaster);
	soap->encodingStyle = NULL;
	soap_get_klsrvh_InitialPingMaster(soap, &soap_tmp_klsrvh_InitialPingMaster, "klsrvh-InitialPingMaster", NULL);
	if (soap->error)
		return soap->error;
	
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
#ifndef WITH_LEANER
	 || soap_resolve_attachments(soap)
#endif
	 || soap_end_recv(soap))
		return soap->error;
	soap->error = klsrvh_InitialPingMaster(soap, soap_tmp_klsrvh_InitialPingMaster.info, r);
	if (soap->error)
		return soap->error;
	soap_serializeheader(soap);
	soap_serialize_klsrvh_InitialPingMasterResponse(soap, &r);
	soap_begin_count(soap);
	if (soap->mode & SOAP_IO_LENGTH)
	{	soap_envelope_begin_out(soap);
		soap_putheader(soap);
		soap_body_begin_out(soap);
		soap_put_klsrvh_InitialPingMasterResponse(soap, &r, "klsrvh-InitialPingMasterResponse", "");
		soap_body_end_out(soap);
		soap_envelope_end_out(soap);
	};
	if (soap_response(soap, SOAP_OK)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put_klsrvh_InitialPingMasterResponse(soap, &r, "klsrvh-InitialPingMasterResponse", "")
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap->error;
	soap_closesock(soap);
	return SOAP_OK;
}

SOAP_FMAC5 int SOAP_FMAC6 soap_serve_klsrvh_PingMaster(struct soap *soap)
{	struct klsrvh_PingMaster soap_tmp_klsrvh_PingMaster;
	struct klsrvh_PingMasterResponse r;
	soap_default_klsrvh_PingMasterResponse(soap, &r);
	soap_default_klsrvh_PingMaster(soap, &soap_tmp_klsrvh_PingMaster);
	soap->encodingStyle = NULL;
	soap_get_klsrvh_PingMaster(soap, &soap_tmp_klsrvh_PingMaster, "klsrvh-PingMaster", NULL);
	if (soap->error)
		return soap->error;
	
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
#ifndef WITH_LEANER
	 || soap_resolve_attachments(soap)
#endif
	 || soap_end_recv(soap))
		return soap->error;
	soap->error = klsrvh_PingMaster(soap, soap_tmp_klsrvh_PingMaster.info, r);
	if (soap->error)
		return soap->error;
	soap_serializeheader(soap);
	soap_serialize_klsrvh_PingMasterResponse(soap, &r);
	soap_begin_count(soap);
	if (soap->mode & SOAP_IO_LENGTH)
	{	soap_envelope_begin_out(soap);
		soap_putheader(soap);
		soap_body_begin_out(soap);
		soap_put_klsrvh_PingMasterResponse(soap, &r, "klsrvh-PingMasterResponse", "");
		soap_body_end_out(soap);
		soap_envelope_end_out(soap);
	};
	if (soap_response(soap, SOAP_OK)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put_klsrvh_PingMasterResponse(soap, &r, "klsrvh-PingMasterResponse", "")
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap->error;
	soap_closesock(soap);
	return SOAP_OK;
}

SOAP_FMAC5 int SOAP_FMAC6 soap_serve_klsrvh_PingSlave(struct soap *soap)
{	struct klsrvh_PingSlave soap_tmp_klsrvh_PingSlave;
	struct klsrvh_PingSlaveResponse r;
	soap_default_klsrvh_PingSlaveResponse(soap, &r);
	soap_default_klsrvh_PingSlave(soap, &soap_tmp_klsrvh_PingSlave);
	soap->encodingStyle = NULL;
	soap_get_klsrvh_PingSlave(soap, &soap_tmp_klsrvh_PingSlave, "klsrvh-PingSlave", NULL);
	if (soap->error)
		return soap->error;
	
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
#ifndef WITH_LEANER
	 || soap_resolve_attachments(soap)
#endif
	 || soap_end_recv(soap))
		return soap->error;
	soap->error = klsrvh_PingSlave(soap, soap_tmp_klsrvh_PingSlave.info, r);
	if (soap->error)
		return soap->error;
	soap_serializeheader(soap);
	soap_serialize_klsrvh_PingSlaveResponse(soap, &r);
	soap_begin_count(soap);
	if (soap->mode & SOAP_IO_LENGTH)
	{	soap_envelope_begin_out(soap);
		soap_putheader(soap);
		soap_body_begin_out(soap);
		soap_put_klsrvh_PingSlaveResponse(soap, &r, "klsrvh-PingSlaveResponse", "");
		soap_body_end_out(soap);
		soap_envelope_end_out(soap);
	};
	if (soap_response(soap, SOAP_OK)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put_klsrvh_PingSlaveResponse(soap, &r, "klsrvh-PingSlaveResponse", "")
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap->error;
	soap_closesock(soap);
	return SOAP_OK;
}

SOAP_FMAC5 int SOAP_FMAC6 soap_serve_klsrvh_ForceRetranslateUpdates(struct soap *soap)
{	struct klsrvh_ForceRetranslateUpdates soap_tmp_klsrvh_ForceRetranslateUpdates;
	struct klsrvh_ForceRetranslateUpdatesResponse r;
	soap_default_klsrvh_ForceRetranslateUpdatesResponse(soap, &r);
	soap_default_klsrvh_ForceRetranslateUpdates(soap, &soap_tmp_klsrvh_ForceRetranslateUpdates);
	soap->encodingStyle = NULL;
	soap_get_klsrvh_ForceRetranslateUpdates(soap, &soap_tmp_klsrvh_ForceRetranslateUpdates, "klsrvh-ForceRetranslateUpdates", NULL);
	if (soap->error)
		return soap->error;
	
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
#ifndef WITH_LEANER
	 || soap_resolve_attachments(soap)
#endif
	 || soap_end_recv(soap))
		return soap->error;
	soap->error = klsrvh_ForceRetranslateUpdates(soap, soap_tmp_klsrvh_ForceRetranslateUpdates.info, r);
	if (soap->error)
		return soap->error;
	soap_serializeheader(soap);
	soap_serialize_klsrvh_ForceRetranslateUpdatesResponse(soap, &r);
	soap_begin_count(soap);
	if (soap->mode & SOAP_IO_LENGTH)
	{	soap_envelope_begin_out(soap);
		soap_putheader(soap);
		soap_body_begin_out(soap);
		soap_put_klsrvh_ForceRetranslateUpdatesResponse(soap, &r, "klsrvh-ForceRetranslateUpdatesResponse", "");
		soap_body_end_out(soap);
		soap_envelope_end_out(soap);
	};
	if (soap_response(soap, SOAP_OK)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put_klsrvh_ForceRetranslateUpdatesResponse(soap, &r, "klsrvh-ForceRetranslateUpdatesResponse", "")
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap->error;
	soap_closesock(soap);
	return SOAP_OK;
}

SOAP_FMAC5 int SOAP_FMAC6 soap_serve_klsrvh_DeliverReport(struct soap *soap)
{	struct klsrvh_DeliverReport soap_tmp_klsrvh_DeliverReport;
	struct klsrvh_DeliverReportResponse r;
	soap_default_klsrvh_DeliverReportResponse(soap, &r);
	soap_default_klsrvh_DeliverReport(soap, &soap_tmp_klsrvh_DeliverReport);
	soap->encodingStyle = NULL;
	soap_get_klsrvh_DeliverReport(soap, &soap_tmp_klsrvh_DeliverReport, "klsrvh-DeliverReport", NULL);
	if (soap->error)
		return soap->error;
	
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
#ifndef WITH_LEANER
	 || soap_resolve_attachments(soap)
#endif
	 || soap_end_recv(soap))
		return soap->error;
	soap->error = klsrvh_DeliverReport(soap, soap_tmp_klsrvh_DeliverReport.wstrRequestId, soap_tmp_klsrvh_DeliverReport.nRecipientDeliverLevel, soap_tmp_klsrvh_DeliverReport.nSenderDeliverLevel, soap_tmp_klsrvh_DeliverReport.wstrSenderInstanceId, soap_tmp_klsrvh_DeliverReport.parDeliveryParams, soap_tmp_klsrvh_DeliverReport.parReportResult, r);
	if (soap->error)
		return soap->error;
	soap_serializeheader(soap);
	soap_serialize_klsrvh_DeliverReportResponse(soap, &r);
	soap_begin_count(soap);
	if (soap->mode & SOAP_IO_LENGTH)
	{	soap_envelope_begin_out(soap);
		soap_putheader(soap);
		soap_body_begin_out(soap);
		soap_put_klsrvh_DeliverReportResponse(soap, &r, "klsrvh-DeliverReportResponse", "");
		soap_body_end_out(soap);
		soap_envelope_end_out(soap);
	};
	if (soap_response(soap, SOAP_OK)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put_klsrvh_DeliverReportResponse(soap, &r, "klsrvh-DeliverReportResponse", "")
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap->error;
	soap_closesock(soap);
	return SOAP_OK;
}

SOAP_FMAC5 int SOAP_FMAC6 soap_serve_klsrvh_RecreateInstallationPackage(struct soap *soap)
{	struct klsrvh_RecreateInstallationPackage soap_tmp_klsrvh_RecreateInstallationPackage;
	struct klsrvh_RecreateInstallationPackageResponse r;
	soap_default_klsrvh_RecreateInstallationPackageResponse(soap, &r);
	soap_default_klsrvh_RecreateInstallationPackage(soap, &soap_tmp_klsrvh_RecreateInstallationPackage);
	soap->encodingStyle = NULL;
	soap_get_klsrvh_RecreateInstallationPackage(soap, &soap_tmp_klsrvh_RecreateInstallationPackage, "klsrvh-RecreateInstallationPackage", NULL);
	if (soap->error)
		return soap->error;
	
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
#ifndef WITH_LEANER
	 || soap_resolve_attachments(soap)
#endif
	 || soap_end_recv(soap))
		return soap->error;
	soap->error = klsrvh_RecreateInstallationPackage(soap, soap_tmp_klsrvh_RecreateInstallationPackage.wstrPackageGUID, soap_tmp_klsrvh_RecreateInstallationPackage.wstrNewPackageName, soap_tmp_klsrvh_RecreateInstallationPackage.wstrFileId, soap_tmp_klsrvh_RecreateInstallationPackage.wstrProductName, soap_tmp_klsrvh_RecreateInstallationPackage.wstrProductVersion, soap_tmp_klsrvh_RecreateInstallationPackage.wstrProductDisplName, soap_tmp_klsrvh_RecreateInstallationPackage.wstrProductDisplVersion, soap_tmp_klsrvh_RecreateInstallationPackage.bReplaceExisting, r);
	if (soap->error)
		return soap->error;
	soap_serializeheader(soap);
	soap_serialize_klsrvh_RecreateInstallationPackageResponse(soap, &r);
	soap_begin_count(soap);
	if (soap->mode & SOAP_IO_LENGTH)
	{	soap_envelope_begin_out(soap);
		soap_putheader(soap);
		soap_body_begin_out(soap);
		soap_put_klsrvh_RecreateInstallationPackageResponse(soap, &r, "klsrvh-RecreateInstallationPackageResponse", "");
		soap_body_end_out(soap);
		soap_envelope_end_out(soap);
	};
	if (soap_response(soap, SOAP_OK)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put_klsrvh_RecreateInstallationPackageResponse(soap, &r, "klsrvh-RecreateInstallationPackageResponse", "")
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap->error;
	soap_closesock(soap);
	return SOAP_OK;
}

SOAP_FMAC5 int SOAP_FMAC6 soap_serve_klsrvh_StartTask(struct soap *soap)
{	struct klsrvh_StartTask soap_tmp_klsrvh_StartTask;
	struct klsrvh_StartTaskResponse r;
	soap_default_klsrvh_StartTaskResponse(soap, &r);
	soap_default_klsrvh_StartTask(soap, &soap_tmp_klsrvh_StartTask);
	soap->encodingStyle = NULL;
	soap_get_klsrvh_StartTask(soap, &soap_tmp_klsrvh_StartTask, "klsrvh-StartTask", NULL);
	if (soap->error)
		return soap->error;
	
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
#ifndef WITH_LEANER
	 || soap_resolve_attachments(soap)
#endif
	 || soap_end_recv(soap))
		return soap->error;
	soap->error = klsrvh_StartTask(soap, soap_tmp_klsrvh_StartTask.wstrTaskTsId, soap_tmp_klsrvh_StartTask.wstrTaskTypeName, soap_tmp_klsrvh_StartTask.parParams, r);
	if (soap->error)
		return soap->error;
	soap_serializeheader(soap);
	soap_serialize_klsrvh_StartTaskResponse(soap, &r);
	soap_begin_count(soap);
	if (soap->mode & SOAP_IO_LENGTH)
	{	soap_envelope_begin_out(soap);
		soap_putheader(soap);
		soap_body_begin_out(soap);
		soap_put_klsrvh_StartTaskResponse(soap, &r, "klsrvh-StartTaskResponse", "");
		soap_body_end_out(soap);
		soap_envelope_end_out(soap);
	};
	if (soap_response(soap, SOAP_OK)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put_klsrvh_StartTaskResponse(soap, &r, "klsrvh-StartTaskResponse", "")
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap->error;
	soap_closesock(soap);
	return SOAP_OK;
}

SOAP_FMAC5 int SOAP_FMAC6 soap_serve_klsrvh_StartRemoteInstallation(struct soap *soap)
{	struct klsrvh_StartRemoteInstallation soap_tmp_klsrvh_StartRemoteInstallation;
	struct klsrvh_StartRemoteInstallationResponse r;
	soap_default_klsrvh_StartRemoteInstallationResponse(soap, &r);
	soap_default_klsrvh_StartRemoteInstallation(soap, &soap_tmp_klsrvh_StartRemoteInstallation);
	soap->encodingStyle = NULL;
	soap_get_klsrvh_StartRemoteInstallation(soap, &soap_tmp_klsrvh_StartRemoteInstallation, "klsrvh-StartRemoteInstallation", NULL);
	if (soap->error)
		return soap->error;
	
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
#ifndef WITH_LEANER
	 || soap_resolve_attachments(soap)
#endif
	 || soap_end_recv(soap))
		return soap->error;
	soap->error = klsrvh_StartRemoteInstallation(soap, soap_tmp_klsrvh_StartRemoteInstallation.parTaskInfo, soap_tmp_klsrvh_StartRemoteInstallation.parTaskParams, r);
	if (soap->error)
		return soap->error;
	soap_serializeheader(soap);
	soap_serialize_klsrvh_StartRemoteInstallationResponse(soap, &r);
	soap_begin_count(soap);
	if (soap->mode & SOAP_IO_LENGTH)
	{	soap_envelope_begin_out(soap);
		soap_putheader(soap);
		soap_body_begin_out(soap);
		soap_put_klsrvh_StartRemoteInstallationResponse(soap, &r, "klsrvh-StartRemoteInstallationResponse", "");
		soap_body_end_out(soap);
		soap_envelope_end_out(soap);
	};
	if (soap_response(soap, SOAP_OK)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put_klsrvh_StartRemoteInstallationResponse(soap, &r, "klsrvh-StartRemoteInstallationResponse", "")
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap->error;
	soap_closesock(soap);
	return SOAP_OK;
}

SOAP_FMAC5 int SOAP_FMAC6 soap_serve_klsrvh_ReportRemoteInstallationResult(struct soap *soap)
{	struct klsrvh_ReportRemoteInstallationResult soap_tmp_klsrvh_ReportRemoteInstallationResult;
	struct klsrvh_ReportRemoteInstallationResultResponse r;
	soap_default_klsrvh_ReportRemoteInstallationResultResponse(soap, &r);
	soap_default_klsrvh_ReportRemoteInstallationResult(soap, &soap_tmp_klsrvh_ReportRemoteInstallationResult);
	soap->encodingStyle = NULL;
	soap_get_klsrvh_ReportRemoteInstallationResult(soap, &soap_tmp_klsrvh_ReportRemoteInstallationResult, "klsrvh-ReportRemoteInstallationResult", NULL);
	if (soap->error)
		return soap->error;
	
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
#ifndef WITH_LEANER
	 || soap_resolve_attachments(soap)
#endif
	 || soap_end_recv(soap))
		return soap->error;
	soap->error = klsrvh_ReportRemoteInstallationResult(soap, soap_tmp_klsrvh_ReportRemoteInstallationResult.wstrTaskTsId, soap_tmp_klsrvh_ReportRemoteInstallationResult.parResultTaskStateEvent, r);
	if (soap->error)
		return soap->error;
	soap_serializeheader(soap);
	soap_serialize_klsrvh_ReportRemoteInstallationResultResponse(soap, &r);
	soap_begin_count(soap);
	if (soap->mode & SOAP_IO_LENGTH)
	{	soap_envelope_begin_out(soap);
		soap_putheader(soap);
		soap_body_begin_out(soap);
		soap_put_klsrvh_ReportRemoteInstallationResultResponse(soap, &r, "klsrvh-ReportRemoteInstallationResultResponse", "");
		soap_body_end_out(soap);
		soap_envelope_end_out(soap);
	};
	if (soap_response(soap, SOAP_OK)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put_klsrvh_ReportRemoteInstallationResultResponse(soap, &r, "klsrvh-ReportRemoteInstallationResultResponse", "")
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap->error;
	soap_closesock(soap);
	return SOAP_OK;
}

SOAP_FMAC5 int SOAP_FMAC6 soap_serve_klsrvh_NotifyOnReportResult(struct soap *soap)
{	struct klsrvh_NotifyOnReportResult soap_tmp_klsrvh_NotifyOnReportResult;
	struct klsrvh_NotifyOnReportResultResponse r;
	soap_default_klsrvh_NotifyOnReportResultResponse(soap, &r);
	soap_default_klsrvh_NotifyOnReportResult(soap, &soap_tmp_klsrvh_NotifyOnReportResult);
	soap->encodingStyle = NULL;
	soap_get_klsrvh_NotifyOnReportResult(soap, &soap_tmp_klsrvh_NotifyOnReportResult, "klsrvh-NotifyOnReportResult", NULL);
	if (soap->error)
		return soap->error;
	
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
#ifndef WITH_LEANER
	 || soap_resolve_attachments(soap)
#endif
	 || soap_end_recv(soap))
		return soap->error;
	soap->error = klsrvh_NotifyOnReportResult(soap, soap_tmp_klsrvh_NotifyOnReportResult.wstrRequestId, soap_tmp_klsrvh_NotifyOnReportResult.nResultCode, soap_tmp_klsrvh_NotifyOnReportResult.paramParams, r);
	if (soap->error)
		return soap->error;
	soap_serializeheader(soap);
	soap_serialize_klsrvh_NotifyOnReportResultResponse(soap, &r);
	soap_begin_count(soap);
	if (soap->mode & SOAP_IO_LENGTH)
	{	soap_envelope_begin_out(soap);
		soap_putheader(soap);
		soap_body_begin_out(soap);
		soap_put_klsrvh_NotifyOnReportResultResponse(soap, &r, "klsrvh-NotifyOnReportResultResponse", "");
		soap_body_end_out(soap);
		soap_envelope_end_out(soap);
	};
	if (soap_response(soap, SOAP_OK)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put_klsrvh_NotifyOnReportResultResponse(soap, &r, "klsrvh-NotifyOnReportResultResponse", "")
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap->error;
	soap_closesock(soap);
	return SOAP_OK;
}

SOAP_FMAC5 int SOAP_FMAC6 soap_serve_klsrvh_FindSlaveServers(struct soap *soap)
{	struct klsrvh_FindSlaveServers soap_tmp_klsrvh_FindSlaveServers;
	struct klsrvh_FindSlaveServersResponse r;
	soap_default_klsrvh_FindSlaveServersResponse(soap, &r);
	soap_default_klsrvh_FindSlaveServers(soap, &soap_tmp_klsrvh_FindSlaveServers);
	soap->encodingStyle = NULL;
	soap_get_klsrvh_FindSlaveServers(soap, &soap_tmp_klsrvh_FindSlaveServers, "klsrvh-FindSlaveServers", NULL);
	if (soap->error)
		return soap->error;
	
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
#ifndef WITH_LEANER
	 || soap_resolve_attachments(soap)
#endif
	 || soap_end_recv(soap))
		return soap->error;
	soap->error = klsrvh_FindSlaveServers(soap, soap_tmp_klsrvh_FindSlaveServers.wstrFilter, soap_tmp_klsrvh_FindSlaveServers.arrFields, soap_tmp_klsrvh_FindSlaveServers.arrFieldsToOrder, soap_tmp_klsrvh_FindSlaveServers.params, soap_tmp_klsrvh_FindSlaveServers.lTimeout, soap_tmp_klsrvh_FindSlaveServers.wstrRequestId, r);
	if (soap->error)
		return soap->error;
	soap_serializeheader(soap);
	soap_serialize_klsrvh_FindSlaveServersResponse(soap, &r);
	soap_begin_count(soap);
	if (soap->mode & SOAP_IO_LENGTH)
	{	soap_envelope_begin_out(soap);
		soap_putheader(soap);
		soap_body_begin_out(soap);
		soap_put_klsrvh_FindSlaveServersResponse(soap, &r, "klsrvh-FindSlaveServersResponse", "");
		soap_body_end_out(soap);
		soap_envelope_end_out(soap);
	};
	if (soap_response(soap, SOAP_OK)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put_klsrvh_FindSlaveServersResponse(soap, &r, "klsrvh-FindSlaveServersResponse", "")
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap->error;
	soap_closesock(soap);
	return SOAP_OK;
}

SOAP_FMAC5 int SOAP_FMAC6 soap_serve_klsrvs_GetSharedFolder(struct soap *soap)
{	struct klsrvs_GetSharedFolder soap_tmp_klsrvs_GetSharedFolder;
	struct klsrvs_GetSharedFolderResponse r;
	soap_default_klsrvs_GetSharedFolderResponse(soap, &r);
	soap_default_klsrvs_GetSharedFolder(soap, &soap_tmp_klsrvs_GetSharedFolder);
	soap->encodingStyle = NULL;
	soap_get_klsrvs_GetSharedFolder(soap, &soap_tmp_klsrvs_GetSharedFolder, "klsrvs-GetSharedFolder", NULL);
	if (soap->error)
		return soap->error;
	
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
#ifndef WITH_LEANER
	 || soap_resolve_attachments(soap)
#endif
	 || soap_end_recv(soap))
		return soap->error;
	soap->error = klsrvs_GetSharedFolder(soap, soap_tmp_klsrvs_GetSharedFolder._, r);
	if (soap->error)
		return soap->error;
	soap_serializeheader(soap);
	soap_serialize_klsrvs_GetSharedFolderResponse(soap, &r);
	soap_begin_count(soap);
	if (soap->mode & SOAP_IO_LENGTH)
	{	soap_envelope_begin_out(soap);
		soap_putheader(soap);
		soap_body_begin_out(soap);
		soap_put_klsrvs_GetSharedFolderResponse(soap, &r, "klsrvs-GetSharedFolderResponse", "");
		soap_body_end_out(soap);
		soap_envelope_end_out(soap);
	};
	if (soap_response(soap, SOAP_OK)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put_klsrvs_GetSharedFolderResponse(soap, &r, "klsrvs-GetSharedFolderResponse", "")
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap->error;
	soap_closesock(soap);
	return SOAP_OK;
}

SOAP_FMAC5 int SOAP_FMAC6 soap_serve_klsrvs_ChangeSharedFolder(struct soap *soap)
{	struct klsrvs_ChangeSharedFolder soap_tmp_klsrvs_ChangeSharedFolder;
	struct klsrvs_ChangeSharedFolderResponse r;
	soap_default_klsrvs_ChangeSharedFolderResponse(soap, &r);
	soap_default_klsrvs_ChangeSharedFolder(soap, &soap_tmp_klsrvs_ChangeSharedFolder);
	soap->encodingStyle = NULL;
	soap_get_klsrvs_ChangeSharedFolder(soap, &soap_tmp_klsrvs_ChangeSharedFolder, "klsrvs-ChangeSharedFolder", NULL);
	if (soap->error)
		return soap->error;
	
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
#ifndef WITH_LEANER
	 || soap_resolve_attachments(soap)
#endif
	 || soap_end_recv(soap))
		return soap->error;
	soap->error = klsrvs_ChangeSharedFolder(soap, soap_tmp_klsrvs_ChangeSharedFolder.wstrFolder, r);
	if (soap->error)
		return soap->error;
	soap_serializeheader(soap);
	soap_serialize_klsrvs_ChangeSharedFolderResponse(soap, &r);
	soap_begin_count(soap);
	if (soap->mode & SOAP_IO_LENGTH)
	{	soap_envelope_begin_out(soap);
		soap_putheader(soap);
		soap_body_begin_out(soap);
		soap_put_klsrvs_ChangeSharedFolderResponse(soap, &r, "klsrvs-ChangeSharedFolderResponse", "");
		soap_body_end_out(soap);
		soap_envelope_end_out(soap);
	};
	if (soap_response(soap, SOAP_OK)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put_klsrvs_ChangeSharedFolderResponse(soap, &r, "klsrvs-ChangeSharedFolderResponse", "")
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap->error;
	soap_closesock(soap);
	return SOAP_OK;
}

SOAP_FMAC5 int SOAP_FMAC6 soap_serve_klnlst_ResetIterator(struct soap *soap)
{	struct klnlst_ResetIterator soap_tmp_klnlst_ResetIterator;
	struct klnlst_ResetIteratorResponse r;
	soap_default_klnlst_ResetIteratorResponse(soap, &r);
	soap_default_klnlst_ResetIterator(soap, &soap_tmp_klnlst_ResetIterator);
	soap->encodingStyle = NULL;
	soap_get_klnlst_ResetIterator(soap, &soap_tmp_klnlst_ResetIterator, "klnlst-ResetIterator", NULL);
	if (soap->error)
		return soap->error;
	
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
#ifndef WITH_LEANER
	 || soap_resolve_attachments(soap)
#endif
	 || soap_end_recv(soap))
		return soap->error;
	soap->error = klnlst_ResetIterator(soap, soap_tmp_klnlst_ResetIterator.listName, soap_tmp_klnlst_ResetIterator.paramIteratorDescr, soap_tmp_klnlst_ResetIterator.fields, soap_tmp_klnlst_ResetIterator.fields_to_order, soap_tmp_klnlst_ResetIterator.lifetime, r);
	if (soap->error)
		return soap->error;
	soap_serializeheader(soap);
	soap_serialize_klnlst_ResetIteratorResponse(soap, &r);
	soap_begin_count(soap);
	if (soap->mode & SOAP_IO_LENGTH)
	{	soap_envelope_begin_out(soap);
		soap_putheader(soap);
		soap_body_begin_out(soap);
		soap_put_klnlst_ResetIteratorResponse(soap, &r, "klnlst-ResetIteratorResponse", "");
		soap_body_end_out(soap);
		soap_envelope_end_out(soap);
	};
	if (soap_response(soap, SOAP_OK)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put_klnlst_ResetIteratorResponse(soap, &r, "klnlst-ResetIteratorResponse", "")
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap->error;
	soap_closesock(soap);
	return SOAP_OK;
}

SOAP_FMAC5 int SOAP_FMAC6 soap_serve_klnlst_GetRecordCount(struct soap *soap)
{	struct klnlst_GetRecordCount soap_tmp_klnlst_GetRecordCount;
	struct klnlst_GetRecordCountResponse r;
	soap_default_klnlst_GetRecordCountResponse(soap, &r);
	soap_default_klnlst_GetRecordCount(soap, &soap_tmp_klnlst_GetRecordCount);
	soap->encodingStyle = NULL;
	soap_get_klnlst_GetRecordCount(soap, &soap_tmp_klnlst_GetRecordCount, "klnlst-GetRecordCount", NULL);
	if (soap->error)
		return soap->error;
	
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
#ifndef WITH_LEANER
	 || soap_resolve_attachments(soap)
#endif
	 || soap_end_recv(soap))
		return soap->error;
	soap->error = klnlst_GetRecordCount(soap, soap_tmp_klnlst_GetRecordCount.iteratorId, r);
	if (soap->error)
		return soap->error;
	soap_serializeheader(soap);
	soap_serialize_klnlst_GetRecordCountResponse(soap, &r);
	soap_begin_count(soap);
	if (soap->mode & SOAP_IO_LENGTH)
	{	soap_envelope_begin_out(soap);
		soap_putheader(soap);
		soap_body_begin_out(soap);
		soap_put_klnlst_GetRecordCountResponse(soap, &r, "klnlst-GetRecordCountResponse", "");
		soap_body_end_out(soap);
		soap_envelope_end_out(soap);
	};
	if (soap_response(soap, SOAP_OK)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put_klnlst_GetRecordCountResponse(soap, &r, "klnlst-GetRecordCountResponse", "")
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap->error;
	soap_closesock(soap);
	return SOAP_OK;
}

SOAP_FMAC5 int SOAP_FMAC6 soap_serve_klnlst_GetRecordRange(struct soap *soap)
{	struct klnlst_GetRecordRange soap_tmp_klnlst_GetRecordRange;
	struct klnlst_GetRecordRangeResponse r;
	soap_default_klnlst_GetRecordRangeResponse(soap, &r);
	soap_default_klnlst_GetRecordRange(soap, &soap_tmp_klnlst_GetRecordRange);
	soap->encodingStyle = NULL;
	soap_get_klnlst_GetRecordRange(soap, &soap_tmp_klnlst_GetRecordRange, "klnlst-GetRecordRange", NULL);
	if (soap->error)
		return soap->error;
	
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
#ifndef WITH_LEANER
	 || soap_resolve_attachments(soap)
#endif
	 || soap_end_recv(soap))
		return soap->error;
	soap->error = klnlst_GetRecordRange(soap, soap_tmp_klnlst_GetRecordRange.iteratorId, soap_tmp_klnlst_GetRecordRange.nStart, soap_tmp_klnlst_GetRecordRange.nEnd, r);
	if (soap->error)
		return soap->error;
	soap_serializeheader(soap);
	soap_serialize_klnlst_GetRecordRangeResponse(soap, &r);
	soap_begin_count(soap);
	if (soap->mode & SOAP_IO_LENGTH)
	{	soap_envelope_begin_out(soap);
		soap_putheader(soap);
		soap_body_begin_out(soap);
		soap_put_klnlst_GetRecordRangeResponse(soap, &r, "klnlst-GetRecordRangeResponse", "");
		soap_body_end_out(soap);
		soap_envelope_end_out(soap);
	};
	if (soap_response(soap, SOAP_OK)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put_klnlst_GetRecordRangeResponse(soap, &r, "klnlst-GetRecordRangeResponse", "")
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap->error;
	soap_closesock(soap);
	return SOAP_OK;
}

SOAP_FMAC5 int SOAP_FMAC6 soap_serve_klnlst_ReleaseIterator(struct soap *soap)
{	struct klnlst_ReleaseIterator soap_tmp_klnlst_ReleaseIterator;
	struct klnlst_ReleaseIteratorResponse r;
	soap_default_klnlst_ReleaseIteratorResponse(soap, &r);
	soap_default_klnlst_ReleaseIterator(soap, &soap_tmp_klnlst_ReleaseIterator);
	soap->encodingStyle = NULL;
	soap_get_klnlst_ReleaseIterator(soap, &soap_tmp_klnlst_ReleaseIterator, "klnlst-ReleaseIterator", NULL);
	if (soap->error)
		return soap->error;
	
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
#ifndef WITH_LEANER
	 || soap_resolve_attachments(soap)
#endif
	 || soap_end_recv(soap))
		return soap->error;
	soap->error = klnlst_ReleaseIterator(soap, soap_tmp_klnlst_ReleaseIterator.iteratorId, r);
	if (soap->error)
		return soap->error;
	soap_serializeheader(soap);
	soap_serialize_klnlst_ReleaseIteratorResponse(soap, &r);
	soap_begin_count(soap);
	if (soap->mode & SOAP_IO_LENGTH)
	{	soap_envelope_begin_out(soap);
		soap_putheader(soap);
		soap_body_begin_out(soap);
		soap_put_klnlst_ReleaseIteratorResponse(soap, &r, "klnlst-ReleaseIteratorResponse", "");
		soap_body_end_out(soap);
		soap_envelope_end_out(soap);
	};
	if (soap_response(soap, SOAP_OK)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put_klnlst_ReleaseIteratorResponse(soap, &r, "klnlst-ReleaseIteratorResponse", "")
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap->error;
	soap_closesock(soap);
	return SOAP_OK;
}

SOAP_FMAC5 int SOAP_FMAC6 soap_serve_klnlst_UpdateHostNetworkList(struct soap *soap)
{	struct klnlst_UpdateHostNetworkList soap_tmp_klnlst_UpdateHostNetworkList;
	struct klnlst_UpdateHostNetworkListResponse r;
	soap_default_klnlst_UpdateHostNetworkListResponse(soap, &r);
	soap_default_klnlst_UpdateHostNetworkList(soap, &soap_tmp_klnlst_UpdateHostNetworkList);
	soap->encodingStyle = NULL;
	soap_get_klnlst_UpdateHostNetworkList(soap, &soap_tmp_klnlst_UpdateHostNetworkList, "klnlst-UpdateHostNetworkList", NULL);
	if (soap->error)
		return soap->error;
	
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
#ifndef WITH_LEANER
	 || soap_resolve_attachments(soap)
#endif
	 || soap_end_recv(soap))
		return soap->error;
	soap->error = klnlst_UpdateHostNetworkList(soap, soap_tmp_klnlst_UpdateHostNetworkList.nagentTransportName, soap_tmp_klnlst_UpdateHostNetworkList.listName, soap_tmp_klnlst_UpdateHostNetworkList.listComponentName, soap_tmp_klnlst_UpdateHostNetworkList.listsItemsArray, r);
	if (soap->error)
		return soap->error;
	soap_serializeheader(soap);
	soap_serialize_klnlst_UpdateHostNetworkListResponse(soap, &r);
	soap_begin_count(soap);
	if (soap->mode & SOAP_IO_LENGTH)
	{	soap_envelope_begin_out(soap);
		soap_putheader(soap);
		soap_body_begin_out(soap);
		soap_put_klnlst_UpdateHostNetworkListResponse(soap, &r, "klnlst-UpdateHostNetworkListResponse", "");
		soap_body_end_out(soap);
		soap_envelope_end_out(soap);
	};
	if (soap_response(soap, SOAP_OK)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put_klnlst_UpdateHostNetworkListResponse(soap, &r, "klnlst-UpdateHostNetworkListResponse", "")
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap->error;
	soap_closesock(soap);
	return SOAP_OK;
}

SOAP_FMAC5 int SOAP_FMAC6 soap_serve_klnlst_AddListItemTask(struct soap *soap)
{	struct klnlst_AddListItemTask soap_tmp_klnlst_AddListItemTask;
	struct klnlst_AddListItemTaskResponse r;
	soap_default_klnlst_AddListItemTaskResponse(soap, &r);
	soap_default_klnlst_AddListItemTask(soap, &soap_tmp_klnlst_AddListItemTask);
	soap->encodingStyle = NULL;
	soap_get_klnlst_AddListItemTask(soap, &soap_tmp_klnlst_AddListItemTask, "klnlst-AddListItemTask", NULL);
	if (soap->error)
		return soap->error;
	
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
#ifndef WITH_LEANER
	 || soap_resolve_attachments(soap)
#endif
	 || soap_end_recv(soap))
		return soap->error;
	soap->error = klnlst_AddListItemTask(soap, soap_tmp_klnlst_AddListItemTask.itemId, soap_tmp_klnlst_AddListItemTask.taskParams, soap_tmp_klnlst_AddListItemTask.taskName, r);
	if (soap->error)
		return soap->error;
	soap_serializeheader(soap);
	soap_serialize_klnlst_AddListItemTaskResponse(soap, &r);
	soap_begin_count(soap);
	if (soap->mode & SOAP_IO_LENGTH)
	{	soap_envelope_begin_out(soap);
		soap_putheader(soap);
		soap_body_begin_out(soap);
		soap_put_klnlst_AddListItemTaskResponse(soap, &r, "klnlst-AddListItemTaskResponse", "");
		soap_body_end_out(soap);
		soap_envelope_end_out(soap);
	};
	if (soap_response(soap, SOAP_OK)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put_klnlst_AddListItemTaskResponse(soap, &r, "klnlst-AddListItemTaskResponse", "")
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap->error;
	soap_closesock(soap);
	return SOAP_OK;
}

SOAP_FMAC5 int SOAP_FMAC6 soap_serve_klnlst_AddTaskForListItems(struct soap *soap)
{	struct klnlst_AddTaskForListItems soap_tmp_klnlst_AddTaskForListItems;
	struct klnlst_AddTaskForListItemsResponse r;
	soap_default_klnlst_AddTaskForListItemsResponse(soap, &r);
	soap_default_klnlst_AddTaskForListItems(soap, &soap_tmp_klnlst_AddTaskForListItems);
	soap->encodingStyle = NULL;
	soap_get_klnlst_AddTaskForListItems(soap, &soap_tmp_klnlst_AddTaskForListItems, "klnlst-AddTaskForListItems", NULL);
	if (soap->error)
		return soap->error;
	
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
#ifndef WITH_LEANER
	 || soap_resolve_attachments(soap)
#endif
	 || soap_end_recv(soap))
		return soap->error;
	soap->error = klnlst_AddTaskForListItems(soap, soap_tmp_klnlst_AddTaskForListItems.itemsIds, soap_tmp_klnlst_AddTaskForListItems.taskParams, soap_tmp_klnlst_AddTaskForListItems.taskName, r);
	if (soap->error)
		return soap->error;
	soap_serializeheader(soap);
	soap_serialize_klnlst_AddTaskForListItemsResponse(soap, &r);
	soap_begin_count(soap);
	if (soap->mode & SOAP_IO_LENGTH)
	{	soap_envelope_begin_out(soap);
		soap_putheader(soap);
		soap_body_begin_out(soap);
		soap_put_klnlst_AddTaskForListItemsResponse(soap, &r, "klnlst-AddTaskForListItemsResponse", "");
		soap_body_end_out(soap);
		soap_envelope_end_out(soap);
	};
	if (soap_response(soap, SOAP_OK)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put_klnlst_AddTaskForListItemsResponse(soap, &r, "klnlst-AddTaskForListItemsResponse", "")
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap->error;
	soap_closesock(soap);
	return SOAP_OK;
}

SOAP_FMAC5 int SOAP_FMAC6 soap_serve_klnlst_GetItemInfo(struct soap *soap)
{	struct klnlst_GetItemInfo soap_tmp_klnlst_GetItemInfo;
	struct klnlst_GetItemInfoResponse r;
	soap_default_klnlst_GetItemInfoResponse(soap, &r);
	soap_default_klnlst_GetItemInfo(soap, &soap_tmp_klnlst_GetItemInfo);
	soap->encodingStyle = NULL;
	soap_get_klnlst_GetItemInfo(soap, &soap_tmp_klnlst_GetItemInfo, "klnlst-GetItemInfo", NULL);
	if (soap->error)
		return soap->error;
	
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
#ifndef WITH_LEANER
	 || soap_resolve_attachments(soap)
#endif
	 || soap_end_recv(soap))
		return soap->error;
	soap->error = klnlst_GetItemInfo(soap, soap_tmp_klnlst_GetItemInfo.itemId, r);
	if (soap->error)
		return soap->error;
	soap_serializeheader(soap);
	soap_serialize_klnlst_GetItemInfoResponse(soap, &r);
	soap_begin_count(soap);
	if (soap->mode & SOAP_IO_LENGTH)
	{	soap_envelope_begin_out(soap);
		soap_putheader(soap);
		soap_body_begin_out(soap);
		soap_put_klnlst_GetItemInfoResponse(soap, &r, "klnlst-GetItemInfoResponse", "");
		soap_body_end_out(soap);
		soap_envelope_end_out(soap);
	};
	if (soap_response(soap, SOAP_OK)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put_klnlst_GetItemInfoResponse(soap, &r, "klnlst-GetItemInfoResponse", "")
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap->error;
	soap_closesock(soap);
	return SOAP_OK;
}

SOAP_FMAC5 int SOAP_FMAC6 soap_serve_klnagnlst_CallNetworkListTask(struct soap *soap)
{	struct klnagnlst_CallNetworkListTask soap_tmp_klnagnlst_CallNetworkListTask;
	struct klnagnlst_CallNetworkListTaskResponse r;
	soap_default_klnagnlst_CallNetworkListTaskResponse(soap, &r);
	soap_default_klnagnlst_CallNetworkListTask(soap, &soap_tmp_klnagnlst_CallNetworkListTask);
	soap->encodingStyle = NULL;
	soap_get_klnagnlst_CallNetworkListTask(soap, &soap_tmp_klnagnlst_CallNetworkListTask, "klnagnlst-CallNetworkListTask", NULL);
	if (soap->error)
		return soap->error;
	
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
#ifndef WITH_LEANER
	 || soap_resolve_attachments(soap)
#endif
	 || soap_end_recv(soap))
		return soap->error;
	soap->error = klnagnlst_CallNetworkListTask(soap, soap_tmp_klnagnlst_CallNetworkListTask.listName, soap_tmp_klnagnlst_CallNetworkListTask.itemId, soap_tmp_klnagnlst_CallNetworkListTask.taskName, soap_tmp_klnagnlst_CallNetworkListTask.taskParams, r);
	if (soap->error)
		return soap->error;
	soap_serializeheader(soap);
	soap_serialize_klnagnlst_CallNetworkListTaskResponse(soap, &r);
	soap_begin_count(soap);
	if (soap->mode & SOAP_IO_LENGTH)
	{	soap_envelope_begin_out(soap);
		soap_putheader(soap);
		soap_body_begin_out(soap);
		soap_put_klnagnlst_CallNetworkListTaskResponse(soap, &r, "klnagnlst-CallNetworkListTaskResponse", "");
		soap_body_end_out(soap);
		soap_envelope_end_out(soap);
	};
	if (soap_response(soap, SOAP_OK)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put_klnagnlst_CallNetworkListTaskResponse(soap, &r, "klnagnlst-CallNetworkListTaskResponse", "")
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap->error;
	soap_closesock(soap);
	return SOAP_OK;
}

SOAP_FMAC5 int SOAP_FMAC6 soap_serve_klnagnlst_GetItemFileInfo(struct soap *soap)
{	struct klnagnlst_GetItemFileInfo soap_tmp_klnagnlst_GetItemFileInfo;
	struct klnagnlst_GetItemFileInfoResponse r;
	soap_default_klnagnlst_GetItemFileInfoResponse(soap, &r);
	soap_default_klnagnlst_GetItemFileInfo(soap, &soap_tmp_klnagnlst_GetItemFileInfo);
	soap->encodingStyle = NULL;
	soap_get_klnagnlst_GetItemFileInfo(soap, &soap_tmp_klnagnlst_GetItemFileInfo, "klnagnlst-GetItemFileInfo", NULL);
	if (soap->error)
		return soap->error;
	
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
#ifndef WITH_LEANER
	 || soap_resolve_attachments(soap)
#endif
	 || soap_end_recv(soap))
		return soap->error;
	soap->error = klnagnlst_GetItemFileInfo(soap, soap_tmp_klnagnlst_GetItemFileInfo.listName, soap_tmp_klnagnlst_GetItemFileInfo.itemId, r);
	if (soap->error)
		return soap->error;
	soap_serializeheader(soap);
	soap_serialize_klnagnlst_GetItemFileInfoResponse(soap, &r);
	soap_begin_count(soap);
	if (soap->mode & SOAP_IO_LENGTH)
	{	soap_envelope_begin_out(soap);
		soap_putheader(soap);
		soap_body_begin_out(soap);
		soap_put_klnagnlst_GetItemFileInfoResponse(soap, &r, "klnagnlst-GetItemFileInfoResponse", "");
		soap_body_end_out(soap);
		soap_envelope_end_out(soap);
	};
	if (soap_response(soap, SOAP_OK)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put_klnagnlst_GetItemFileInfoResponse(soap, &r, "klnagnlst-GetItemFileInfoResponse", "")
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap->error;
	soap_closesock(soap);
	return SOAP_OK;
}

SOAP_FMAC5 int SOAP_FMAC6 soap_serve_klnagnlst_GetItemFileChunk(struct soap *soap)
{	struct klnagnlst_GetItemFileChunk soap_tmp_klnagnlst_GetItemFileChunk;
	struct klnagnlst_GetItemFileChunkResponse r;
	soap_default_klnagnlst_GetItemFileChunkResponse(soap, &r);
	soap_default_klnagnlst_GetItemFileChunk(soap, &soap_tmp_klnagnlst_GetItemFileChunk);
	soap->encodingStyle = NULL;
	soap_get_klnagnlst_GetItemFileChunk(soap, &soap_tmp_klnagnlst_GetItemFileChunk, "klnagnlst-GetItemFileChunk", NULL);
	if (soap->error)
		return soap->error;
	
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
#ifndef WITH_LEANER
	 || soap_resolve_attachments(soap)
#endif
	 || soap_end_recv(soap))
		return soap->error;
	soap->error = klnagnlst_GetItemFileChunk(soap, soap_tmp_klnagnlst_GetItemFileChunk.listName, soap_tmp_klnagnlst_GetItemFileChunk.itemId, soap_tmp_klnagnlst_GetItemFileChunk.startPos, soap_tmp_klnagnlst_GetItemFileChunk.neededSize, r);
	if (soap->error)
		return soap->error;
	soap_serializeheader(soap);
	soap_serialize_klnagnlst_GetItemFileChunkResponse(soap, &r);
	soap_begin_count(soap);
	if (soap->mode & SOAP_IO_LENGTH)
	{	soap_envelope_begin_out(soap);
		soap_putheader(soap);
		soap_body_begin_out(soap);
		soap_put_klnagnlst_GetItemFileChunkResponse(soap, &r, "klnagnlst-GetItemFileChunkResponse", "");
		soap_body_end_out(soap);
		soap_envelope_end_out(soap);
	};
	if (soap_response(soap, SOAP_OK)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put_klnagnlst_GetItemFileChunkResponse(soap, &r, "klnagnlst-GetItemFileChunkResponse", "")
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap->error;
	soap_closesock(soap);
	return SOAP_OK;
}

SOAP_FMAC5 int SOAP_FMAC6 soap_serve_klft_GetNextFileChunk(struct soap *soap)
{	struct klft_GetNextFileChunk soap_tmp_klft_GetNextFileChunk;
	struct klft_GetNextFileChunkResponse r;
	soap_default_klft_GetNextFileChunkResponse(soap, &r);
	soap_default_klft_GetNextFileChunk(soap, &soap_tmp_klft_GetNextFileChunk);
	soap->encodingStyle = NULL;
	soap_get_klft_GetNextFileChunk(soap, &soap_tmp_klft_GetNextFileChunk, "klft-GetNextFileChunk", NULL);
	if (soap->error)
		return soap->error;
	
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
#ifndef WITH_LEANER
	 || soap_resolve_attachments(soap)
#endif
	 || soap_end_recv(soap))
		return soap->error;
	soap->error = klft_GetNextFileChunk(soap, soap_tmp_klft_GetNextFileChunk.remoteClientName, soap_tmp_klft_GetNextFileChunk.fileName, soap_tmp_klft_GetNextFileChunk.fileId, soap_tmp_klft_GetNextFileChunk.startFilePos, soap_tmp_klft_GetNextFileChunk.neededSize, soap_tmp_klft_GetNextFileChunk.useUpdaterFolder, soap_tmp_klft_GetNextFileChunk.forUpdateAgent, soap_tmp_klft_GetNextFileChunk.options, r);
	if (soap->error)
		return soap->error;
	soap_serializeheader(soap);
	soap_serialize_klft_GetNextFileChunkResponse(soap, &r);
	soap_begin_count(soap);
	if (soap->mode & SOAP_IO_LENGTH)
	{	soap_envelope_begin_out(soap);
		soap_putheader(soap);
		soap_body_begin_out(soap);
		soap_put_klft_GetNextFileChunkResponse(soap, &r, "klft-GetNextFileChunkResponse", "");
		soap_body_end_out(soap);
		soap_envelope_end_out(soap);
	};
	if (soap_response(soap, SOAP_OK)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put_klft_GetNextFileChunkResponse(soap, &r, "klft-GetNextFileChunkResponse", "")
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap->error;
	soap_closesock(soap);
	return SOAP_OK;
}

SOAP_FMAC5 int SOAP_FMAC6 soap_serve_klft_GetServerFilesList(struct soap *soap)
{	struct klft_GetServerFilesList soap_tmp_klft_GetServerFilesList;
	struct klft_GetServerFilesListResponse r;
	soap_default_klft_GetServerFilesListResponse(soap, &r);
	soap_default_klft_GetServerFilesList(soap, &soap_tmp_klft_GetServerFilesList);
	soap->encodingStyle = NULL;
	soap_get_klft_GetServerFilesList(soap, &soap_tmp_klft_GetServerFilesList, "klft-GetServerFilesList", NULL);
	if (soap->error)
		return soap->error;
	
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
#ifndef WITH_LEANER
	 || soap_resolve_attachments(soap)
#endif
	 || soap_end_recv(soap))
		return soap->error;
	soap->error = klft_GetServerFilesList(soap, soap_tmp_klft_GetServerFilesList.clientName, r);
	if (soap->error)
		return soap->error;
	soap_serializeheader(soap);
	soap_serialize_klft_GetServerFilesListResponse(soap, &r);
	soap_begin_count(soap);
	if (soap->mode & SOAP_IO_LENGTH)
	{	soap_envelope_begin_out(soap);
		soap_putheader(soap);
		soap_body_begin_out(soap);
		soap_put_klft_GetServerFilesListResponse(soap, &r, "klft-GetServerFilesListResponse", "");
		soap_body_end_out(soap);
		soap_envelope_end_out(soap);
	};
	if (soap_response(soap, SOAP_OK)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put_klft_GetServerFilesListResponse(soap, &r, "klft-GetServerFilesListResponse", "")
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap->error;
	soap_closesock(soap);
	return SOAP_OK;
}

SOAP_FMAC5 int SOAP_FMAC6 soap_serve_klft_GetUpdaterFolderFileInfo(struct soap *soap)
{	struct klft_GetUpdaterFolderFileInfo soap_tmp_klft_GetUpdaterFolderFileInfo;
	struct klft_GetUpdaterFolderFileInfoResponse r;
	soap_default_klft_GetUpdaterFolderFileInfoResponse(soap, &r);
	soap_default_klft_GetUpdaterFolderFileInfo(soap, &soap_tmp_klft_GetUpdaterFolderFileInfo);
	soap->encodingStyle = NULL;
	soap_get_klft_GetUpdaterFolderFileInfo(soap, &soap_tmp_klft_GetUpdaterFolderFileInfo, "klft-GetUpdaterFolderFileInfo", NULL);
	if (soap->error)
		return soap->error;
	
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
#ifndef WITH_LEANER
	 || soap_resolve_attachments(soap)
#endif
	 || soap_end_recv(soap))
		return soap->error;
	soap->error = klft_GetUpdaterFolderFileInfo(soap, soap_tmp_klft_GetUpdaterFolderFileInfo.fileName, soap_tmp_klft_GetUpdaterFolderFileInfo.options, r);
	if (soap->error)
		return soap->error;
	soap_serializeheader(soap);
	soap_serialize_klft_GetUpdaterFolderFileInfoResponse(soap, &r);
	soap_begin_count(soap);
	if (soap->mode & SOAP_IO_LENGTH)
	{	soap_envelope_begin_out(soap);
		soap_putheader(soap);
		soap_body_begin_out(soap);
		soap_put_klft_GetUpdaterFolderFileInfoResponse(soap, &r, "klft-GetUpdaterFolderFileInfoResponse", "");
		soap_body_end_out(soap);
		soap_envelope_end_out(soap);
	};
	if (soap_response(soap, SOAP_OK)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put_klft_GetUpdaterFolderFileInfoResponse(soap, &r, "klft-GetUpdaterFolderFileInfoResponse", "")
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap->error;
	soap_closesock(soap);
	return SOAP_OK;
}

SOAP_FMAC5 int SOAP_FMAC6 soap_serve_klft_GetFullFileInfo(struct soap *soap)
{	struct klft_GetFullFileInfo soap_tmp_klft_GetFullFileInfo;
	struct klft_GetFullFileInfoResponse r;
	soap_default_klft_GetFullFileInfoResponse(soap, &r);
	soap_default_klft_GetFullFileInfo(soap, &soap_tmp_klft_GetFullFileInfo);
	soap->encodingStyle = NULL;
	soap_get_klft_GetFullFileInfo(soap, &soap_tmp_klft_GetFullFileInfo, "klft-GetFullFileInfo", NULL);
	if (soap->error)
		return soap->error;
	
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
#ifndef WITH_LEANER
	 || soap_resolve_attachments(soap)
#endif
	 || soap_end_recv(soap))
		return soap->error;
	soap->error = klft_GetFullFileInfo(soap, soap_tmp_klft_GetFullFileInfo.fileId, r);
	if (soap->error)
		return soap->error;
	soap_serializeheader(soap);
	soap_serialize_klft_GetFullFileInfoResponse(soap, &r);
	soap_begin_count(soap);
	if (soap->mode & SOAP_IO_LENGTH)
	{	soap_envelope_begin_out(soap);
		soap_putheader(soap);
		soap_body_begin_out(soap);
		soap_put_klft_GetFullFileInfoResponse(soap, &r, "klft-GetFullFileInfoResponse", "");
		soap_body_end_out(soap);
		soap_envelope_end_out(soap);
	};
	if (soap_response(soap, SOAP_OK)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put_klft_GetFullFileInfoResponse(soap, &r, "klft-GetFullFileInfoResponse", "")
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap->error;
	soap_closesock(soap);
	return SOAP_OK;
}

SOAP_FMAC5 int SOAP_FMAC6 soap_serve_klft_GetHostUpdateAgentInfo(struct soap *soap)
{	struct klft_GetHostUpdateAgentInfo soap_tmp_klft_GetHostUpdateAgentInfo;
	struct klft_GetHostUpdateAgentInfoResponse r;
	soap_default_klft_GetHostUpdateAgentInfoResponse(soap, &r);
	soap_default_klft_GetHostUpdateAgentInfo(soap, &soap_tmp_klft_GetHostUpdateAgentInfo);
	soap->encodingStyle = NULL;
	soap_get_klft_GetHostUpdateAgentInfo(soap, &soap_tmp_klft_GetHostUpdateAgentInfo, "klft-GetHostUpdateAgentInfo", NULL);
	if (soap->error)
		return soap->error;
	
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
#ifndef WITH_LEANER
	 || soap_resolve_attachments(soap)
#endif
	 || soap_end_recv(soap))
		return soap->error;
	soap->error = klft_GetHostUpdateAgentInfo(soap, soap_tmp_klft_GetHostUpdateAgentInfo.hostId, r);
	if (soap->error)
		return soap->error;
	soap_serializeheader(soap);
	soap_serialize_klft_GetHostUpdateAgentInfoResponse(soap, &r);
	soap_begin_count(soap);
	if (soap->mode & SOAP_IO_LENGTH)
	{	soap_envelope_begin_out(soap);
		soap_putheader(soap);
		soap_body_begin_out(soap);
		soap_put_klft_GetHostUpdateAgentInfoResponse(soap, &r, "klft-GetHostUpdateAgentInfoResponse", "");
		soap_body_end_out(soap);
		soap_envelope_end_out(soap);
	};
	if (soap_response(soap, SOAP_OK)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put_klft_GetHostUpdateAgentInfoResponse(soap, &r, "klft-GetHostUpdateAgentInfoResponse", "")
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap->error;
	soap_closesock(soap);
	return SOAP_OK;
}

SOAP_FMAC5 int SOAP_FMAC6 soap_serve_klft_SendToClientFullSyncArchive(struct soap *soap)
{	struct klft_SendToClientFullSyncArchive soap_tmp_klft_SendToClientFullSyncArchive;
	struct klft_SendToClientFullSyncArchiveResponse r;
	soap_default_klft_SendToClientFullSyncArchiveResponse(soap, &r);
	soap_default_klft_SendToClientFullSyncArchive(soap, &soap_tmp_klft_SendToClientFullSyncArchive);
	soap->encodingStyle = NULL;
	soap_get_klft_SendToClientFullSyncArchive(soap, &soap_tmp_klft_SendToClientFullSyncArchive, "klft-SendToClientFullSyncArchive", NULL);
	if (soap->error)
		return soap->error;
	
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
#ifndef WITH_LEANER
	 || soap_resolve_attachments(soap)
#endif
	 || soap_end_recv(soap))
		return soap->error;
	soap->error = klft_SendToClientFullSyncArchive(soap, soap_tmp_klft_SendToClientFullSyncArchive.remoteClientName, soap_tmp_klft_SendToClientFullSyncArchive.syncFolderFileId, soap_tmp_klft_SendToClientFullSyncArchive.fileNamesHashed, soap_tmp_klft_SendToClientFullSyncArchive.filesList, soap_tmp_klft_SendToClientFullSyncArchive.syncFolderOptions, r);
	if (soap->error)
		return soap->error;
	soap_serializeheader(soap);
	soap_serialize_klft_SendToClientFullSyncArchiveResponse(soap, &r);
	soap_begin_count(soap);
	if (soap->mode & SOAP_IO_LENGTH)
	{	soap_envelope_begin_out(soap);
		soap_putheader(soap);
		soap_body_begin_out(soap);
		soap_put_klft_SendToClientFullSyncArchiveResponse(soap, &r, "klft-SendToClientFullSyncArchiveResponse", "");
		soap_body_end_out(soap);
		soap_envelope_end_out(soap);
	};
	if (soap_response(soap, SOAP_OK)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put_klft_SendToClientFullSyncArchiveResponse(soap, &r, "klft-SendToClientFullSyncArchiveResponse", "")
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap->error;
	soap_closesock(soap);
	return SOAP_OK;
}

SOAP_FMAC5 int SOAP_FMAC6 soap_serve_klfts_RegisterUpdateAgent(struct soap *soap)
{	struct klfts_RegisterUpdateAgent soap_tmp_klfts_RegisterUpdateAgent;
	struct klfts_RegisterUpdateAgentResponse r;
	soap_default_klfts_RegisterUpdateAgentResponse(soap, &r);
	soap_default_klfts_RegisterUpdateAgent(soap, &soap_tmp_klfts_RegisterUpdateAgent);
	soap->encodingStyle = NULL;
	soap_get_klfts_RegisterUpdateAgent(soap, &soap_tmp_klfts_RegisterUpdateAgent, "klfts-RegisterUpdateAgent", NULL);
	if (soap->error)
		return soap->error;
	
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
#ifndef WITH_LEANER
	 || soap_resolve_attachments(soap)
#endif
	 || soap_end_recv(soap))
		return soap->error;
	soap->error = klfts_RegisterUpdateAgent(soap, soap_tmp_klfts_RegisterUpdateAgent.updateAgentInfo, soap_tmp_klfts_RegisterUpdateAgent.checkExisting, r);
	if (soap->error)
		return soap->error;
	soap_serializeheader(soap);
	soap_serialize_klfts_RegisterUpdateAgentResponse(soap, &r);
	soap_begin_count(soap);
	if (soap->mode & SOAP_IO_LENGTH)
	{	soap_envelope_begin_out(soap);
		soap_putheader(soap);
		soap_body_begin_out(soap);
		soap_put_klfts_RegisterUpdateAgentResponse(soap, &r, "klfts-RegisterUpdateAgentResponse", "");
		soap_body_end_out(soap);
		soap_envelope_end_out(soap);
	};
	if (soap_response(soap, SOAP_OK)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put_klfts_RegisterUpdateAgentResponse(soap, &r, "klfts-RegisterUpdateAgentResponse", "")
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap->error;
	soap_closesock(soap);
	return SOAP_OK;
}

SOAP_FMAC5 int SOAP_FMAC6 soap_serve_klfts_ModifyUpdateAgent(struct soap *soap)
{	struct klfts_ModifyUpdateAgent soap_tmp_klfts_ModifyUpdateAgent;
	struct klfts_ModifyUpdateAgentResponse r;
	soap_default_klfts_ModifyUpdateAgentResponse(soap, &r);
	soap_default_klfts_ModifyUpdateAgent(soap, &soap_tmp_klfts_ModifyUpdateAgent);
	soap->encodingStyle = NULL;
	soap_get_klfts_ModifyUpdateAgent(soap, &soap_tmp_klfts_ModifyUpdateAgent, "klfts-ModifyUpdateAgent", NULL);
	if (soap->error)
		return soap->error;
	
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
#ifndef WITH_LEANER
	 || soap_resolve_attachments(soap)
#endif
	 || soap_end_recv(soap))
		return soap->error;
	soap->error = klfts_ModifyUpdateAgent(soap, soap_tmp_klfts_ModifyUpdateAgent.updateAgentInfo, r);
	if (soap->error)
		return soap->error;
	soap_serializeheader(soap);
	soap_serialize_klfts_ModifyUpdateAgentResponse(soap, &r);
	soap_begin_count(soap);
	if (soap->mode & SOAP_IO_LENGTH)
	{	soap_envelope_begin_out(soap);
		soap_putheader(soap);
		soap_body_begin_out(soap);
		soap_put_klfts_ModifyUpdateAgentResponse(soap, &r, "klfts-ModifyUpdateAgentResponse", "");
		soap_body_end_out(soap);
		soap_envelope_end_out(soap);
	};
	if (soap_response(soap, SOAP_OK)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put_klfts_ModifyUpdateAgentResponse(soap, &r, "klfts-ModifyUpdateAgentResponse", "")
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap->error;
	soap_closesock(soap);
	return SOAP_OK;
}

SOAP_FMAC5 int SOAP_FMAC6 soap_serve_klfts_UnregisterUpdateAgent(struct soap *soap)
{	struct klfts_UnregisterUpdateAgent soap_tmp_klfts_UnregisterUpdateAgent;
	struct klfts_UnregisterUpdateAgentResponse r;
	soap_default_klfts_UnregisterUpdateAgentResponse(soap, &r);
	soap_default_klfts_UnregisterUpdateAgent(soap, &soap_tmp_klfts_UnregisterUpdateAgent);
	soap->encodingStyle = NULL;
	soap_get_klfts_UnregisterUpdateAgent(soap, &soap_tmp_klfts_UnregisterUpdateAgent, "klfts-UnregisterUpdateAgent", NULL);
	if (soap->error)
		return soap->error;
	
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
#ifndef WITH_LEANER
	 || soap_resolve_attachments(soap)
#endif
	 || soap_end_recv(soap))
		return soap->error;
	soap->error = klfts_UnregisterUpdateAgent(soap, soap_tmp_klfts_UnregisterUpdateAgent.strAgentHostId, r);
	if (soap->error)
		return soap->error;
	soap_serializeheader(soap);
	soap_serialize_klfts_UnregisterUpdateAgentResponse(soap, &r);
	soap_begin_count(soap);
	if (soap->mode & SOAP_IO_LENGTH)
	{	soap_envelope_begin_out(soap);
		soap_putheader(soap);
		soap_body_begin_out(soap);
		soap_put_klfts_UnregisterUpdateAgentResponse(soap, &r, "klfts-UnregisterUpdateAgentResponse", "");
		soap_body_end_out(soap);
		soap_envelope_end_out(soap);
	};
	if (soap_response(soap, SOAP_OK)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put_klfts_UnregisterUpdateAgentResponse(soap, &r, "klfts-UnregisterUpdateAgentResponse", "")
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap->error;
	soap_closesock(soap);
	return SOAP_OK;
}

SOAP_FMAC5 int SOAP_FMAC6 soap_serve_klfts_GetDefaultUpdateAgentRegistrationInfo(struct soap *soap)
{	struct klfts_GetDefaultUpdateAgentRegistrationInfo soap_tmp_klfts_GetDefaultUpdateAgentRegistrationInfo;
	struct klfts_GetDefaultUpdateAgentRegistrationInfoResponse r;
	soap_default_klfts_GetDefaultUpdateAgentRegistrationInfoResponse(soap, &r);
	soap_default_klfts_GetDefaultUpdateAgentRegistrationInfo(soap, &soap_tmp_klfts_GetDefaultUpdateAgentRegistrationInfo);
	soap->encodingStyle = NULL;
	soap_get_klfts_GetDefaultUpdateAgentRegistrationInfo(soap, &soap_tmp_klfts_GetDefaultUpdateAgentRegistrationInfo, "klfts-GetDefaultUpdateAgentRegistrationInfo", NULL);
	if (soap->error)
		return soap->error;
	
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
#ifndef WITH_LEANER
	 || soap_resolve_attachments(soap)
#endif
	 || soap_end_recv(soap))
		return soap->error;
	soap->error = klfts_GetDefaultUpdateAgentRegistrationInfo(soap, soap_tmp_klfts_GetDefaultUpdateAgentRegistrationInfo.nGroupId, r);
	if (soap->error)
		return soap->error;
	soap_serializeheader(soap);
	soap_serialize_klfts_GetDefaultUpdateAgentRegistrationInfoResponse(soap, &r);
	soap_begin_count(soap);
	if (soap->mode & SOAP_IO_LENGTH)
	{	soap_envelope_begin_out(soap);
		soap_putheader(soap);
		soap_body_begin_out(soap);
		soap_put_klfts_GetDefaultUpdateAgentRegistrationInfoResponse(soap, &r, "klfts-GetDefaultUpdateAgentRegistrationInfoResponse", "");
		soap_body_end_out(soap);
		soap_envelope_end_out(soap);
	};
	if (soap_response(soap, SOAP_OK)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put_klfts_GetDefaultUpdateAgentRegistrationInfoResponse(soap, &r, "klfts-GetDefaultUpdateAgentRegistrationInfoResponse", "")
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap->error;
	soap_closesock(soap);
	return SOAP_OK;
}

SOAP_FMAC5 int SOAP_FMAC6 soap_serve_klfts_GetUpdateAgentsForGroup(struct soap *soap)
{	struct klfts_GetUpdateAgentsForGroup soap_tmp_klfts_GetUpdateAgentsForGroup;
	struct klfts_GetUpdateAgentsForGroupResponse r;
	soap_default_klfts_GetUpdateAgentsForGroupResponse(soap, &r);
	soap_default_klfts_GetUpdateAgentsForGroup(soap, &soap_tmp_klfts_GetUpdateAgentsForGroup);
	soap->encodingStyle = NULL;
	soap_get_klfts_GetUpdateAgentsForGroup(soap, &soap_tmp_klfts_GetUpdateAgentsForGroup, "klfts-GetUpdateAgentsForGroup", NULL);
	if (soap->error)
		return soap->error;
	
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
#ifndef WITH_LEANER
	 || soap_resolve_attachments(soap)
#endif
	 || soap_end_recv(soap))
		return soap->error;
	soap->error = klfts_GetUpdateAgentsForGroup(soap, soap_tmp_klfts_GetUpdateAgentsForGroup.nGroupId, r);
	if (soap->error)
		return soap->error;
	soap_serializeheader(soap);
	soap_serialize_klfts_GetUpdateAgentsForGroupResponse(soap, &r);
	soap_begin_count(soap);
	if (soap->mode & SOAP_IO_LENGTH)
	{	soap_envelope_begin_out(soap);
		soap_putheader(soap);
		soap_body_begin_out(soap);
		soap_put_klfts_GetUpdateAgentsForGroupResponse(soap, &r, "klfts-GetUpdateAgentsForGroupResponse", "");
		soap_body_end_out(soap);
		soap_envelope_end_out(soap);
	};
	if (soap_response(soap, SOAP_OK)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put_klfts_GetUpdateAgentsForGroupResponse(soap, &r, "klfts-GetUpdateAgentsForGroupResponse", "")
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap->error;
	soap_closesock(soap);
	return SOAP_OK;
}

SOAP_FMAC5 int SOAP_FMAC6 soap_serve_klfts_GetUpdateAgentInfo(struct soap *soap)
{	struct klfts_GetUpdateAgentInfo soap_tmp_klfts_GetUpdateAgentInfo;
	struct klfts_GetUpdateAgentInfoResponse r;
	soap_default_klfts_GetUpdateAgentInfoResponse(soap, &r);
	soap_default_klfts_GetUpdateAgentInfo(soap, &soap_tmp_klfts_GetUpdateAgentInfo);
	soap->encodingStyle = NULL;
	soap_get_klfts_GetUpdateAgentInfo(soap, &soap_tmp_klfts_GetUpdateAgentInfo, "klfts-GetUpdateAgentInfo", NULL);
	if (soap->error)
		return soap->error;
	
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
#ifndef WITH_LEANER
	 || soap_resolve_attachments(soap)
#endif
	 || soap_end_recv(soap))
		return soap->error;
	soap->error = klfts_GetUpdateAgentInfo(soap, soap_tmp_klfts_GetUpdateAgentInfo.strAgentHostId, r);
	if (soap->error)
		return soap->error;
	soap_serializeheader(soap);
	soap_serialize_klfts_GetUpdateAgentInfoResponse(soap, &r);
	soap_begin_count(soap);
	if (soap->mode & SOAP_IO_LENGTH)
	{	soap_envelope_begin_out(soap);
		soap_putheader(soap);
		soap_body_begin_out(soap);
		soap_put_klfts_GetUpdateAgentInfoResponse(soap, &r, "klfts-GetUpdateAgentInfoResponse", "");
		soap_body_end_out(soap);
		soap_envelope_end_out(soap);
	};
	if (soap_response(soap, SOAP_OK)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put_klfts_GetUpdateAgentInfoResponse(soap, &r, "klfts-GetUpdateAgentInfoResponse", "")
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap->error;
	soap_closesock(soap);
	return SOAP_OK;
}

SOAP_FMAC5 int SOAP_FMAC6 soap_serve_klfts_UseUAForSyncFolder(struct soap *soap)
{	struct klfts_UseUAForSyncFolder soap_tmp_klfts_UseUAForSyncFolder;
	struct klfts_UseUAForSyncFolderResponse r;
	soap_default_klfts_UseUAForSyncFolderResponse(soap, &r);
	soap_default_klfts_UseUAForSyncFolder(soap, &soap_tmp_klfts_UseUAForSyncFolder);
	soap->encodingStyle = NULL;
	soap_get_klfts_UseUAForSyncFolder(soap, &soap_tmp_klfts_UseUAForSyncFolder, "klfts-UseUAForSyncFolder", NULL);
	if (soap->error)
		return soap->error;
	
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
#ifndef WITH_LEANER
	 || soap_resolve_attachments(soap)
#endif
	 || soap_end_recv(soap))
		return soap->error;
	soap->error = klfts_UseUAForSyncFolder(soap, soap_tmp_klfts_UseUAForSyncFolder.strAgentHostId, soap_tmp_klfts_UseUAForSyncFolder.strSyncFolderName, soap_tmp_klfts_UseUAForSyncFolder.bUse, r);
	if (soap->error)
		return soap->error;
	soap_serializeheader(soap);
	soap_serialize_klfts_UseUAForSyncFolderResponse(soap, &r);
	soap_begin_count(soap);
	if (soap->mode & SOAP_IO_LENGTH)
	{	soap_envelope_begin_out(soap);
		soap_putheader(soap);
		soap_body_begin_out(soap);
		soap_put_klfts_UseUAForSyncFolderResponse(soap, &r, "klfts-UseUAForSyncFolderResponse", "");
		soap_body_end_out(soap);
		soap_envelope_end_out(soap);
	};
	if (soap_response(soap, SOAP_OK)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put_klfts_UseUAForSyncFolderResponse(soap, &r, "klfts-UseUAForSyncFolderResponse", "")
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap->error;
	soap_closesock(soap);
	return SOAP_OK;
}

SOAP_FMAC5 int SOAP_FMAC6 soap_serve_klfts_GetUseUAForSyncFolder(struct soap *soap)
{	struct klfts_GetUseUAForSyncFolder soap_tmp_klfts_GetUseUAForSyncFolder;
	struct klfts_GetUseUAForSyncFolderResponse r;
	soap_default_klfts_GetUseUAForSyncFolderResponse(soap, &r);
	soap_default_klfts_GetUseUAForSyncFolder(soap, &soap_tmp_klfts_GetUseUAForSyncFolder);
	soap->encodingStyle = NULL;
	soap_get_klfts_GetUseUAForSyncFolder(soap, &soap_tmp_klfts_GetUseUAForSyncFolder, "klfts-GetUseUAForSyncFolder", NULL);
	if (soap->error)
		return soap->error;
	
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
#ifndef WITH_LEANER
	 || soap_resolve_attachments(soap)
#endif
	 || soap_end_recv(soap))
		return soap->error;
	soap->error = klfts_GetUseUAForSyncFolder(soap, soap_tmp_klfts_GetUseUAForSyncFolder.strAgentHostId, soap_tmp_klfts_GetUseUAForSyncFolder.strSyncFolderName, r);
	if (soap->error)
		return soap->error;
	soap_serializeheader(soap);
	soap_serialize_klfts_GetUseUAForSyncFolderResponse(soap, &r);
	soap_begin_count(soap);
	if (soap->mode & SOAP_IO_LENGTH)
	{	soap_envelope_begin_out(soap);
		soap_putheader(soap);
		soap_body_begin_out(soap);
		soap_put_klfts_GetUseUAForSyncFolderResponse(soap, &r, "klfts-GetUseUAForSyncFolderResponse", "");
		soap_body_end_out(soap);
		soap_envelope_end_out(soap);
	};
	if (soap_response(soap, SOAP_OK)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put_klfts_GetUseUAForSyncFolderResponse(soap, &r, "klfts-GetUseUAForSyncFolderResponse", "")
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap->error;
	soap_closesock(soap);
	return SOAP_OK;
}

SOAP_FMAC5 int SOAP_FMAC6 soap_serve_klcmptrsft_GetCompetitorSoftwareList(struct soap *soap)
{	struct klcmptrsft_GetCompetitorSoftwareList soap_tmp_klcmptrsft_GetCompetitorSoftwareList;
	struct klcmptrsft_GetCompetitorSoftwareLisResponse r;
	soap_default_klcmptrsft_GetCompetitorSoftwareLisResponse(soap, &r);
	soap_default_klcmptrsft_GetCompetitorSoftwareList(soap, &soap_tmp_klcmptrsft_GetCompetitorSoftwareList);
	soap->encodingStyle = NULL;
	soap_get_klcmptrsft_GetCompetitorSoftwareList(soap, &soap_tmp_klcmptrsft_GetCompetitorSoftwareList, "klcmptrsft-GetCompetitorSoftwareList", NULL);
	if (soap->error)
		return soap->error;
	
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
#ifndef WITH_LEANER
	 || soap_resolve_attachments(soap)
#endif
	 || soap_end_recv(soap))
		return soap->error;
	soap->error = klcmptrsft_GetCompetitorSoftwareList(soap, r);
	if (soap->error)
		return soap->error;
	soap_serializeheader(soap);
	soap_serialize_klcmptrsft_GetCompetitorSoftwareLisResponse(soap, &r);
	soap_begin_count(soap);
	if (soap->mode & SOAP_IO_LENGTH)
	{	soap_envelope_begin_out(soap);
		soap_putheader(soap);
		soap_body_begin_out(soap);
		soap_put_klcmptrsft_GetCompetitorSoftwareLisResponse(soap, &r, "klcmptrsft-GetCompetitorSoftwareLisResponse", "");
		soap_body_end_out(soap);
		soap_envelope_end_out(soap);
	};
	if (soap_response(soap, SOAP_OK)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put_klcmptrsft_GetCompetitorSoftwareLisResponse(soap, &r, "klcmptrsft-GetCompetitorSoftwareLisResponse", "")
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap->error;
	soap_closesock(soap);
	return SOAP_OK;
}

SOAP_FMAC5 int SOAP_FMAC6 soap_serve_klcmptrsft_GetHostCompetitorSoftwareList(struct soap *soap)
{	struct klcmptrsft_GetHostCompetitorSoftwareList soap_tmp_klcmptrsft_GetHostCompetitorSoftwareList;
	struct klcmptrsft_GetHostCompetitorSoftwareListResponse r;
	soap_default_klcmptrsft_GetHostCompetitorSoftwareListResponse(soap, &r);
	soap_default_klcmptrsft_GetHostCompetitorSoftwareList(soap, &soap_tmp_klcmptrsft_GetHostCompetitorSoftwareList);
	soap->encodingStyle = NULL;
	soap_get_klcmptrsft_GetHostCompetitorSoftwareList(soap, &soap_tmp_klcmptrsft_GetHostCompetitorSoftwareList, "klcmptrsft-GetHostCompetitorSoftwareList", NULL);
	if (soap->error)
		return soap->error;
	
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
#ifndef WITH_LEANER
	 || soap_resolve_attachments(soap)
#endif
	 || soap_end_recv(soap))
		return soap->error;
	soap->error = klcmptrsft_GetHostCompetitorSoftwareList(soap, soap_tmp_klcmptrsft_GetHostCompetitorSoftwareList.hostId, r);
	if (soap->error)
		return soap->error;
	soap_serializeheader(soap);
	soap_serialize_klcmptrsft_GetHostCompetitorSoftwareListResponse(soap, &r);
	soap_begin_count(soap);
	if (soap->mode & SOAP_IO_LENGTH)
	{	soap_envelope_begin_out(soap);
		soap_putheader(soap);
		soap_body_begin_out(soap);
		soap_put_klcmptrsft_GetHostCompetitorSoftwareListResponse(soap, &r, "klcmptrsft-GetHostCompetitorSoftwareListResponse", "");
		soap_body_end_out(soap);
		soap_envelope_end_out(soap);
	};
	if (soap_response(soap, SOAP_OK)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put_klcmptrsft_GetHostCompetitorSoftwareListResponse(soap, &r, "klcmptrsft-GetHostCompetitorSoftwareListResponse", "")
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap->error;
	soap_closesock(soap);
	return SOAP_OK;
}

SOAP_FMAC5 int SOAP_FMAC6 soap_serve_aklwngt__SessionBegin(struct soap *soap)
{	struct aklwngt__SessionBegin soap_tmp_aklwngt__SessionBegin;
	struct aklwngt__SessionBeginResponse r;
	soap_default_aklwngt__SessionBeginResponse(soap, &r);
	soap_default_aklwngt__SessionBegin(soap, &soap_tmp_aklwngt__SessionBegin);
	soap->encodingStyle = NULL;
	soap_get_aklwngt__SessionBegin(soap, &soap_tmp_aklwngt__SessionBegin, "aklwngt:SessionBegin", NULL);
	if (soap->error)
		return soap->error;
	
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
#ifndef WITH_LEANER
	 || soap_resolve_attachments(soap)
#endif
	 || soap_end_recv(soap))
		return soap->error;
	soap->error = aklwngt__SessionBegin(soap, soap_tmp_aklwngt__SessionBegin.szDeviceId, soap_tmp_aklwngt__SessionBegin.szPassword, soap_tmp_aklwngt__SessionBegin.nProtocolVersion, r);
	if (soap->error)
		return soap->error;
	soap_serializeheader(soap);
	soap_serialize_aklwngt__SessionBeginResponse(soap, &r);
	soap_begin_count(soap);
	if (soap->mode & SOAP_IO_LENGTH)
	{	soap_envelope_begin_out(soap);
		soap_putheader(soap);
		soap_body_begin_out(soap);
		soap_put_aklwngt__SessionBeginResponse(soap, &r, "aklwngt:SessionBeginResponse", "");
		soap_body_end_out(soap);
		soap_envelope_end_out(soap);
	};
	if (soap_response(soap, SOAP_OK)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put_aklwngt__SessionBeginResponse(soap, &r, "aklwngt:SessionBeginResponse", "")
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap->error;
	soap_closesock(soap);
	return SOAP_OK;
}

SOAP_FMAC5 int SOAP_FMAC6 soap_serve_aklwngt__SessionEnd(struct soap *soap)
{	struct aklwngt__SessionEnd soap_tmp_aklwngt__SessionEnd;
	struct aklwngt__SessionEndResponse r;
	soap_default_aklwngt__SessionEndResponse(soap, &r);
	soap_default_aklwngt__SessionEnd(soap, &soap_tmp_aklwngt__SessionEnd);
	soap->encodingStyle = NULL;
	soap_get_aklwngt__SessionEnd(soap, &soap_tmp_aklwngt__SessionEnd, "aklwngt:SessionEnd", NULL);
	if (soap->error)
		return soap->error;
	
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
#ifndef WITH_LEANER
	 || soap_resolve_attachments(soap)
#endif
	 || soap_end_recv(soap))
		return soap->error;
	soap->error = aklwngt__SessionEnd(soap, soap_tmp_aklwngt__SessionEnd.szSessionId, r);
	if (soap->error)
		return soap->error;
	soap_serializeheader(soap);
	soap_serialize_aklwngt__SessionEndResponse(soap, &r);
	soap_begin_count(soap);
	if (soap->mode & SOAP_IO_LENGTH)
	{	soap_envelope_begin_out(soap);
		soap_putheader(soap);
		soap_body_begin_out(soap);
		soap_put_aklwngt__SessionEndResponse(soap, &r, "aklwngt:SessionEndResponse", "");
		soap_body_end_out(soap);
		soap_envelope_end_out(soap);
	};
	if (soap_response(soap, SOAP_OK)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put_aklwngt__SessionEndResponse(soap, &r, "aklwngt:SessionEndResponse", "")
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap->error;
	soap_closesock(soap);
	return SOAP_OK;
}

SOAP_FMAC5 int SOAP_FMAC6 soap_serve_aklwngt__Heartbeat(struct soap *soap)
{	struct aklwngt__Heartbeat soap_tmp_aklwngt__Heartbeat;
	struct aklwngt__HeartbeatResponse r;
	soap_default_aklwngt__HeartbeatResponse(soap, &r);
	soap_default_aklwngt__Heartbeat(soap, &soap_tmp_aklwngt__Heartbeat);
	soap->encodingStyle = NULL;
	soap_get_aklwngt__Heartbeat(soap, &soap_tmp_aklwngt__Heartbeat, "aklwngt:Heartbeat", NULL);
	if (soap->error)
		return soap->error;
	
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
#ifndef WITH_LEANER
	 || soap_resolve_attachments(soap)
#endif
	 || soap_end_recv(soap))
		return soap->error;
	soap->error = aklwngt__Heartbeat(soap, soap_tmp_aklwngt__Heartbeat.szSessionId, soap_tmp_aklwngt__Heartbeat.oMaySynchronize, r);
	if (soap->error)
		return soap->error;
	soap_serializeheader(soap);
	soap_serialize_aklwngt__HeartbeatResponse(soap, &r);
	soap_begin_count(soap);
	if (soap->mode & SOAP_IO_LENGTH)
	{	soap_envelope_begin_out(soap);
		soap_putheader(soap);
		soap_body_begin_out(soap);
		soap_put_aklwngt__HeartbeatResponse(soap, &r, "aklwngt:HeartbeatResponse", "");
		soap_body_end_out(soap);
		soap_envelope_end_out(soap);
	};
	if (soap_response(soap, SOAP_OK)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put_aklwngt__HeartbeatResponse(soap, &r, "aklwngt:HeartbeatResponse", "")
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap->error;
	soap_closesock(soap);
	return SOAP_OK;
}

SOAP_FMAC5 int SOAP_FMAC6 soap_serve_aklwngt__PutResult(struct soap *soap)
{	struct aklwngt__PutResult soap_tmp_aklwngt__PutResult;
	struct aklwngt__PutResultResponse r;
	soap_default_aklwngt__PutResultResponse(soap, &r);
	soap_default_aklwngt__PutResult(soap, &soap_tmp_aklwngt__PutResult);
	soap->encodingStyle = NULL;
	soap_get_aklwngt__PutResult(soap, &soap_tmp_aklwngt__PutResult, "aklwngt:PutResult", NULL);
	if (soap->error)
		return soap->error;
	
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
#ifndef WITH_LEANER
	 || soap_resolve_attachments(soap)
#endif
	 || soap_end_recv(soap))
		return soap->error;
	soap->error = aklwngt__PutResult(soap, soap_tmp_aklwngt__PutResult.szSessionId, soap_tmp_aklwngt__PutResult.result, r);
	if (soap->error)
		return soap->error;
	soap_serializeheader(soap);
	soap_serialize_aklwngt__PutResultResponse(soap, &r);
	soap_begin_count(soap);
	if (soap->mode & SOAP_IO_LENGTH)
	{	soap_envelope_begin_out(soap);
		soap_putheader(soap);
		soap_body_begin_out(soap);
		soap_put_aklwngt__PutResultResponse(soap, &r, "aklwngt:PutResultResponse", "");
		soap_body_end_out(soap);
		soap_envelope_end_out(soap);
	};
	if (soap_response(soap, SOAP_OK)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put_aklwngt__PutResultResponse(soap, &r, "aklwngt:PutResultResponse", "")
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap->error;
	soap_closesock(soap);
	return SOAP_OK;
}

SOAP_FMAC5 int SOAP_FMAC6 soap_serve_aklwngt__PutEvents(struct soap *soap)
{	struct aklwngt__PutEvents soap_tmp_aklwngt__PutEvents;
	struct aklwngt__PutEventsResponse r;
	soap_default_aklwngt__PutEventsResponse(soap, &r);
	soap_default_aklwngt__PutEvents(soap, &soap_tmp_aklwngt__PutEvents);
	soap->encodingStyle = NULL;
	soap_get_aklwngt__PutEvents(soap, &soap_tmp_aklwngt__PutEvents, "aklwngt:PutEvents", NULL);
	if (soap->error)
		return soap->error;
	
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
#ifndef WITH_LEANER
	 || soap_resolve_attachments(soap)
#endif
	 || soap_end_recv(soap))
		return soap->error;
	soap->error = aklwngt__PutEvents(soap, soap_tmp_aklwngt__PutEvents.szSessionId, soap_tmp_aklwngt__PutEvents.oEventsInfoArray, r);
	if (soap->error)
		return soap->error;
	soap_serializeheader(soap);
	soap_serialize_aklwngt__PutEventsResponse(soap, &r);
	soap_begin_count(soap);
	if (soap->mode & SOAP_IO_LENGTH)
	{	soap_envelope_begin_out(soap);
		soap_putheader(soap);
		soap_body_begin_out(soap);
		soap_put_aklwngt__PutEventsResponse(soap, &r, "aklwngt:PutEventsResponse", "");
		soap_body_end_out(soap);
		soap_envelope_end_out(soap);
	};
	if (soap_response(soap, SOAP_OK)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put_aklwngt__PutEventsResponse(soap, &r, "aklwngt:PutEventsResponse", "")
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap->error;
	soap_closesock(soap);
	return SOAP_OK;
}

SOAP_FMAC5 int SOAP_FMAC6 soap_serve_aklwngt__klft_GetFileInfo(struct soap *soap)
{	struct aklwngt__klft_GetFileInfo soap_tmp_aklwngt__klft_GetFileInfo;
	struct aklwngt__klft_GetFileInfoResponse r;
	soap_default_aklwngt__klft_GetFileInfoResponse(soap, &r);
	soap_default_aklwngt__klft_GetFileInfo(soap, &soap_tmp_aklwngt__klft_GetFileInfo);
	soap->encodingStyle = NULL;
	soap_get_aklwngt__klft_GetFileInfo(soap, &soap_tmp_aklwngt__klft_GetFileInfo, "aklwngt:klft-GetFileInfo", NULL);
	if (soap->error)
		return soap->error;
	
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
#ifndef WITH_LEANER
	 || soap_resolve_attachments(soap)
#endif
	 || soap_end_recv(soap))
		return soap->error;
	soap->error = aklwngt__klft_GetFileInfo(soap, soap_tmp_aklwngt__klft_GetFileInfo.szSessionId, soap_tmp_aklwngt__klft_GetFileInfo.fileName, r);
	if (soap->error)
		return soap->error;
	soap_serializeheader(soap);
	soap_serialize_aklwngt__klft_GetFileInfoResponse(soap, &r);
	soap_begin_count(soap);
	if (soap->mode & SOAP_IO_LENGTH)
	{	soap_envelope_begin_out(soap);
		soap_putheader(soap);
		soap_body_begin_out(soap);
		soap_put_aklwngt__klft_GetFileInfoResponse(soap, &r, "aklwngt:klft-GetFileInfoResponse", "");
		soap_body_end_out(soap);
		soap_envelope_end_out(soap);
	};
	if (soap_response(soap, SOAP_OK)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put_aklwngt__klft_GetFileInfoResponse(soap, &r, "aklwngt:klft-GetFileInfoResponse", "")
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap->error;
	soap_closesock(soap);
	return SOAP_OK;
}

SOAP_FMAC5 int SOAP_FMAC6 soap_serve_aklwngt__klft_GetNextFileChunk(struct soap *soap)
{	struct aklwngt__klft_GetNextFileChunk soap_tmp_aklwngt__klft_GetNextFileChunk;
	struct aklwngt__klft_GetNextFileChunkResponse r;
	soap_default_aklwngt__klft_GetNextFileChunkResponse(soap, &r);
	soap_default_aklwngt__klft_GetNextFileChunk(soap, &soap_tmp_aklwngt__klft_GetNextFileChunk);
	soap->encodingStyle = NULL;
	soap_get_aklwngt__klft_GetNextFileChunk(soap, &soap_tmp_aklwngt__klft_GetNextFileChunk, "aklwngt:klft-GetNextFileChunk", NULL);
	if (soap->error)
		return soap->error;
	
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
#ifndef WITH_LEANER
	 || soap_resolve_attachments(soap)
#endif
	 || soap_end_recv(soap))
		return soap->error;
	soap->error = aklwngt__klft_GetNextFileChunk(soap, soap_tmp_aklwngt__klft_GetNextFileChunk.szSessionId, soap_tmp_aklwngt__klft_GetNextFileChunk.fileName, soap_tmp_aklwngt__klft_GetNextFileChunk.startFilePos, soap_tmp_aklwngt__klft_GetNextFileChunk.neededSize, r);
	if (soap->error)
		return soap->error;
	soap_serializeheader(soap);
	soap_serialize_aklwngt__klft_GetNextFileChunkResponse(soap, &r);
	soap_begin_count(soap);
	if (soap->mode & SOAP_IO_LENGTH)
	{	soap_envelope_begin_out(soap);
		soap_putheader(soap);
		soap_body_begin_out(soap);
		soap_put_aklwngt__klft_GetNextFileChunkResponse(soap, &r, "aklwngt:klft-GetNextFileChunkResponse", "");
		soap_body_end_out(soap);
		soap_envelope_end_out(soap);
	};
	if (soap_response(soap, SOAP_OK)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put_aklwngt__klft_GetNextFileChunkResponse(soap, &r, "aklwngt:klft-GetNextFileChunkResponse", "")
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap->error;
	soap_closesock(soap);
	return SOAP_OK;
}

SOAP_FMAC5 int SOAP_FMAC6 soap_serve_klptch_get_nagent_latest_patch_info(struct soap *soap)
{	struct klptch_get_nagent_latest_patch_info soap_tmp_klptch_get_nagent_latest_patch_info;
	struct klptch_get_nagent_latest_patch_infoResponse r;
	soap_default_klptch_get_nagent_latest_patch_infoResponse(soap, &r);
	soap_default_klptch_get_nagent_latest_patch_info(soap, &soap_tmp_klptch_get_nagent_latest_patch_info);
	soap->encodingStyle = NULL;
	soap_get_klptch_get_nagent_latest_patch_info(soap, &soap_tmp_klptch_get_nagent_latest_patch_info, "klptch-get-nagent-latest-patch-info", NULL);
	if (soap->error)
		return soap->error;
	
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
#ifndef WITH_LEANER
	 || soap_resolve_attachments(soap)
#endif
	 || soap_end_recv(soap))
		return soap->error;
	soap->error = klptch_get_nagent_latest_patch_info(soap, soap_tmp_klptch_get_nagent_latest_patch_info.nagent_data, r);
	if (soap->error)
		return soap->error;
	soap_serializeheader(soap);
	soap_serialize_klptch_get_nagent_latest_patch_infoResponse(soap, &r);
	soap_begin_count(soap);
	if (soap->mode & SOAP_IO_LENGTH)
	{	soap_envelope_begin_out(soap);
		soap_putheader(soap);
		soap_body_begin_out(soap);
		soap_put_klptch_get_nagent_latest_patch_infoResponse(soap, &r, "klptch-get-nagent-latest-patch-infoResponse", "");
		soap_body_end_out(soap);
		soap_envelope_end_out(soap);
	};
	if (soap_response(soap, SOAP_OK)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put_klptch_get_nagent_latest_patch_infoResponse(soap, &r, "klptch-get-nagent-latest-patch-infoResponse", "")
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap->error;
	soap_closesock(soap);
	return SOAP_OK;
}

SOAP_FMAC5 int SOAP_FMAC6 soap_serve_klinv_GetInvProductsList(struct soap *soap)
{	struct klinv_GetInvProductsList soap_tmp_klinv_GetInvProductsList;
	struct klinv_GetInvProductsListResponse r;
	soap_default_klinv_GetInvProductsListResponse(soap, &r);
	soap_default_klinv_GetInvProductsList(soap, &soap_tmp_klinv_GetInvProductsList);
	soap->encodingStyle = NULL;
	soap_get_klinv_GetInvProductsList(soap, &soap_tmp_klinv_GetInvProductsList, "klinv-GetInvProductsList", NULL);
	if (soap->error)
		return soap->error;
	
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
#ifndef WITH_LEANER
	 || soap_resolve_attachments(soap)
#endif
	 || soap_end_recv(soap))
		return soap->error;
	soap->error = klinv_GetInvProductsList(soap, r);
	if (soap->error)
		return soap->error;
	soap_serializeheader(soap);
	soap_serialize_klinv_GetInvProductsListResponse(soap, &r);
	soap_begin_count(soap);
	if (soap->mode & SOAP_IO_LENGTH)
	{	soap_envelope_begin_out(soap);
		soap_putheader(soap);
		soap_body_begin_out(soap);
		soap_put_klinv_GetInvProductsListResponse(soap, &r, "klinv-GetInvProductsListResponse", "");
		soap_body_end_out(soap);
		soap_envelope_end_out(soap);
	};
	if (soap_response(soap, SOAP_OK)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put_klinv_GetInvProductsListResponse(soap, &r, "klinv-GetInvProductsListResponse", "")
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap->error;
	soap_closesock(soap);
	return SOAP_OK;
}

SOAP_FMAC5 int SOAP_FMAC6 soap_serve_klinv_GetInvPatchesList(struct soap *soap)
{	struct klinv_GetInvPatchesList soap_tmp_klinv_GetInvPatchesList;
	struct klinv_GetInvPatchesListResponse r;
	soap_default_klinv_GetInvPatchesListResponse(soap, &r);
	soap_default_klinv_GetInvPatchesList(soap, &soap_tmp_klinv_GetInvPatchesList);
	soap->encodingStyle = NULL;
	soap_get_klinv_GetInvPatchesList(soap, &soap_tmp_klinv_GetInvPatchesList, "klinv-GetInvPatchesList", NULL);
	if (soap->error)
		return soap->error;
	
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
#ifndef WITH_LEANER
	 || soap_resolve_attachments(soap)
#endif
	 || soap_end_recv(soap))
		return soap->error;
	soap->error = klinv_GetInvPatchesList(soap, r);
	if (soap->error)
		return soap->error;
	soap_serializeheader(soap);
	soap_serialize_klinv_GetInvPatchesListResponse(soap, &r);
	soap_begin_count(soap);
	if (soap->mode & SOAP_IO_LENGTH)
	{	soap_envelope_begin_out(soap);
		soap_putheader(soap);
		soap_body_begin_out(soap);
		soap_put_klinv_GetInvPatchesListResponse(soap, &r, "klinv-GetInvPatchesListResponse", "");
		soap_body_end_out(soap);
		soap_envelope_end_out(soap);
	};
	if (soap_response(soap, SOAP_OK)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put_klinv_GetInvPatchesListResponse(soap, &r, "klinv-GetInvPatchesListResponse", "")
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap->error;
	soap_closesock(soap);
	return SOAP_OK;
}

SOAP_FMAC5 int SOAP_FMAC6 soap_serve_klinv_GetHostInvProductsList(struct soap *soap)
{	struct klinv_GetHostInvProductsList soap_tmp_klinv_GetHostInvProductsList;
	struct klinv_GetHostInvProductsListResponse r;
	soap_default_klinv_GetHostInvProductsListResponse(soap, &r);
	soap_default_klinv_GetHostInvProductsList(soap, &soap_tmp_klinv_GetHostInvProductsList);
	soap->encodingStyle = NULL;
	soap_get_klinv_GetHostInvProductsList(soap, &soap_tmp_klinv_GetHostInvProductsList, "klinv-GetHostInvProductsList", NULL);
	if (soap->error)
		return soap->error;
	
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
#ifndef WITH_LEANER
	 || soap_resolve_attachments(soap)
#endif
	 || soap_end_recv(soap))
		return soap->error;
	soap->error = klinv_GetHostInvProductsList(soap, soap_tmp_klinv_GetHostInvProductsList.hostId, r);
	if (soap->error)
		return soap->error;
	soap_serializeheader(soap);
	soap_serialize_klinv_GetHostInvProductsListResponse(soap, &r);
	soap_begin_count(soap);
	if (soap->mode & SOAP_IO_LENGTH)
	{	soap_envelope_begin_out(soap);
		soap_putheader(soap);
		soap_body_begin_out(soap);
		soap_put_klinv_GetHostInvProductsListResponse(soap, &r, "klinv-GetHostInvProductsListResponse", "");
		soap_body_end_out(soap);
		soap_envelope_end_out(soap);
	};
	if (soap_response(soap, SOAP_OK)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put_klinv_GetHostInvProductsListResponse(soap, &r, "klinv-GetHostInvProductsListResponse", "")
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap->error;
	soap_closesock(soap);
	return SOAP_OK;
}

SOAP_FMAC5 int SOAP_FMAC6 soap_serve_klinv_GetHostInvPatchesList(struct soap *soap)
{	struct klinv_GetHostInvPatchesList soap_tmp_klinv_GetHostInvPatchesList;
	struct klinv_GetHostInvPatchesListResponse r;
	soap_default_klinv_GetHostInvPatchesListResponse(soap, &r);
	soap_default_klinv_GetHostInvPatchesList(soap, &soap_tmp_klinv_GetHostInvPatchesList);
	soap->encodingStyle = NULL;
	soap_get_klinv_GetHostInvPatchesList(soap, &soap_tmp_klinv_GetHostInvPatchesList, "klinv-GetHostInvPatchesList", NULL);
	if (soap->error)
		return soap->error;
	
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
#ifndef WITH_LEANER
	 || soap_resolve_attachments(soap)
#endif
	 || soap_end_recv(soap))
		return soap->error;
	soap->error = klinv_GetHostInvPatchesList(soap, soap_tmp_klinv_GetHostInvPatchesList.hostId, r);
	if (soap->error)
		return soap->error;
	soap_serializeheader(soap);
	soap_serialize_klinv_GetHostInvPatchesListResponse(soap, &r);
	soap_begin_count(soap);
	if (soap->mode & SOAP_IO_LENGTH)
	{	soap_envelope_begin_out(soap);
		soap_putheader(soap);
		soap_body_begin_out(soap);
		soap_put_klinv_GetHostInvPatchesListResponse(soap, &r, "klinv-GetHostInvPatchesListResponse", "");
		soap_body_end_out(soap);
		soap_envelope_end_out(soap);
	};
	if (soap_response(soap, SOAP_OK)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put_klinv_GetHostInvPatchesListResponse(soap, &r, "klinv-GetHostInvPatchesListResponse", "")
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap->error;
	soap_closesock(soap);
	return SOAP_OK;
}

SOAP_FMAC5 int SOAP_FMAC6 soap_serve_klinv_GetSrvCompetitorIniFileInfoList(struct soap *soap)
{	struct klinv_GetSrvCompetitorIniFileInfoList soap_tmp_klinv_GetSrvCompetitorIniFileInfoList;
	struct klinv_GetSrvCompetitorIniFileInfoListResponse r;
	soap_default_klinv_GetSrvCompetitorIniFileInfoListResponse(soap, &r);
	soap_default_klinv_GetSrvCompetitorIniFileInfoList(soap, &soap_tmp_klinv_GetSrvCompetitorIniFileInfoList);
	soap->encodingStyle = NULL;
	soap_get_klinv_GetSrvCompetitorIniFileInfoList(soap, &soap_tmp_klinv_GetSrvCompetitorIniFileInfoList, "klinv-GetSrvCompetitorIniFileInfoList", NULL);
	if (soap->error)
		return soap->error;
	
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
#ifndef WITH_LEANER
	 || soap_resolve_attachments(soap)
#endif
	 || soap_end_recv(soap))
		return soap->error;
	soap->error = klinv_GetSrvCompetitorIniFileInfoList(soap, soap_tmp_klinv_GetSrvCompetitorIniFileInfoList.wstrType, r);
	if (soap->error)
		return soap->error;
	soap_serializeheader(soap);
	soap_serialize_klinv_GetSrvCompetitorIniFileInfoListResponse(soap, &r);
	soap_begin_count(soap);
	if (soap->mode & SOAP_IO_LENGTH)
	{	soap_envelope_begin_out(soap);
		soap_putheader(soap);
		soap_body_begin_out(soap);
		soap_put_klinv_GetSrvCompetitorIniFileInfoListResponse(soap, &r, "klinv-GetSrvCompetitorIniFileInfoListResponse", "");
		soap_body_end_out(soap);
		soap_envelope_end_out(soap);
	};
	if (soap_response(soap, SOAP_OK)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put_klinv_GetSrvCompetitorIniFileInfoListResponse(soap, &r, "klinv-GetSrvCompetitorIniFileInfoListResponse", "")
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap->error;
	soap_closesock(soap);
	return SOAP_OK;
}

SOAP_FMAC5 int SOAP_FMAC6 soap_serve_klinv_ResetIterator(struct soap *soap)
{	struct klinv_ResetIterator soap_tmp_klinv_ResetIterator;
	struct klinv_ResetIteratorResponse r;
	soap_default_klinv_ResetIteratorResponse(soap, &r);
	soap_default_klinv_ResetIterator(soap, &soap_tmp_klinv_ResetIterator);
	soap->encodingStyle = NULL;
	soap_get_klinv_ResetIterator(soap, &soap_tmp_klinv_ResetIterator, "klinv-ResetIterator", NULL);
	if (soap->error)
		return soap->error;
	
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
#ifndef WITH_LEANER
	 || soap_resolve_attachments(soap)
#endif
	 || soap_end_recv(soap))
		return soap->error;
	soap->error = klinv_ResetIterator(soap, soap_tmp_klinv_ResetIterator.wstrFilter, soap_tmp_klinv_ResetIterator.fields, soap_tmp_klinv_ResetIterator.fields_to_order, soap_tmp_klinv_ResetIterator.lifetime, r);
	if (soap->error)
		return soap->error;
	soap_serializeheader(soap);
	soap_serialize_klinv_ResetIteratorResponse(soap, &r);
	soap_begin_count(soap);
	if (soap->mode & SOAP_IO_LENGTH)
	{	soap_envelope_begin_out(soap);
		soap_putheader(soap);
		soap_body_begin_out(soap);
		soap_put_klinv_ResetIteratorResponse(soap, &r, "klinv-ResetIteratorResponse", "");
		soap_body_end_out(soap);
		soap_envelope_end_out(soap);
	};
	if (soap_response(soap, SOAP_OK)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put_klinv_ResetIteratorResponse(soap, &r, "klinv-ResetIteratorResponse", "")
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap->error;
	soap_closesock(soap);
	return SOAP_OK;
}

SOAP_FMAC5 int SOAP_FMAC6 soap_serve_klinv_GetRecordCount(struct soap *soap)
{	struct klinv_GetRecordCount soap_tmp_klinv_GetRecordCount;
	struct klinv_GetRecordCountResponse r;
	soap_default_klinv_GetRecordCountResponse(soap, &r);
	soap_default_klinv_GetRecordCount(soap, &soap_tmp_klinv_GetRecordCount);
	soap->encodingStyle = NULL;
	soap_get_klinv_GetRecordCount(soap, &soap_tmp_klinv_GetRecordCount, "klinv-GetRecordCount", NULL);
	if (soap->error)
		return soap->error;
	
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
#ifndef WITH_LEANER
	 || soap_resolve_attachments(soap)
#endif
	 || soap_end_recv(soap))
		return soap->error;
	soap->error = klinv_GetRecordCount(soap, soap_tmp_klinv_GetRecordCount.iteratorId, r);
	if (soap->error)
		return soap->error;
	soap_serializeheader(soap);
	soap_serialize_klinv_GetRecordCountResponse(soap, &r);
	soap_begin_count(soap);
	if (soap->mode & SOAP_IO_LENGTH)
	{	soap_envelope_begin_out(soap);
		soap_putheader(soap);
		soap_body_begin_out(soap);
		soap_put_klinv_GetRecordCountResponse(soap, &r, "klinv-GetRecordCountResponse", "");
		soap_body_end_out(soap);
		soap_envelope_end_out(soap);
	};
	if (soap_response(soap, SOAP_OK)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put_klinv_GetRecordCountResponse(soap, &r, "klinv-GetRecordCountResponse", "")
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap->error;
	soap_closesock(soap);
	return SOAP_OK;
}

SOAP_FMAC5 int SOAP_FMAC6 soap_serve_klinv_GetRecordRange(struct soap *soap)
{	struct klinv_GetRecordRange soap_tmp_klinv_GetRecordRange;
	struct klinv_GetRecordRangeResponse r;
	soap_default_klinv_GetRecordRangeResponse(soap, &r);
	soap_default_klinv_GetRecordRange(soap, &soap_tmp_klinv_GetRecordRange);
	soap->encodingStyle = NULL;
	soap_get_klinv_GetRecordRange(soap, &soap_tmp_klinv_GetRecordRange, "klinv-GetRecordRange", NULL);
	if (soap->error)
		return soap->error;
	
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
#ifndef WITH_LEANER
	 || soap_resolve_attachments(soap)
#endif
	 || soap_end_recv(soap))
		return soap->error;
	soap->error = klinv_GetRecordRange(soap, soap_tmp_klinv_GetRecordRange.iteratorId, soap_tmp_klinv_GetRecordRange.nStart, soap_tmp_klinv_GetRecordRange.nEnd, r);
	if (soap->error)
		return soap->error;
	soap_serializeheader(soap);
	soap_serialize_klinv_GetRecordRangeResponse(soap, &r);
	soap_begin_count(soap);
	if (soap->mode & SOAP_IO_LENGTH)
	{	soap_envelope_begin_out(soap);
		soap_putheader(soap);
		soap_body_begin_out(soap);
		soap_put_klinv_GetRecordRangeResponse(soap, &r, "klinv-GetRecordRangeResponse", "");
		soap_body_end_out(soap);
		soap_envelope_end_out(soap);
	};
	if (soap_response(soap, SOAP_OK)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put_klinv_GetRecordRangeResponse(soap, &r, "klinv-GetRecordRangeResponse", "")
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap->error;
	soap_closesock(soap);
	return SOAP_OK;
}

SOAP_FMAC5 int SOAP_FMAC6 soap_serve_klinv_ReleaseIterator(struct soap *soap)
{	struct klinv_ReleaseIterator soap_tmp_klinv_ReleaseIterator;
	struct klinv_ReleaseIteratorResponse r;
	soap_default_klinv_ReleaseIteratorResponse(soap, &r);
	soap_default_klinv_ReleaseIterator(soap, &soap_tmp_klinv_ReleaseIterator);
	soap->encodingStyle = NULL;
	soap_get_klinv_ReleaseIterator(soap, &soap_tmp_klinv_ReleaseIterator, "klinv-ReleaseIterator", NULL);
	if (soap->error)
		return soap->error;
	
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
#ifndef WITH_LEANER
	 || soap_resolve_attachments(soap)
#endif
	 || soap_end_recv(soap))
		return soap->error;
	soap->error = klinv_ReleaseIterator(soap, soap_tmp_klinv_ReleaseIterator.iteratorId, r);
	if (soap->error)
		return soap->error;
	soap_serializeheader(soap);
	soap_serialize_klinv_ReleaseIteratorResponse(soap, &r);
	soap_begin_count(soap);
	if (soap->mode & SOAP_IO_LENGTH)
	{	soap_envelope_begin_out(soap);
		soap_putheader(soap);
		soap_body_begin_out(soap);
		soap_put_klinv_ReleaseIteratorResponse(soap, &r, "klinv-ReleaseIteratorResponse", "");
		soap_body_end_out(soap);
		soap_envelope_end_out(soap);
	};
	if (soap_response(soap, SOAP_OK)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put_klinv_ReleaseIteratorResponse(soap, &r, "klinv-ReleaseIteratorResponse", "")
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap->error;
	soap_closesock(soap);
	return SOAP_OK;
}

SOAP_FMAC5 int SOAP_FMAC6 soap_serve_kltrf_ReplaceRestriction(struct soap *soap)
{	struct kltrf_ReplaceRestriction soap_tmp_kltrf_ReplaceRestriction;
	struct kltrf_ReplaceRestrictionResponse r;
	soap_default_kltrf_ReplaceRestrictionResponse(soap, &r);
	soap_default_kltrf_ReplaceRestriction(soap, &soap_tmp_kltrf_ReplaceRestriction);
	soap->encodingStyle = NULL;
	soap_get_kltrf_ReplaceRestriction(soap, &soap_tmp_kltrf_ReplaceRestriction, "kltrf-ReplaceRestriction", NULL);
	if (soap->error)
		return soap->error;
	
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
#ifndef WITH_LEANER
	 || soap_resolve_attachments(soap)
#endif
	 || soap_end_recv(soap))
		return soap->error;
	soap->error = kltrf_ReplaceRestriction(soap, soap_tmp_kltrf_ReplaceRestriction.restriction, r);
	if (soap->error)
		return soap->error;
	soap_serializeheader(soap);
	soap_serialize_kltrf_ReplaceRestrictionResponse(soap, &r);
	soap_begin_count(soap);
	if (soap->mode & SOAP_IO_LENGTH)
	{	soap_envelope_begin_out(soap);
		soap_putheader(soap);
		soap_body_begin_out(soap);
		soap_put_kltrf_ReplaceRestrictionResponse(soap, &r, "kltrf-ReplaceRestrictionResponse", "");
		soap_body_end_out(soap);
		soap_envelope_end_out(soap);
	};
	if (soap_response(soap, SOAP_OK)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put_kltrf_ReplaceRestrictionResponse(soap, &r, "kltrf-ReplaceRestrictionResponse", "")
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap->error;
	soap_closesock(soap);
	return SOAP_OK;
}

SOAP_FMAC5 int SOAP_FMAC6 soap_serve_kltrf_DeleteRestriction(struct soap *soap)
{	struct kltrf_DeleteRestriction soap_tmp_kltrf_DeleteRestriction;
	struct kltrf_DeleteRestrictionResponse r;
	soap_default_kltrf_DeleteRestrictionResponse(soap, &r);
	soap_default_kltrf_DeleteRestriction(soap, &soap_tmp_kltrf_DeleteRestriction);
	soap->encodingStyle = NULL;
	soap_get_kltrf_DeleteRestriction(soap, &soap_tmp_kltrf_DeleteRestriction, "kltrf-DeleteRestriction", NULL);
	if (soap->error)
		return soap->error;
	
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
#ifndef WITH_LEANER
	 || soap_resolve_attachments(soap)
#endif
	 || soap_end_recv(soap))
		return soap->error;
	soap->error = kltrf_DeleteRestriction(soap, soap_tmp_kltrf_DeleteRestriction.nRestrictionId, r);
	if (soap->error)
		return soap->error;
	soap_serializeheader(soap);
	soap_serialize_kltrf_DeleteRestrictionResponse(soap, &r);
	soap_begin_count(soap);
	if (soap->mode & SOAP_IO_LENGTH)
	{	soap_envelope_begin_out(soap);
		soap_putheader(soap);
		soap_body_begin_out(soap);
		soap_put_kltrf_DeleteRestrictionResponse(soap, &r, "kltrf-DeleteRestrictionResponse", "");
		soap_body_end_out(soap);
		soap_envelope_end_out(soap);
	};
	if (soap_response(soap, SOAP_OK)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put_kltrf_DeleteRestrictionResponse(soap, &r, "kltrf-DeleteRestrictionResponse", "")
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap->error;
	soap_closesock(soap);
	return SOAP_OK;
}

SOAP_FMAC5 int SOAP_FMAC6 soap_serve_kltrf_GetRestrictions(struct soap *soap)
{	struct kltrf_GetRestrictions soap_tmp_kltrf_GetRestrictions;
	struct kltrf_GetRestrictionsResponse r;
	soap_default_kltrf_GetRestrictionsResponse(soap, &r);
	soap_default_kltrf_GetRestrictions(soap, &soap_tmp_kltrf_GetRestrictions);
	soap->encodingStyle = NULL;
	soap_get_kltrf_GetRestrictions(soap, &soap_tmp_kltrf_GetRestrictions, "kltrf-GetRestrictions", NULL);
	if (soap->error)
		return soap->error;
	
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
#ifndef WITH_LEANER
	 || soap_resolve_attachments(soap)
#endif
	 || soap_end_recv(soap))
		return soap->error;
	soap->error = kltrf_GetRestrictions(soap, r);
	if (soap->error)
		return soap->error;
	soap_serializeheader(soap);
	soap_serialize_kltrf_GetRestrictionsResponse(soap, &r);
	soap_begin_count(soap);
	if (soap->mode & SOAP_IO_LENGTH)
	{	soap_envelope_begin_out(soap);
		soap_putheader(soap);
		soap_body_begin_out(soap);
		soap_put_kltrf_GetRestrictionsResponse(soap, &r, "kltrf-GetRestrictionsResponse", "");
		soap_body_end_out(soap);
		soap_envelope_end_out(soap);
	};
	if (soap_response(soap, SOAP_OK)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put_kltrf_GetRestrictionsResponse(soap, &r, "kltrf-GetRestrictionsResponse", "")
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap->error;
	soap_closesock(soap);
	return SOAP_OK;
}

SOAP_FMAC5 int SOAP_FMAC6 soap_serve_klnag_SendWakeOnLanOnSubnetsHosts(struct soap *soap)
{	struct klnag_SendWakeOnLanOnSubnetsHosts soap_tmp_klnag_SendWakeOnLanOnSubnetsHosts;
	struct klnag_SendWakeOnLanOnSubnetsHostsResponse r;
	soap_default_klnag_SendWakeOnLanOnSubnetsHostsResponse(soap, &r);
	soap_default_klnag_SendWakeOnLanOnSubnetsHosts(soap, &soap_tmp_klnag_SendWakeOnLanOnSubnetsHosts);
	soap->encodingStyle = NULL;
	soap_get_klnag_SendWakeOnLanOnSubnetsHosts(soap, &soap_tmp_klnag_SendWakeOnLanOnSubnetsHosts, "klnag-SendWakeOnLanOnSubnetsHosts", NULL);
	if (soap->error)
		return soap->error;
	
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
#ifndef WITH_LEANER
	 || soap_resolve_attachments(soap)
#endif
	 || soap_end_recv(soap))
		return soap->error;
	soap->error = klnag_SendWakeOnLanOnSubnetsHosts(soap, soap_tmp_klnag_SendWakeOnLanOnSubnetsHosts.macsList, r);
	if (soap->error)
		return soap->error;
	soap_serializeheader(soap);
	soap_serialize_klnag_SendWakeOnLanOnSubnetsHostsResponse(soap, &r);
	soap_begin_count(soap);
	if (soap->mode & SOAP_IO_LENGTH)
	{	soap_envelope_begin_out(soap);
		soap_putheader(soap);
		soap_body_begin_out(soap);
		soap_put_klnag_SendWakeOnLanOnSubnetsHostsResponse(soap, &r, "klnag-SendWakeOnLanOnSubnetsHostsResponse", "");
		soap_body_end_out(soap);
		soap_envelope_end_out(soap);
	};
	if (soap_response(soap, SOAP_OK)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put_klnag_SendWakeOnLanOnSubnetsHostsResponse(soap, &r, "klnag-SendWakeOnLanOnSubnetsHostsResponse", "")
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap->error;
	soap_closesock(soap);
	return SOAP_OK;
}

SOAP_FMAC5 int SOAP_FMAC6 soap_serve_klsnmpagt_PutServerEvent(struct soap *soap)
{	struct klsnmpagt_PutServerEvent soap_tmp_klsnmpagt_PutServerEvent;
	struct klsnmpagt_PutServerEventResponse r;
	soap_default_klsnmpagt_PutServerEventResponse(soap, &r);
	soap_default_klsnmpagt_PutServerEvent(soap, &soap_tmp_klsnmpagt_PutServerEvent);
	soap->encodingStyle = NULL;
	soap_get_klsnmpagt_PutServerEvent(soap, &soap_tmp_klsnmpagt_PutServerEvent, "klsnmpagt-PutServerEvent", NULL);
	if (soap->error)
		return soap->error;
	
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
#ifndef WITH_LEANER
	 || soap_resolve_attachments(soap)
#endif
	 || soap_end_recv(soap))
		return soap->error;
	soap->error = klsnmpagt_PutServerEvent(soap, soap_tmp_klsnmpagt_PutServerEvent.event, r);
	if (soap->error)
		return soap->error;
	soap_serializeheader(soap);
	soap_serialize_klsnmpagt_PutServerEventResponse(soap, &r);
	soap_begin_count(soap);
	if (soap->mode & SOAP_IO_LENGTH)
	{	soap_envelope_begin_out(soap);
		soap_putheader(soap);
		soap_body_begin_out(soap);
		soap_put_klsnmpagt_PutServerEventResponse(soap, &r, "klsnmpagt-PutServerEventResponse", "");
		soap_body_end_out(soap);
		soap_envelope_end_out(soap);
	};
	if (soap_response(soap, SOAP_OK)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put_klsnmpagt_PutServerEventResponse(soap, &r, "klsnmpagt-PutServerEventResponse", "")
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap->error;
	soap_closesock(soap);
	return SOAP_OK;
}

SOAP_FMAC5 int SOAP_FMAC6 soap_serve_klsnmpagt_SetAgentConnection(struct soap *soap)
{	struct klsnmpagt_SetAgentConnection soap_tmp_klsnmpagt_SetAgentConnection;
	struct klsnmpagt_SetAgentConnectionResponse r;
	soap_default_klsnmpagt_SetAgentConnectionResponse(soap, &r);
	soap_default_klsnmpagt_SetAgentConnection(soap, &soap_tmp_klsnmpagt_SetAgentConnection);
	soap->encodingStyle = NULL;
	soap_get_klsnmpagt_SetAgentConnection(soap, &soap_tmp_klsnmpagt_SetAgentConnection, "klsnmpagt-SetAgentConnection", NULL);
	if (soap->error)
		return soap->error;
	
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
#ifndef WITH_LEANER
	 || soap_resolve_attachments(soap)
#endif
	 || soap_end_recv(soap))
		return soap->error;
	soap->error = klsnmpagt_SetAgentConnection(soap, soap_tmp_klsnmpagt_SetAgentConnection.wstrLocalName, soap_tmp_klsnmpagt_SetAgentConnection.wstrRemoteName, r);
	if (soap->error)
		return soap->error;
	soap_serializeheader(soap);
	soap_serialize_klsnmpagt_SetAgentConnectionResponse(soap, &r);
	soap_begin_count(soap);
	if (soap->mode & SOAP_IO_LENGTH)
	{	soap_envelope_begin_out(soap);
		soap_putheader(soap);
		soap_body_begin_out(soap);
		soap_put_klsnmpagt_SetAgentConnectionResponse(soap, &r, "klsnmpagt-SetAgentConnectionResponse", "");
		soap_body_end_out(soap);
		soap_envelope_end_out(soap);
	};
	if (soap_response(soap, SOAP_OK)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put_klsnmpagt_SetAgentConnectionResponse(soap, &r, "klsnmpagt-SetAgentConnectionResponse", "")
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap->error;
	soap_closesock(soap);
	return SOAP_OK;
}

SOAP_END_NAMESPACE(soap)

/* end of soapServer.cpp */
