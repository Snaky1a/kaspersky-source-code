/* soapC.cpp
   Generated by gSOAP 2.7.0d from soapheader.h
   Copyright (C) 2001-2004 Genivia, Inc. All Rights Reserved.
   This software is released under one of the following three licenses:
   GPL, the gSOAP public license, or Genivia's license for commercial use.
   See README.txt for further details.
*/
#include "soapH.h"

SOAP_BEGIN_NAMESPACE(soap)

SOAP_SOURCE_STAMP("@(#) soapC.cpp ver 2.7.0d 2006-06-16 13:36:41 GMT")


#ifndef WITH_NOGLOBAL

SOAP_FMAC3 void SOAP_FMAC4 soap_serializeheader(struct soap *soap)
{
	if (soap->header)
		soap_serialize_SOAP_ENV__Header(soap, soap->header);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_putheader(struct soap *soap)
{
	if (soap->header)
	{	soap->part = SOAP_IN_HEADER;
		soap_out_SOAP_ENV__Header(soap, "SOAP-ENV:Header", 0, soap->header, NULL);
		soap->part = SOAP_END_HEADER;
	}
	return SOAP_OK;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_getheader(struct soap *soap)
{
	soap->part = SOAP_IN_HEADER;
	soap->header = soap_in_SOAP_ENV__Header(soap, "SOAP-ENV:Header", NULL, NULL);
	soap->part = SOAP_END_HEADER;
	return soap->header == NULL;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_fault(struct soap *soap)
{
	if (!soap->fault)
	{	soap->fault = (struct SOAP_ENV__Fault*)soap_malloc(soap, sizeof(struct SOAP_ENV__Fault));
		soap_default_SOAP_ENV__Fault(soap, soap->fault);
	}
	if (soap->version != 1 && !soap->fault->SOAP_ENV__Code)
	{	soap->fault->SOAP_ENV__Code = (struct SOAP_ENV__Code*)soap_malloc(soap, sizeof(struct SOAP_ENV__Code));
		soap_default_SOAP_ENV__Code(soap, soap->fault->SOAP_ENV__Code);
	}
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serializefault(struct soap *soap)
{
	if (soap->fault)
		soap_serialize_SOAP_ENV__Fault(soap, soap->fault);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_putfault(struct soap *soap)
{
	if (soap->fault)
		return soap_put_SOAP_ENV__Fault(soap, soap->fault, "SOAP-ENV:Fault", NULL);
	return SOAP_OK;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_getfault(struct soap *soap)
{
	return (soap->fault = soap_get_SOAP_ENV__Fault(soap, NULL, "SOAP-ENV:Fault", NULL)) == NULL;
}

SOAP_FMAC3 const char ** SOAP_FMAC4 soap_faultcode(struct soap *soap)
{
	soap_fault(soap);
	if (soap->version == 2)
		return (const char**)&soap->fault->SOAP_ENV__Code->SOAP_ENV__Value;
	return (const char**)&soap->fault->faultcode;
}

SOAP_FMAC3 const char ** SOAP_FMAC4 soap_faultstring(struct soap *soap)
{
	soap_fault(soap);
	if (soap->version == 2)
		return (const char**)&soap->fault->SOAP_ENV__Reason;
	return (const char**)&soap->fault->faultstring;
}

SOAP_FMAC3 const char ** SOAP_FMAC4 soap_faultdetail(struct soap *soap)
{
	soap_fault(soap);
	if (soap->version == 1)
	{	if (!soap->fault->detail)
		{	soap->fault->detail = (struct SOAP_ENV__Detail*)soap_malloc(soap, sizeof(struct SOAP_ENV__Detail));
			soap_default_SOAP_ENV__Detail(soap, soap->fault->detail);
		}
		return (const char**)&soap->fault->detail->__any;
	}
	if (!soap->fault->SOAP_ENV__Detail)
	{	soap->fault->SOAP_ENV__Detail = (struct SOAP_ENV__Detail*)soap_malloc(soap, sizeof(struct SOAP_ENV__Detail));
		soap_default_SOAP_ENV__Detail(soap, soap->fault->SOAP_ENV__Detail);
	}
	return (const char**)&soap->fault->SOAP_ENV__Detail->__any;
}

#endif

SOAP_FMAC3 int SOAP_FMAC4 soap_getindependent(struct soap *soap)
{
	int t;
	for (;;)
		if (!soap_getelement(soap, &t))
			if (soap->error || soap_ignore_element(soap))
				break;
	if (soap->error == SOAP_NO_TAG || soap->error == SOAP_EOF)
		soap->error = SOAP_OK;
	return soap->error;
}

SOAP_FMAC3 void * SOAP_FMAC4 soap_getelement(struct soap *soap, int *type)
{
	if (soap_peek_element(soap))
		return NULL;
	if (!*soap->id || !(*type = soap_lookup_type(soap, soap->id)))
		*type = soap_lookup_type(soap, soap->href);
	switch (*type)
	{
	case SOAP_TYPE_byte:
		return soap_in_byte(soap, NULL, NULL, "xsd:byte");
	case SOAP_TYPE_int:
		return soap_in_int(soap, NULL, NULL, "xsd:int");
	case SOAP_TYPE_xsd__int:
		return soap_in_xsd__int(soap, NULL, NULL, "xsd:int");
	case SOAP_TYPE_long:
		return soap_in_long(soap, NULL, NULL, "xsd:long");
	case SOAP_TYPE_xsd__long:
		return soap_in_xsd__long(soap, NULL, NULL, "xsd:long");
	case SOAP_TYPE_LONG64:
		return soap_in_LONG64(soap, NULL, NULL, "xsd:long");
	case SOAP_TYPE_xsd__unsignedByte:
		return soap_in_xsd__unsignedByte(soap, NULL, NULL, "xsd:unsignedByte");
	case SOAP_TYPE_unsignedByte:
		return soap_in_unsignedByte(soap, NULL, NULL, "xsd:unsignedByte");
	case SOAP_TYPE_unsignedInt:
		return soap_in_unsignedInt(soap, NULL, NULL, "xsd:unsignedInt");
	case SOAP_TYPE_xsd__unsignedLong:
		return soap_in_xsd__unsignedLong(soap, NULL, NULL, "xsd:unsignedLong");
	case SOAP_TYPE_unsignedLONG64:
		return soap_in_unsignedLONG64(soap, NULL, NULL, "xsd:unsignedLong");
	case SOAP_TYPE_xsd__boolean:
		return soap_in_xsd__boolean(soap, NULL, NULL, "xsd:boolean");
	case SOAP_TYPE_bool:
		return soap_in_bool(soap, NULL, NULL, "xsd:boolean");
	case SOAP_TYPE_xsd__long_:
		return soap_in_xsd__long_(soap, NULL, NULL, "xsd:long");
	case SOAP_TYPE_xsd__integer_:
		return soap_in_xsd__integer_(soap, NULL, NULL, "xsd:integer");
	case SOAP_TYPE_xsd__decimal_:
		return soap_in_xsd__decimal_(soap, NULL, NULL, "xsd:decimal");
	case SOAP_TYPE_xsd__anySimpleType:
		return soap_in_xsd__anySimpleType(soap, NULL, NULL, "xsd:anySimpleType");
	case SOAP_TYPE_xsd__anyType:
		return soap_in_xsd__anyType(soap, NULL, NULL, "xsd:anyType");
	case SOAP_TYPE_klftbridge_ReleaseReceiver:
		return soap_in_klftbridge_ReleaseReceiver(soap, NULL, NULL, "klftbridge-ReleaseReceiver");
	case SOAP_TYPE_klftbridge_ReleaseReceiverResponse:
		return soap_in_klftbridge_ReleaseReceiverResponse(soap, NULL, NULL, "klftbridge-ReleaseReceiverResponse");
	case SOAP_TYPE_klftbridge_GetNextFileChunk:
		return soap_in_klftbridge_GetNextFileChunk(soap, NULL, NULL, "klftbridge-GetNextFileChunk");
	case SOAP_TYPE_klftbridge_GetNextFileChunkResponse:
		return soap_in_klftbridge_GetNextFileChunkResponse(soap, NULL, NULL, "klftbridge-GetNextFileChunkResponse");
	case SOAP_TYPE_klftbridge_GetFileInfo:
		return soap_in_klftbridge_GetFileInfo(soap, NULL, NULL, "klftbridge-GetFileInfo");
	case SOAP_TYPE_klftbridge_GetFileInfoResponse:
		return soap_in_klftbridge_GetFileInfoResponse(soap, NULL, NULL, "klftbridge-GetFileInfoResponse");
	case SOAP_TYPE_klftbridge_Connect:
		return soap_in_klftbridge_Connect(soap, NULL, NULL, "klftbridge-Connect");
	case SOAP_TYPE_klftbridge_ConnectResponse:
		return soap_in_klftbridge_ConnectResponse(soap, NULL, NULL, "klftbridge-ConnectResponse");
	case SOAP_TYPE_klftbridge_CreateReceiver:
		return soap_in_klftbridge_CreateReceiver(soap, NULL, NULL, "klftbridge-CreateReceiver");
	case SOAP_TYPE_klftbridge_CreateReceiverResponse:
		return soap_in_klftbridge_CreateReceiverResponse(soap, NULL, NULL, "klftbridge-CreateReceiverResponse");
	case SOAP_TYPE_klft_file_info_t:
		return soap_in_klft_file_info_t(soap, NULL, NULL, "klft-file-info-t");
	case SOAP_TYPE_klft_file_chunk_t:
		return soap_in_klft_file_chunk_t(soap, NULL, NULL, "klft-file-chunk-t");
	case SOAP_TYPE_xsd__klft_file_chunk_buff:
		return soap_in_xsd__klft_file_chunk_buff(soap, NULL, NULL, "xsd:klft-file-chunk-buff");
	case SOAP_TYPE_message_desc:
		return soap_in_message_desc(soap, NULL, NULL, "message-desc");
	case SOAP_TYPE_PointerToxsd__unsignedByte:
		return soap_in_PointerToxsd__unsignedByte(soap, NULL, NULL, "xsd:unsignedByte");
	case SOAP_TYPE_xsd__wstring:
	{	wchar_t **s;
		s = soap_in_xsd__wstring(soap, NULL, NULL, "xsd:wstring");
		return s ? *s : NULL;
	}
	case SOAP_TYPE_wstring:
	{	wchar_t **s;
		s = soap_in_wstring(soap, NULL, NULL, "xsd:string");
		return s ? *s : NULL;
	}
	case SOAP_TYPE_xsd__integer:
	{	char **s;
		s = soap_in_xsd__integer(soap, NULL, NULL, "xsd:integer");
		return s ? *s : NULL;
	}
	case SOAP_TYPE_xsd__decimal:
	{	char **s;
		s = soap_in_xsd__decimal(soap, NULL, NULL, "xsd:decimal");
		return s ? *s : NULL;
	}
	case SOAP_TYPE__QName:
	{	char **s;
		s = soap_in__QName(soap, NULL, NULL, "QName");
		return s ? *s : NULL;
	}
	case SOAP_TYPE_string:
	{	char **s;
		s = soap_in_string(soap, NULL, NULL, "xsd:string");
		return s ? *s : NULL;
	}
	default:
	{	const char *t = soap->type;
		if (!*t)
			t = soap->tag;
		if (!soap_match_tag(soap, t, "xsd:byte"))
		{	*type = SOAP_TYPE_byte;
			return soap_in_byte(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "xsd:int"))
		{	*type = SOAP_TYPE_int;
			return soap_in_int(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "xsd:int"))
		{	*type = SOAP_TYPE_xsd__int;
			return soap_in_xsd__int(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "xsd:long"))
		{	*type = SOAP_TYPE_long;
			return soap_in_long(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "xsd:long"))
		{	*type = SOAP_TYPE_xsd__long;
			return soap_in_xsd__long(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "xsd:long"))
		{	*type = SOAP_TYPE_LONG64;
			return soap_in_LONG64(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "xsd:unsignedByte"))
		{	*type = SOAP_TYPE_xsd__unsignedByte;
			return soap_in_xsd__unsignedByte(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "xsd:unsignedByte"))
		{	*type = SOAP_TYPE_unsignedByte;
			return soap_in_unsignedByte(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "xsd:unsignedInt"))
		{	*type = SOAP_TYPE_unsignedInt;
			return soap_in_unsignedInt(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "xsd:unsignedLong"))
		{	*type = SOAP_TYPE_xsd__unsignedLong;
			return soap_in_xsd__unsignedLong(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "xsd:unsignedLong"))
		{	*type = SOAP_TYPE_unsignedLONG64;
			return soap_in_unsignedLONG64(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "xsd:boolean"))
		{	*type = SOAP_TYPE_xsd__boolean;
			return soap_in_xsd__boolean(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "xsd:boolean"))
		{	*type = SOAP_TYPE_bool;
			return soap_in_bool(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "xsd:long"))
		{	*type = SOAP_TYPE_xsd__long_;
			return soap_in_xsd__long_(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "xsd:integer"))
		{	*type = SOAP_TYPE_xsd__integer_;
			return soap_in_xsd__integer_(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "xsd:decimal"))
		{	*type = SOAP_TYPE_xsd__decimal_;
			return soap_in_xsd__decimal_(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "xsd:anySimpleType"))
		{	*type = SOAP_TYPE_xsd__anySimpleType;
			return soap_in_xsd__anySimpleType(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "xsd:anyType"))
		{	*type = SOAP_TYPE_xsd__anyType;
			return soap_in_xsd__anyType(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "klftbridge-ReleaseReceiver"))
		{	*type = SOAP_TYPE_klftbridge_ReleaseReceiver;
			return soap_in_klftbridge_ReleaseReceiver(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "klftbridge-ReleaseReceiverResponse"))
		{	*type = SOAP_TYPE_klftbridge_ReleaseReceiverResponse;
			return soap_in_klftbridge_ReleaseReceiverResponse(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "klftbridge-GetNextFileChunk"))
		{	*type = SOAP_TYPE_klftbridge_GetNextFileChunk;
			return soap_in_klftbridge_GetNextFileChunk(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "klftbridge-GetNextFileChunkResponse"))
		{	*type = SOAP_TYPE_klftbridge_GetNextFileChunkResponse;
			return soap_in_klftbridge_GetNextFileChunkResponse(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "klftbridge-GetFileInfo"))
		{	*type = SOAP_TYPE_klftbridge_GetFileInfo;
			return soap_in_klftbridge_GetFileInfo(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "klftbridge-GetFileInfoResponse"))
		{	*type = SOAP_TYPE_klftbridge_GetFileInfoResponse;
			return soap_in_klftbridge_GetFileInfoResponse(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "klftbridge-Connect"))
		{	*type = SOAP_TYPE_klftbridge_Connect;
			return soap_in_klftbridge_Connect(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "klftbridge-ConnectResponse"))
		{	*type = SOAP_TYPE_klftbridge_ConnectResponse;
			return soap_in_klftbridge_ConnectResponse(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "klftbridge-CreateReceiver"))
		{	*type = SOAP_TYPE_klftbridge_CreateReceiver;
			return soap_in_klftbridge_CreateReceiver(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "klftbridge-CreateReceiverResponse"))
		{	*type = SOAP_TYPE_klftbridge_CreateReceiverResponse;
			return soap_in_klftbridge_CreateReceiverResponse(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "klft-file-info-t"))
		{	*type = SOAP_TYPE_klft_file_info_t;
			return soap_in_klft_file_info_t(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "klft-file-chunk-t"))
		{	*type = SOAP_TYPE_klft_file_chunk_t;
			return soap_in_klft_file_chunk_t(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "xsd:klft-file-chunk-buff"))
		{	*type = SOAP_TYPE_xsd__klft_file_chunk_buff;
			return soap_in_xsd__klft_file_chunk_buff(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "message-desc"))
		{	*type = SOAP_TYPE_message_desc;
			return soap_in_message_desc(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "xsd:integer"))
		{	char **s;
			*type = SOAP_TYPE_xsd__integer;
			s = soap_in_xsd__integer(soap, NULL, NULL, NULL);
			return s ? *s : NULL;
		}
		if (!soap_match_tag(soap, t, "xsd:decimal"))
		{	char **s;
			*type = SOAP_TYPE_xsd__decimal;
			s = soap_in_xsd__decimal(soap, NULL, NULL, NULL);
			return s ? *s : NULL;
		}
		if (!soap_match_tag(soap, t, "QName"))
		{	char **s;
			*type = SOAP_TYPE__QName;
			s = soap_in__QName(soap, NULL, NULL, NULL);
			return s ? *s : NULL;
		}
		if (!soap_match_tag(soap, t, "xsd:string"))
		{	char **s;
			*type = SOAP_TYPE_string;
			s = soap_in_string(soap, NULL, NULL, NULL);
			return s ? *s : NULL;
		}
	}
	}
	soap->error = SOAP_TAG_MISMATCH;
	return NULL;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_ignore_element(struct soap *soap)
{	if (!soap_peek_element(soap))
	{	int t;
		if (soap->mustUnderstand && !soap->other)
			return soap->error = SOAP_MUSTUNDERSTAND;
		if (((soap->mode & SOAP_XML_STRICT) && soap->part != SOAP_IN_HEADER) || !soap_match_tag(soap, soap->tag, "SOAP-ENV:"))
			return soap->error = SOAP_TAG_MISMATCH;
		if (!*soap->id || !soap_getelement(soap, &t))
		{	soap->peeked = 0;
			DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Unknown element '%s' (level=%u, %d)\n", soap->tag, soap->level, soap->body));
			if (soap->fignore)
				soap->error = soap->fignore(soap, soap->tag);
			else
				soap->error = SOAP_OK;
			DBGLOG(TEST, if (!soap->error) SOAP_MESSAGE(fdebug, "IGNORING element '%s'\n", soap->tag));
			if (!soap->error && soap->body)
			{	soap->level++;
				while (!soap_ignore_element(soap))
					;
				if (soap->error == SOAP_NO_TAG)
					soap->error = soap_element_end_in(soap, NULL);
			}
		}
	}
	return soap->error;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_putindependent(struct soap *soap)
{
	int i;
	struct soap_plist *pp;
	if (soap->version == 1 && soap->encodingStyle && !(soap->mode & (SOAP_XML_TREE | SOAP_XML_GRAPH)))
		for (i = 0; i < SOAP_PTRHASH; i++)
			for (pp = soap->pht[i]; pp; pp = pp->next)
				if (pp->mark1 == 2 || pp->mark2 == 2)
					if (soap_putelement(soap, pp->ptr, "id", pp->id, pp->type))
						return soap->error;
	return SOAP_OK;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_putelement(struct soap *soap, const void *ptr, const char *tag, int id, int type)
{
	switch (type)
	{
	case SOAP_TYPE_byte:
		return soap_out_byte(soap, tag, id, (const char *)ptr, "xsd:byte");
	case SOAP_TYPE_int:
		return soap_out_int(soap, tag, id, (const int *)ptr, "xsd:int");
	case SOAP_TYPE_xsd__int:
		return soap_out_xsd__int(soap, tag, id, (const long *)ptr, "xsd:int");
	case SOAP_TYPE_long:
		return soap_out_long(soap, tag, id, (const long *)ptr, "xsd:long");
	case SOAP_TYPE_xsd__long:
		return soap_out_xsd__long(soap, tag, id, (const LONG64 *)ptr, "xsd:long");
	case SOAP_TYPE_LONG64:
		return soap_out_LONG64(soap, tag, id, (const LONG64 *)ptr, "xsd:long");
	case SOAP_TYPE_xsd__unsignedByte:
		return soap_out_xsd__unsignedByte(soap, tag, id, (const unsigned char *)ptr, "xsd:unsignedByte");
	case SOAP_TYPE_unsignedByte:
		return soap_out_unsignedByte(soap, tag, id, (const unsigned char *)ptr, "xsd:unsignedByte");
	case SOAP_TYPE_unsignedInt:
		return soap_out_unsignedInt(soap, tag, id, (const unsigned int *)ptr, "xsd:unsignedInt");
	case SOAP_TYPE_xsd__unsignedLong:
		return soap_out_xsd__unsignedLong(soap, tag, id, (const ULONG64 *)ptr, "xsd:unsignedLong");
	case SOAP_TYPE_unsignedLONG64:
		return soap_out_unsignedLONG64(soap, tag, id, (const ULONG64 *)ptr, "xsd:unsignedLong");
	case SOAP_TYPE_xsd__boolean:
		return soap_out_xsd__boolean(soap, tag, id, (const bool *)ptr, "xsd:boolean");
	case SOAP_TYPE_bool:
		return soap_out_bool(soap, tag, id, (const bool *)ptr, "xsd:boolean");
	case SOAP_TYPE_xsd__long_:
		return ((xsd__long_ *)ptr)->soap_out(soap, tag, id, "xsd:long");
	case SOAP_TYPE_xsd__integer_:
		return ((xsd__integer_ *)ptr)->soap_out(soap, tag, id, "xsd:integer");
	case SOAP_TYPE_xsd__decimal_:
		return ((xsd__decimal_ *)ptr)->soap_out(soap, tag, id, "xsd:decimal");
	case SOAP_TYPE_xsd__anySimpleType:
		return ((xsd__anySimpleType *)ptr)->soap_out(soap, tag, id, "xsd:anySimpleType");
	case SOAP_TYPE_xsd__anyType:
		return ((xsd__anyType *)ptr)->soap_out(soap, tag, id, "xsd:anyType");
	case SOAP_TYPE_klftbridge_ReleaseReceiver:
		return soap_out_klftbridge_ReleaseReceiver(soap, tag, id, (const struct klftbridge_ReleaseReceiver *)ptr, "klftbridge-ReleaseReceiver");
	case SOAP_TYPE_klftbridge_ReleaseReceiverResponse:
		return soap_out_klftbridge_ReleaseReceiverResponse(soap, tag, id, (const struct klftbridge_ReleaseReceiverResponse *)ptr, "klftbridge-ReleaseReceiverResponse");
	case SOAP_TYPE_klftbridge_GetNextFileChunk:
		return soap_out_klftbridge_GetNextFileChunk(soap, tag, id, (const struct klftbridge_GetNextFileChunk *)ptr, "klftbridge-GetNextFileChunk");
	case SOAP_TYPE_klftbridge_GetNextFileChunkResponse:
		return soap_out_klftbridge_GetNextFileChunkResponse(soap, tag, id, (const struct klftbridge_GetNextFileChunkResponse *)ptr, "klftbridge-GetNextFileChunkResponse");
	case SOAP_TYPE_klftbridge_GetFileInfo:
		return soap_out_klftbridge_GetFileInfo(soap, tag, id, (const struct klftbridge_GetFileInfo *)ptr, "klftbridge-GetFileInfo");
	case SOAP_TYPE_klftbridge_GetFileInfoResponse:
		return soap_out_klftbridge_GetFileInfoResponse(soap, tag, id, (const struct klftbridge_GetFileInfoResponse *)ptr, "klftbridge-GetFileInfoResponse");
	case SOAP_TYPE_klftbridge_Connect:
		return soap_out_klftbridge_Connect(soap, tag, id, (const struct klftbridge_Connect *)ptr, "klftbridge-Connect");
	case SOAP_TYPE_klftbridge_ConnectResponse:
		return soap_out_klftbridge_ConnectResponse(soap, tag, id, (const struct klftbridge_ConnectResponse *)ptr, "klftbridge-ConnectResponse");
	case SOAP_TYPE_klftbridge_CreateReceiver:
		return soap_out_klftbridge_CreateReceiver(soap, tag, id, (const struct klftbridge_CreateReceiver *)ptr, "klftbridge-CreateReceiver");
	case SOAP_TYPE_klftbridge_CreateReceiverResponse:
		return soap_out_klftbridge_CreateReceiverResponse(soap, tag, id, (const struct klftbridge_CreateReceiverResponse *)ptr, "klftbridge-CreateReceiverResponse");
	case SOAP_TYPE_klft_file_info_t:
		return soap_out_klft_file_info_t(soap, tag, id, (const struct klft_file_info_t *)ptr, "klft-file-info-t");
	case SOAP_TYPE_klft_file_chunk_t:
		return soap_out_klft_file_chunk_t(soap, tag, id, (const struct klft_file_chunk_t *)ptr, "klft-file-chunk-t");
	case SOAP_TYPE_xsd__klft_file_chunk_buff:
		return soap_out_xsd__klft_file_chunk_buff(soap, tag, id, (const struct xsd__klft_file_chunk_buff *)ptr, "xsd:klft-file-chunk-buff");
	case SOAP_TYPE_message_desc:
		return soap_out_message_desc(soap, tag, id, (const struct message_desc_t *)ptr, "message-desc");
	case SOAP_TYPE_PointerToxsd__unsignedByte:
		return soap_out_PointerToxsd__unsignedByte(soap, tag, id, (unsigned char *const*)ptr, "xsd:unsignedByte");
	case SOAP_TYPE_xsd__wstring:
		return soap_out_wstring(soap, tag, id, (wchar_t**)&ptr, "xsd:wstring");
	case SOAP_TYPE_wstring:
		return soap_out_wstring(soap, tag, id, (wchar_t**)&ptr, "xsd:string");
	case SOAP_TYPE_xsd__integer:
		return soap_out_string(soap, tag, id, (char**)&ptr, "xsd:integer");
	case SOAP_TYPE_xsd__decimal:
		return soap_out_string(soap, tag, id, (char**)&ptr, "xsd:decimal");
	case SOAP_TYPE__QName:
		return soap_out_string(soap, "QName", id, (char**)&ptr, NULL);
	case SOAP_TYPE_string:
		return soap_out_string(soap, tag, id, (char**)&ptr, "xsd:string");
	}
	return SOAP_OK;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_markelement(struct soap *soap, const void *ptr, int type)
{
	switch (type)
	{
	case SOAP_TYPE_xsd__long_:
		((xsd__long_ *)ptr)->soap_mark(soap);
		break;
	case SOAP_TYPE_xsd__integer_:
		((xsd__integer_ *)ptr)->soap_mark(soap);
		break;
	case SOAP_TYPE_xsd__decimal_:
		((xsd__decimal_ *)ptr)->soap_mark(soap);
		break;
	case SOAP_TYPE_xsd__anySimpleType:
		((xsd__anySimpleType *)ptr)->soap_mark(soap);
		break;
	case SOAP_TYPE_xsd__anyType:
		((xsd__anyType *)ptr)->soap_mark(soap);
		break;
	case SOAP_TYPE_klftbridge_ReleaseReceiver:
		soap_mark_klftbridge_ReleaseReceiver(soap, (const struct klftbridge_ReleaseReceiver *)ptr);
		break;
	case SOAP_TYPE_klftbridge_ReleaseReceiverResponse:
		soap_mark_klftbridge_ReleaseReceiverResponse(soap, (const struct klftbridge_ReleaseReceiverResponse *)ptr);
		break;
	case SOAP_TYPE_klftbridge_GetNextFileChunk:
		soap_mark_klftbridge_GetNextFileChunk(soap, (const struct klftbridge_GetNextFileChunk *)ptr);
		break;
	case SOAP_TYPE_klftbridge_GetNextFileChunkResponse:
		soap_mark_klftbridge_GetNextFileChunkResponse(soap, (const struct klftbridge_GetNextFileChunkResponse *)ptr);
		break;
	case SOAP_TYPE_klftbridge_GetFileInfo:
		soap_mark_klftbridge_GetFileInfo(soap, (const struct klftbridge_GetFileInfo *)ptr);
		break;
	case SOAP_TYPE_klftbridge_GetFileInfoResponse:
		soap_mark_klftbridge_GetFileInfoResponse(soap, (const struct klftbridge_GetFileInfoResponse *)ptr);
		break;
	case SOAP_TYPE_klftbridge_Connect:
		soap_mark_klftbridge_Connect(soap, (const struct klftbridge_Connect *)ptr);
		break;
	case SOAP_TYPE_klftbridge_ConnectResponse:
		soap_mark_klftbridge_ConnectResponse(soap, (const struct klftbridge_ConnectResponse *)ptr);
		break;
	case SOAP_TYPE_klftbridge_CreateReceiver:
		soap_mark_klftbridge_CreateReceiver(soap, (const struct klftbridge_CreateReceiver *)ptr);
		break;
	case SOAP_TYPE_klftbridge_CreateReceiverResponse:
		soap_mark_klftbridge_CreateReceiverResponse(soap, (const struct klftbridge_CreateReceiverResponse *)ptr);
		break;
	case SOAP_TYPE_klft_file_info_t:
		soap_mark_klft_file_info_t(soap, (const struct klft_file_info_t *)ptr);
		break;
	case SOAP_TYPE_klft_file_chunk_t:
		soap_mark_klft_file_chunk_t(soap, (const struct klft_file_chunk_t *)ptr);
		break;
	case SOAP_TYPE_xsd__klft_file_chunk_buff:
		soap_mark_xsd__klft_file_chunk_buff(soap, (const struct xsd__klft_file_chunk_buff *)ptr);
		break;
	case SOAP_TYPE_message_desc:
		soap_mark_message_desc(soap, (const struct message_desc_t *)ptr);
		break;
	case SOAP_TYPE_PointerToxsd__unsignedByte:
		soap_mark_PointerToxsd__unsignedByte(soap, (unsigned char *const*)ptr);
		break;
	case SOAP_TYPE_xsd__wstring:
		soap_mark_wstring(soap, (wchar_t**)&ptr);
		break;
	case SOAP_TYPE_wstring:
		soap_mark_wstring(soap, (wchar_t**)&ptr);
		break;
	case SOAP_TYPE_xsd__integer:
		soap_mark_string(soap, (char**)&ptr);
		break;
	case SOAP_TYPE_xsd__decimal:
		soap_mark_string(soap, (char**)&ptr);
		break;
	case SOAP_TYPE__QName:
		soap_mark_string(soap, (char**)&ptr);
		break;
	case SOAP_TYPE_string:
		soap_mark_string(soap, (char**)&ptr);
		break;
	}
}

#ifndef WITH_LEANER
SOAP_FMAC3 int SOAP_FMAC4 soap_resolve_attachments(struct soap *soap)
{
	if (!(soap->mode & SOAP_ENC_DIME))
		return SOAP_OK;
	while (soap->dime.flags & SOAP_DIME_CF)
	{	if (soap_getdimehdr(soap))
			return soap->error;
		if (soap_move(soap, soap->dime.size))
			return soap->error = SOAP_EOF;
	}
	if (soap_move(soap, ((soap->dime.size+3)&(~3))-soap_tell(soap)))
		return soap->error = SOAP_EOF;
	for (;;)
	{	if (soap_getdime(soap))
			break;
		switch (soap_lookup_type(soap, soap->dime.id))
		{
		case SOAP_TYPE_xsd__klft_file_chunk_buff:
		{	struct xsd__klft_file_chunk_buff * a;
			a = (struct xsd__klft_file_chunk_buff *)soap_id_enter(soap, soap->dime.id, NULL, SOAP_TYPE_xsd__klft_file_chunk_buff, sizeof(struct xsd__klft_file_chunk_buff), 0, NULL, NULL, NULL);
			if (!a)
				return soap->error;
			a->__ptr = (unsigned char*)soap->dime.ptr;
			a->__size = soap->dime.size;
			break;
		}
		}
	}
	if (soap->error == SOAP_DIME_END)
		soap->error = SOAP_OK;
	return soap->error;
}
#endif

SOAP_FMAC3 void * SOAP_FMAC4 soap_instantiate(struct soap *soap, int t, const char *type, const char *arrayType, size_t *n)
{
	switch (t)
	{
	case SOAP_TYPE_xsd__anyType:
		return (void*)soap_instantiate_xsd__anyType(soap, -1, type, arrayType, n);
	case SOAP_TYPE_xsd__anySimpleType:
		return (void*)soap_instantiate_xsd__anySimpleType(soap, -1, type, arrayType, n);
	case SOAP_TYPE_xsd__decimal_:
		return (void*)soap_instantiate_xsd__decimal_(soap, -1, type, arrayType, n);
	case SOAP_TYPE_xsd__integer_:
		return (void*)soap_instantiate_xsd__integer_(soap, -1, type, arrayType, n);
	case SOAP_TYPE_xsd__long_:
		return (void*)soap_instantiate_xsd__long_(soap, -1, type, arrayType, n);
	}
	return NULL;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_fdelete(struct soap_clist *p)
{	switch (p->type)
	{
	case SOAP_TYPE_xsd__anyType:
		if (p->size < 0)
			delete (xsd__anyType*)p->ptr;
		else
			delete[] (xsd__anyType*)p->ptr;
		break;
	case SOAP_TYPE_xsd__anySimpleType:
		if (p->size < 0)
			delete (xsd__anySimpleType*)p->ptr;
		else
			delete[] (xsd__anySimpleType*)p->ptr;
		break;
	case SOAP_TYPE_xsd__decimal_:
		if (p->size < 0)
			delete (xsd__decimal_*)p->ptr;
		else
			delete[] (xsd__decimal_*)p->ptr;
		break;
	case SOAP_TYPE_xsd__integer_:
		if (p->size < 0)
			delete (xsd__integer_*)p->ptr;
		else
			delete[] (xsd__integer_*)p->ptr;
		break;
	case SOAP_TYPE_xsd__long_:
		if (p->size < 0)
			delete (xsd__long_*)p->ptr;
		else
			delete[] (xsd__long_*)p->ptr;
		break;
	}
}

SOAP_FMAC3 void* SOAP_FMAC4 soap_class_id_enter(struct soap *soap, const char *id, void *p, int t, size_t n, const char *type, const char *arrayType)
{	return soap_id_enter(soap, id, p, t, n, 0, type, arrayType, soap_instantiate);
}

SOAP_FMAC3 void SOAP_FMAC4 soap_default_byte(struct soap *soap, char *a)
{
#ifdef SOAP_DEFAULT_byte
	*a = SOAP_DEFAULT_byte;
#else
	*a = (char)0;
#endif
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_byte(struct soap *soap, char const*a)
{
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_byte(struct soap *soap, const char *a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_byte);
	if (soap_out_byte(soap, tag, id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_byte(struct soap *soap, const char *tag, int id, const char *a, const char *type)
{
	return soap_outbyte(soap, tag, id, a, type, SOAP_TYPE_byte);
}

SOAP_FMAC3 char * SOAP_FMAC4 soap_get_byte(struct soap *soap, char *p, const char *tag, const char *type)
{
	if ((p = soap_in_byte(soap, tag, p, type)))
		soap_getindependent(soap);
	return p;
}

SOAP_FMAC3 char * SOAP_FMAC4 soap_in_byte(struct soap *soap, const char *tag, char *a, const char *type)
{
	return soap_inbyte(soap, tag, a, type, SOAP_TYPE_byte);
}

SOAP_FMAC3 void SOAP_FMAC4 soap_default_int(struct soap *soap, int *a)
{
#ifdef SOAP_DEFAULT_int
	*a = SOAP_DEFAULT_int;
#else
	*a = (int)0;
#endif
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_int(struct soap *soap, int const*a)
{
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_int(struct soap *soap, const int *a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_int);
	if (soap_out_int(soap, tag, id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_int(struct soap *soap, const char *tag, int id, const int *a, const char *type)
{
	return soap_outint(soap, tag, id, a, type, SOAP_TYPE_int);
}

SOAP_FMAC3 int * SOAP_FMAC4 soap_get_int(struct soap *soap, int *p, const char *tag, const char *type)
{
	if ((p = soap_in_int(soap, tag, p, type)))
		soap_getindependent(soap);
	return p;
}

SOAP_FMAC3 int * SOAP_FMAC4 soap_in_int(struct soap *soap, const char *tag, int *a, const char *type)
{
	return soap_inint(soap, tag, a, type, SOAP_TYPE_int);
}

SOAP_FMAC3 void SOAP_FMAC4 soap_default_xsd__int(struct soap *soap, long *a)
{
#ifdef SOAP_DEFAULT_xsd__int
	*a = SOAP_DEFAULT_xsd__int;
#else
	*a = (long)0;
#endif
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_xsd__int(struct soap *soap, long const*a)
{
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_xsd__int(struct soap *soap, const long *a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_xsd__int);
	if (soap_out_xsd__int(soap, tag, id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_xsd__int(struct soap *soap, const char *tag, int id, const long *a, const char *type)
{
	return soap_outlong(soap, tag, id, a, type, SOAP_TYPE_xsd__int);
}

SOAP_FMAC3 long * SOAP_FMAC4 soap_get_xsd__int(struct soap *soap, long *p, const char *tag, const char *type)
{
	if ((p = soap_in_xsd__int(soap, tag, p, type)))
		soap_getindependent(soap);
	return p;
}

SOAP_FMAC3 long * SOAP_FMAC4 soap_in_xsd__int(struct soap *soap, const char *tag, long *a, const char *type)
{
	return soap_inlong(soap, tag, a, type, SOAP_TYPE_xsd__int);
}

SOAP_FMAC3 void SOAP_FMAC4 soap_default_long(struct soap *soap, long *a)
{
#ifdef SOAP_DEFAULT_long
	*a = SOAP_DEFAULT_long;
#else
	*a = (long)0;
#endif
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_long(struct soap *soap, long const*a)
{
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_long(struct soap *soap, const long *a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_long);
	if (soap_out_long(soap, tag, id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_long(struct soap *soap, const char *tag, int id, const long *a, const char *type)
{
	return soap_outlong(soap, tag, id, a, type, SOAP_TYPE_long);
}

SOAP_FMAC3 long * SOAP_FMAC4 soap_get_long(struct soap *soap, long *p, const char *tag, const char *type)
{
	if ((p = soap_in_long(soap, tag, p, type)))
		soap_getindependent(soap);
	return p;
}

SOAP_FMAC3 long * SOAP_FMAC4 soap_in_long(struct soap *soap, const char *tag, long *a, const char *type)
{
	return soap_inlong(soap, tag, a, type, SOAP_TYPE_long);
}

SOAP_FMAC3 void SOAP_FMAC4 soap_default_xsd__long(struct soap *soap, LONG64 *a)
{
#ifdef SOAP_DEFAULT_xsd__long
	*a = SOAP_DEFAULT_xsd__long;
#else
	*a = (LONG64)0;
#endif
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_xsd__long(struct soap *soap, LONG64 const*a)
{
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_xsd__long(struct soap *soap, const LONG64 *a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_xsd__long);
	if (soap_out_xsd__long(soap, tag, id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_xsd__long(struct soap *soap, const char *tag, int id, const LONG64 *a, const char *type)
{
	return soap_outLONG64(soap, tag, id, a, type, SOAP_TYPE_xsd__long);
}

SOAP_FMAC3 LONG64 * SOAP_FMAC4 soap_get_xsd__long(struct soap *soap, LONG64 *p, const char *tag, const char *type)
{
	if ((p = soap_in_xsd__long(soap, tag, p, type)))
		soap_getindependent(soap);
	return p;
}

SOAP_FMAC3 LONG64 * SOAP_FMAC4 soap_in_xsd__long(struct soap *soap, const char *tag, LONG64 *a, const char *type)
{
	return soap_inLONG64(soap, tag, a, type, SOAP_TYPE_xsd__long);
}

SOAP_FMAC3 void SOAP_FMAC4 soap_default_LONG64(struct soap *soap, LONG64 *a)
{
#ifdef SOAP_DEFAULT_LONG64
	*a = SOAP_DEFAULT_LONG64;
#else
	*a = (LONG64)0;
#endif
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_LONG64(struct soap *soap, LONG64 const*a)
{
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_LONG64(struct soap *soap, const LONG64 *a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_LONG64);
	if (soap_out_LONG64(soap, tag, id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_LONG64(struct soap *soap, const char *tag, int id, const LONG64 *a, const char *type)
{
	return soap_outLONG64(soap, tag, id, a, type, SOAP_TYPE_LONG64);
}

SOAP_FMAC3 LONG64 * SOAP_FMAC4 soap_get_LONG64(struct soap *soap, LONG64 *p, const char *tag, const char *type)
{
	if ((p = soap_in_LONG64(soap, tag, p, type)))
		soap_getindependent(soap);
	return p;
}

SOAP_FMAC3 LONG64 * SOAP_FMAC4 soap_in_LONG64(struct soap *soap, const char *tag, LONG64 *a, const char *type)
{
	return soap_inLONG64(soap, tag, a, type, SOAP_TYPE_LONG64);
}

SOAP_FMAC3 void SOAP_FMAC4 soap_default_xsd__unsignedByte(struct soap *soap, unsigned char *a)
{
#ifdef SOAP_DEFAULT_xsd__unsignedByte
	*a = SOAP_DEFAULT_xsd__unsignedByte;
#else
	*a = (unsigned char)0;
#endif
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_xsd__unsignedByte(struct soap *soap, unsigned char const*a)
{
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_xsd__unsignedByte(struct soap *soap, const unsigned char *a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_xsd__unsignedByte);
	if (soap_out_xsd__unsignedByte(soap, tag, id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_xsd__unsignedByte(struct soap *soap, const char *tag, int id, const unsigned char *a, const char *type)
{
	return soap_outunsignedByte(soap, tag, id, a, type, SOAP_TYPE_xsd__unsignedByte);
}

SOAP_FMAC3 unsigned char * SOAP_FMAC4 soap_get_xsd__unsignedByte(struct soap *soap, unsigned char *p, const char *tag, const char *type)
{
	if ((p = soap_in_xsd__unsignedByte(soap, tag, p, type)))
		soap_getindependent(soap);
	return p;
}

SOAP_FMAC3 unsigned char * SOAP_FMAC4 soap_in_xsd__unsignedByte(struct soap *soap, const char *tag, unsigned char *a, const char *type)
{
	return soap_inunsignedByte(soap, tag, a, type, SOAP_TYPE_xsd__unsignedByte);
}

SOAP_FMAC3 void SOAP_FMAC4 soap_default_unsignedByte(struct soap *soap, unsigned char *a)
{
#ifdef SOAP_DEFAULT_unsignedByte
	*a = SOAP_DEFAULT_unsignedByte;
#else
	*a = (unsigned char)0;
#endif
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_unsignedByte(struct soap *soap, unsigned char const*a)
{
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_unsignedByte(struct soap *soap, const unsigned char *a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_unsignedByte);
	if (soap_out_unsignedByte(soap, tag, id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_unsignedByte(struct soap *soap, const char *tag, int id, const unsigned char *a, const char *type)
{
	return soap_outunsignedByte(soap, tag, id, a, type, SOAP_TYPE_unsignedByte);
}

SOAP_FMAC3 unsigned char * SOAP_FMAC4 soap_get_unsignedByte(struct soap *soap, unsigned char *p, const char *tag, const char *type)
{
	if ((p = soap_in_unsignedByte(soap, tag, p, type)))
		soap_getindependent(soap);
	return p;
}

SOAP_FMAC3 unsigned char * SOAP_FMAC4 soap_in_unsignedByte(struct soap *soap, const char *tag, unsigned char *a, const char *type)
{
	return soap_inunsignedByte(soap, tag, a, type, SOAP_TYPE_unsignedByte);
}

SOAP_FMAC3 void SOAP_FMAC4 soap_default_unsignedInt(struct soap *soap, unsigned int *a)
{
#ifdef SOAP_DEFAULT_unsignedInt
	*a = SOAP_DEFAULT_unsignedInt;
#else
	*a = (unsigned int)0;
#endif
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_unsignedInt(struct soap *soap, unsigned int const*a)
{
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_unsignedInt(struct soap *soap, const unsigned int *a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_unsignedInt);
	if (soap_out_unsignedInt(soap, tag, id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_unsignedInt(struct soap *soap, const char *tag, int id, const unsigned int *a, const char *type)
{
	return soap_outunsignedInt(soap, tag, id, a, type, SOAP_TYPE_unsignedInt);
}

SOAP_FMAC3 unsigned int * SOAP_FMAC4 soap_get_unsignedInt(struct soap *soap, unsigned int *p, const char *tag, const char *type)
{
	if ((p = soap_in_unsignedInt(soap, tag, p, type)))
		soap_getindependent(soap);
	return p;
}

SOAP_FMAC3 unsigned int * SOAP_FMAC4 soap_in_unsignedInt(struct soap *soap, const char *tag, unsigned int *a, const char *type)
{
	return soap_inunsignedInt(soap, tag, a, type, SOAP_TYPE_unsignedInt);
}

SOAP_FMAC3 void SOAP_FMAC4 soap_default_xsd__unsignedLong(struct soap *soap, ULONG64 *a)
{
#ifdef SOAP_DEFAULT_xsd__unsignedLong
	*a = SOAP_DEFAULT_xsd__unsignedLong;
#else
	*a = (ULONG64)0;
#endif
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_xsd__unsignedLong(struct soap *soap, ULONG64 const*a)
{
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_xsd__unsignedLong(struct soap *soap, const ULONG64 *a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_xsd__unsignedLong);
	if (soap_out_xsd__unsignedLong(soap, tag, id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_xsd__unsignedLong(struct soap *soap, const char *tag, int id, const ULONG64 *a, const char *type)
{
	return soap_outULONG64(soap, tag, id, a, type, SOAP_TYPE_xsd__unsignedLong);
}

SOAP_FMAC3 ULONG64 * SOAP_FMAC4 soap_get_xsd__unsignedLong(struct soap *soap, ULONG64 *p, const char *tag, const char *type)
{
	if ((p = soap_in_xsd__unsignedLong(soap, tag, p, type)))
		soap_getindependent(soap);
	return p;
}

SOAP_FMAC3 ULONG64 * SOAP_FMAC4 soap_in_xsd__unsignedLong(struct soap *soap, const char *tag, ULONG64 *a, const char *type)
{
	return soap_inULONG64(soap, tag, a, type, SOAP_TYPE_xsd__unsignedLong);
}

SOAP_FMAC3 void SOAP_FMAC4 soap_default_unsignedLONG64(struct soap *soap, ULONG64 *a)
{
#ifdef SOAP_DEFAULT_unsignedLONG64
	*a = SOAP_DEFAULT_unsignedLONG64;
#else
	*a = (ULONG64)0;
#endif
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_unsignedLONG64(struct soap *soap, ULONG64 const*a)
{
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_unsignedLONG64(struct soap *soap, const ULONG64 *a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_unsignedLONG64);
	if (soap_out_unsignedLONG64(soap, tag, id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_unsignedLONG64(struct soap *soap, const char *tag, int id, const ULONG64 *a, const char *type)
{
	return soap_outULONG64(soap, tag, id, a, type, SOAP_TYPE_unsignedLONG64);
}

SOAP_FMAC3 ULONG64 * SOAP_FMAC4 soap_get_unsignedLONG64(struct soap *soap, ULONG64 *p, const char *tag, const char *type)
{
	if ((p = soap_in_unsignedLONG64(soap, tag, p, type)))
		soap_getindependent(soap);
	return p;
}

SOAP_FMAC3 ULONG64 * SOAP_FMAC4 soap_in_unsignedLONG64(struct soap *soap, const char *tag, ULONG64 *a, const char *type)
{
	return soap_inULONG64(soap, tag, a, type, SOAP_TYPE_unsignedLONG64);
}

SOAP_FMAC3 void SOAP_FMAC4 soap_default_xsd__boolean(struct soap *soap, bool *a)
{
#ifdef SOAP_DEFAULT_xsd__boolean
	*a = SOAP_DEFAULT_xsd__boolean;
#else
	*a = (bool)0;
#endif
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_xsd__boolean(struct soap *soap, bool const*a)
{
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_xsd__boolean(struct soap *soap, const bool *a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_xsd__boolean);
	if (soap_out_xsd__boolean(soap, tag, id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

static const struct soap_code_map soap_codes_xsd__boolean[] =
{	{ (long)false, "false" },
	{ (long)true, "true" },
	{ 0, NULL }
};

SOAP_FMAC3 const char* SOAP_FMAC4 soap_xsd__boolean2s(struct soap *soap, bool n)
{	const char *s = soap_str_code(soap_codes_xsd__boolean, (long)n);
	if (s)
		return s;
	return soap_long2s(soap, (long)n);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_xsd__boolean(struct soap *soap, const char *tag, int id, const bool *a, const char *type)
{	soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_xsd__boolean), type);
	soap_send(soap, soap_xsd__boolean2s(soap, *a));
	return soap_element_end_out(soap, tag);
}

SOAP_FMAC3 bool * SOAP_FMAC4 soap_get_xsd__boolean(struct soap *soap, bool *p, const char *tag, const char *type)
{
	if ((p = soap_in_xsd__boolean(soap, tag, p, type)))
		soap_getindependent(soap);
	return p;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_s2xsd__boolean(struct soap *soap, const char *s, bool *a)
{
	const struct soap_code_map *map;
	if (!s)
		return SOAP_OK;
	map = soap_code(soap_codes_xsd__boolean, s);
	if (map)
		*a = (bool)map->code;
	else if (soap->mode & SOAP_XML_STRICT)
		return soap->error = SOAP_TYPE;
	else
	{	long n;
		if (soap_s2long(soap, s, &n))
			return soap->error;
		*a = (bool)n;
	}
	return SOAP_OK;
}

SOAP_FMAC3 bool * SOAP_FMAC4 soap_in_xsd__boolean(struct soap *soap, const char *tag, bool *a, const char *type)
{
	if (soap_element_begin_in(soap, tag, 0))
		return NULL;
	if (*soap->type && soap_match_tag(soap, soap->type, type) && soap_match_tag(soap, soap->type, "xsd:boolean"))
	{	soap->error = SOAP_TYPE;
		return NULL;
	}
	a = (bool *)soap_id_enter(soap, soap->id, a, SOAP_TYPE_xsd__boolean, sizeof(bool), 0, NULL, NULL, NULL);
	if (!a)
		return NULL;
	if (soap->body && !*soap->href)
	{	if (!a || soap_s2xsd__boolean(soap, soap_value(soap), a) || soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (bool *)soap_id_forward(soap, soap->href, (void**)a, SOAP_TYPE_xsd__boolean, 0, sizeof(bool), 0, NULL);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_default_bool(struct soap *soap, bool *a)
{
#ifdef SOAP_DEFAULT_bool
	*a = SOAP_DEFAULT_bool;
#else
	*a = (bool)0;
#endif
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_bool(struct soap *soap, bool const*a)
{
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_bool(struct soap *soap, const bool *a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_bool);
	if (soap_out_bool(soap, tag, id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

static const struct soap_code_map soap_codes_bool[] =
{	{ (long)false, "false" },
	{ (long)true, "true" },
	{ 0, NULL }
};

SOAP_FMAC3 const char* SOAP_FMAC4 soap_bool2s(struct soap *soap, bool n)
{	const char *s = soap_str_code(soap_codes_bool, (long)n);
	if (s)
		return s;
	return soap_long2s(soap, (long)n);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_bool(struct soap *soap, const char *tag, int id, const bool *a, const char *type)
{	soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_bool), type);
	soap_send(soap, soap_bool2s(soap, *a));
	return soap_element_end_out(soap, tag);
}

SOAP_FMAC3 bool * SOAP_FMAC4 soap_get_bool(struct soap *soap, bool *p, const char *tag, const char *type)
{
	if ((p = soap_in_bool(soap, tag, p, type)))
		soap_getindependent(soap);
	return p;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_s2bool(struct soap *soap, const char *s, bool *a)
{
	const struct soap_code_map *map;
	if (!s)
		return SOAP_OK;
	map = soap_code(soap_codes_bool, s);
	if (map)
		*a = (bool)map->code;
	else if (soap->mode & SOAP_XML_STRICT)
		return soap->error = SOAP_TYPE;
	else
	{	long n;
		if (soap_s2long(soap, s, &n))
			return soap->error;
		*a = (bool)n;
	}
	return SOAP_OK;
}

SOAP_FMAC3 bool * SOAP_FMAC4 soap_in_bool(struct soap *soap, const char *tag, bool *a, const char *type)
{
	if (soap_element_begin_in(soap, tag, 0))
		return NULL;
	if (*soap->type && soap_match_tag(soap, soap->type, type))
	{	soap->error = SOAP_TYPE;
		return NULL;
	}
	a = (bool *)soap_id_enter(soap, soap->id, a, SOAP_TYPE_bool, sizeof(bool), 0, NULL, NULL, NULL);
	if (!a)
		return NULL;
	if (soap->body && !*soap->href)
	{	if (!a || soap_s2bool(soap, soap_value(soap), a) || soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (bool *)soap_id_forward(soap, soap->href, (void**)a, SOAP_TYPE_bool, 0, sizeof(bool), 0, NULL);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

void xsd__long_::soap_serialize(struct soap *soap) const
{
	this->soap_mark(soap);
}

void xsd__long_::soap_mark(struct soap *soap) const
{
	soap_embedded(soap, &((xsd__long_*)this)->__item, SOAP_TYPE_xsd__long);
	soap_embedded(soap, &((xsd__integer_*)this)->__item, SOAP_TYPE_xsd__integer);
	soap_mark_xsd__integer(soap, &((xsd__integer_*)this)->__item);
	soap_embedded(soap, &((xsd__decimal_*)this)->__item, SOAP_TYPE_xsd__decimal);
	soap_mark_xsd__decimal(soap, &((xsd__decimal_*)this)->__item);
}

void xsd__long_::soap_default(struct soap *soap)
{
	soap_default_xsd__long(soap, &((xsd__long_*)this)->__item);
	((xsd__integer_*)this)->__item = NULL;
	((xsd__decimal_*)this)->__item = NULL;
}

int xsd__long_::soap_put(struct soap *soap, const char *tag, const  char *type) const
{
	register int id = soap_embed(soap, (void*)this, NULL, 0, tag, SOAP_TYPE_xsd__long_);
	if (this->soap_out(soap, tag, id, type))
		return soap->error;
	return soap_putindependent(soap);
}

int xsd__long_::soap_out(struct soap *soap, const char *tag, int id, const char *type) const
{
	return soap_out_xsd__long_(soap, tag, id, this, type);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_xsd__long_(struct soap *soap, const char *tag, int id, const xsd__long_ *a, const char *type)
{
	soap_out_xsd__long(soap, tag, id, &(((xsd__long_*)a)->__item), "xsd:long");
	return SOAP_OK;
}

void *xsd__long_::soap_get(struct soap *soap, const char *tag, const char *type)
{
	return soap_get_xsd__long_(soap, this, tag, type);
}

SOAP_FMAC3 xsd__long_ * SOAP_FMAC4 soap_get_xsd__long_(struct soap *soap, xsd__long_ *p, const char *tag, const char *type)
{
	if ((p = soap_in_xsd__long_(soap, tag, p, type)))
		soap_getindependent(soap);
	return p;
}

void *xsd__long_::soap_in(struct soap *soap, const char *tag, const char *type)
{	return soap_in_xsd__long_(soap, tag, this, type);
}

SOAP_FMAC3 xsd__long_ * SOAP_FMAC4 soap_in_xsd__long_(struct soap *soap, const char *tag, xsd__long_ *a, const char *type)
{
	if (soap_peek_element(soap))
		return NULL;
	if (!(a = (xsd__long_ *)soap_class_id_enter(soap, soap->id, a, SOAP_TYPE_xsd__long_, sizeof(xsd__long_), soap->type, soap->arrayType)))
	{	soap->error = SOAP_TAG_MISMATCH;
		return NULL;
	}
	*soap->id = '\0';
	if (soap->alloced)
	{	a->soap_default(soap);
		if (soap->clist->type != SOAP_TYPE_xsd__long_)
			return (xsd__long_ *)a->soap_in(soap, tag, type);
	}
	if (!soap_in_xsd__long(soap, tag, &(((xsd__long_*)a)->__item), "xsd:long"))
		return NULL;
	return a;
}

SOAP_FMAC5 xsd__long_ * SOAP_FMAC6 soap_new_xsd__long_(struct soap *soap, int n)
{	return soap_instantiate_xsd__long_(soap, n, NULL, NULL, NULL);
}

SOAP_FMAC5 void SOAP_FMAC6 soap_delete_xsd__long_(struct soap *soap, xsd__long_ *p)
{	soap_delete(soap, p);
}

SOAP_FMAC5 xsd__long_ * SOAP_FMAC6 soap_instantiate_xsd__long_(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate_xsd__long_(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE_xsd__long_, n, soap_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)new xsd__long_;
		if (size)
			*size = sizeof(xsd__long_);
	}
	else
	{	cp->ptr = (void*)new xsd__long_[n];
		if (size)
			*size = n * sizeof(xsd__long_);
	}
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	return (xsd__long_*)cp->ptr;
}

SOAP_FMAC5 void SOAP_FMAC6 soap_copy_xsd__long_(struct soap *soap, int st, int tt, void *p, const void *q, size_t n)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying xsd__long_ %p -> %p\n", q, p));
	*(xsd__long_*)p = *(xsd__long_*)q;
}

void xsd__integer_::soap_serialize(struct soap *soap) const
{
	this->soap_mark(soap);
}

void xsd__integer_::soap_mark(struct soap *soap) const
{
	soap_embedded(soap, &((xsd__integer_*)this)->__item, SOAP_TYPE_xsd__integer);
	soap_mark_xsd__integer(soap, &((xsd__integer_*)this)->__item);
	soap_embedded(soap, &((xsd__decimal_*)this)->__item, SOAP_TYPE_xsd__decimal);
	soap_mark_xsd__decimal(soap, &((xsd__decimal_*)this)->__item);
}

void xsd__integer_::soap_default(struct soap *soap)
{
	((xsd__integer_*)this)->__item = NULL;
	((xsd__decimal_*)this)->__item = NULL;
}

int xsd__integer_::soap_put(struct soap *soap, const char *tag, const  char *type) const
{
	register int id = soap_embed(soap, (void*)this, NULL, 0, tag, SOAP_TYPE_xsd__integer_);
	if (this->soap_out(soap, tag, id, type))
		return soap->error;
	return soap_putindependent(soap);
}

int xsd__integer_::soap_out(struct soap *soap, const char *tag, int id, const char *type) const
{
	return soap_out_xsd__integer_(soap, tag, id, this, type);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_xsd__integer_(struct soap *soap, const char *tag, int id, const xsd__integer_ *a, const char *type)
{
	soap_out_xsd__integer(soap, tag, id, &(((xsd__integer_*)a)->__item), "xsd:integer");
	return SOAP_OK;
}

void *xsd__integer_::soap_get(struct soap *soap, const char *tag, const char *type)
{
	return soap_get_xsd__integer_(soap, this, tag, type);
}

SOAP_FMAC3 xsd__integer_ * SOAP_FMAC4 soap_get_xsd__integer_(struct soap *soap, xsd__integer_ *p, const char *tag, const char *type)
{
	if ((p = soap_in_xsd__integer_(soap, tag, p, type)))
		soap_getindependent(soap);
	return p;
}

void *xsd__integer_::soap_in(struct soap *soap, const char *tag, const char *type)
{	return soap_in_xsd__integer_(soap, tag, this, type);
}

SOAP_FMAC3 xsd__integer_ * SOAP_FMAC4 soap_in_xsd__integer_(struct soap *soap, const char *tag, xsd__integer_ *a, const char *type)
{
	if (soap_peek_element(soap))
		return NULL;
	if (!(a = (xsd__integer_ *)soap_class_id_enter(soap, soap->id, a, SOAP_TYPE_xsd__integer_, sizeof(xsd__integer_), soap->type, soap->arrayType)))
	{	soap->error = SOAP_TAG_MISMATCH;
		return NULL;
	}
	*soap->id = '\0';
	if (soap->alloced)
	{	a->soap_default(soap);
		if (soap->clist->type != SOAP_TYPE_xsd__integer_)
			return (xsd__integer_ *)a->soap_in(soap, tag, type);
	}
	if (!soap_in_xsd__integer(soap, tag, &(((xsd__integer_*)a)->__item), "xsd:integer"))
		return NULL;
	return a;
}

SOAP_FMAC5 xsd__integer_ * SOAP_FMAC6 soap_new_xsd__integer_(struct soap *soap, int n)
{	return soap_instantiate_xsd__integer_(soap, n, NULL, NULL, NULL);
}

SOAP_FMAC5 void SOAP_FMAC6 soap_delete_xsd__integer_(struct soap *soap, xsd__integer_ *p)
{	soap_delete(soap, p);
}

SOAP_FMAC5 xsd__integer_ * SOAP_FMAC6 soap_instantiate_xsd__integer_(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate_xsd__integer_(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE_xsd__integer_, n, soap_fdelete);
	if (!cp)
		return NULL;
	if (type && !soap_match_tag(soap, type, "xsd:long"))
	{	cp->type = SOAP_TYPE_xsd__long_;
		if (n < 0)
		{	cp->ptr = (void*)new xsd__long_;
			if (size)
				*size = sizeof(xsd__long_);
		}
		else
		{	cp->ptr = (void*)new xsd__long_[n];
			if (size)
				*size = n * sizeof(xsd__long_);
		}
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
		return (xsd__long_*)cp->ptr;
	}
	if (n < 0)
	{	cp->ptr = (void*)new xsd__integer_;
		if (size)
			*size = sizeof(xsd__integer_);
	}
	else
	{	cp->ptr = (void*)new xsd__integer_[n];
		if (size)
			*size = n * sizeof(xsd__integer_);
	}
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	return (xsd__integer_*)cp->ptr;
}

SOAP_FMAC5 void SOAP_FMAC6 soap_copy_xsd__integer_(struct soap *soap, int st, int tt, void *p, const void *q, size_t n)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying xsd__integer_ %p -> %p\n", q, p));
	*(xsd__integer_*)p = *(xsd__integer_*)q;
}

void xsd__decimal_::soap_serialize(struct soap *soap) const
{
	this->soap_mark(soap);
}

void xsd__decimal_::soap_mark(struct soap *soap) const
{
	soap_embedded(soap, &((xsd__decimal_*)this)->__item, SOAP_TYPE_xsd__decimal);
	soap_mark_xsd__decimal(soap, &((xsd__decimal_*)this)->__item);
}

void xsd__decimal_::soap_default(struct soap *soap)
{
	((xsd__decimal_*)this)->__item = NULL;
}

int xsd__decimal_::soap_put(struct soap *soap, const char *tag, const  char *type) const
{
	register int id = soap_embed(soap, (void*)this, NULL, 0, tag, SOAP_TYPE_xsd__decimal_);
	if (this->soap_out(soap, tag, id, type))
		return soap->error;
	return soap_putindependent(soap);
}

int xsd__decimal_::soap_out(struct soap *soap, const char *tag, int id, const char *type) const
{
	return soap_out_xsd__decimal_(soap, tag, id, this, type);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_xsd__decimal_(struct soap *soap, const char *tag, int id, const xsd__decimal_ *a, const char *type)
{
	soap_out_xsd__decimal(soap, tag, id, &(((xsd__decimal_*)a)->__item), "xsd:decimal");
	return SOAP_OK;
}

void *xsd__decimal_::soap_get(struct soap *soap, const char *tag, const char *type)
{
	return soap_get_xsd__decimal_(soap, this, tag, type);
}

SOAP_FMAC3 xsd__decimal_ * SOAP_FMAC4 soap_get_xsd__decimal_(struct soap *soap, xsd__decimal_ *p, const char *tag, const char *type)
{
	if ((p = soap_in_xsd__decimal_(soap, tag, p, type)))
		soap_getindependent(soap);
	return p;
}

void *xsd__decimal_::soap_in(struct soap *soap, const char *tag, const char *type)
{	return soap_in_xsd__decimal_(soap, tag, this, type);
}

SOAP_FMAC3 xsd__decimal_ * SOAP_FMAC4 soap_in_xsd__decimal_(struct soap *soap, const char *tag, xsd__decimal_ *a, const char *type)
{
	if (soap_peek_element(soap))
		return NULL;
	if (!(a = (xsd__decimal_ *)soap_class_id_enter(soap, soap->id, a, SOAP_TYPE_xsd__decimal_, sizeof(xsd__decimal_), soap->type, soap->arrayType)))
	{	soap->error = SOAP_TAG_MISMATCH;
		return NULL;
	}
	*soap->id = '\0';
	if (soap->alloced)
	{	a->soap_default(soap);
		if (soap->clist->type != SOAP_TYPE_xsd__decimal_)
			return (xsd__decimal_ *)a->soap_in(soap, tag, type);
	}
	if (!soap_in_xsd__decimal(soap, tag, &(((xsd__decimal_*)a)->__item), "xsd:decimal"))
		return NULL;
	return a;
}

SOAP_FMAC5 xsd__decimal_ * SOAP_FMAC6 soap_new_xsd__decimal_(struct soap *soap, int n)
{	return soap_instantiate_xsd__decimal_(soap, n, NULL, NULL, NULL);
}

SOAP_FMAC5 void SOAP_FMAC6 soap_delete_xsd__decimal_(struct soap *soap, xsd__decimal_ *p)
{	soap_delete(soap, p);
}

SOAP_FMAC5 xsd__decimal_ * SOAP_FMAC6 soap_instantiate_xsd__decimal_(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate_xsd__decimal_(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE_xsd__decimal_, n, soap_fdelete);
	if (!cp)
		return NULL;
	if (type && !soap_match_tag(soap, type, "xsd:integer"))
	{	cp->type = SOAP_TYPE_xsd__integer_;
		if (n < 0)
		{	cp->ptr = (void*)new xsd__integer_;
			if (size)
				*size = sizeof(xsd__integer_);
		}
		else
		{	cp->ptr = (void*)new xsd__integer_[n];
			if (size)
				*size = n * sizeof(xsd__integer_);
		}
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
		return (xsd__integer_*)cp->ptr;
	}
	if (type && !soap_match_tag(soap, type, "xsd:long"))
	{	cp->type = SOAP_TYPE_xsd__long_;
		if (n < 0)
		{	cp->ptr = (void*)new xsd__long_;
			if (size)
				*size = sizeof(xsd__long_);
		}
		else
		{	cp->ptr = (void*)new xsd__long_[n];
			if (size)
				*size = n * sizeof(xsd__long_);
		}
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
		return (xsd__long_*)cp->ptr;
	}
	if (n < 0)
	{	cp->ptr = (void*)new xsd__decimal_;
		if (size)
			*size = sizeof(xsd__decimal_);
	}
	else
	{	cp->ptr = (void*)new xsd__decimal_[n];
		if (size)
			*size = n * sizeof(xsd__decimal_);
	}
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	return (xsd__decimal_*)cp->ptr;
}

SOAP_FMAC5 void SOAP_FMAC6 soap_copy_xsd__decimal_(struct soap *soap, int st, int tt, void *p, const void *q, size_t n)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying xsd__decimal_ %p -> %p\n", q, p));
	*(xsd__decimal_*)p = *(xsd__decimal_*)q;
}

void xsd__anySimpleType::soap_serialize(struct soap *soap) const
{
	this->soap_mark(soap);
}

void xsd__anySimpleType::soap_mark(struct soap *soap) const
{
}

void xsd__anySimpleType::soap_default(struct soap *soap)
{
}

int xsd__anySimpleType::soap_put(struct soap *soap, const char *tag, const  char *type) const
{
	register int id = soap_embed(soap, (void*)this, NULL, 0, tag, SOAP_TYPE_xsd__anySimpleType);
	if (this->soap_out(soap, tag, id, type))
		return soap->error;
	return soap_putindependent(soap);
}

int xsd__anySimpleType::soap_out(struct soap *soap, const char *tag, int id, const char *type) const
{
	return soap_out_xsd__anySimpleType(soap, tag, id, this, type);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_xsd__anySimpleType(struct soap *soap, const char *tag, int id, const xsd__anySimpleType *a, const char *type)
{
	soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_xsd__anySimpleType), "xsd:anySimpleType");
	soap_element_end_out(soap, tag);
	return SOAP_OK;
}

void *xsd__anySimpleType::soap_get(struct soap *soap, const char *tag, const char *type)
{
	return soap_get_xsd__anySimpleType(soap, this, tag, type);
}

SOAP_FMAC3 xsd__anySimpleType * SOAP_FMAC4 soap_get_xsd__anySimpleType(struct soap *soap, xsd__anySimpleType *p, const char *tag, const char *type)
{
	if ((p = soap_in_xsd__anySimpleType(soap, tag, p, type)))
		soap_getindependent(soap);
	return p;
}

void *xsd__anySimpleType::soap_in(struct soap *soap, const char *tag, const char *type)
{	return soap_in_xsd__anySimpleType(soap, tag, this, type);
}

SOAP_FMAC3 xsd__anySimpleType * SOAP_FMAC4 soap_in_xsd__anySimpleType(struct soap *soap, const char *tag, xsd__anySimpleType *a, const char *type)
{
	if (soap_element_begin_in(soap, tag, 0))
		return NULL;
	a = (xsd__anySimpleType *)soap_class_id_enter(soap, soap->id, a, SOAP_TYPE_xsd__anySimpleType, sizeof(xsd__anySimpleType), soap->type, soap->arrayType);
	if (!a)
		return NULL;
	if (soap->alloced)
	{	a->soap_default(soap);
		if (soap->clist->type != SOAP_TYPE_xsd__anySimpleType)
		{	soap_revert(soap);
			*soap->id = '\0';
			return (xsd__anySimpleType *)a->soap_in(soap, tag, type);
		}
	};
	if (soap->body && !*soap->href)
	{	for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
			return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (xsd__anySimpleType *)soap_id_forward(soap, soap->href, (void**)a, SOAP_TYPE_xsd__anySimpleType, 0, sizeof(xsd__anySimpleType), 0, soap_copy_xsd__anySimpleType);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC5 xsd__anySimpleType * SOAP_FMAC6 soap_new_xsd__anySimpleType(struct soap *soap, int n)
{	return soap_instantiate_xsd__anySimpleType(soap, n, NULL, NULL, NULL);
}

SOAP_FMAC5 void SOAP_FMAC6 soap_delete_xsd__anySimpleType(struct soap *soap, xsd__anySimpleType *p)
{	soap_delete(soap, p);
}

SOAP_FMAC5 xsd__anySimpleType * SOAP_FMAC6 soap_instantiate_xsd__anySimpleType(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate_xsd__anySimpleType(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE_xsd__anySimpleType, n, soap_fdelete);
	if (!cp)
		return NULL;
	if (type && !soap_match_tag(soap, type, "xsd:decimal"))
	{	cp->type = SOAP_TYPE_xsd__decimal_;
		if (n < 0)
		{	cp->ptr = (void*)new xsd__decimal_;
			if (size)
				*size = sizeof(xsd__decimal_);
		}
		else
		{	cp->ptr = (void*)new xsd__decimal_[n];
			if (size)
				*size = n * sizeof(xsd__decimal_);
		}
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
		return (xsd__decimal_*)cp->ptr;
	}
	if (type && !soap_match_tag(soap, type, "xsd:integer"))
	{	cp->type = SOAP_TYPE_xsd__integer_;
		if (n < 0)
		{	cp->ptr = (void*)new xsd__integer_;
			if (size)
				*size = sizeof(xsd__integer_);
		}
		else
		{	cp->ptr = (void*)new xsd__integer_[n];
			if (size)
				*size = n * sizeof(xsd__integer_);
		}
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
		return (xsd__integer_*)cp->ptr;
	}
	if (type && !soap_match_tag(soap, type, "xsd:long"))
	{	cp->type = SOAP_TYPE_xsd__long_;
		if (n < 0)
		{	cp->ptr = (void*)new xsd__long_;
			if (size)
				*size = sizeof(xsd__long_);
		}
		else
		{	cp->ptr = (void*)new xsd__long_[n];
			if (size)
				*size = n * sizeof(xsd__long_);
		}
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
		return (xsd__long_*)cp->ptr;
	}
	if (n < 0)
	{	cp->ptr = (void*)new xsd__anySimpleType;
		if (size)
			*size = sizeof(xsd__anySimpleType);
	}
	else
	{	cp->ptr = (void*)new xsd__anySimpleType[n];
		if (size)
			*size = n * sizeof(xsd__anySimpleType);
	}
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	return (xsd__anySimpleType*)cp->ptr;
}

SOAP_FMAC5 void SOAP_FMAC6 soap_copy_xsd__anySimpleType(struct soap *soap, int st, int tt, void *p, const void *q, size_t n)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying xsd__anySimpleType %p -> %p\n", q, p));
	*(xsd__anySimpleType*)p = *(xsd__anySimpleType*)q;
}

void xsd__anyType::soap_serialize(struct soap *soap) const
{
	this->soap_mark(soap);
}

void xsd__anyType::soap_mark(struct soap *soap) const
{
}

void xsd__anyType::soap_default(struct soap *soap)
{
}

int xsd__anyType::soap_put(struct soap *soap, const char *tag, const  char *type) const
{
	register int id = soap_embed(soap, (void*)this, NULL, 0, tag, SOAP_TYPE_xsd__anyType);
	if (this->soap_out(soap, tag, id, type))
		return soap->error;
	return soap_putindependent(soap);
}

int xsd__anyType::soap_out(struct soap *soap, const char *tag, int id, const char *type) const
{
	return soap_out_xsd__anyType(soap, tag, id, this, type);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_xsd__anyType(struct soap *soap, const char *tag, int id, const xsd__anyType *a, const char *type)
{
	soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_xsd__anyType), type);
	soap_element_end_out(soap, tag);
	return SOAP_OK;
}

void *xsd__anyType::soap_get(struct soap *soap, const char *tag, const char *type)
{
	return soap_get_xsd__anyType(soap, this, tag, type);
}

SOAP_FMAC3 xsd__anyType * SOAP_FMAC4 soap_get_xsd__anyType(struct soap *soap, xsd__anyType *p, const char *tag, const char *type)
{
	if ((p = soap_in_xsd__anyType(soap, tag, p, type)))
		soap_getindependent(soap);
	return p;
}

void *xsd__anyType::soap_in(struct soap *soap, const char *tag, const char *type)
{	return soap_in_xsd__anyType(soap, tag, this, type);
}

SOAP_FMAC3 xsd__anyType * SOAP_FMAC4 soap_in_xsd__anyType(struct soap *soap, const char *tag, xsd__anyType *a, const char *type)
{
	if (soap_element_begin_in(soap, tag, 0))
		return NULL;
	a = (xsd__anyType *)soap_class_id_enter(soap, soap->id, a, SOAP_TYPE_xsd__anyType, sizeof(xsd__anyType), soap->type, soap->arrayType);
	if (!a)
		return NULL;
	if (soap->alloced)
	{	a->soap_default(soap);
		if (soap->clist->type != SOAP_TYPE_xsd__anyType)
		{	soap_revert(soap);
			*soap->id = '\0';
			return (xsd__anyType *)a->soap_in(soap, tag, type);
		}
	};
	if (soap->body && !*soap->href)
	{	for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
			return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (xsd__anyType *)soap_id_forward(soap, soap->href, (void**)a, SOAP_TYPE_xsd__anyType, 0, sizeof(xsd__anyType), 0, soap_copy_xsd__anyType);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC5 xsd__anyType * SOAP_FMAC6 soap_new_xsd__anyType(struct soap *soap, int n)
{	return soap_instantiate_xsd__anyType(soap, n, NULL, NULL, NULL);
}

SOAP_FMAC5 void SOAP_FMAC6 soap_delete_xsd__anyType(struct soap *soap, xsd__anyType *p)
{	soap_delete(soap, p);
}

SOAP_FMAC5 xsd__anyType * SOAP_FMAC6 soap_instantiate_xsd__anyType(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate_xsd__anyType(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE_xsd__anyType, n, soap_fdelete);
	if (!cp)
		return NULL;
	if (type && !soap_match_tag(soap, type, "xsd:anySimpleType"))
	{	cp->type = SOAP_TYPE_xsd__anySimpleType;
		if (n < 0)
		{	cp->ptr = (void*)new xsd__anySimpleType;
			if (size)
				*size = sizeof(xsd__anySimpleType);
		}
		else
		{	cp->ptr = (void*)new xsd__anySimpleType[n];
			if (size)
				*size = n * sizeof(xsd__anySimpleType);
		}
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
		return (xsd__anySimpleType*)cp->ptr;
	}
	if (type && !soap_match_tag(soap, type, "xsd:decimal"))
	{	cp->type = SOAP_TYPE_xsd__decimal_;
		if (n < 0)
		{	cp->ptr = (void*)new xsd__decimal_;
			if (size)
				*size = sizeof(xsd__decimal_);
		}
		else
		{	cp->ptr = (void*)new xsd__decimal_[n];
			if (size)
				*size = n * sizeof(xsd__decimal_);
		}
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
		return (xsd__decimal_*)cp->ptr;
	}
	if (type && !soap_match_tag(soap, type, "xsd:integer"))
	{	cp->type = SOAP_TYPE_xsd__integer_;
		if (n < 0)
		{	cp->ptr = (void*)new xsd__integer_;
			if (size)
				*size = sizeof(xsd__integer_);
		}
		else
		{	cp->ptr = (void*)new xsd__integer_[n];
			if (size)
				*size = n * sizeof(xsd__integer_);
		}
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
		return (xsd__integer_*)cp->ptr;
	}
	if (type && !soap_match_tag(soap, type, "xsd:long"))
	{	cp->type = SOAP_TYPE_xsd__long_;
		if (n < 0)
		{	cp->ptr = (void*)new xsd__long_;
			if (size)
				*size = sizeof(xsd__long_);
		}
		else
		{	cp->ptr = (void*)new xsd__long_[n];
			if (size)
				*size = n * sizeof(xsd__long_);
		}
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
		return (xsd__long_*)cp->ptr;
	}
	if (n < 0)
	{	cp->ptr = (void*)new xsd__anyType;
		if (size)
			*size = sizeof(xsd__anyType);
	}
	else
	{	cp->ptr = (void*)new xsd__anyType[n];
		if (size)
			*size = n * sizeof(xsd__anyType);
	}
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	return (xsd__anyType*)cp->ptr;
}

SOAP_FMAC5 void SOAP_FMAC6 soap_copy_xsd__anyType(struct soap *soap, int st, int tt, void *p, const void *q, size_t n)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying xsd__anyType %p -> %p\n", q, p));
	*(xsd__anyType*)p = *(xsd__anyType*)q;
}

#ifndef WITH_NOGLOBAL

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_SOAP_ENV__Fault(struct soap *soap, struct SOAP_ENV__Fault const*a)
{
	soap_mark_SOAP_ENV__Fault(soap, a);
}

SOAP_FMAC3 void SOAP_FMAC4 soap_mark_SOAP_ENV__Fault(struct soap *soap, const struct SOAP_ENV__Fault *a)
{
	soap_embedded(soap, &a->faultcode, SOAP_TYPE__QName);
	soap_mark__QName(soap, &a->faultcode);
	soap_embedded(soap, &a->faultstring, SOAP_TYPE_string);
	soap_mark_string(soap, &a->faultstring);
	soap_embedded(soap, &a->faultactor, SOAP_TYPE_string);
	soap_mark_string(soap, &a->faultactor);
	soap_embedded(soap, &a->detail, SOAP_TYPE_PointerToSOAP_ENV__Detail);
	soap_mark_PointerToSOAP_ENV__Detail(soap, &a->detail);
	soap_embedded(soap, &a->SOAP_ENV__Code, SOAP_TYPE_PointerToSOAP_ENV__Code);
	soap_mark_PointerToSOAP_ENV__Code(soap, &a->SOAP_ENV__Code);
	soap_embedded(soap, &a->SOAP_ENV__Reason, SOAP_TYPE_string);
	soap_mark_string(soap, &a->SOAP_ENV__Reason);
	soap_embedded(soap, &a->SOAP_ENV__Detail, SOAP_TYPE_PointerToSOAP_ENV__Detail);
	soap_mark_PointerToSOAP_ENV__Detail(soap, &a->SOAP_ENV__Detail);
}

SOAP_FMAC3 void SOAP_FMAC4 soap_default_SOAP_ENV__Fault(struct soap *soap, struct SOAP_ENV__Fault *a)
{
	a->faultcode = NULL;
	a->faultstring = NULL;
	a->faultactor = NULL;
	a->detail = NULL;
	a->SOAP_ENV__Code = NULL;
	a->SOAP_ENV__Reason = NULL;
	a->SOAP_ENV__Detail = NULL;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_SOAP_ENV__Fault(struct soap *soap, const struct SOAP_ENV__Fault *a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_SOAP_ENV__Fault);
	if (soap_out_SOAP_ENV__Fault(soap, tag, id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_SOAP_ENV__Fault(struct soap *soap, const char *tag, int id, const struct SOAP_ENV__Fault *a, const char *type)
{
	const char *soap_tmp_faultcode = soap_QName2s(soap, a->faultcode);
	soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_SOAP_ENV__Fault), type);
	soap_out__QName(soap, "faultcode", -1, (char*const*)&soap_tmp_faultcode, "");
	soap_out_string(soap, "faultstring", -1, &a->faultstring, "");
	soap_out_string(soap, "faultactor", -1, &a->faultactor, "");
	soap_out_PointerToSOAP_ENV__Detail(soap, "detail", -1, &a->detail, "");
	soap_out_PointerToSOAP_ENV__Code(soap, "SOAP-ENV:Code", -1, &a->SOAP_ENV__Code, "");
	soap_out_string(soap, "SOAP-ENV:Reason", -1, &a->SOAP_ENV__Reason, "");
	soap_out_PointerToSOAP_ENV__Detail(soap, "SOAP-ENV:Detail", -1, &a->SOAP_ENV__Detail, "");
	soap_element_end_out(soap, tag);
	return SOAP_OK;
}

SOAP_FMAC3 struct SOAP_ENV__Fault * SOAP_FMAC4 soap_get_SOAP_ENV__Fault(struct soap *soap, struct SOAP_ENV__Fault *p, const char *tag, const char *type)
{
	if ((p = soap_in_SOAP_ENV__Fault(soap, tag, p, type)))
		soap_getindependent(soap);
	return p;
}

SOAP_FMAC3 struct SOAP_ENV__Fault * SOAP_FMAC4 soap_in_SOAP_ENV__Fault(struct soap *soap, const char *tag, struct SOAP_ENV__Fault *a, const char *type)
{
	short soap_flag_faultcode = 1, soap_flag_faultstring = 1, soap_flag_faultactor = 1, soap_flag_detail = 1, soap_flag_SOAP_ENV__Code = 1, soap_flag_SOAP_ENV__Reason = 1, soap_flag_SOAP_ENV__Detail = 1;
	if (soap_element_begin_in(soap, tag, 0))
		return NULL;
	if (*soap->type && soap_match_tag(soap, soap->type, type))
	{	soap->error = SOAP_TYPE;
		return NULL;
	}
	a = (struct SOAP_ENV__Fault *)soap_id_enter(soap, soap->id, a, SOAP_TYPE_SOAP_ENV__Fault, sizeof(struct SOAP_ENV__Fault), 0, NULL, NULL, NULL);
	if (!a)
		return NULL;
	if (soap->alloced)
		soap_default_SOAP_ENV__Fault(soap, a);
	if (soap->body && !*soap->href)
	{	for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_faultcode && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in__QName(soap, "faultcode", &a->faultcode, ""))
				{	soap_flag_faultcode = 0;
					continue;
				}
			if (soap_flag_faultstring && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_string(soap, "faultstring", &a->faultstring, ""))
				{	soap_flag_faultstring = 0;
					continue;
				}
			if (soap_flag_faultactor && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_string(soap, "faultactor", &a->faultactor, ""))
				{	soap_flag_faultactor = 0;
					continue;
				}
			if (soap_flag_detail && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_PointerToSOAP_ENV__Detail(soap, "detail", &a->detail, ""))
				{	soap_flag_detail = 0;
					continue;
				}
			if (soap_flag_SOAP_ENV__Code && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_PointerToSOAP_ENV__Code(soap, "SOAP-ENV:Code", &a->SOAP_ENV__Code, ""))
				{	soap_flag_SOAP_ENV__Code = 0;
					continue;
				}
			if (soap_flag_SOAP_ENV__Reason && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_string(soap, "SOAP-ENV:Reason", &a->SOAP_ENV__Reason, ""))
				{	soap_flag_SOAP_ENV__Reason = 0;
					continue;
				}
			if (soap_flag_SOAP_ENV__Detail && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_PointerToSOAP_ENV__Detail(soap, "SOAP-ENV:Detail", &a->SOAP_ENV__Detail, ""))
				{	soap_flag_SOAP_ENV__Detail = 0;
					continue;
				}
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (struct SOAP_ENV__Fault *)soap_id_forward(soap, soap->href, (void**)a, SOAP_TYPE_SOAP_ENV__Fault, 0, sizeof(struct SOAP_ENV__Fault), 0, NULL);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

#endif

#ifndef WITH_NOGLOBAL

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_SOAP_ENV__Detail(struct soap *soap, struct SOAP_ENV__Detail const*a)
{
	soap_mark_SOAP_ENV__Detail(soap, a);
}

SOAP_FMAC3 void SOAP_FMAC4 soap_mark_SOAP_ENV__Detail(struct soap *soap, const struct SOAP_ENV__Detail *a)
{
	soap_markelement(soap, a->fault, a->__type);
}

SOAP_FMAC3 void SOAP_FMAC4 soap_default_SOAP_ENV__Detail(struct soap *soap, struct SOAP_ENV__Detail *a)
{
	a->__type = 0;
	a->fault = NULL;
	a->__any = NULL;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_SOAP_ENV__Detail(struct soap *soap, const struct SOAP_ENV__Detail *a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_SOAP_ENV__Detail);
	if (soap_out_SOAP_ENV__Detail(soap, tag, id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_SOAP_ENV__Detail(struct soap *soap, const char *tag, int id, const struct SOAP_ENV__Detail *a, const char *type)
{
	soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_SOAP_ENV__Detail), type);
	soap_putelement(soap, a->fault, "fault", -1, a->__type);
	soap_outliteral(soap, "-any", &a->__any);
	soap_element_end_out(soap, tag);
	return SOAP_OK;
}

SOAP_FMAC3 struct SOAP_ENV__Detail * SOAP_FMAC4 soap_get_SOAP_ENV__Detail(struct soap *soap, struct SOAP_ENV__Detail *p, const char *tag, const char *type)
{
	if ((p = soap_in_SOAP_ENV__Detail(soap, tag, p, type)))
		soap_getindependent(soap);
	return p;
}

SOAP_FMAC3 struct SOAP_ENV__Detail * SOAP_FMAC4 soap_in_SOAP_ENV__Detail(struct soap *soap, const char *tag, struct SOAP_ENV__Detail *a, const char *type)
{
	short soap_flag_fault = 1, soap_flag___any = 1;
	if (soap_element_begin_in(soap, tag, 0))
		return NULL;
	if (*soap->type && soap_match_tag(soap, soap->type, type))
	{	soap->error = SOAP_TYPE;
		return NULL;
	}
	a = (struct SOAP_ENV__Detail *)soap_id_enter(soap, soap->id, a, SOAP_TYPE_SOAP_ENV__Detail, sizeof(struct SOAP_ENV__Detail), 0, NULL, NULL, NULL);
	if (!a)
		return NULL;
	if (soap->alloced)
		soap_default_SOAP_ENV__Detail(soap, a);
	if (soap->body && !*soap->href)
	{	for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_fault && soap->error == SOAP_TAG_MISMATCH)
				if ((a->fault = soap_getelement(soap, &a->__type)))
				{	soap_flag_fault = 0;
					continue;
				}
			if (soap_flag___any && soap->error == SOAP_TAG_MISMATCH)
				if (soap_inliteral(soap, "-any", &a->__any))
				{	soap_flag___any = 0;
					continue;
				}
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (struct SOAP_ENV__Detail *)soap_id_forward(soap, soap->href, (void**)a, SOAP_TYPE_SOAP_ENV__Detail, 0, sizeof(struct SOAP_ENV__Detail), 0, NULL);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

#endif

#ifndef WITH_NOGLOBAL

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_SOAP_ENV__Code(struct soap *soap, struct SOAP_ENV__Code const*a)
{
	soap_mark_SOAP_ENV__Code(soap, a);
}

SOAP_FMAC3 void SOAP_FMAC4 soap_mark_SOAP_ENV__Code(struct soap *soap, const struct SOAP_ENV__Code *a)
{
	soap_embedded(soap, &a->SOAP_ENV__Value, SOAP_TYPE__QName);
	soap_mark__QName(soap, &a->SOAP_ENV__Value);
	soap_embedded(soap, &a->SOAP_ENV__Node, SOAP_TYPE_string);
	soap_mark_string(soap, &a->SOAP_ENV__Node);
	soap_embedded(soap, &a->SOAP_ENV__Role, SOAP_TYPE_string);
	soap_mark_string(soap, &a->SOAP_ENV__Role);
}

SOAP_FMAC3 void SOAP_FMAC4 soap_default_SOAP_ENV__Code(struct soap *soap, struct SOAP_ENV__Code *a)
{
	a->SOAP_ENV__Value = NULL;
	a->SOAP_ENV__Node = NULL;
	a->SOAP_ENV__Role = NULL;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_SOAP_ENV__Code(struct soap *soap, const struct SOAP_ENV__Code *a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_SOAP_ENV__Code);
	if (soap_out_SOAP_ENV__Code(soap, tag, id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_SOAP_ENV__Code(struct soap *soap, const char *tag, int id, const struct SOAP_ENV__Code *a, const char *type)
{
	const char *soap_tmp_SOAP_ENV__Value = soap_QName2s(soap, a->SOAP_ENV__Value);
	soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_SOAP_ENV__Code), type);
	soap_out__QName(soap, "SOAP-ENV:Value", -1, (char*const*)&soap_tmp_SOAP_ENV__Value, "");
	soap_out_string(soap, "SOAP-ENV:Node", -1, &a->SOAP_ENV__Node, "");
	soap_out_string(soap, "SOAP-ENV:Role", -1, &a->SOAP_ENV__Role, "");
	soap_element_end_out(soap, tag);
	return SOAP_OK;
}

SOAP_FMAC3 struct SOAP_ENV__Code * SOAP_FMAC4 soap_get_SOAP_ENV__Code(struct soap *soap, struct SOAP_ENV__Code *p, const char *tag, const char *type)
{
	if ((p = soap_in_SOAP_ENV__Code(soap, tag, p, type)))
		soap_getindependent(soap);
	return p;
}

SOAP_FMAC3 struct SOAP_ENV__Code * SOAP_FMAC4 soap_in_SOAP_ENV__Code(struct soap *soap, const char *tag, struct SOAP_ENV__Code *a, const char *type)
{
	short soap_flag_SOAP_ENV__Value = 1, soap_flag_SOAP_ENV__Node = 1, soap_flag_SOAP_ENV__Role = 1;
	if (soap_element_begin_in(soap, tag, 0))
		return NULL;
	if (*soap->type && soap_match_tag(soap, soap->type, type))
	{	soap->error = SOAP_TYPE;
		return NULL;
	}
	a = (struct SOAP_ENV__Code *)soap_id_enter(soap, soap->id, a, SOAP_TYPE_SOAP_ENV__Code, sizeof(struct SOAP_ENV__Code), 0, NULL, NULL, NULL);
	if (!a)
		return NULL;
	if (soap->alloced)
		soap_default_SOAP_ENV__Code(soap, a);
	if (soap->body && !*soap->href)
	{	for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_SOAP_ENV__Value && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in__QName(soap, "SOAP-ENV:Value", &a->SOAP_ENV__Value, ""))
				{	soap_flag_SOAP_ENV__Value = 0;
					continue;
				}
			if (soap_flag_SOAP_ENV__Node && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_string(soap, "SOAP-ENV:Node", &a->SOAP_ENV__Node, ""))
				{	soap_flag_SOAP_ENV__Node = 0;
					continue;
				}
			if (soap_flag_SOAP_ENV__Role && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_string(soap, "SOAP-ENV:Role", &a->SOAP_ENV__Role, ""))
				{	soap_flag_SOAP_ENV__Role = 0;
					continue;
				}
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (struct SOAP_ENV__Code *)soap_id_forward(soap, soap->href, (void**)a, SOAP_TYPE_SOAP_ENV__Code, 0, sizeof(struct SOAP_ENV__Code), 0, NULL);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

#endif

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_klftbridge_ReleaseReceiver(struct soap *soap, struct klftbridge_ReleaseReceiver const*a)
{
	soap_mark_klftbridge_ReleaseReceiver(soap, a);
}

SOAP_FMAC3 void SOAP_FMAC4 soap_mark_klftbridge_ReleaseReceiver(struct soap *soap, const struct klftbridge_ReleaseReceiver *a)
{
	soap_embedded(soap, &a->receiverId, SOAP_TYPE_xsd__wstring);
	soap_mark_xsd__wstring(soap, &a->receiverId);
}

SOAP_FMAC3 void SOAP_FMAC4 soap_default_klftbridge_ReleaseReceiver(struct soap *soap, struct klftbridge_ReleaseReceiver *a)
{
	a->receiverId = NULL;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_klftbridge_ReleaseReceiver(struct soap *soap, const struct klftbridge_ReleaseReceiver *a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_klftbridge_ReleaseReceiver);
	if (soap_out_klftbridge_ReleaseReceiver(soap, tag, id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_klftbridge_ReleaseReceiver(struct soap *soap, const char *tag, int id, const struct klftbridge_ReleaseReceiver *a, const char *type)
{
	soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_klftbridge_ReleaseReceiver), type);
	soap_out_xsd__wstring(soap, "receiverId", -1, &a->receiverId, "");
	soap_element_end_out(soap, tag);
	return SOAP_OK;
}

SOAP_FMAC3 struct klftbridge_ReleaseReceiver * SOAP_FMAC4 soap_get_klftbridge_ReleaseReceiver(struct soap *soap, struct klftbridge_ReleaseReceiver *p, const char *tag, const char *type)
{
	if ((p = soap_in_klftbridge_ReleaseReceiver(soap, tag, p, type)))
		soap_getindependent(soap);
	return p;
}

SOAP_FMAC3 struct klftbridge_ReleaseReceiver * SOAP_FMAC4 soap_in_klftbridge_ReleaseReceiver(struct soap *soap, const char *tag, struct klftbridge_ReleaseReceiver *a, const char *type)
{
	short soap_flag_receiverId = 1;
	if (soap_element_begin_in(soap, tag, 0))
		return NULL;
	if (*soap->type && soap_match_tag(soap, soap->type, type))
	{	soap->error = SOAP_TYPE;
		return NULL;
	}
	a = (struct klftbridge_ReleaseReceiver *)soap_id_enter(soap, soap->id, a, SOAP_TYPE_klftbridge_ReleaseReceiver, sizeof(struct klftbridge_ReleaseReceiver), 0, NULL, NULL, NULL);
	if (!a)
		return NULL;
	if (soap->alloced)
		soap_default_klftbridge_ReleaseReceiver(soap, a);
	if (soap->body && !*soap->href)
	{	for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_receiverId && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_xsd__wstring(soap, "receiverId", &a->receiverId, "xsd:wstring"))
				{	soap_flag_receiverId = 0;
					continue;
				}
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (struct klftbridge_ReleaseReceiver *)soap_id_forward(soap, soap->href, (void**)a, SOAP_TYPE_klftbridge_ReleaseReceiver, 0, sizeof(struct klftbridge_ReleaseReceiver), 0, NULL);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_klftbridge_ReleaseReceiverResponse(struct soap *soap, struct klftbridge_ReleaseReceiverResponse const*a)
{
	soap_mark_klftbridge_ReleaseReceiverResponse(soap, a);
}

SOAP_FMAC3 void SOAP_FMAC4 soap_mark_klftbridge_ReleaseReceiverResponse(struct soap *soap, const struct klftbridge_ReleaseReceiverResponse *a)
{
	soap_embedded(soap, &a->res, SOAP_TYPE_xsd__long);
}

SOAP_FMAC3 void SOAP_FMAC4 soap_default_klftbridge_ReleaseReceiverResponse(struct soap *soap, struct klftbridge_ReleaseReceiverResponse *a)
{
	soap_default_xsd__long(soap, &a->res);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_klftbridge_ReleaseReceiverResponse(struct soap *soap, const struct klftbridge_ReleaseReceiverResponse *a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_klftbridge_ReleaseReceiverResponse);
	if (soap_out_klftbridge_ReleaseReceiverResponse(soap, tag, id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_klftbridge_ReleaseReceiverResponse(struct soap *soap, const char *tag, int id, const struct klftbridge_ReleaseReceiverResponse *a, const char *type)
{
	soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_klftbridge_ReleaseReceiverResponse), type);
	soap_element_result(soap, "res");
	soap_out_xsd__long(soap, "res", -1, &a->res, "");
	soap_element_end_out(soap, tag);
	return SOAP_OK;
}

SOAP_FMAC3 struct klftbridge_ReleaseReceiverResponse * SOAP_FMAC4 soap_get_klftbridge_ReleaseReceiverResponse(struct soap *soap, struct klftbridge_ReleaseReceiverResponse *p, const char *tag, const char *type)
{
	if ((p = soap_in_klftbridge_ReleaseReceiverResponse(soap, tag, p, type)))
		soap_getindependent(soap);
	return p;
}

SOAP_FMAC3 struct klftbridge_ReleaseReceiverResponse * SOAP_FMAC4 soap_in_klftbridge_ReleaseReceiverResponse(struct soap *soap, const char *tag, struct klftbridge_ReleaseReceiverResponse *a, const char *type)
{
	short soap_flag_res = 1;
	if (soap_element_begin_in(soap, tag, 0))
		return NULL;
	if (*soap->type && soap_match_tag(soap, soap->type, type))
	{	soap->error = SOAP_TYPE;
		return NULL;
	}
	a = (struct klftbridge_ReleaseReceiverResponse *)soap_id_enter(soap, soap->id, a, SOAP_TYPE_klftbridge_ReleaseReceiverResponse, sizeof(struct klftbridge_ReleaseReceiverResponse), 0, NULL, NULL, NULL);
	if (!a)
		return NULL;
	if (soap->alloced)
		soap_default_klftbridge_ReleaseReceiverResponse(soap, a);
	if (soap->body && !*soap->href)
	{	for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_res && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_xsd__long(soap, "res", &a->res, "xsd:long"))
				{	soap_flag_res = 0;
					continue;
				}
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if ((soap->mode & SOAP_XML_STRICT) && (soap_flag_res))
		{	soap->error = SOAP_OCCURS;
			return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (struct klftbridge_ReleaseReceiverResponse *)soap_id_forward(soap, soap->href, (void**)a, SOAP_TYPE_klftbridge_ReleaseReceiverResponse, 0, sizeof(struct klftbridge_ReleaseReceiverResponse), 0, NULL);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_klftbridge_GetNextFileChunk(struct soap *soap, struct klftbridge_GetNextFileChunk const*a)
{
	soap_mark_klftbridge_GetNextFileChunk(soap, a);
}

SOAP_FMAC3 void SOAP_FMAC4 soap_mark_klftbridge_GetNextFileChunk(struct soap *soap, const struct klftbridge_GetNextFileChunk *a)
{
	soap_embedded(soap, &a->receiverId, SOAP_TYPE_xsd__wstring);
	soap_mark_xsd__wstring(soap, &a->receiverId);
	soap_embedded(soap, &a->fileName, SOAP_TYPE_xsd__wstring);
	soap_mark_xsd__wstring(soap, &a->fileName);
	soap_embedded(soap, &a->startFilePos, SOAP_TYPE_xsd__unsignedLong);
	soap_embedded(soap, &a->neededSize, SOAP_TYPE_xsd__unsignedLong);
}

SOAP_FMAC3 void SOAP_FMAC4 soap_default_klftbridge_GetNextFileChunk(struct soap *soap, struct klftbridge_GetNextFileChunk *a)
{
	a->receiverId = NULL;
	a->fileName = NULL;
	soap_default_xsd__unsignedLong(soap, &a->startFilePos);
	soap_default_xsd__unsignedLong(soap, &a->neededSize);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_klftbridge_GetNextFileChunk(struct soap *soap, const struct klftbridge_GetNextFileChunk *a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_klftbridge_GetNextFileChunk);
	if (soap_out_klftbridge_GetNextFileChunk(soap, tag, id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_klftbridge_GetNextFileChunk(struct soap *soap, const char *tag, int id, const struct klftbridge_GetNextFileChunk *a, const char *type)
{
	soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_klftbridge_GetNextFileChunk), type);
	soap_out_xsd__wstring(soap, "receiverId", -1, &a->receiverId, "");
	soap_out_xsd__wstring(soap, "fileName", -1, &a->fileName, "");
	soap_out_xsd__unsignedLong(soap, "startFilePos", -1, &a->startFilePos, "");
	soap_out_xsd__unsignedLong(soap, "neededSize", -1, &a->neededSize, "");
	soap_element_end_out(soap, tag);
	return SOAP_OK;
}

SOAP_FMAC3 struct klftbridge_GetNextFileChunk * SOAP_FMAC4 soap_get_klftbridge_GetNextFileChunk(struct soap *soap, struct klftbridge_GetNextFileChunk *p, const char *tag, const char *type)
{
	if ((p = soap_in_klftbridge_GetNextFileChunk(soap, tag, p, type)))
		soap_getindependent(soap);
	return p;
}

SOAP_FMAC3 struct klftbridge_GetNextFileChunk * SOAP_FMAC4 soap_in_klftbridge_GetNextFileChunk(struct soap *soap, const char *tag, struct klftbridge_GetNextFileChunk *a, const char *type)
{
	short soap_flag_receiverId = 1, soap_flag_fileName = 1, soap_flag_startFilePos = 1, soap_flag_neededSize = 1;
	if (soap_element_begin_in(soap, tag, 0))
		return NULL;
	if (*soap->type && soap_match_tag(soap, soap->type, type))
	{	soap->error = SOAP_TYPE;
		return NULL;
	}
	a = (struct klftbridge_GetNextFileChunk *)soap_id_enter(soap, soap->id, a, SOAP_TYPE_klftbridge_GetNextFileChunk, sizeof(struct klftbridge_GetNextFileChunk), 0, NULL, NULL, NULL);
	if (!a)
		return NULL;
	if (soap->alloced)
		soap_default_klftbridge_GetNextFileChunk(soap, a);
	if (soap->body && !*soap->href)
	{	for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_receiverId && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_xsd__wstring(soap, "receiverId", &a->receiverId, "xsd:wstring"))
				{	soap_flag_receiverId = 0;
					continue;
				}
			if (soap_flag_fileName && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_xsd__wstring(soap, "fileName", &a->fileName, "xsd:wstring"))
				{	soap_flag_fileName = 0;
					continue;
				}
			if (soap_flag_startFilePos && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_xsd__unsignedLong(soap, "startFilePos", &a->startFilePos, "xsd:unsignedLong"))
				{	soap_flag_startFilePos = 0;
					continue;
				}
			if (soap_flag_neededSize && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_xsd__unsignedLong(soap, "neededSize", &a->neededSize, "xsd:unsignedLong"))
				{	soap_flag_neededSize = 0;
					continue;
				}
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if ((soap->mode & SOAP_XML_STRICT) && (soap_flag_startFilePos || soap_flag_neededSize))
		{	soap->error = SOAP_OCCURS;
			return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (struct klftbridge_GetNextFileChunk *)soap_id_forward(soap, soap->href, (void**)a, SOAP_TYPE_klftbridge_GetNextFileChunk, 0, sizeof(struct klftbridge_GetNextFileChunk), 0, NULL);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_klftbridge_GetNextFileChunkResponse(struct soap *soap, struct klftbridge_GetNextFileChunkResponse const*a)
{
	soap_mark_klftbridge_GetNextFileChunkResponse(soap, a);
}

SOAP_FMAC3 void SOAP_FMAC4 soap_mark_klftbridge_GetNextFileChunkResponse(struct soap *soap, const struct klftbridge_GetNextFileChunkResponse *a)
{
	soap_embedded(soap, &a->chunk, SOAP_TYPE_klft_file_chunk_t);
	soap_mark_klft_file_chunk_t(soap, &a->chunk);
	soap_embedded(soap, &a->res, SOAP_TYPE_xsd__long);
}

SOAP_FMAC3 void SOAP_FMAC4 soap_default_klftbridge_GetNextFileChunkResponse(struct soap *soap, struct klftbridge_GetNextFileChunkResponse *a)
{
	soap_default_klft_file_chunk_t(soap, &a->chunk);
	soap_default_xsd__long(soap, &a->res);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_klftbridge_GetNextFileChunkResponse(struct soap *soap, const struct klftbridge_GetNextFileChunkResponse *a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_klftbridge_GetNextFileChunkResponse);
	if (soap_out_klftbridge_GetNextFileChunkResponse(soap, tag, id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_klftbridge_GetNextFileChunkResponse(struct soap *soap, const char *tag, int id, const struct klftbridge_GetNextFileChunkResponse *a, const char *type)
{
	soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_klftbridge_GetNextFileChunkResponse), type);
	soap_element_result(soap, "chunk");
	soap_out_klft_file_chunk_t(soap, "chunk", -1, &a->chunk, "");
	soap_out_xsd__long(soap, "res", -1, &a->res, "");
	soap_element_end_out(soap, tag);
	return SOAP_OK;
}

SOAP_FMAC3 struct klftbridge_GetNextFileChunkResponse * SOAP_FMAC4 soap_get_klftbridge_GetNextFileChunkResponse(struct soap *soap, struct klftbridge_GetNextFileChunkResponse *p, const char *tag, const char *type)
{
	if ((p = soap_in_klftbridge_GetNextFileChunkResponse(soap, tag, p, type)))
		soap_getindependent(soap);
	return p;
}

SOAP_FMAC3 struct klftbridge_GetNextFileChunkResponse * SOAP_FMAC4 soap_in_klftbridge_GetNextFileChunkResponse(struct soap *soap, const char *tag, struct klftbridge_GetNextFileChunkResponse *a, const char *type)
{
	short soap_flag_chunk = 1, soap_flag_res = 1;
	if (soap_element_begin_in(soap, tag, 0))
		return NULL;
	if (*soap->type && soap_match_tag(soap, soap->type, type))
	{	soap->error = SOAP_TYPE;
		return NULL;
	}
	a = (struct klftbridge_GetNextFileChunkResponse *)soap_id_enter(soap, soap->id, a, SOAP_TYPE_klftbridge_GetNextFileChunkResponse, sizeof(struct klftbridge_GetNextFileChunkResponse), 0, NULL, NULL, NULL);
	if (!a)
		return NULL;
	if (soap->alloced)
		soap_default_klftbridge_GetNextFileChunkResponse(soap, a);
	if (soap->body && !*soap->href)
	{	for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_chunk && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_klft_file_chunk_t(soap, "chunk", &a->chunk, ""))
				{	soap_flag_chunk = 0;
					continue;
				}
			if (soap_flag_res && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_xsd__long(soap, "res", &a->res, "xsd:long"))
				{	soap_flag_res = 0;
					continue;
				}
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if ((soap->mode & SOAP_XML_STRICT) && (soap_flag_chunk || soap_flag_res))
		{	soap->error = SOAP_OCCURS;
			return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (struct klftbridge_GetNextFileChunkResponse *)soap_id_forward(soap, soap->href, (void**)a, SOAP_TYPE_klftbridge_GetNextFileChunkResponse, 0, sizeof(struct klftbridge_GetNextFileChunkResponse), 0, NULL);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_klftbridge_GetFileInfo(struct soap *soap, struct klftbridge_GetFileInfo const*a)
{
	soap_mark_klftbridge_GetFileInfo(soap, a);
}

SOAP_FMAC3 void SOAP_FMAC4 soap_mark_klftbridge_GetFileInfo(struct soap *soap, const struct klftbridge_GetFileInfo *a)
{
	soap_embedded(soap, &a->receiverId, SOAP_TYPE_xsd__wstring);
	soap_mark_xsd__wstring(soap, &a->receiverId);
	soap_embedded(soap, &a->fileName, SOAP_TYPE_xsd__wstring);
	soap_mark_xsd__wstring(soap, &a->fileName);
}

SOAP_FMAC3 void SOAP_FMAC4 soap_default_klftbridge_GetFileInfo(struct soap *soap, struct klftbridge_GetFileInfo *a)
{
	a->receiverId = NULL;
	a->fileName = NULL;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_klftbridge_GetFileInfo(struct soap *soap, const struct klftbridge_GetFileInfo *a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_klftbridge_GetFileInfo);
	if (soap_out_klftbridge_GetFileInfo(soap, tag, id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_klftbridge_GetFileInfo(struct soap *soap, const char *tag, int id, const struct klftbridge_GetFileInfo *a, const char *type)
{
	soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_klftbridge_GetFileInfo), type);
	soap_out_xsd__wstring(soap, "receiverId", -1, &a->receiverId, "");
	soap_out_xsd__wstring(soap, "fileName", -1, &a->fileName, "");
	soap_element_end_out(soap, tag);
	return SOAP_OK;
}

SOAP_FMAC3 struct klftbridge_GetFileInfo * SOAP_FMAC4 soap_get_klftbridge_GetFileInfo(struct soap *soap, struct klftbridge_GetFileInfo *p, const char *tag, const char *type)
{
	if ((p = soap_in_klftbridge_GetFileInfo(soap, tag, p, type)))
		soap_getindependent(soap);
	return p;
}

SOAP_FMAC3 struct klftbridge_GetFileInfo * SOAP_FMAC4 soap_in_klftbridge_GetFileInfo(struct soap *soap, const char *tag, struct klftbridge_GetFileInfo *a, const char *type)
{
	short soap_flag_receiverId = 1, soap_flag_fileName = 1;
	if (soap_element_begin_in(soap, tag, 0))
		return NULL;
	if (*soap->type && soap_match_tag(soap, soap->type, type))
	{	soap->error = SOAP_TYPE;
		return NULL;
	}
	a = (struct klftbridge_GetFileInfo *)soap_id_enter(soap, soap->id, a, SOAP_TYPE_klftbridge_GetFileInfo, sizeof(struct klftbridge_GetFileInfo), 0, NULL, NULL, NULL);
	if (!a)
		return NULL;
	if (soap->alloced)
		soap_default_klftbridge_GetFileInfo(soap, a);
	if (soap->body && !*soap->href)
	{	for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_receiverId && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_xsd__wstring(soap, "receiverId", &a->receiverId, "xsd:wstring"))
				{	soap_flag_receiverId = 0;
					continue;
				}
			if (soap_flag_fileName && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_xsd__wstring(soap, "fileName", &a->fileName, "xsd:wstring"))
				{	soap_flag_fileName = 0;
					continue;
				}
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (struct klftbridge_GetFileInfo *)soap_id_forward(soap, soap->href, (void**)a, SOAP_TYPE_klftbridge_GetFileInfo, 0, sizeof(struct klftbridge_GetFileInfo), 0, NULL);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_klftbridge_GetFileInfoResponse(struct soap *soap, struct klftbridge_GetFileInfoResponse const*a)
{
	soap_mark_klftbridge_GetFileInfoResponse(soap, a);
}

SOAP_FMAC3 void SOAP_FMAC4 soap_mark_klftbridge_GetFileInfoResponse(struct soap *soap, const struct klftbridge_GetFileInfoResponse *a)
{
	soap_embedded(soap, &a->info, SOAP_TYPE_klft_file_info_t);
	soap_mark_klft_file_info_t(soap, &a->info);
	soap_embedded(soap, &a->res, SOAP_TYPE_xsd__long);
}

SOAP_FMAC3 void SOAP_FMAC4 soap_default_klftbridge_GetFileInfoResponse(struct soap *soap, struct klftbridge_GetFileInfoResponse *a)
{
	soap_default_klft_file_info_t(soap, &a->info);
	soap_default_xsd__long(soap, &a->res);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_klftbridge_GetFileInfoResponse(struct soap *soap, const struct klftbridge_GetFileInfoResponse *a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_klftbridge_GetFileInfoResponse);
	if (soap_out_klftbridge_GetFileInfoResponse(soap, tag, id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_klftbridge_GetFileInfoResponse(struct soap *soap, const char *tag, int id, const struct klftbridge_GetFileInfoResponse *a, const char *type)
{
	soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_klftbridge_GetFileInfoResponse), type);
	soap_element_result(soap, "info");
	soap_out_klft_file_info_t(soap, "info", -1, &a->info, "");
	soap_out_xsd__long(soap, "res", -1, &a->res, "");
	soap_element_end_out(soap, tag);
	return SOAP_OK;
}

SOAP_FMAC3 struct klftbridge_GetFileInfoResponse * SOAP_FMAC4 soap_get_klftbridge_GetFileInfoResponse(struct soap *soap, struct klftbridge_GetFileInfoResponse *p, const char *tag, const char *type)
{
	if ((p = soap_in_klftbridge_GetFileInfoResponse(soap, tag, p, type)))
		soap_getindependent(soap);
	return p;
}

SOAP_FMAC3 struct klftbridge_GetFileInfoResponse * SOAP_FMAC4 soap_in_klftbridge_GetFileInfoResponse(struct soap *soap, const char *tag, struct klftbridge_GetFileInfoResponse *a, const char *type)
{
	short soap_flag_info = 1, soap_flag_res = 1;
	if (soap_element_begin_in(soap, tag, 0))
		return NULL;
	if (*soap->type && soap_match_tag(soap, soap->type, type))
	{	soap->error = SOAP_TYPE;
		return NULL;
	}
	a = (struct klftbridge_GetFileInfoResponse *)soap_id_enter(soap, soap->id, a, SOAP_TYPE_klftbridge_GetFileInfoResponse, sizeof(struct klftbridge_GetFileInfoResponse), 0, NULL, NULL, NULL);
	if (!a)
		return NULL;
	if (soap->alloced)
		soap_default_klftbridge_GetFileInfoResponse(soap, a);
	if (soap->body && !*soap->href)
	{	for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_info && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_klft_file_info_t(soap, "info", &a->info, ""))
				{	soap_flag_info = 0;
					continue;
				}
			if (soap_flag_res && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_xsd__long(soap, "res", &a->res, "xsd:long"))
				{	soap_flag_res = 0;
					continue;
				}
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if ((soap->mode & SOAP_XML_STRICT) && (soap_flag_info || soap_flag_res))
		{	soap->error = SOAP_OCCURS;
			return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (struct klftbridge_GetFileInfoResponse *)soap_id_forward(soap, soap->href, (void**)a, SOAP_TYPE_klftbridge_GetFileInfoResponse, 0, sizeof(struct klftbridge_GetFileInfoResponse), 0, NULL);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_klftbridge_Connect(struct soap *soap, struct klftbridge_Connect const*a)
{
	soap_mark_klftbridge_Connect(soap, a);
}

SOAP_FMAC3 void SOAP_FMAC4 soap_mark_klftbridge_Connect(struct soap *soap, const struct klftbridge_Connect *a)
{
	soap_embedded(soap, &a->receiverId, SOAP_TYPE_xsd__wstring);
	soap_mark_xsd__wstring(soap, &a->receiverId);
	soap_embedded(soap, &a->toMasterServer, SOAP_TYPE_xsd__boolean);
}

SOAP_FMAC3 void SOAP_FMAC4 soap_default_klftbridge_Connect(struct soap *soap, struct klftbridge_Connect *a)
{
	a->receiverId = NULL;
	soap_default_xsd__boolean(soap, &a->toMasterServer);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_klftbridge_Connect(struct soap *soap, const struct klftbridge_Connect *a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_klftbridge_Connect);
	if (soap_out_klftbridge_Connect(soap, tag, id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_klftbridge_Connect(struct soap *soap, const char *tag, int id, const struct klftbridge_Connect *a, const char *type)
{
	soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_klftbridge_Connect), type);
	soap_out_xsd__wstring(soap, "receiverId", -1, &a->receiverId, "");
	soap_out_xsd__boolean(soap, "toMasterServer", -1, &a->toMasterServer, "");
	soap_element_end_out(soap, tag);
	return SOAP_OK;
}

SOAP_FMAC3 struct klftbridge_Connect * SOAP_FMAC4 soap_get_klftbridge_Connect(struct soap *soap, struct klftbridge_Connect *p, const char *tag, const char *type)
{
	if ((p = soap_in_klftbridge_Connect(soap, tag, p, type)))
		soap_getindependent(soap);
	return p;
}

SOAP_FMAC3 struct klftbridge_Connect * SOAP_FMAC4 soap_in_klftbridge_Connect(struct soap *soap, const char *tag, struct klftbridge_Connect *a, const char *type)
{
	short soap_flag_receiverId = 1, soap_flag_toMasterServer = 1;
	if (soap_element_begin_in(soap, tag, 0))
		return NULL;
	if (*soap->type && soap_match_tag(soap, soap->type, type))
	{	soap->error = SOAP_TYPE;
		return NULL;
	}
	a = (struct klftbridge_Connect *)soap_id_enter(soap, soap->id, a, SOAP_TYPE_klftbridge_Connect, sizeof(struct klftbridge_Connect), 0, NULL, NULL, NULL);
	if (!a)
		return NULL;
	if (soap->alloced)
		soap_default_klftbridge_Connect(soap, a);
	if (soap->body && !*soap->href)
	{	for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_receiverId && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_xsd__wstring(soap, "receiverId", &a->receiverId, "xsd:wstring"))
				{	soap_flag_receiverId = 0;
					continue;
				}
			if (soap_flag_toMasterServer && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_xsd__boolean(soap, "toMasterServer", &a->toMasterServer, "xsd:boolean"))
				{	soap_flag_toMasterServer = 0;
					continue;
				}
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if ((soap->mode & SOAP_XML_STRICT) && (soap_flag_toMasterServer))
		{	soap->error = SOAP_OCCURS;
			return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (struct klftbridge_Connect *)soap_id_forward(soap, soap->href, (void**)a, SOAP_TYPE_klftbridge_Connect, 0, sizeof(struct klftbridge_Connect), 0, NULL);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_klftbridge_ConnectResponse(struct soap *soap, struct klftbridge_ConnectResponse const*a)
{
	soap_mark_klftbridge_ConnectResponse(soap, a);
}

SOAP_FMAC3 void SOAP_FMAC4 soap_mark_klftbridge_ConnectResponse(struct soap *soap, const struct klftbridge_ConnectResponse *a)
{
	soap_embedded(soap, &a->res, SOAP_TYPE_xsd__long);
}

SOAP_FMAC3 void SOAP_FMAC4 soap_default_klftbridge_ConnectResponse(struct soap *soap, struct klftbridge_ConnectResponse *a)
{
	soap_default_xsd__long(soap, &a->res);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_klftbridge_ConnectResponse(struct soap *soap, const struct klftbridge_ConnectResponse *a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_klftbridge_ConnectResponse);
	if (soap_out_klftbridge_ConnectResponse(soap, tag, id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_klftbridge_ConnectResponse(struct soap *soap, const char *tag, int id, const struct klftbridge_ConnectResponse *a, const char *type)
{
	soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_klftbridge_ConnectResponse), type);
	soap_element_result(soap, "res");
	soap_out_xsd__long(soap, "res", -1, &a->res, "");
	soap_element_end_out(soap, tag);
	return SOAP_OK;
}

SOAP_FMAC3 struct klftbridge_ConnectResponse * SOAP_FMAC4 soap_get_klftbridge_ConnectResponse(struct soap *soap, struct klftbridge_ConnectResponse *p, const char *tag, const char *type)
{
	if ((p = soap_in_klftbridge_ConnectResponse(soap, tag, p, type)))
		soap_getindependent(soap);
	return p;
}

SOAP_FMAC3 struct klftbridge_ConnectResponse * SOAP_FMAC4 soap_in_klftbridge_ConnectResponse(struct soap *soap, const char *tag, struct klftbridge_ConnectResponse *a, const char *type)
{
	short soap_flag_res = 1;
	if (soap_element_begin_in(soap, tag, 0))
		return NULL;
	if (*soap->type && soap_match_tag(soap, soap->type, type))
	{	soap->error = SOAP_TYPE;
		return NULL;
	}
	a = (struct klftbridge_ConnectResponse *)soap_id_enter(soap, soap->id, a, SOAP_TYPE_klftbridge_ConnectResponse, sizeof(struct klftbridge_ConnectResponse), 0, NULL, NULL, NULL);
	if (!a)
		return NULL;
	if (soap->alloced)
		soap_default_klftbridge_ConnectResponse(soap, a);
	if (soap->body && !*soap->href)
	{	for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_res && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_xsd__long(soap, "res", &a->res, "xsd:long"))
				{	soap_flag_res = 0;
					continue;
				}
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if ((soap->mode & SOAP_XML_STRICT) && (soap_flag_res))
		{	soap->error = SOAP_OCCURS;
			return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (struct klftbridge_ConnectResponse *)soap_id_forward(soap, soap->href, (void**)a, SOAP_TYPE_klftbridge_ConnectResponse, 0, sizeof(struct klftbridge_ConnectResponse), 0, NULL);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_klftbridge_CreateReceiver(struct soap *soap, struct klftbridge_CreateReceiver const*a)
{
	soap_mark_klftbridge_CreateReceiver(soap, a);
}

SOAP_FMAC3 void SOAP_FMAC4 soap_mark_klftbridge_CreateReceiver(struct soap *soap, const struct klftbridge_CreateReceiver *a)
{
	soap_embedded(soap, &a->useUpdaterFolder, SOAP_TYPE_xsd__boolean);
}

SOAP_FMAC3 void SOAP_FMAC4 soap_default_klftbridge_CreateReceiver(struct soap *soap, struct klftbridge_CreateReceiver *a)
{
	soap_default_xsd__boolean(soap, &a->useUpdaterFolder);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_klftbridge_CreateReceiver(struct soap *soap, const struct klftbridge_CreateReceiver *a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_klftbridge_CreateReceiver);
	if (soap_out_klftbridge_CreateReceiver(soap, tag, id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_klftbridge_CreateReceiver(struct soap *soap, const char *tag, int id, const struct klftbridge_CreateReceiver *a, const char *type)
{
	soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_klftbridge_CreateReceiver), type);
	soap_out_xsd__boolean(soap, "useUpdaterFolder", -1, &a->useUpdaterFolder, "");
	soap_element_end_out(soap, tag);
	return SOAP_OK;
}

SOAP_FMAC3 struct klftbridge_CreateReceiver * SOAP_FMAC4 soap_get_klftbridge_CreateReceiver(struct soap *soap, struct klftbridge_CreateReceiver *p, const char *tag, const char *type)
{
	if ((p = soap_in_klftbridge_CreateReceiver(soap, tag, p, type)))
		soap_getindependent(soap);
	return p;
}

SOAP_FMAC3 struct klftbridge_CreateReceiver * SOAP_FMAC4 soap_in_klftbridge_CreateReceiver(struct soap *soap, const char *tag, struct klftbridge_CreateReceiver *a, const char *type)
{
	short soap_flag_useUpdaterFolder = 1;
	if (soap_element_begin_in(soap, tag, 0))
		return NULL;
	if (*soap->type && soap_match_tag(soap, soap->type, type))
	{	soap->error = SOAP_TYPE;
		return NULL;
	}
	a = (struct klftbridge_CreateReceiver *)soap_id_enter(soap, soap->id, a, SOAP_TYPE_klftbridge_CreateReceiver, sizeof(struct klftbridge_CreateReceiver), 0, NULL, NULL, NULL);
	if (!a)
		return NULL;
	if (soap->alloced)
		soap_default_klftbridge_CreateReceiver(soap, a);
	if (soap->body && !*soap->href)
	{	for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_useUpdaterFolder && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_xsd__boolean(soap, "useUpdaterFolder", &a->useUpdaterFolder, "xsd:boolean"))
				{	soap_flag_useUpdaterFolder = 0;
					continue;
				}
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if ((soap->mode & SOAP_XML_STRICT) && (soap_flag_useUpdaterFolder))
		{	soap->error = SOAP_OCCURS;
			return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (struct klftbridge_CreateReceiver *)soap_id_forward(soap, soap->href, (void**)a, SOAP_TYPE_klftbridge_CreateReceiver, 0, sizeof(struct klftbridge_CreateReceiver), 0, NULL);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_klftbridge_CreateReceiverResponse(struct soap *soap, struct klftbridge_CreateReceiverResponse const*a)
{
	soap_mark_klftbridge_CreateReceiverResponse(soap, a);
}

SOAP_FMAC3 void SOAP_FMAC4 soap_mark_klftbridge_CreateReceiverResponse(struct soap *soap, const struct klftbridge_CreateReceiverResponse *a)
{
	soap_embedded(soap, &a->receiverId, SOAP_TYPE_xsd__wstring);
	soap_mark_xsd__wstring(soap, &a->receiverId);
	soap_embedded(soap, &a->res, SOAP_TYPE_xsd__long);
}

SOAP_FMAC3 void SOAP_FMAC4 soap_default_klftbridge_CreateReceiverResponse(struct soap *soap, struct klftbridge_CreateReceiverResponse *a)
{
	a->receiverId = NULL;
	soap_default_xsd__long(soap, &a->res);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_klftbridge_CreateReceiverResponse(struct soap *soap, const struct klftbridge_CreateReceiverResponse *a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_klftbridge_CreateReceiverResponse);
	if (soap_out_klftbridge_CreateReceiverResponse(soap, tag, id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_klftbridge_CreateReceiverResponse(struct soap *soap, const char *tag, int id, const struct klftbridge_CreateReceiverResponse *a, const char *type)
{
	soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_klftbridge_CreateReceiverResponse), type);
	if (a->receiverId)
		soap_element_result(soap, "receiverId");
	soap_out_xsd__wstring(soap, "receiverId", -1, &a->receiverId, "");
	soap_out_xsd__long(soap, "res", -1, &a->res, "");
	soap_element_end_out(soap, tag);
	return SOAP_OK;
}

SOAP_FMAC3 struct klftbridge_CreateReceiverResponse * SOAP_FMAC4 soap_get_klftbridge_CreateReceiverResponse(struct soap *soap, struct klftbridge_CreateReceiverResponse *p, const char *tag, const char *type)
{
	if ((p = soap_in_klftbridge_CreateReceiverResponse(soap, tag, p, type)))
		soap_getindependent(soap);
	return p;
}

SOAP_FMAC3 struct klftbridge_CreateReceiverResponse * SOAP_FMAC4 soap_in_klftbridge_CreateReceiverResponse(struct soap *soap, const char *tag, struct klftbridge_CreateReceiverResponse *a, const char *type)
{
	short soap_flag_receiverId = 1, soap_flag_res = 1;
	if (soap_element_begin_in(soap, tag, 0))
		return NULL;
	if (*soap->type && soap_match_tag(soap, soap->type, type))
	{	soap->error = SOAP_TYPE;
		return NULL;
	}
	a = (struct klftbridge_CreateReceiverResponse *)soap_id_enter(soap, soap->id, a, SOAP_TYPE_klftbridge_CreateReceiverResponse, sizeof(struct klftbridge_CreateReceiverResponse), 0, NULL, NULL, NULL);
	if (!a)
		return NULL;
	if (soap->alloced)
		soap_default_klftbridge_CreateReceiverResponse(soap, a);
	if (soap->body && !*soap->href)
	{	for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_receiverId && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_xsd__wstring(soap, "receiverId", &a->receiverId, "xsd:wstring"))
				{	soap_flag_receiverId = 0;
					continue;
				}
			if (soap_flag_res && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_xsd__long(soap, "res", &a->res, "xsd:long"))
				{	soap_flag_res = 0;
					continue;
				}
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if ((soap->mode & SOAP_XML_STRICT) && (soap_flag_res))
		{	soap->error = SOAP_OCCURS;
			return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (struct klftbridge_CreateReceiverResponse *)soap_id_forward(soap, soap->href, (void**)a, SOAP_TYPE_klftbridge_CreateReceiverResponse, 0, sizeof(struct klftbridge_CreateReceiverResponse), 0, NULL);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_klft_file_info_t(struct soap *soap, struct klft_file_info_t const*a)
{
	soap_mark_klft_file_info_t(soap, a);
}

SOAP_FMAC3 void SOAP_FMAC4 soap_mark_klft_file_info_t(struct soap *soap, const struct klft_file_info_t *a)
{
	soap_embedded(soap, &a->fileName, SOAP_TYPE_xsd__wstring);
	soap_mark_xsd__wstring(soap, &a->fileName);
	soap_embedded(soap, &a->isDir, SOAP_TYPE_xsd__boolean);
	soap_embedded(soap, &a->readPermission, SOAP_TYPE_xsd__boolean);
	soap_embedded(soap, &a->createTime, SOAP_TYPE_xsd__unsignedLong);
	soap_embedded(soap, &a->fullFileSize, SOAP_TYPE_xsd__unsignedLong);
}

SOAP_FMAC3 void SOAP_FMAC4 soap_default_klft_file_info_t(struct soap *soap, struct klft_file_info_t *a)
{
	a->fileName = NULL;
	soap_default_xsd__boolean(soap, &a->isDir);
	soap_default_xsd__boolean(soap, &a->readPermission);
	soap_default_xsd__unsignedLong(soap, &a->createTime);
	soap_default_xsd__unsignedLong(soap, &a->fullFileSize);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_klft_file_info_t(struct soap *soap, const struct klft_file_info_t *a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_klft_file_info_t);
	if (soap_out_klft_file_info_t(soap, tag, id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_klft_file_info_t(struct soap *soap, const char *tag, int id, const struct klft_file_info_t *a, const char *type)
{
	soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_klft_file_info_t), type);
	soap_out_xsd__wstring(soap, "fileName", -1, &a->fileName, "");
	soap_out_xsd__boolean(soap, "isDir", -1, &a->isDir, "");
	soap_out_xsd__boolean(soap, "readPermission", -1, &a->readPermission, "");
	soap_out_xsd__unsignedLong(soap, "createTime", -1, &a->createTime, "");
	soap_out_xsd__unsignedLong(soap, "fullFileSize", -1, &a->fullFileSize, "");
	soap_element_end_out(soap, tag);
	return SOAP_OK;
}

SOAP_FMAC3 struct klft_file_info_t * SOAP_FMAC4 soap_get_klft_file_info_t(struct soap *soap, struct klft_file_info_t *p, const char *tag, const char *type)
{
	if ((p = soap_in_klft_file_info_t(soap, tag, p, type)))
		soap_getindependent(soap);
	return p;
}

SOAP_FMAC3 struct klft_file_info_t * SOAP_FMAC4 soap_in_klft_file_info_t(struct soap *soap, const char *tag, struct klft_file_info_t *a, const char *type)
{
	short soap_flag_fileName = 1, soap_flag_isDir = 1, soap_flag_readPermission = 1, soap_flag_createTime = 1, soap_flag_fullFileSize = 1;
	if (soap_element_begin_in(soap, tag, 0))
		return NULL;
	if (*soap->type && soap_match_tag(soap, soap->type, type))
	{	soap->error = SOAP_TYPE;
		return NULL;
	}
	a = (struct klft_file_info_t *)soap_id_enter(soap, soap->id, a, SOAP_TYPE_klft_file_info_t, sizeof(struct klft_file_info_t), 0, NULL, NULL, NULL);
	if (!a)
		return NULL;
	if (soap->alloced)
		soap_default_klft_file_info_t(soap, a);
	if (soap->body && !*soap->href)
	{	for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_fileName && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_xsd__wstring(soap, "fileName", &a->fileName, "xsd:wstring"))
				{	soap_flag_fileName = 0;
					continue;
				}
			if (soap_flag_isDir && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_xsd__boolean(soap, "isDir", &a->isDir, "xsd:boolean"))
				{	soap_flag_isDir = 0;
					continue;
				}
			if (soap_flag_readPermission && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_xsd__boolean(soap, "readPermission", &a->readPermission, "xsd:boolean"))
				{	soap_flag_readPermission = 0;
					continue;
				}
			if (soap_flag_createTime && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_xsd__unsignedLong(soap, "createTime", &a->createTime, "xsd:unsignedLong"))
				{	soap_flag_createTime = 0;
					continue;
				}
			if (soap_flag_fullFileSize && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_xsd__unsignedLong(soap, "fullFileSize", &a->fullFileSize, "xsd:unsignedLong"))
				{	soap_flag_fullFileSize = 0;
					continue;
				}
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if ((soap->mode & SOAP_XML_STRICT) && (soap_flag_isDir || soap_flag_readPermission || soap_flag_createTime || soap_flag_fullFileSize))
		{	soap->error = SOAP_OCCURS;
			return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (struct klft_file_info_t *)soap_id_forward(soap, soap->href, (void**)a, SOAP_TYPE_klft_file_info_t, 0, sizeof(struct klft_file_info_t), 0, NULL);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_klft_file_chunk_t(struct soap *soap, struct klft_file_chunk_t const*a)
{
	soap_mark_klft_file_chunk_t(soap, a);
}

SOAP_FMAC3 void SOAP_FMAC4 soap_mark_klft_file_chunk_t(struct soap *soap, const struct klft_file_chunk_t *a)
{
	soap_embedded(soap, &a->fileName, SOAP_TYPE_xsd__wstring);
	soap_mark_xsd__wstring(soap, &a->fileName);
	soap_embedded(soap, &a->fileId, SOAP_TYPE_xsd__wstring);
	soap_mark_xsd__wstring(soap, &a->fileId);
	soap_embedded(soap, &a->CRC, SOAP_TYPE_xsd__unsignedLong);
	soap_embedded(soap, &a->startPosInFile, SOAP_TYPE_xsd__unsignedLong);
	soap_embedded(soap, &a->fullFileSize, SOAP_TYPE_xsd__unsignedLong);
	soap_embedded(soap, &a->buff, SOAP_TYPE_xsd__klft_file_chunk_buff);
	soap_mark_xsd__klft_file_chunk_buff(soap, &a->buff);
}

SOAP_FMAC3 void SOAP_FMAC4 soap_default_klft_file_chunk_t(struct soap *soap, struct klft_file_chunk_t *a)
{
	a->fileName = NULL;
	a->fileId = NULL;
	soap_default_xsd__unsignedLong(soap, &a->CRC);
	soap_default_xsd__unsignedLong(soap, &a->startPosInFile);
	soap_default_xsd__unsignedLong(soap, &a->fullFileSize);
	soap_default_xsd__klft_file_chunk_buff(soap, &a->buff);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_klft_file_chunk_t(struct soap *soap, const struct klft_file_chunk_t *a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_klft_file_chunk_t);
	if (soap_out_klft_file_chunk_t(soap, tag, id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_klft_file_chunk_t(struct soap *soap, const char *tag, int id, const struct klft_file_chunk_t *a, const char *type)
{
	soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_klft_file_chunk_t), type);
	soap_out_xsd__wstring(soap, "fileName", -1, &a->fileName, "");
	soap_out_xsd__wstring(soap, "fileId", -1, &a->fileId, "");
	soap_out_xsd__unsignedLong(soap, "CRC", -1, &a->CRC, "");
	soap_out_xsd__unsignedLong(soap, "startPosInFile", -1, &a->startPosInFile, "");
	soap_out_xsd__unsignedLong(soap, "fullFileSize", -1, &a->fullFileSize, "");
	// by updategsoapsrc.pl soap_out_xsd__klft_file_chunk_buff(soap, "buff", -1, &a->buff, "");
	soap_out_xsd__klft_file_chunk_buff(soap, "buff", -1, &a->buff, "xsd:unsignedByte");
	soap_element_end_out(soap, tag);
	return SOAP_OK;
}

SOAP_FMAC3 struct klft_file_chunk_t * SOAP_FMAC4 soap_get_klft_file_chunk_t(struct soap *soap, struct klft_file_chunk_t *p, const char *tag, const char *type)
{
	if ((p = soap_in_klft_file_chunk_t(soap, tag, p, type)))
		soap_getindependent(soap);
	return p;
}

SOAP_FMAC3 struct klft_file_chunk_t * SOAP_FMAC4 soap_in_klft_file_chunk_t(struct soap *soap, const char *tag, struct klft_file_chunk_t *a, const char *type)
{
	short soap_flag_fileName = 1, soap_flag_fileId = 1, soap_flag_CRC = 1, soap_flag_startPosInFile = 1, soap_flag_fullFileSize = 1, soap_flag_buff = 1;
	if (soap_element_begin_in(soap, tag, 0))
		return NULL;
	if (*soap->type && soap_match_tag(soap, soap->type, type))
	{	soap->error = SOAP_TYPE;
		return NULL;
	}
	a = (struct klft_file_chunk_t *)soap_id_enter(soap, soap->id, a, SOAP_TYPE_klft_file_chunk_t, sizeof(struct klft_file_chunk_t), 0, NULL, NULL, NULL);
	if (!a)
		return NULL;
	if (soap->alloced)
		soap_default_klft_file_chunk_t(soap, a);
	if (soap->body && !*soap->href)
	{	for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_fileName && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_xsd__wstring(soap, "fileName", &a->fileName, "xsd:wstring"))
				{	soap_flag_fileName = 0;
					continue;
				}
			if (soap_flag_fileId && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_xsd__wstring(soap, "fileId", &a->fileId, "xsd:wstring"))
				{	soap_flag_fileId = 0;
					continue;
				}
			if (soap_flag_CRC && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_xsd__unsignedLong(soap, "CRC", &a->CRC, "xsd:unsignedLong"))
				{	soap_flag_CRC = 0;
					continue;
				}
			if (soap_flag_startPosInFile && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_xsd__unsignedLong(soap, "startPosInFile", &a->startPosInFile, "xsd:unsignedLong"))
				{	soap_flag_startPosInFile = 0;
					continue;
				}
			if (soap_flag_fullFileSize && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_xsd__unsignedLong(soap, "fullFileSize", &a->fullFileSize, "xsd:unsignedLong"))
				{	soap_flag_fullFileSize = 0;
					continue;
				}
			if (soap_flag_buff && soap->error == SOAP_TAG_MISMATCH)
				// by updategsoapsrc.pl if (soap_in_xsd__klft_file_chunk_buff(soap, "buff", &a->buff, "xsd:klft-file-chunk-buff"))
				if (soap_in_xsd__klft_file_chunk_buff(soap, "buff", &a->buff, "xsd:unsignedByte"))
				{	soap_flag_buff = 0;
					continue;
				}
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if ((soap->mode & SOAP_XML_STRICT) && (soap_flag_CRC || soap_flag_startPosInFile || soap_flag_fullFileSize || soap_flag_buff))
		{	soap->error = SOAP_OCCURS;
			return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (struct klft_file_chunk_t *)soap_id_forward(soap, soap->href, (void**)a, SOAP_TYPE_klft_file_chunk_t, 0, sizeof(struct klft_file_chunk_t), 0, NULL);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_xsd__klft_file_chunk_buff(struct soap *soap, struct xsd__klft_file_chunk_buff const*a)
{
	soap_mark_xsd__klft_file_chunk_buff(soap, a);
}

SOAP_FMAC3 void SOAP_FMAC4 soap_mark_xsd__klft_file_chunk_buff(struct soap *soap, struct xsd__klft_file_chunk_buff const*a)
{
	if (a->__ptr)
		soap_array_reference(soap, a, (struct soap_array*)&a->__ptr, 1, SOAP_TYPE_xsd__klft_file_chunk_buff);
}

SOAP_FMAC3 void SOAP_FMAC4 soap_default_xsd__klft_file_chunk_buff(struct soap *soap, struct xsd__klft_file_chunk_buff *a)
{
	a->__size = 0;
	a->__ptr = NULL;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_xsd__klft_file_chunk_buff(struct soap *soap, const struct xsd__klft_file_chunk_buff *a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, (struct soap_array*)&a->__ptr, 1, tag, SOAP_TYPE_xsd__klft_file_chunk_buff);
	if (soap_out_xsd__klft_file_chunk_buff(soap, tag, id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_xsd__klft_file_chunk_buff(struct soap *soap, const char *tag, int id, const struct xsd__klft_file_chunk_buff *a, const char *type)
{
	id = soap_element_id(soap, tag, id, a, (struct soap_array*)&a->__ptr, 1, type, SOAP_TYPE_xsd__klft_file_chunk_buff);
	if (id < 0)
		return soap->error;
	soap_element_begin_out(soap, tag, id, type);
	soap_putbase64(soap, a->__ptr, a->__size);
	soap_element_end_out(soap, tag);
	return SOAP_OK;
}

SOAP_FMAC3 struct xsd__klft_file_chunk_buff * SOAP_FMAC4 soap_get_xsd__klft_file_chunk_buff(struct soap *soap, struct xsd__klft_file_chunk_buff *p, const char *tag, const char *type)
{
	if ((p = soap_in_xsd__klft_file_chunk_buff(soap, tag, p, type)))
		soap_getindependent(soap);
	return p;
}

SOAP_FMAC3 struct xsd__klft_file_chunk_buff * SOAP_FMAC4 soap_in_xsd__klft_file_chunk_buff(struct soap *soap, const char *tag, struct xsd__klft_file_chunk_buff *a, const char *type)
{
	if (soap_element_begin_in(soap, tag, 1))
		return NULL;
	if (*soap->type && soap_match_tag(soap, soap->type, type) && soap_match_tag(soap, soap->type, ":base64Binary") && soap_match_tag(soap, soap->type, ":base64"))
	{	soap->error = SOAP_TYPE;
		return NULL;
	}
	a = (struct xsd__klft_file_chunk_buff *)soap_id_enter(soap, soap->id, a, SOAP_TYPE_xsd__klft_file_chunk_buff, sizeof(struct xsd__klft_file_chunk_buff), 0, NULL, NULL, NULL);
	if (!a)
		return NULL;
	if (soap->alloced)
		soap_default_xsd__klft_file_chunk_buff(soap, a);
	if (soap->body && !*soap->href)
	{
		a->__ptr = soap_getbase64(soap, &a->__size, 0);
		if ((!a->__ptr && soap->error) || soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (struct xsd__klft_file_chunk_buff *)soap_id_forward(soap, soap->href, (void**)a, SOAP_TYPE_xsd__klft_file_chunk_buff, 0, sizeof(struct xsd__klft_file_chunk_buff), 0, NULL);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

#ifndef WITH_NOGLOBAL

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_SOAP_ENV__Header(struct soap *soap, struct SOAP_ENV__Header const*a)
{
	soap_mark_SOAP_ENV__Header(soap, a);
}

SOAP_FMAC3 void SOAP_FMAC4 soap_mark_SOAP_ENV__Header(struct soap *soap, const struct SOAP_ENV__Header *a)
{
	soap_embedded(soap, &a->messDesc, SOAP_TYPE_message_desc);
	soap_mark_message_desc(soap, &a->messDesc);
}

SOAP_FMAC3 void SOAP_FMAC4 soap_default_SOAP_ENV__Header(struct soap *soap, struct SOAP_ENV__Header *a)
{
	soap_default_message_desc(soap, &a->messDesc);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_SOAP_ENV__Header(struct soap *soap, const struct SOAP_ENV__Header *a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_SOAP_ENV__Header);
	if (soap_out_SOAP_ENV__Header(soap, tag, id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_SOAP_ENV__Header(struct soap *soap, const char *tag, int id, const struct SOAP_ENV__Header *a, const char *type)
{
	soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_SOAP_ENV__Header), type);
	soap_out_message_desc(soap, "messDesc", -1, &a->messDesc, "");
	soap_element_end_out(soap, tag);
	return SOAP_OK;
}

SOAP_FMAC3 struct SOAP_ENV__Header * SOAP_FMAC4 soap_get_SOAP_ENV__Header(struct soap *soap, struct SOAP_ENV__Header *p, const char *tag, const char *type)
{
	if ((p = soap_in_SOAP_ENV__Header(soap, tag, p, type)))
		soap_getindependent(soap);
	return p;
}

SOAP_FMAC3 struct SOAP_ENV__Header * SOAP_FMAC4 soap_in_SOAP_ENV__Header(struct soap *soap, const char *tag, struct SOAP_ENV__Header *a, const char *type)
{
	short soap_flag_messDesc = 1;
	if (soap_element_begin_in(soap, tag, 0))
		return NULL;
	if (*soap->type && soap_match_tag(soap, soap->type, type))
	{	soap->error = SOAP_TYPE;
		return NULL;
	}
	a = (struct SOAP_ENV__Header *)soap_id_enter(soap, soap->id, a, SOAP_TYPE_SOAP_ENV__Header, sizeof(struct SOAP_ENV__Header), 0, NULL, NULL, NULL);
	if (!a)
		return NULL;
	if (soap->alloced)
		soap_default_SOAP_ENV__Header(soap, a);
	if (soap->body && !*soap->href)
	{	for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_messDesc && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_message_desc(soap, "messDesc", &a->messDesc, "message-desc"))
				{	soap_flag_messDesc = 0;
					continue;
				}
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if ((soap->mode & SOAP_XML_STRICT) && (soap_flag_messDesc))
		{	soap->error = SOAP_OCCURS;
			return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (struct SOAP_ENV__Header *)soap_id_forward(soap, soap->href, (void**)a, SOAP_TYPE_SOAP_ENV__Header, 0, sizeof(struct SOAP_ENV__Header), 0, NULL);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

#endif

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_message_desc(struct soap *soap, struct message_desc_t const*a)
{
	soap_mark_message_desc(soap, a);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_message_desc(struct soap *soap, const struct message_desc_t *a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_message_desc);
	if (soap_out_message_desc(soap, tag, id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 struct message_desc_t * SOAP_FMAC4 soap_get_message_desc(struct soap *soap, struct message_desc_t *p, const char *tag, const char *type)
{
	if ((p = soap_in_message_desc(soap, tag, p, type)))
		soap_getindependent(soap);
	return p;
}

#ifndef WITH_NOGLOBAL

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerToSOAP_ENV__Code(struct soap *soap, struct SOAP_ENV__Code *const*a)
{
	soap_mark_PointerToSOAP_ENV__Code(soap, a);
}

SOAP_FMAC3 void SOAP_FMAC4 soap_mark_PointerToSOAP_ENV__Code(struct soap *soap, struct SOAP_ENV__Code *const*a)
{
	if (!soap_reference(soap, *a, SOAP_TYPE_SOAP_ENV__Code))
		soap_mark_SOAP_ENV__Code(soap, *a);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerToSOAP_ENV__Code(struct soap *soap, struct SOAP_ENV__Code *const*a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_PointerToSOAP_ENV__Code);
	if (soap_out_PointerToSOAP_ENV__Code(soap, tag, id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerToSOAP_ENV__Code(struct soap *soap, const char *tag, int id, struct SOAP_ENV__Code *const*a, const char *type)
{
	id = soap_element_id(soap, tag, id, *a, NULL, 0, type, SOAP_TYPE_SOAP_ENV__Code);
	if (id < 0)
		return soap->error;
	return soap_out_SOAP_ENV__Code(soap, tag, id, *a, type);
}

SOAP_FMAC3 struct SOAP_ENV__Code ** SOAP_FMAC4 soap_get_PointerToSOAP_ENV__Code(struct soap *soap, struct SOAP_ENV__Code **p, const char *tag, const char *type)
{
	if ((p = soap_in_PointerToSOAP_ENV__Code(soap, tag, p, type)))
		soap_getindependent(soap);
	return p;
}

SOAP_FMAC3 struct SOAP_ENV__Code ** SOAP_FMAC4 soap_in_PointerToSOAP_ENV__Code(struct soap *soap, const char *tag, struct SOAP_ENV__Code **a, const char *type)
{
	if (soap_element_begin_in(soap, tag, 1))
		return NULL;
	if (!a)
		if (!(a = (struct SOAP_ENV__Code **)soap_malloc(soap, sizeof(struct SOAP_ENV__Code *))))
			return NULL;
	*a = NULL;
	if (!soap->null && *soap->href != '#')
	{	soap_revert(soap);
		if (!(*a = soap_in_SOAP_ENV__Code(soap, tag, *a, type)))
			return NULL;
	}
	else
	{	a = (struct SOAP_ENV__Code **)soap_id_lookup(soap, soap->href, (void**)a, SOAP_TYPE_SOAP_ENV__Code, sizeof(struct SOAP_ENV__Code), 0);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

#endif

#ifndef WITH_NOGLOBAL

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerToSOAP_ENV__Detail(struct soap *soap, struct SOAP_ENV__Detail *const*a)
{
	soap_mark_PointerToSOAP_ENV__Detail(soap, a);
}

SOAP_FMAC3 void SOAP_FMAC4 soap_mark_PointerToSOAP_ENV__Detail(struct soap *soap, struct SOAP_ENV__Detail *const*a)
{
	if (!soap_reference(soap, *a, SOAP_TYPE_SOAP_ENV__Detail))
		soap_mark_SOAP_ENV__Detail(soap, *a);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerToSOAP_ENV__Detail(struct soap *soap, struct SOAP_ENV__Detail *const*a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_PointerToSOAP_ENV__Detail);
	if (soap_out_PointerToSOAP_ENV__Detail(soap, tag, id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerToSOAP_ENV__Detail(struct soap *soap, const char *tag, int id, struct SOAP_ENV__Detail *const*a, const char *type)
{
	id = soap_element_id(soap, tag, id, *a, NULL, 0, type, SOAP_TYPE_SOAP_ENV__Detail);
	if (id < 0)
		return soap->error;
	return soap_out_SOAP_ENV__Detail(soap, tag, id, *a, type);
}

SOAP_FMAC3 struct SOAP_ENV__Detail ** SOAP_FMAC4 soap_get_PointerToSOAP_ENV__Detail(struct soap *soap, struct SOAP_ENV__Detail **p, const char *tag, const char *type)
{
	if ((p = soap_in_PointerToSOAP_ENV__Detail(soap, tag, p, type)))
		soap_getindependent(soap);
	return p;
}

SOAP_FMAC3 struct SOAP_ENV__Detail ** SOAP_FMAC4 soap_in_PointerToSOAP_ENV__Detail(struct soap *soap, const char *tag, struct SOAP_ENV__Detail **a, const char *type)
{
	if (soap_element_begin_in(soap, tag, 1))
		return NULL;
	if (!a)
		if (!(a = (struct SOAP_ENV__Detail **)soap_malloc(soap, sizeof(struct SOAP_ENV__Detail *))))
			return NULL;
	*a = NULL;
	if (!soap->null && *soap->href != '#')
	{	soap_revert(soap);
		if (!(*a = soap_in_SOAP_ENV__Detail(soap, tag, *a, type)))
			return NULL;
	}
	else
	{	a = (struct SOAP_ENV__Detail **)soap_id_lookup(soap, soap->href, (void**)a, SOAP_TYPE_SOAP_ENV__Detail, sizeof(struct SOAP_ENV__Detail), 0);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

#endif

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerToxsd__unsignedByte(struct soap *soap, unsigned char *const*a)
{
	soap_mark_PointerToxsd__unsignedByte(soap, a);
}

SOAP_FMAC3 void SOAP_FMAC4 soap_mark_PointerToxsd__unsignedByte(struct soap *soap, unsigned char *const*a)
{
	soap_reference(soap, *a, SOAP_TYPE_xsd__unsignedByte);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerToxsd__unsignedByte(struct soap *soap, unsigned char *const*a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_PointerToxsd__unsignedByte);
	if (soap_out_PointerToxsd__unsignedByte(soap, tag, id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerToxsd__unsignedByte(struct soap *soap, const char *tag, int id, unsigned char *const*a, const char *type)
{
	id = soap_element_id(soap, tag, id, *a, NULL, 0, type, SOAP_TYPE_xsd__unsignedByte);
	if (id < 0)
		return soap->error;
	return soap_out_xsd__unsignedByte(soap, tag, id, *a, type);
}

SOAP_FMAC3 unsigned char ** SOAP_FMAC4 soap_get_PointerToxsd__unsignedByte(struct soap *soap, unsigned char **p, const char *tag, const char *type)
{
	if ((p = soap_in_PointerToxsd__unsignedByte(soap, tag, p, type)))
		soap_getindependent(soap);
	return p;
}

SOAP_FMAC3 unsigned char ** SOAP_FMAC4 soap_in_PointerToxsd__unsignedByte(struct soap *soap, const char *tag, unsigned char **a, const char *type)
{
	if (soap_element_begin_in(soap, tag, 1))
		return NULL;
	if (!a)
		if (!(a = (unsigned char **)soap_malloc(soap, sizeof(unsigned char *))))
			return NULL;
	*a = NULL;
	if (!soap->null && *soap->href != '#')
	{	soap_revert(soap);
		if (!(*a = soap_in_xsd__unsignedByte(soap, tag, *a, type)))
			return NULL;
	}
	else
	{	a = (unsigned char **)soap_id_lookup(soap, soap->href, (void**)a, SOAP_TYPE_xsd__unsignedByte, sizeof(unsigned char), 0);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_xsd__wstring(struct soap *soap, wchar_t *const*a)
{
	soap_mark_xsd__wstring(soap, a);
}

SOAP_FMAC3 void SOAP_FMAC4 soap_mark_xsd__wstring(struct soap *soap, wchar_t *const*a)
{
	soap_reference(soap, *a, SOAP_TYPE_xsd__wstring);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_xsd__wstring(struct soap *soap, wchar_t *const*a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_xsd__wstring);
	if (soap_out_xsd__wstring(soap, tag, id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_xsd__wstring(struct soap *soap, const char *tag, int id, wchar_t *const*a, const char *type)
{
	return soap_outwstring(soap, tag, id, a, type, SOAP_TYPE_xsd__wstring);
}

SOAP_FMAC3 wchar_t ** SOAP_FMAC4 soap_get_xsd__wstring(struct soap *soap, wchar_t **p, const char *tag, const char *type)
{
	if ((p = soap_in_xsd__wstring(soap, tag, p, type)))
		soap_getindependent(soap);
	return p;
}

SOAP_FMAC3 wchar_t * * SOAP_FMAC4 soap_in_xsd__wstring(struct soap *soap, const char *tag, wchar_t **a, const char *type)
{
	return soap_inwstring(soap, tag, a, type, SOAP_TYPE_xsd__wstring, 0, -1);
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_wstring(struct soap *soap, wchar_t *const*a)
{
	soap_mark_wstring(soap, a);
}

SOAP_FMAC3 void SOAP_FMAC4 soap_mark_wstring(struct soap *soap, wchar_t *const*a)
{
	soap_reference(soap, *a, SOAP_TYPE_wstring);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_wstring(struct soap *soap, wchar_t *const*a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_wstring);
	if (soap_out_wstring(soap, tag, id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_wstring(struct soap *soap, const char *tag, int id, wchar_t *const*a, const char *type)
{
	return soap_outwstring(soap, tag, id, a, type, SOAP_TYPE_wstring);
}

SOAP_FMAC3 wchar_t ** SOAP_FMAC4 soap_get_wstring(struct soap *soap, wchar_t **p, const char *tag, const char *type)
{
	if ((p = soap_in_wstring(soap, tag, p, type)))
		soap_getindependent(soap);
	return p;
}

SOAP_FMAC3 wchar_t * * SOAP_FMAC4 soap_in_wstring(struct soap *soap, const char *tag, wchar_t **a, const char *type)
{
	return soap_inwstring(soap, tag, a, type, SOAP_TYPE_wstring, 0, -1);
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_xsd__integer(struct soap *soap, char *const*a)
{
	soap_mark_xsd__integer(soap, a);
}

SOAP_FMAC3 void SOAP_FMAC4 soap_mark_xsd__integer(struct soap *soap, char *const*a)
{
	soap_reference(soap, *a, SOAP_TYPE_xsd__integer);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_xsd__integer(struct soap *soap, char *const*a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_xsd__integer);
	if (soap_out_xsd__integer(soap, tag, id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_xsd__integer(struct soap *soap, const char *tag, int id, char *const*a, const char *type)
{
	return soap_outstring(soap, tag, id, a, type, SOAP_TYPE_xsd__integer);
}

SOAP_FMAC3 char ** SOAP_FMAC4 soap_get_xsd__integer(struct soap *soap, char **p, const char *tag, const char *type)
{
	if ((p = soap_in_xsd__integer(soap, tag, p, type)))
		soap_getindependent(soap);
	return p;
}

SOAP_FMAC3 char * * SOAP_FMAC4 soap_in_xsd__integer(struct soap *soap, const char *tag, char **a, const char *type)
{
	return soap_instring(soap, tag, a, type, SOAP_TYPE_xsd__integer, 1, 0, -1);
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_xsd__decimal(struct soap *soap, char *const*a)
{
	soap_mark_xsd__decimal(soap, a);
}

SOAP_FMAC3 void SOAP_FMAC4 soap_mark_xsd__decimal(struct soap *soap, char *const*a)
{
	soap_reference(soap, *a, SOAP_TYPE_xsd__decimal);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_xsd__decimal(struct soap *soap, char *const*a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_xsd__decimal);
	if (soap_out_xsd__decimal(soap, tag, id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_xsd__decimal(struct soap *soap, const char *tag, int id, char *const*a, const char *type)
{
	return soap_outstring(soap, tag, id, a, type, SOAP_TYPE_xsd__decimal);
}

SOAP_FMAC3 char ** SOAP_FMAC4 soap_get_xsd__decimal(struct soap *soap, char **p, const char *tag, const char *type)
{
	if ((p = soap_in_xsd__decimal(soap, tag, p, type)))
		soap_getindependent(soap);
	return p;
}

SOAP_FMAC3 char * * SOAP_FMAC4 soap_in_xsd__decimal(struct soap *soap, const char *tag, char **a, const char *type)
{
	return soap_instring(soap, tag, a, type, SOAP_TYPE_xsd__decimal, 1, 0, -1);
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize__QName(struct soap *soap, char *const*a)
{
	soap_mark__QName(soap, a);
}

SOAP_FMAC3 void SOAP_FMAC4 soap_mark__QName(struct soap *soap, char *const*a)
{
	soap_reference(soap, *a, SOAP_TYPE__QName);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put__QName(struct soap *soap, char *const*a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE__QName);
	if (soap_out__QName(soap, tag, id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out__QName(struct soap *soap, const char *tag, int id, char *const*a, const char *type)
{
	return soap_outstring(soap, tag, id, a, type, SOAP_TYPE__QName);
}

SOAP_FMAC3 char ** SOAP_FMAC4 soap_get__QName(struct soap *soap, char **p, const char *tag, const char *type)
{
	if ((p = soap_in__QName(soap, tag, p, type)))
		soap_getindependent(soap);
	return p;
}

SOAP_FMAC3 char * * SOAP_FMAC4 soap_in__QName(struct soap *soap, const char *tag, char **a, const char *type)
{
	return soap_instring(soap, tag, a, type, SOAP_TYPE__QName, 2, 0, -1);
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_string(struct soap *soap, char *const*a)
{
	soap_mark_string(soap, a);
}

SOAP_FMAC3 void SOAP_FMAC4 soap_mark_string(struct soap *soap, char *const*a)
{
	soap_reference(soap, *a, SOAP_TYPE_string);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_string(struct soap *soap, char *const*a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_string);
	if (soap_out_string(soap, tag, id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_string(struct soap *soap, const char *tag, int id, char *const*a, const char *type)
{
	return soap_outstring(soap, tag, id, a, type, SOAP_TYPE_string);
}

SOAP_FMAC3 char ** SOAP_FMAC4 soap_get_string(struct soap *soap, char **p, const char *tag, const char *type)
{
	if ((p = soap_in_string(soap, tag, p, type)))
		soap_getindependent(soap);
	return p;
}

SOAP_FMAC3 char * * SOAP_FMAC4 soap_in_string(struct soap *soap, const char *tag, char **a, const char *type)
{
	return soap_instring(soap, tag, a, type, SOAP_TYPE_string, 1, 0, -1);
}

SOAP_END_NAMESPACE(soap)

/* end of soapC.cpp */
