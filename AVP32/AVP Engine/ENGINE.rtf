{\rtf1\ansi\ansicpg1251\uc1 \deff0\deflang1033\deflangfe1033{\fonttbl{\f0\froman\fcharset0\fprq2{\*\panose 02020603050405020304}Times New Roman;}{\f1\fswiss\fcharset0\fprq2{\*\panose 020b0604020202020204}Arial;}
{\f2\fmodern\fcharset0\fprq1{\*\panose 02070309020205020404}Courier New;}{\f14\fnil\fcharset2\fprq2{\*\panose 05000000000000000000}Wingdings;}{\f19\froman\fcharset238\fprq2 Times New Roman CE;}{\f20\froman\fcharset204\fprq2 Times New Roman Cyr;}
{\f22\froman\fcharset161\fprq2 Times New Roman Greek;}{\f23\froman\fcharset162\fprq2 Times New Roman Tur;}{\f24\froman\fcharset186\fprq2 Times New Roman Baltic;}{\f25\fswiss\fcharset238\fprq2 Arial CE;}{\f26\fswiss\fcharset204\fprq2 Arial Cyr;}
{\f28\fswiss\fcharset161\fprq2 Arial Greek;}{\f29\fswiss\fcharset162\fprq2 Arial Tur;}{\f30\fswiss\fcharset186\fprq2 Arial Baltic;}{\f31\fmodern\fcharset238\fprq1 Courier New CE;}{\f32\fmodern\fcharset204\fprq1 Courier New Cyr;}
{\f34\fmodern\fcharset161\fprq1 Courier New Greek;}{\f35\fmodern\fcharset162\fprq1 Courier New Tur;}{\f36\fmodern\fcharset186\fprq1 Courier New Baltic;}}{\colortbl;\red0\green0\blue0;\red0\green0\blue255;\red0\green255\blue255;\red0\green255\blue0;
\red255\green0\blue255;\red255\green0\blue0;\red255\green255\blue0;\red255\green255\blue255;\red0\green0\blue128;\red0\green128\blue128;\red0\green128\blue0;\red128\green0\blue128;\red128\green0\blue0;\red128\green128\blue0;\red128\green128\blue128;
\red192\green192\blue192;}{\stylesheet{\widctlpar\adjustright \fs20\cgrid \snext0 Normal;}{\s1\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid \sbasedon0 \snext0 heading 1;}{\s2\sb240\sa60\keepn\widctlpar\adjustright \b\i\f1\cgrid 
\sbasedon0 \snext0 heading 2;}{\s3\sb240\sa60\keepn\widctlpar\adjustright \f1\cgrid \sbasedon0 \snext0 heading 3;}{\*\cs10 \additive Default Paragraph Font;}{\s15\widctlpar\adjustright \fs20\lang1049\cgrid \snext15 \'ce\'e1\'fb\'f7\'ed\'fb\'e9;}{\*\cs16 
\additive \'ce\'f1\'ed\'ee\'e2\'ed\'ee\'e9 \'f8\'f0\'e8\'f4\'f2;}{\s17\fi-200\li200\widctlpar\tqr\tx3793\adjustright \fs20\cgrid \sbasedon0 \snext0 \sautoupd index 1;}{\s18\fi-200\li400\widctlpar\tqr\tx3793\adjustright \fs20\cgrid 
\sbasedon0 \snext0 \sautoupd index 2;}{\s19\fi-200\li600\widctlpar\tqr\tx3793\adjustright \fs20\cgrid \sbasedon0 \snext0 \sautoupd index 3;}{\s20\fi-200\li800\widctlpar\tqr\tx3793\adjustright \fs20\cgrid \sbasedon0 \snext0 \sautoupd index 4;}{
\s21\fi-200\li1000\widctlpar\tqr\tx3793\adjustright \fs20\cgrid \sbasedon0 \snext0 \sautoupd index 5;}{\s22\fi-200\li1200\widctlpar\tqr\tx3793\adjustright \fs20\cgrid \sbasedon0 \snext0 \sautoupd index 6;}{\s23\fi-200\li1400\widctlpar
\tqr\tx3793\adjustright \fs20\cgrid \sbasedon0 \snext0 \sautoupd index 7;}{\s24\fi-200\li1600\widctlpar\tqr\tx3793\adjustright \fs20\cgrid \sbasedon0 \snext0 \sautoupd index 8;}{\s25\fi-200\li1800\widctlpar\tqr\tx3793\adjustright \fs20\cgrid 
\sbasedon0 \snext0 \sautoupd index 9;}{\s26\widctlpar\adjustright \fs20\cgrid \sbasedon0 \snext17 index heading;}{\s27\fi-3686\li3686\widctlpar\adjustright \fs20\cgrid \sbasedon0 \snext27 \'ce\'e1\'fb\'f7\'ed\'fb\'e9 tabbed;}{\*\cs28 \additive \ul\cf2 
\sbasedon10 Hyperlink;}}{\*\listtable{\list\listtemplateid-649667890{\listlevel\levelnfc0\leveljc0\levelfollow0\levelstartat22\levelspace0\levelindent0{\leveltext\'01\'00;}{\levelnumbers\'01;}\fbias0 \fi-840\li840\jclisttab\tx840 }{\listlevel\levelnfc0
\leveljc0\levelfollow0\levelstartat10\levelspace0\levelindent0{\leveltext\'03\'00.\'01;}{\levelnumbers\'01\'03;}\fbias0 \fi-840\li840\jclisttab\tx840 }{\listlevel\levelnfc0\leveljc0\levelfollow0\levelstartat96\levelspace0\levelindent0{\leveltext
\'05\'00.\'01.\'02;}{\levelnumbers\'01\'03\'05;}\fbias0 \fi-840\li840\jclisttab\tx840 }{\listlevel\levelnfc0\leveljc0\levelfollow0\levelstartat1\levelspace0\levelindent0{\leveltext\'07\'00.\'01.\'02.\'03;}{\levelnumbers\'01\'03\'05\'07;}\fbias0 
\fi-840\li840\jclisttab\tx840 }{\listlevel\levelnfc0\leveljc0\levelfollow0\levelstartat1\levelspace0\levelindent0{\leveltext\'09\'00.\'01.\'02.\'03.\'04;}{\levelnumbers\'01\'03\'05\'07\'09;}\fbias0 \fi-840\li840\jclisttab\tx840 }{\listlevel\levelnfc0
\leveljc0\levelfollow0\levelstartat1\levelspace0\levelindent0{\leveltext\'0b\'00.\'01.\'02.\'03.\'04.\'05;}{\levelnumbers\'01\'03\'05\'07\'09\'0b;}\fbias0 \fi-1080\li1080\jclisttab\tx1080 }{\listlevel\levelnfc0\leveljc0\levelfollow0\levelstartat1
\levelspace0\levelindent0{\leveltext\'0d\'00.\'01.\'02.\'03.\'04.\'05.\'06;}{\levelnumbers\'01\'03\'05\'07\'09\'0b\'0d;}\fbias0 \fi-1080\li1080\jclisttab\tx1080 }{\listlevel\levelnfc0\leveljc0\levelfollow0\levelstartat1\levelspace0\levelindent0{\leveltext
\'0f\'00.\'01.\'02.\'03.\'04.\'05.\'06.\'07;}{\levelnumbers\'01\'03\'05\'07\'09\'0b\'0d\'0f;}\fbias0 \fi-1440\li1440\jclisttab\tx1440 }{\listlevel\levelnfc0\leveljc0\levelfollow0\levelstartat1\levelspace0\levelindent0{\leveltext
\'11\'00.\'01.\'02.\'03.\'04.\'05.\'06.\'07.\'08;}{\levelnumbers\'01\'03\'05\'07\'09\'0b\'0d\'0f\'11;}\fbias0 \fi-1440\li1440\jclisttab\tx1440 }{\listname ;}\listid572081092}{\list\listtemplateid201916431\listsimple{\listlevel\levelnfc0\leveljc0
\levelfollow0\levelstartat1\levelspace0\levelindent0{\leveltext\'02\'00.;}{\levelnumbers\'01;}\fbias0 \fi-360\li360\jclisttab\tx360 }{\listname ;}\listid945766894}{\list\listtemplateid-413773608\listsimple{\listlevel\levelnfc0\leveljc0\levelfollow0
\levelstartat1\levelold\levelspace0\levelindent283{\leveltext\'02\'00.;}{\levelnumbers\'01;}\fi-283\li283 }{\listname ;}\listid961426781}{\list\listtemplateid-156355476\listsimple{\listlevel\levelnfc0\leveljc0\levelfollow0\levelstartat1\levelold
\levelspace0\levelindent283{\leveltext\'02\'00.;}{\levelnumbers\'01;}\fi-283\li283 }{\listname ;}\listid1282686289}{\list\listtemplateid1179932106\listsimple{\listlevel\levelnfc0\leveljc0\levelfollow0\levelstartat0\levelspace0\levelindent0{\leveltext
\'02\'00-;}{\levelnumbers\'01;}\fbias0 \fi-360\li4050\jclisttab\tx4050 }{\listname ;}\listid2131897127}}{\*\listoverridetable{\listoverride\listid961426781\listoverridecount0\ls1}{\listoverride\listid2131897127\listoverridecount0\ls2}
{\listoverride\listid1282686289\listoverridecount0\ls3}{\listoverride\listid572081092\listoverridecount0\ls4}{\listoverride\listid945766894\listoverridecount0\ls5}}{\info{\title AVP Engine interface}{\author Alexey de Mont de Rique}
{\operator Alexey de Mont de Rique}{\creatim\yr1997\mo10\dy31\hr13\min29}{\revtim\yr1997\mo11\dy19\hr12\min3}{\version4}{\edmins16}{\nofpages7}{\nofwords1729}{\nofchars9856}{\*\company kami}{\nofcharsws12103}{\vern89}}\paperw11906\paperh16838 
\widowctrl\ftnbj\aenddoc\lytprtmet\hyphcaps0\formshade\viewkind1\viewscale120\pgbrdrhead\pgbrdrfoot \fet0\sectd \linex0\headery709\footery709\colsx709\endnhere\sectdefaultcl {\*\pnseclvl1\pnucrm\pnstart1\pnindent720\pnhang{\pntxta .}}{\*\pnseclvl2
\pnucltr\pnstart1\pnindent720\pnhang{\pntxta .}}{\*\pnseclvl3\pndec\pnstart1\pnindent720\pnhang{\pntxta .}}{\*\pnseclvl4\pnlcltr\pnstart1\pnindent720\pnhang{\pntxta )}}{\*\pnseclvl5\pndec\pnstart1\pnindent720\pnhang{\pntxtb (}{\pntxta )}}{\*\pnseclvl6
\pnlcltr\pnstart1\pnindent720\pnhang{\pntxtb (}{\pntxta )}}{\*\pnseclvl7\pnlcrm\pnstart1\pnindent720\pnhang{\pntxtb (}{\pntxta )}}{\*\pnseclvl8\pnlcltr\pnstart1\pnindent720\pnhang{\pntxtb (}{\pntxta )}}{\*\pnseclvl9\pnlcrm\pnstart1\pnindent720\pnhang
{\pntxtb (}{\pntxta )}}\pard\plain \s1\sb240\sa60\keepn\widctlpar\outlinelevel0\adjustright \b\f1\fs28\kerning28\cgrid {AVP Engine 
\par }\pard\plain \widctlpar\adjustright \fs20\cgrid {(version 3.0 build 116)
\par 
\par Alexey de Mont de Rique. (}{\field{\*\fldinst { HYPERLINK mailto:graf@avp.ru }{{\*\datafield 
00d0c9ea79f9bace118c8200aa004ba90b02000000170000000c000000670072006100660040006100760070002e00720075000000e0c9ea79f9bace118c8200aa004ba90b260000006d00610069006c0074006f003a00670072006100660040006100760070002e0072007500000000000000000000000000000000}}
}{\fldrslt {\cs28\ul\cf2 graf@avp.ru}}}{ grafin@aha.ru)  
\par Last correction: Nov. 19, 97
\par \'a9Kaspersky Lab, 1997.
\par }\pard\plain \s2\sb240\sa60\keepn\widctlpar\outlinelevel1\adjustright \b\i\f1\cgrid {AVP Engine }{new features:
\par {\pntext\pard\plain\fs20\lang1033\cgrid \hich\af0\dbch\af0\loch\f0 1.\tab}}\pard\plain \fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls5\pnrnot0\pndec\pnstart1\pnindent360\pnhang{\pntxta .}}\ls5\adjustright \fs20\cgrid {F}{rom build 115
 AVPBASE.DLL detects OS and use corresponded *IO.DLL.}{
\par {\pntext\pard\plain\fs20\lang1033\cgrid \hich\af0\dbch\af0\loch\f0 2.\tab}}\pard \fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls5\pnrnot0\pndec\pnstart1\pnindent360\pnhang{\pntxta .}}\ls5\adjustright {From build 116 }{AVPBASE.DLL}{
 is MBCS compatible.
\par }\pard\plain \s2\sb240\sa60\keepn\widctlpar\outlinelevel1\adjustright \b\i\f1\cgrid {AVP Engine set of files
\par }\pard\plain \widctlpar\adjustright \fs20\cgrid {Working set:
\par \tab AVPBASE .DLL  - AVPEngine DLL
\par \tab AVP_IO16.DLL  - file with 95 platform specific code
\par \tab AVP_IO32.DLL  - file with 95 platform specific code
\par \tab AVP_IONT.DLL  - file with NT platform specific code
\par Build set:
\par \tab AVPBASE .LIB  - AVPEngine Library to link with your code
\par \tab AVP_DLL.H  - AVPBASE.DLL exported functions
\par \tab AVP_MSG.H  - Callback interface spec.
\par \tab SCANOBJ.H  - Structure for Scan request
\par \tab TYPES  .H  - Specification of object types
\par \tab RETFLAGS.H - Specification of Return flags.
\par :
\par }\pard\plain \s2\sb240\sa60\keepn\widctlpar\outlinelevel1\adjustright \b\i\f1\cgrid {Main Algorithm Of Using AVPBASE.DLL
\par }\pard\plain \widctlpar\adjustright \fs20\cgrid {To support AVPBASE.DLL in other projects programmer should do next steps:
\par {\pntext\pard\plain\fs20\lang1033\cgrid \hich\af0\dbch\af0\loch\f0 1.\tab}}\pard \fi-283\li283\widctlpar{\*\pn \pnlvlbody\ilvl0\ls3\pnrnot0\pndec\pnstart1\pnindent283\pnhang{\pntxta .}}\ls3\adjustright {Add in project AVPBASE.LIB import library;
\par {\pntext\pard\plain\fs20\lang1033\cgrid \hich\af0\dbch\af0\loch\f0 2.\tab}}\pard \fi-283\li283\widctlpar{\*\pn \pnlvlbody\ilvl0\ls3\pnrnot0\pndec\pnstart1\pnindent283\pnhang{\pntxta .}}\ls3\adjustright {
Write AVP_Message handler for main program window to handle AVP_CALLBACK_?? messages described in AVP_MSG.H;
\par {\pntext\pard\plain\fs20\lang1033\cgrid \hich\af0\dbch\af0\loch\f0 3.\tab}}\pard \fi-283\li283\widctlpar{\*\pn \pnlvlbody\ilvl0\ls3\pnrnot0\pndec\pnstart1\pnindent283\pnhang{\pntxta .}}\ls3\adjustright {
Make a call of AVP_RegisterCallback with handle of this window before all other AVPBASE calls declared in AVP_DLL.H;
\par {\pntext\pard\plain\fs20\lang1033\cgrid \hich\af0\dbch\af0\loch\f0 4.\tab}}\pard \fi-283\li283\widctlpar{\*\pn \pnlvlbody\ilvl0\ls3\pnrnot0\pndec\pnstart1\pnindent283\pnhang{\pntxta .}}\ls3\adjustright {
Make a call of AVP_LoadBase with set file name in parameter;
\par {\pntext\pard\plain\fs20\lang1033\cgrid \hich\af0\dbch\af0\loch\f0 5.\tab}}\pard \fi-283\li283\widctlpar{\*\pn \pnlvlbody\ilvl0\ls3\pnrnot0\pndec\pnstart1\pnindent283\pnhang{\pntxta .}}\ls3\adjustright {
Create static or dynamic AVPScanObject structure described in SCANOBJ.H;
\par {\pntext\pard\plain\fs20\lang1033\cgrid \hich\af0\dbch\af0\loch\f0 6.\tab}}\pard \fi-283\li283\widctlpar{\*\pn \pnlvlbody\ilvl0\ls3\pnrnot0\pndec\pnstart1\pnindent283\pnhang{\pntxta .}}\ls3\adjustright {
Fill AVPScanObject fields using types defined in TYPES.H;
\par {\pntext\pard\plain\fs20\lang1033\cgrid \hich\af0\dbch\af0\loch\f0 7.\tab}}\pard \fi-283\li283\widctlpar{\*\pn \pnlvlbody\ilvl0\ls3\pnrnot0\pndec\pnstart1\pnindent283\pnhang{\pntxta .}}\ls3\adjustright {Make a call of AVP_ProcessObject wit
h pointer to this AVPScanObject.
\par }\pard \widctlpar\adjustright {
\par }{\b Warning! }{AVPBASE.DLL is one-thread DLL! It can\rquote t process two objects in the same time.
\par }\pard\plain \s2\sb240\sa60\keepn\widctlpar\outlinelevel1\adjustright \b\i\f1\cgrid {Description of AVPBASE Calls
\par }\pard\plain \widctlpar\adjustright \fs20\cgrid {\f2 LONG }{\b\f2 AVP_RegisterCallback}{\f2 (HWND hWnd);
\par }{// This is strongly necessary function to make Callback available. 
\par // hWnd is a handle of window that handles AVP_CALLBACK Messages.
\par // Return 0 if errors;
\par 
\par }{\f2 LONG }{\b\f2 AVP_LoadBase}{\f2 (const char* name, int format); 
\par }{// name\tab \tab - name of set file;
\par // format\tab - must be 0; 
\par // Return 0 if errors;
\par AVPBASE will make AVP_CALLBACK_LOAD_PROGRESS calls with LOAD_PROGRESS_STRUCT pointer in parameter while loading.
\par 
\par }{\f2 LONG }{\b\f2 AVP_ProcessObject}{\f2 (AVPScanObject* ScanObject);
\par }{// Process object; all output through CALLBACK Messages.
\par // Return 0 if errors; 
\par AVPBASE will make different AVP_CALLBACK_....... calls while processing. But: If virus detected AVPBASE }{\b always}{ calls AVP_CALLBACK_ASK_CURE if object is infected.
\par AVPBASE }{\b always}{ calls AVP_CALLBACK_OBJECT_DONE only once at the end of object scanning. RFlags field of object hold all main information.
\par }{\b WARNING!!!}{ Shell must process result of scanning on this callback instead of after returning from AVP_ProcessObject because sending ONE object for Processing we can spawn internal cycle in AVPBASE for Archived files and in this case we\rquote 
ll receive several AVP_CALLBACK_OBJECT_DONE.
\par 
\par }{\f2 char* }{\b\f2 AVP_MakeFullName}{\f2 (char* dest, const char* src);
\par }{// AVP_ProcessObject returns short names of viruses.
\par // to get full name use this function; src - pointer to short virus name;
\par // dest must be at least MAX_PATH
\par // Return dest;
\par 
\par }{\f2 int }{\b\f2 AVP_AddMask}{\f2 (const char* mask);
\par }{// mask     - like  \ldblquote *.com\rdblquote  or \ldblquote dm*.ex*\rdblquote ;
\par // if ==NULL all masks clears.
\par // return count of masks
\par Used to register masks in User defined masks mode (MF_MASK_USER). 
\par 
\par }\pard\plain \s2\sb240\sa60\keepn\widctlpar\outlinelevel1\adjustright \b\i\f1\cgrid {\page AVPScanObject structure
\par }\pard\plain \widctlpar\adjustright \fs20\cgrid {
\par }{\f2\fs18 typedef struct _AVPScanObject\{
\par \tab union\{
\par \tab \tab DWORD\tab Type;\tab \tab //  ->
\par \tab \tab struct\{
\par \tab \tab \tab BYTE Disk;\tab \tab 
\par \tab \tab \tab BYTE Drive;\tab \tab 
\par \tab \tab \tab WORD SType;\tab \tab //  -> OT_XXXXX
\par \tab \tab \};
\par \tab \};
\par \tab union\{
\par \tab \tab DWORD\tab MFlags;\tab \tab //  -> MF_XXX
\par \tab \tab struct\{
\par \tab \tab \tab WORD Mode;
\par \tab \tab \tab WORD Flags;\tab \tab //  -> MF_XXX
\par \tab \tab \};
\par \tab \tab 
\par \tab \};
\par \tab DWORD\tab RFlags;\tab \tab \tab // <-
\par 
\par \tab char\tab Name[0x200];\tab //  ->
\par \tab char*\tab VirusName;\tab \tab // <-
\par \tab char*\tab SuspicionName;\tab // <-
\par \tab char*\tab WarningName;\tab // <-
\par \tab HANDLE\tab Event;
\par \tab DWORD\tab Entry;\tab \tab \tab // <-  Number of entry (for callback codes)
\par \tab DWORD\tab Size;\tab \tab \tab //  -> Size of object
\par \tab DWORD\tab CRC;\tab \tab \tab // <->
\par \tab DWORD\tab FullCRC;\tab \tab // <->
\par \tab HANDLE\tab Handle;\tab \tab \tab //  -> For packers
\par \tab WORD\tab InPack;\tab \tab     //\tab ->
\par \tab WORD\tab InArc;\tab \tab     //\tab ->
\par \tab BYTE\tab NameSpace;\tab \tab //  -> 0-DOS 1-NW 2-MAC
\par \tab DWORD\tab Connection;\tab \tab //  -> 
\par 
\par \}AVPScanObject;
\par }{
\par }\pard\plain \s3\sb240\sa60\keepn\widctlpar\outlinelevel2\adjustright \f1\cgrid {Filling AVPScanObject for File Scan
\par }\pard\plain \widctlpar\adjustright \fs20\cgrid {Set Type field to OT_FILE;
\par Copy full file name in Name field;
\par Set Size field to the File size;
\par Set MFlags field. For ex: MFlags= }{\f2\fs18 MF_MASK_PROG | MF_PACKED | MF_CA | MF_WARNINGS;
\par }{
\par }{\f2\fs18 MF_MASK_SMART\tab \tab - check file if it have program format and ext.
\par MF_MASK_PROG\tab \tab - check file if program ext.
\par MF_MASK_ALL\tab \tab - check always
\par MF_MASK_USER\tab \tab - check if ext msked to registered masks (AVP_AddMask)
\par 
\par MF_PACKED\tab \tab - if file is packed, unpack it to temp and check again
\par MF_ARCHIVED\tab \tab - if file is archive, extract files to temp and check
\par MF_CA\tab \tab \tab - use Code Analyzer
\par MF_REDUNDANT\tab \tab - use Redundant scan
\par MF_WARNINGS\tab \tab - allow WARNING callbacks
\par MF_NOXMS\tab \tab - ? for DOS only
\par MF_CREATECRC\tab \tab - fill CRC field while processing
\par MF_USECRC\tab \tab - if CRC field EQ to real CRC this file is OK.
\par 
\par All other fields must be EQ 0.
\par }\pard\plain \s3\sb240\sa60\keepn\widctlpar\outlinelevel2\adjustright \f1\cgrid {Filling AVPScanObject for Boot Sector Scan
\par }\pard\plain \widctlpar\adjustright \fs20\cgrid {Set SType field to OT_BOOT;
\par Copy any description string in Name field;
\par Set MFlags field.
\par Set Drive field to drive number: 0-a, 1-b, 2-c .....
\par Set Disk field to:
\par case DRIVE_REMOTE:\tab \tab ScanObject.Disk=0x20;
\par case DRIVE_RAMDISK:\tab \tab ScanObject.Disk=0x40;
\par case DRIVE_CDROM:\tab \tab ScanObject.Disk=0x60;
\par case DRIVE_FIXED:\tab \tab ScanObject.Disk=0x80 , 0x81\'85;
\par case DRIVE_REMOVABLE:\tab ScanObject.Disk=ScanObject.Drive;
\par 
\par }{\f2\fs18 All other fields must be EQ 0.
\par }{
\par }\pard\plain \s3\sb240\sa60\keepn\widctlpar\outlinelevel2\adjustright \f1\cgrid {Filling AVPScanObject for MBR Sector Scan
\par }\pard\plain \widctlpar\adjustright \fs20\cgrid {Set SType field to OT_MBR;
\par Copy any description string in Name field;
\par Set MFlags field.
\par Set Drive field to drive number: 2-c, 3-d, .....
\par Set Disk field to: 0x80-1stHDD, 0x81-2ndHDD....
\par }{\f2\fs18 
\par All other fields must be EQ 0.
\par 
\par }\pard\plain \s3\sb240\sa60\keepn\widctlpar\outlinelevel2\adjustright \f1\cgrid {Filling AVPScanObject for Memory Scan
\par }\pard\plain \widctlpar\adjustright \fs20\cgrid {Set SType field to OT_MEMORY;
\par Copy any description string in Name field;
\par }{\f2\fs18 
\par All other fields must be EQ 0.
\par 
\par }\pard\plain \s2\sb240\sa60\keepn\widctlpar\outlinelevel1\adjustright \b\i\f1\cgrid {Result Processing
\par }\pard\plain \widctlpar\adjustright \fs20\cgrid {If any significant event occurs AVPBASE send corresponding CALLBACK.
\par AVPBASE will make different AVP_CALLBACK_....... calls while processing. But If virus detected AVPBASE }{\b always}{ calls AVP_CALLBACK_ASK_CURE.
\par AVPBASE }{\b always}{ calls AVP_CALLBACK_OBJECT_DONE only once at the end of object scanning.
\par 
\par Shell may not handle these CALLBACKs at all, and retrieve information from AVPScanObject after receiving AVP_CALLBACK_OBJECT_DONE.
\par I reco
mmend to handle all CALLBACKs immediately and process only ERROR codes on AVP_CALLBACK_OBJECT_DONE because in some modes ( MF_ARCHIVES, MF_ALLWRNINGS and MF_ALLENTRY) AVPBASE can report several different warnings and suspicions for one object or can repor
t different viruses on different entry of object.(for example Dos part and Windows part or different files in the archive).
\par 
\par NB. Use RF_REPORT_DONE for synchronization of messages.
\par 
\par }\pard\plain \s3\sb240\sa60\keepn\widctlpar\outlinelevel2\adjustright \f1\cgrid {Receiving information from AVPScanObject  while AVP_CALLBACK_... Processing
\par }\pard\plain \widctlpar\adjustright \fs20\cgrid {\f2\fs18 
\par DWORD\tab RFlags;\tab //RF_... flags\tab 
\par 
\par char*\tab VirusName;\tab \tab pointer to short virus name
\par char*\tab SuspicionName;\tab pointer to short suspicion name
\par char*\tab WarningName;\tab  \tab pointer to short warning name
\par To retrieve Full names use AVP_MakeFullName call.
\par 
\par This is bitfield that described in RETFLAGS.H
\par }{
\par RF_ is constants for flag bitfield RFlag of AVPScanObject. RFlag include history information about scanning of Object.
\par If some I/O errors occurs while processing flag RF_IO_ERROR is set.
\par if bit RF_DETECT is set, virus was detected, and name available from VirusName field.
\par if bit RF_WARNING is set also, this means that this Object was detected as a variant of virus WarningName BEFORE the other virus was detected in Object. And so on: If RF_CURE is set, the virus was successfully removed....
\par }\pard\plain \s3\sb240\sa60\keepn\widctlpar\outlinelevel2\adjustright \f1\cgrid {AVP_CALLBACK_... Description
\par }\pard\plain \widctlpar\adjustright \fs20\cgrid {Attention: some of callbacks defined in AVP_MSG.H are debug or not used.
\par 
\par Callback messages bases on standard windows message system.
\par AVPBASE send registered on AVP_MSGSTRING Windows message to the window, declared by AVP_RegisterCallback call.
\par uParam is a CALLBACK type.
\par LParam is pointer. In case of AVP_CALLBACK_OBJECT_... it is pointer to AVPScanObject; in other cases it isn\rquote t.
\par 
\par 
\par }\pard\plain \s27\fi-3686\li3686\widctlpar\adjustright \fs20\cgrid {AVP_CALLBACK_PUT_STRING\tab debug.
\par AVP_CALLBACK_ROTATE\tab only for DOS: Yield + show smth.
\par AVP_CALLBACK_ROTATE_OFF\tab only for DOS: Yield + show smth.
\par AVP_CALLBACK_MB_OK\tab debug or anormous. Sending to show dialog box. lParam is const char* message
\par AVP_CALLBACK_MB_OKCANCEL\tab the same
\par AVP_CALLBACK_MB_YESNO\tab the same
\par AVP_CALLBACK_LOAD_PROGRESS\tab sending while loading of bases. lParam is pointer to the LOAD_PROGRESS_STRUCT\line typedef struct LOAD_PROGRESS_S\{
\par \tab DWORD curLength;
\par \tab DWORD curPos;
\par \tab DWORD setLength;
\par \tab DWORD setPos;
\par \tab DWORD virCount;
\par \tab DWORD recCount;
\par \tab char* curName;
\par \tab char* setName;
\par \tab DWORD RecCountArray[8];
\par }\pard \s27\li3686\widctlpar\adjustright {\}LOAD_PROGRESS_STRUCT;
\par }\pard \s27\fi-3686\li3686\widctlpar\adjustright {
\par AVP_CALLBACK_ASK_CURE\tab Send every time as virus detected. lParam is pointer to AVPScanObject. Message handler can return values:\line 0- report only\line 1- cure\line 2- delete object
\par 
\par AVP_CALLBACK_OBJECT_DONE\tab Send only once at the end of object scanning.
\par \tab In case of complex object(Arcives etc.) this callback sending for each internal object. Must return:
\par {\pntext\pard\plain\s27 \fs20\lang1033\cgrid \hich\af0\dbch\af0\loch\f0 0-\tab}}\pard \s27\fi-360\li4050\widctlpar\jclisttab\tx4050{\*\pn \pnlvlbody\ilvl0\ls2\pnrnot0\pndec\pnindent4050\pnhang{\pntxta -}}\ls2\adjustright {ok. Next internal object allowed

\par {\pntext\pard\plain\s27 \fs20\lang1033\cgrid \hich\af0\dbch\af0\loch\f0 1-\tab}}\pard \s27\fi-360\li4050\widctlpar\jclisttab\tx4050{\*\pn \pnlvlbody\ilvl0\ls2\pnrnot0\pndec\pnindent4050\pnhang{\pntxta -}}\ls2\adjustright {stop processing complex object.

\par }\pard \s27\li3690\widctlpar\adjustright {
\par }\pard \s27\fi-3686\li3686\widctlpar\adjustright {AVP_CALLBACK_OBJECT_MESS\tab debug. // ScanObject->VirName is *message
\par AVP_CALLBACK_OBJECT_DETECT\tab Send if AVPBASE receive 0 after sending AVP_CALLBACK_ASK_CURE or in case virus find in file inside archive. Shell can add string to report.(Any action on the object is impossible).
\par AVP_CALLBACK_OBJECT_CURE\tab Send if AVPBASE successfully remove virus. Shell can add string to report.
\par AVP_CALLBACK_OBJECT_WARNING\tab Send if variant of virus detected. Shell can add string to report. MF_WARNINGS must be set.
\par AVP_CALLBACK_OBJECT_SUSP\tab Send if virus-like code is detected. Shell can add string to report. MF_CA must be set.
\par AVP_CALLBACK_OBJECT_PACKED\tab Send if object is packed. MF_PACKED must be set.
\par AVP_CALLBACK_OBJECT_ARCHIVE\tab Send if object is archived. MF_ARCHIVED must be set.
\par AVP_CALLBACK_OBJECT_DELETE\tab Send if object was successfully deleted.
\par AVP_CALLBACK_OBJECT_UNKNOWN\tab Send if ABPBASE can\rquote t process packed or archived file.
\par }\pard\plain \widctlpar\adjustright \fs20\cgrid {
\par }\pard\plain \s27\fi-3686\li3686\widctlpar\adjustright \fs20\cgrid {AVP_CALLBACK_ERROR_FILE_OPEN\tab If can\rquote t open file. lParam is const char* filename.
\par }\pard\plain \fi-3686\li3686\widctlpar\adjustright \fs20\cgrid {AVP_CALLBACK_ERROR_SET\tab If can\rquote t open setfile. lParam is const char* filename.
\par AVP_CALLBACK_ERROR_BASE\tab If corrupted base. lParam is const char* filename.
\par AVP_CALLBACK_ERROR_KERNEL_PROC\tab If can\rquote t find necessary proc.
\par AVP_CALLBACK_ERROR_LINK\tab \tab If can\rquote t link code in the base.
\par AVP_CALLBACK_ERROR_SYMBOL_DUP\tab If can\rquote t link code in the base.
\par AVP_CALLBACK_ERROR_SYMBOL\tab If can\rquote t link code in the base.
\par AVP_CALLBACK_ERROR_FIXUPP\tab If can\rquote t link code in the base.
\par }\pard \widctlpar\adjustright {
\par 
\par }\pard\plain \s2\sb240\sa60\keepn\widctlpar\outlinelevel1\adjustright \b\i\f1\cgrid {AVPEngine Sample Package ReadMe.txt:
\par }\pard\plain \widctlpar\adjustright \fs20\cgrid {This is short description of the AVPEngine Package.
\par 
\par This package consists of:
\par 
\par   WIN32\tab \tab working folder;
\par \tab there are necessary header files
\par \tab to access AVPBASE.DLL functions:
\par 
\par \tab AVP_DLL.H  - AVPBASE.DLL exported functions
\par \tab AVP_MSG.H  - Callback interface spec.
\par \tab SCANOBJ.H  - Structure for Scan request
\par \tab TYPES  .H  - Specification of object types
\par \tab RETFLAGS.H - Specification of Return flags.
\par 
\par \tab and subfolders:
\par 
\par \tab AVPSAMP
\par \tab \tab folder with MSVC++ 4.2 project.
\par \tab \tab This is example of using AVPEngine.
\par \tab \tab Files in Project:
\par 
\par \tab \tab AVPsamp.cpp - Nothing important, MSVC stuff.
\par \tab \tab Avpsdlg.cpp - File that implement
\par \tab \tab \tab \tab \tab \tab main dialog handlers,
\par \tab \tab \tab \tab \tab \tab scan thread organisation and
\par \tab \tab \tab \tab \tab \tab AVP_CALLBACK Message dispatch.
\par 
\par \tab \tab Scandir.cpp - The directory tree findfirst/findnext.
\par \tab \tab \tab \tab \tab \tab Fill AVPScanObject structure fields
\par \tab \tab \tab \tab \tab \tab and call AVP_ProcessObject().
\par \tab \tab \tab \tab \tab \tab All information about object processing
\par \tab \tab \tab \tab \tab \tab returns only trough AVP_CALLBACK Message.
\par 
\par \tab \tab StdAfx.cpp  - MSVC stuff.
\par 
\par \tab \tab *.h\tab - header files.
\par \tab \tab ..\\release\\AvpBase.lib - Import library for AVPEngine.
\par 
\par 
\par \tab \tab Programmers can look sources.
\par \tab \tab I'll answer any questions.
\par 
\par 
\par 
\par \tab RELEASE
\par \tab \tab AVPSAMP .EXE  - example of using AVPEngine
\par \tab \tab AVPBASE .LIB  - AVPEngine Library to link with your code
\par \tab \tab AVPBASE .DLL  - AVPEngine DLL
\par \tab \tab AVP_IO16.DLL  - file with 95 platform specific code
\par \tab \tab AVP_IO32.DLL  - file with 95 platform specific code
\par \tab \tab AVP_IONT.DLL  - file with NT platform specific code
\par 
\par Warning! Now (from build 115) AVPBASE.DLL detects OS and use corresponded *IO.DLL.
\par 
\par To make the avpsamp alive you must add to this directory the full set of antivial databases.
\par \tab \tab AVP     .SET  - file with list of active bases
\par \tab \tab *       .AVC  - compressed antiviral bases
\par 
\par 
\par The end (now }{\lang1024 {\field{\*\fldinst SYMBOL 74 \\f "Wingdings" \\s 10}{\fldrslt\f14\fs20}}}{) 
\par 
\par }}