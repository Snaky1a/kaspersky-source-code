// Machine generated IDispatch wrapper class(es) created by Microsoft Visual C++

// NOTE: Do not modify the contents of this file.  If this class is regenerated by
//  Microsoft Visual C++, your modifications will be overwritten.


#include "stdafx.h"
#include "aboutviewctrl.h"

/////////////////////////////////////////////////////////////////////////////
// CAboutViewCtrl

IMPLEMENT_DYNCREATE(CAboutViewCtrl, CWnd)

/////////////////////////////////////////////////////////////////////////////
// CAboutViewCtrl properties

short CAboutViewCtrl::GetAppearance()
{
	short result;
	GetProperty(DISPID_APPEARANCE, VT_I2, (void*)&result);
	return result;
}

void CAboutViewCtrl::SetAppearance(short propVal)
{
	SetProperty(DISPID_APPEARANCE, VT_I2, propVal);
}

short CAboutViewCtrl::GetBorderStyle()
{
	short result;
	GetProperty(DISPID_BORDERSTYLE, VT_I2, (void*)&result);
	return result;
}

void CAboutViewCtrl::SetBorderStyle(short propVal)
{
	SetProperty(DISPID_BORDERSTYLE, VT_I2, propVal);
}

BOOL CAboutViewCtrl::GetFullRowSelect()
{
	BOOL result;
	GetProperty(0x1, VT_BOOL, (void*)&result);
	return result;
}

void CAboutViewCtrl::SetFullRowSelect(BOOL propVal)
{
	SetProperty(0x1, VT_BOOL, propVal);
}

BOOL CAboutViewCtrl::GetShowGridLines()
{
	BOOL result;
	GetProperty(0x2, VT_BOOL, (void*)&result);
	return result;
}

void CAboutViewCtrl::SetShowGridLines(BOOL propVal)
{
	SetProperty(0x2, VT_BOOL, propVal);
}

/////////////////////////////////////////////////////////////////////////////
// CAboutViewCtrl operations

SCODE CAboutViewCtrl::SetApplicationID(long nApplicationID)
{
	SCODE result;
	static BYTE parms[] =
		VTS_I4;
	InvokeHelper(0x3, DISPATCH_METHOD, VT_ERROR, (void*)&result, parms,
		nApplicationID);
	return result;
}

SCODE CAboutViewCtrl::SetKeyFilesFolder(LPCTSTR pFolderName)
{
	SCODE result;
	static BYTE parms[] =
		VTS_BSTR;
	InvokeHelper(0x4, DISPATCH_METHOD, VT_ERROR, (void*)&result, parms,
		pFolderName);
	return result;
}

SCODE CAboutViewCtrl::SetApplicationName(LPCTSTR pApplicationName)
{
	SCODE result;
	static BYTE parms[] =
		VTS_BSTR;
	InvokeHelper(0x5, DISPATCH_METHOD, VT_ERROR, (void*)&result, parms,
		pApplicationName);
	return result;
}

SCODE CAboutViewCtrl::SetApplicationVersion(LPCTSTR pApplicationVersion)
{
	SCODE result;
	static BYTE parms[] =
		VTS_BSTR;
	InvokeHelper(0x6, DISPATCH_METHOD, VT_ERROR, (void*)&result, parms,
		pApplicationVersion);
	return result;
}

SCODE CAboutViewCtrl::SetRegisteredName(LPCTSTR pName)
{
	SCODE result;
	static BYTE parms[] =
		VTS_BSTR;
	InvokeHelper(0x7, DISPATCH_METHOD, VT_ERROR, (void*)&result, parms,
		pName);
	return result;
}

SCODE CAboutViewCtrl::SetRegisteredOrganization(LPCTSTR pOrganization)
{
	SCODE result;
	static BYTE parms[] =
		VTS_BSTR;
	InvokeHelper(0x8, DISPATCH_METHOD, VT_ERROR, (void*)&result, parms,
		pOrganization);
	return result;
}

SCODE CAboutViewCtrl::SetLastUpdate(LPCTSTR pLastUpdate)
{
	SCODE result;
	static BYTE parms[] =
		VTS_BSTR;
	InvokeHelper(0x9, DISPATCH_METHOD, VT_ERROR, (void*)&result, parms,
		pLastUpdate);
	return result;
}

SCODE CAboutViewCtrl::SetCopyRight1(LPCTSTR pCopyRight)
{
	SCODE result;
	static BYTE parms[] =
		VTS_BSTR;
	InvokeHelper(0xa, DISPATCH_METHOD, VT_ERROR, (void*)&result, parms,
		pCopyRight);
	return result;
}

SCODE CAboutViewCtrl::SetCopyRight2(LPCTSTR pCopyRight)
{
	SCODE result;
	static BYTE parms[] =
		VTS_BSTR;
	InvokeHelper(0xb, DISPATCH_METHOD, VT_ERROR, (void*)&result, parms,
		pCopyRight);
	return result;
}

SCODE CAboutViewCtrl::ClearKeyList()
{
	SCODE result;
	InvokeHelper(0xc, DISPATCH_METHOD, VT_ERROR, (void*)&result, NULL);
	return result;
}

SCODE CAboutViewCtrl::GetMinSize(long* pnMinXSize, long* pnMinYSize)
{
	SCODE result;
	static BYTE parms[] =
		VTS_PI4 VTS_PI4;
	InvokeHelper(0xd, DISPATCH_METHOD, VT_ERROR, (void*)&result, parms,
		pnMinXSize, pnMinYSize);
	return result;
}

SCODE CAboutViewCtrl::ChangeLocalization()
{
	SCODE result;
	InvokeHelper(0xe, DISPATCH_METHOD, VT_ERROR, (void*)&result, NULL);
	return result;
}

SCODE CAboutViewCtrl::SetInformationDataH(long hInfoData)
{
	SCODE result;
	static BYTE parms[] =
		VTS_I4;
	InvokeHelper(0xf, DISPATCH_METHOD, VT_ERROR, (void*)&result, parms,
		hInfoData);
	return result;
}

SCODE CAboutViewCtrl::SetInformationDataS(short* pDataBuffer, long dwDataBufferSize)
{
	SCODE result;
	static BYTE parms[] =
		VTS_PI2 VTS_I4;
	InvokeHelper(0x10, DISPATCH_METHOD, VT_ERROR, (void*)&result, parms,
		pDataBuffer, dwDataBufferSize);
	return result;
}

SCODE CAboutViewCtrl::SetNumberOfViruses(long dwVirNumber)
{
	SCODE result;
	static BYTE parms[] =
		VTS_I4;
	InvokeHelper(0x11, DISPATCH_METHOD, VT_ERROR, (void*)&result, parms,
		dwVirNumber);
	return result;
}

SCODE CAboutViewCtrl::SetApplicationVersionEx(LPCTSTR pApplicationVersion)
{
	SCODE result;
	static BYTE parms[] =
		VTS_BSTR;
	InvokeHelper(0x12, DISPATCH_METHOD, VT_ERROR, (void*)&result, parms,
		pApplicationVersion);
	return result;
}

SCODE CAboutViewCtrl::SetLastUpdateEx(long* pLastUpdateDate)
{
	SCODE result;
	static BYTE parms[] =
		VTS_PI4;
	InvokeHelper(0x13, DISPATCH_METHOD, VT_ERROR, (void*)&result, parms,
		pLastUpdateDate);
	return result;
}

SCODE CAboutViewCtrl::SetAVPBitmap(long hBitmap)
{
	SCODE result;
	static BYTE parms[] =
		VTS_I4;
	InvokeHelper(0x14, DISPATCH_METHOD, VT_ERROR, (void*)&result, parms,
		hBitmap);
	return result;
}

SCODE CAboutViewCtrl::SetAVPHyperLink(LPCTSTR pHyperLink)
{
	SCODE result;
	static BYTE parms[] =
		VTS_BSTR;
	InvokeHelper(0x15, DISPATCH_METHOD, VT_ERROR, (void*)&result, parms,
		pHyperLink);
	return result;
}
