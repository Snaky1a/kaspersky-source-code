

#include <float.h>
#include <math.h>
#include <limits.h>


// math constants
#define M_PI                    3.14159265358979323846264338328     /* pi             */
#define M_LNPI                  1.14472988584940017414342735135     /* ln(pi)         */
#define M_E                     2.71828182845904523536028747135     /* e              */
#define M_EULER                 0.57721566490153286060651209008     /* Euler constant */
#define M_LN2                   0.69314718055994530941723212146     /* ln(2)          */
#define M_SQRT2                 1.41421356237309504880168872421     /* sqrt(2)        */
#define M_SQRTPI                1.77245385090551602729816748334     /* sqrt(pi)       */


// constants
#define LogRootTwoPi_           0.9189385332046727418
#define FACT_TABLE_MAX          170
#define FACT_TABLE_SIZE         (FACT_TABLE_MAX+1)
#define PSI_TABLE_NMAX          100
#define PSI_1_TABLE_NMAX        100
#define PRBX_SQRT_DBL_MIN       1.4916681462400413e-154
#define PRBX_SQRT_DBL_MAX       1.3407807929942596e+154
#define PRBX_LOG_DBL_MIN        (-7.0839641853226408e+02)
#define PRBX_LOG_DBL_MAX        7.0978271289338397e+02
#define PRBX_ROOT5_DBL_EPSILON  7.4009597974140505e-04
#define PRBX_ROOT4_DBL_EPSILON  1.2207031250000000e-04


// macros
#define PRBX_SIGN(x)            ((x) >= 0.0 ? 1 : -1)
#define PRBX_IS_ODD(n)          ((n) & 1)
#define PRBX_IS_EVEN(n)         (!(PRBX_IS_ODD(n)))


// functions
#define gsl_cdf_chisq_Q         f01
#define gsl_cdf_gamma_Q         f02
#define gsl_sf_gamma_inc_Q      f03
#define gsl_sf_gamma_inc_Q_e    f04
#define gamma_inc_P_series      f05
#define gamma_inc_D             f06
#define gsl_sf_lngamma_e        f07
#define lngamma_1_pade          f08
#define lngamma_2_pade          f09
#define lngamma_lanczos         f10
#define lngamma_sgn_0           f11
#define lngamma_sgn_sing        f12
#define gsl_sf_lnfact_e         f13
#define gsl_sf_psi_int_e        f14
#define gsl_sf_psi_1_int_e      f15
#define gsl_sf_psi_n_e          f16
#define gsl_sf_psi_e            f17
#define psi_x                   f18
#define cheb_eval_e             f19
#define gsl_sf_psi_1_e          f20
#define psi_n_xg0               f21
#define gsl_sf_hzeta_e          f22
#define gsl_sf_exp_mult_err_e   f23
#define gsl_sf_log_1plusx_mx_e  f24
#define gsl_sf_gammastar_e      f25
#define gsl_sf_exp_err_e        f26
#define gammastar_ser           f27
#define gamma_inc_Q_asymp_unif  f28
#define gsl_sf_erfc_e           f29
#define erfc8                   f30
#define erfc8_sum               f31
#define gamma_inc_Q_series      f32
#define gamma_inc_Q_CF          f33
#define gamma_inc_F_CF          f34
#define gsl_pow_3               f35
#define gamma_inc_Q_large_x     f36


// constant defines
#define lanczos_7_c             n01
#define fact_table              n02
#define psi_table               n03
#define psi_1_table             n04
#define cheb_series_struct      n05
#define cheb_series             n06
#define apsics_data             n07
#define apsi_cs                 n08
#define psics_data              n09
#define psi_cs                  n10
#define hzeta_c                 n11
#define lopxmx_data             n12
#define lopxmx_cs               n13
#define gstar_a_data            n14
#define gstar_a_cs              n15
#define gstar_b_data            n16
#define gstar_b_cs              n17
#define erfc_xlt1_data          n18
#define erfc_xlt1_cs            n19
#define erfc_x15_data           n20
#define erfc_x15_cs             n21
#define erfc_x510_data          n22
#define erfc_x510_cs            n23


static int gsl_sf_lngamma_e(double p_x, double* p_result) ;


static double lanczos_7_c[9] = {
    0.99999999999980993227684700473478,
    676.520368121885098567009190444019,
    -1259.13921672240287047156078755283,
    771.3234287776530788486528258894,
    -176.61502916214059906584551354,
    12.507343278686904814458936853,
    -0.13857109526572011689554707,
    9.984369578019570859563e-6,
    1.50563273514931155834e-7,
};

static struct { int n; double f; long i; } fact_table[FACT_TABLE_SIZE] = {
    { 0,  1.0,     1L     },
    { 1,  1.0,     1L     },
    { 2,  2.0,     2L     },
    { 3,  6.0,     6L     },
    { 4,  24.0,    24L    },
    { 5,  120.0,   120L   },
    { 6,  720.0,   720L   },
    { 7,  5040.0,  5040L  },
    { 8,  40320.0, 40320L },

    { 9,  362880.0,     362880L    },
    { 10, 3628800.0,    3628800L   },
    { 11, 39916800.0,   39916800L  },
    { 12, 479001600.0,  479001600L },

    { 13, 6227020800.0,                               0 },
    { 14, 87178291200.0,                              0 },
    { 15, 1307674368000.0,                            0 },
    { 16, 20922789888000.0,                           0 },
    { 17, 355687428096000.0,                          0 },
    { 18, 6402373705728000.0,                         0 },
    { 19, 121645100408832000.0,                       0 },
    { 20, 2432902008176640000.0,                      0 },
    { 21, 51090942171709440000.0,                     0 },
    { 22, 1124000727777607680000.0,                   0 },
    { 23, 25852016738884976640000.0,                  0 },
    { 24, 620448401733239439360000.0,                 0 },
    { 25, 15511210043330985984000000.0,               0 },
    { 26, 403291461126605635584000000.0,              0 },
    { 27, 10888869450418352160768000000.0,            0 },
    { 28, 304888344611713860501504000000.0,           0 },
    { 29, 8841761993739701954543616000000.0,          0 },
    { 30, 265252859812191058636308480000000.0,        0 },
    { 31, 8222838654177922817725562880000000.0,       0 },
    { 32, 263130836933693530167218012160000000.0,     0 },
    { 33, 8683317618811886495518194401280000000.0,    0 },
    { 34, 2.95232799039604140847618609644e38,  0 },
    { 35, 1.03331479663861449296666513375e40,  0 },
    { 36, 3.71993326789901217467999448151e41,  0 },
    { 37, 1.37637530912263450463159795816e43,  0 },
    { 38, 5.23022617466601111760007224100e44,  0 },
    { 39, 2.03978820811974433586402817399e46,  0 },
    { 40, 8.15915283247897734345611269600e47,  0 },
    { 41, 3.34525266131638071081700620534e49,  0 },
    { 42, 1.40500611775287989854314260624e51,  0 },
    { 43, 6.04152630633738356373551320685e52,  0 },
    { 44, 2.65827157478844876804362581101e54,  0 },
    { 45, 1.19622220865480194561963161496e56,  0 },
    { 46, 5.50262215981208894985030542880e57,  0 },
    { 47, 2.58623241511168180642964355154e59,  0 },
    { 48, 1.24139155925360726708622890474e61,  0 },
    { 49, 6.08281864034267560872252163321e62,  0 },
    { 50, 3.04140932017133780436126081661e64,  0 },
    { 51, 1.55111875328738228022424301647e66,  0 },
    { 52, 8.06581751709438785716606368564e67,  0 },
    { 53, 4.27488328406002556429801375339e69,  0 },
    { 54, 2.30843697339241380472092742683e71,  0 },
    { 55, 1.26964033536582759259651008476e73,  0 },
    { 56, 7.10998587804863451854045647464e74,  0 },
    { 57, 4.05269195048772167556806019054e76,  0 },
    { 58, 2.35056133128287857182947491052e78,  0 },
    { 59, 1.38683118545689835737939019720e80,  0 },
    { 60, 8.32098711274139014427634118320e81,  0 },
    { 61, 5.07580213877224798800856812177e83,  0 },
    { 62, 3.14699732603879375256531223550e85,  0 },
    { 63, 1.982608315404440064116146708360e87,  0 },
    { 64, 1.268869321858841641034333893350e89,  0 },
    { 65, 8.247650592082470666723170306800e90,  0 },
    { 66, 5.443449390774430640037292402480e92,  0 },
    { 67, 3.647111091818868528824985909660e94,  0 },
    { 68, 2.480035542436830599600990418570e96,  0 },
    { 69, 1.711224524281413113724683388810e98,  0 },
    { 70, 1.197857166996989179607278372170e100,  0 },
    { 71, 8.504785885678623175211676442400e101,  0 },
    { 72, 6.123445837688608686152407038530e103,  0 },
    { 73, 4.470115461512684340891257138130e105,  0 },
    { 74, 3.307885441519386412259530282210e107,  0 },
    { 75, 2.480914081139539809194647711660e109,  0 },
    { 76, 1.885494701666050254987932260860e111,  0 },
    { 77, 1.451830920282858696340707840860e113,  0 },
    { 78, 1.132428117820629783145752115870e115,  0 },
    { 79, 8.946182130782975286851441715400e116,  0 },
    { 80, 7.156945704626380229481153372320e118,  0 },
    { 81, 5.797126020747367985879734231580e120,  0 },
    { 82, 4.753643337012841748421382069890e122,  0 },
    { 83, 3.945523969720658651189747118010e124,  0 },
    { 84, 3.314240134565353266999387579130e126,  0 },
    { 85, 2.817104114380550276949479442260e128,  0 },
    { 86, 2.422709538367273238176552320340e130,  0 },
    { 87, 2.107757298379527717213600518700e132,  0 },
    { 88, 1.854826422573984391147968456460e134,  0 },
    { 89, 1.650795516090846108121691926250e136,  0 },
    { 90, 1.485715964481761497309522733620e138,  0 },
    { 91, 1.352001527678402962551665687590e140,  0 },
    { 92, 1.243841405464130725547532432590e142,  0 },
    { 93, 1.156772507081641574759205162310e144,  0 },
    { 94, 1.087366156656743080273652852570e146,  0 },
    { 95, 1.032997848823905926259970209940e148,  0 },
    { 96, 9.916779348709496892095714015400e149,  0 },
    { 97, 9.619275968248211985332842594960e151,  0 },
    { 98, 9.426890448883247745626185743100e153,  0 },
    { 99, 9.332621544394415268169923885600e155,  0 },
    { 100, 9.33262154439441526816992388563e157,  0 },
    { 101, 9.42594775983835942085162312450e159,  0 },
    { 102, 9.61446671503512660926865558700e161,  0 },
    { 103, 9.90290071648618040754671525458e163,  0 },
    { 104, 1.02990167451456276238485838648e166,  0 },
    { 105, 1.08139675824029090050410130580e168,  0 },
    { 106, 1.146280563734708354534347384148e170,  0 },
    { 107, 1.226520203196137939351751701040e172,  0 },
    { 108, 1.324641819451828974499891837120e174,  0 },
    { 109, 1.443859583202493582204882102460e176,  0 },
    { 110, 1.588245541522742940425370312710e178,  0 },
    { 111, 1.762952551090244663872161047110e180,  0 },
    { 112, 1.974506857221074023536820372760e182,  0 },
    { 113, 2.231192748659813646596607021220e184,  0 },
    { 114, 2.543559733472187557120132004190e186,  0 },
    { 115, 2.925093693493015690688151804820e188,  0 },
    { 116, 3.393108684451898201198256093590e190,  0 },
    { 117, 3.96993716080872089540195962950e192,  0 },
    { 118, 4.68452584975429065657431236281e194,  0 },
    { 119, 5.57458576120760588132343171174e196,  0 },
    { 120, 6.68950291344912705758811805409e198,  0 },
    { 121, 8.09429852527344373968162284545e200,  0 },
    { 122, 9.87504420083360136241157987140e202,  0 },
    { 123, 1.21463043670253296757662432419e205,  0 },
    { 124, 1.50614174151114087979501416199e207,  0 },
    { 125, 1.88267717688892609974376770249e209,  0 },
    { 126, 2.37217324288004688567714730514e211,  0 },
    { 127, 3.01266001845765954480997707753e213,  0 },
    { 128, 3.85620482362580421735677065923e215,  0 },
    { 129, 4.97450422247728744039023415041e217,  0 },
    { 130, 6.46685548922047367250730439554e219,  0 },
    { 131, 8.47158069087882051098456875820e221,  0 },
    { 132, 1.11824865119600430744996307608e224,  0 },
    { 133, 1.48727070609068572890845089118e226,  0 },
    { 134, 1.99294274616151887673732419418e228,  0 },
    { 135, 2.69047270731805048359538766215e230,  0 },
    { 136, 3.65904288195254865768972722052e232,  0 },
    { 137, 5.01288874827499166103492629211e234,  0 },
    { 138, 6.91778647261948849222819828311e236,  0 },
    { 139, 9.61572319694108900419719561353e238,  0 },
    { 140, 1.34620124757175246058760738589e241,  0 },
    { 141, 1.89814375907617096942852641411e243,  0 },
    { 142, 2.69536413788816277658850750804e245,  0 },
    { 143, 3.85437071718007277052156573649e247,  0 },
    { 144, 5.55029383273930478955105466055e249,  0 },
    { 145, 8.04792605747199194484902925780e251,  0 },
    { 146, 1.17499720439091082394795827164e254,  0 },
    { 147, 1.72724589045463891120349865931e256,  0 },
    { 148, 2.55632391787286558858117801578e258,  0 },
    { 149, 3.80892263763056972698595524351e260,  0 },
    { 150, 5.71338395644585459047893286526e262,  0 },
    { 151, 8.62720977423324043162318862650e264,  0 },
    { 152, 1.31133588568345254560672467123e267,  0 },
    { 153, 2.00634390509568239477828874699e269,  0 },
    { 154, 3.08976961384735088795856467036e271,  0 },
    { 155, 4.78914290146339387633577523906e273,  0 },
    { 156, 7.47106292628289444708380937294e275,  0 },
    { 157, 1.17295687942641442819215807155e278,  0 },
    { 158, 1.85327186949373479654360975305e280,  0 },
    { 159, 2.94670227249503832650433950735e282,  0 },
    { 160, 4.71472363599206132240694321176e284,  0 },
    { 161, 7.59070505394721872907517857094e286,  0 },
    { 162, 1.22969421873944943411017892849e289,  0 },
    { 163, 2.00440157654530257759959165344e291,  0 },
    { 164, 3.28721858553429622726333031164e293,  0 },
    { 165, 5.42391066613158877498449501421e295,  0 },
    { 166, 9.00369170577843736647426172359e297,  0 },
    { 167, 1.50361651486499904020120170784e300,  0 },
    { 168, 2.52607574497319838753801886917e302,  0 },
    { 169, 4.26906800900470527493925188890e304,  0 },
    { 170, 7.25741561530799896739672821113e306,  0 },
};

static double psi_table[PSI_TABLE_NMAX + 1] = {
    0.0,  /* Infinity */              /* psi(0) */
    -M_EULER,                         /* psi(1) */
    0.42278433509846713939348790992,  /* ...    */
    0.92278433509846713939348790992,
    1.25611766843180047272682124325,
    1.50611766843180047272682124325,
    1.70611766843180047272682124325,
    1.87278433509846713939348790992,
    2.01564147795560999653634505277,
    2.14064147795560999653634505277,
    2.25175258906672110764745616389,
    2.35175258906672110764745616389,
    2.44266167997581201673836525479,
    2.52599501330914535007169858813,
    2.60291809023222227314862166505,
    2.67434666166079370172005023648,
    2.74101332832746036838671690315,
    2.80351332832746036838671690315,
    2.86233685773922507426906984432,
    2.91789241329478062982462539988,
    2.97052399224214905087725697883,
    3.02052399224214905087725697883,
    3.06814303986119666992487602645,
    3.11359758531574212447033057190,
    3.15707584618530734186163491973,
    3.1987425128519740085283015864,
    3.2387425128519740085283015864,
    3.2772040513135124700667631249,
    3.3142410883505495071038001619,
    3.3499553740648352213895144476,
    3.3844381326855248765619282407,
    3.4177714660188582098952615740,
    3.4500295305349872421533260902,
    3.4812795305349872421533260902,
    3.5115825608380175451836291205,
    3.5409943255438998981248055911,
    3.5695657541153284695533770196,
    3.5973435318931062473311547974,
    3.6243705589201332743581818244,
    3.6506863483938174848844976139,
    3.6763273740348431259101386396,
    3.7013273740348431259101386396,
    3.7257176179372821503003825420,
    3.7495271417468059598241920658,
    3.7727829557002943319172153216,
    3.7955102284275670591899425943,
    3.8177324506497892814121648166,
    3.8394715810845718901078169905,
    3.8607481768292527411716467777,
    3.8815815101625860745049801110,
    3.9019896734278921969539597029,
    3.9219896734278921969539597029,
    3.9415975165651470989147440166,
    3.9608282857959163296839747858,
    3.9796962103242182164764276160,
    3.9982147288427367349949461345,
    4.0163965470245549168131279527,
    4.0342536898816977739559850956,
    4.0517975495308205809735289552,
    4.0690389288411654085597358518,
    4.0859880813835382899156680552,
    4.1026547480502049565823347218,
    4.1190481906731557762544658694,
    4.1351772229312202923834981274,
    4.1510502388042361653993711433,
    4.1666752388042361653993711433,
    4.1820598541888515500147557587,
    4.1972113693403667015299072739,
    4.2121367424746950597388624977,
    4.2268426248276362362094507330,
    4.2413353784508246420065521823,
    4.2556210927365389277208378966,
    4.2697055997787924488475984600,
    4.2835944886676813377364873489,
    4.2972931188046676391063503626,
    4.3108066323181811526198638761,
    4.3241399656515144859531972094,
    4.3372978603883565912163551041,
    4.3502848733753695782293421171,
    4.3631053861958823987421626300,
    4.3757636140439836645649474401,
    4.3882636140439836645649474401,
    4.4006092930563293435772931191,
    4.4128044150075488557724150703,
    4.4248526077786331931218126607,
    4.4367573696833950978837174226,
    4.4485220755657480390601880108,
    4.4601499825424922251066996387,
    4.4716442354160554434975042364,
    4.4830078717796918071338678728,
    4.4942438268358715824147667492,
    4.5053549379469826935258778603,
    4.5163439489359936825368668713,
    4.5272135141533849868846929582,
    4.5379662023254279976373811303,
    4.5486045001977684231692960239,
    4.5591308159872421073798223397,
    4.5695474826539087740464890064,
    4.5798567610044242379640147796,
    4.5900608426370772991885045755,
    4.6001618527380874001986055856
};

static double psi_1_table[PSI_1_TABLE_NMAX + 1] = {
    0.0,  /* Infinity */           /* psi(1,0) */
    M_PI * M_PI / 6.0,             /* psi(1,1) */
    0.644934066848226436472415,    /* ...      */
    0.394934066848226436472415,
    0.2838229557371153253613041,
    0.2213229557371153253613041,
    0.1813229557371153253613041,
    0.1535451779593375475835263,
    0.1331370146940314251345467,
    0.1175120146940314251345467,
    0.1051663356816857461222010,
    0.0951663356816857461222010,
    0.0869018728717683907503002,
    0.0799574284273239463058557,
    0.0740402686640103368384001,
    0.0689382278476838062261552,
    0.0644937834032393617817108,
    0.0605875334032393617817108,
    0.0571273257907826143768665,
    0.0540409060376961946237801,
    0.0512708229352031198315363,
    0.0487708229352031198315363,
    0.0465032492390579951149830,
    0.0444371335365786562720078,
    0.0425467743683366902984728,
    0.0408106632572255791873617,
    0.0392106632572255791873617,
    0.0377313733163971768204978,
    0.0363596312039143235969038,
    0.0350841209998326909438426,
    0.0338950603577399442137594,
    0.0327839492466288331026483,
    0.0317433665203020901265817,
    0.03076680402030209012658168,
    0.02984853037475571730748159,
    0.02898347847164153045627052,
    0.02816715194102928555831133,
    0.02739554700275768062003973,
    0.02666508681283803124093089,
    0.02597256603721476254286995,
    0.02531510384129102815759710,
    0.02469010384129102815759710,
    0.02409521984367056414807896,
    0.02352832641963428296894063,
    0.02298749353699501850166102,
    0.02247096461137518379091722,
    0.02197713745088135663042339,
    0.02150454765882086513703965,
    0.02105185413233829383780923,
    0.02061782635456051606003145,
    0.02020133322669712580597065,
    0.01980133322669712580597065,
    0.01941686571420193164987683,
    0.01904704322899483105816086,
    0.01869104465298913508094477,
    0.01834810912486842177504628,
    0.01801753061247172756017024,
    0.01769865306145131939690494,
    0.01739086605006319997554452,
    0.01709360088954001329302371,
    0.01680632711763538818529605,
    0.01652854933985761040751827,
    0.01625980437882562975715546,
    0.01599965869724394401313881,
    0.01574770606433893015574400,
    0.01550356543933893015574400,
    0.01526687904880638577704578,
    0.01503731063741979257227076,
    0.01481454387422086185273411,
    0.01459828089844231513993134,
    0.01438824099085987447620523,
    0.01418415935820681325171544,
    0.01398578601958352422176106,
    0.01379288478501562298719316,
    0.01360523231738567365335942,
    0.01342261726990576130858221,
    0.01324483949212798353080444,
    0.01307170929822216635628920,
    0.01290304679189732236910755,
    0.01273868124291638877278934,
    0.01257845051066194236996928,
    0.01242220051066194236996928,
    0.01226978472038606978956995,
    0.01212106372098095378719041,
    0.01197590477193174490346273,
    0.01183418141592267460867815,
    0.01169577311142440471248438,
    0.01156056489076458859566448,
    0.01142844704164317229232189,
    0.01129931481023821361463594,
    0.01117306812421372175754719,
    0.01104961133409026496742374,
    0.01092885297157366069257770,
    0.01081070552355853781923177,
    0.01069508522063334415522437,
    0.01058191183901270133041676,
    0.01047110851491297833872701,
    0.01036260157046853389428257,
    0.01025632035036012704977199,  /* ...        */
    0.01015219706839427948625679,  /* psi(1,99)  */
    0.01005016666333357139524567   /* psi(1,100) */
};

typedef struct cheb_series_struct {
    double * c;   /* coefficients                     */
    int order;    /* order of expansion               */
    double a;     /* lower interval point             */
    double b;     /* upper interval point             */
    int order_sp; /* effective single precision order */
} cheb_series ;

static double apsics_data[16] = {    
    -.0204749044678185,
    -.0101801271534859,
    .0000559718725387,
    -.0000012917176570,
    .0000000572858606,
    -.0000000038213539,
    .0000000003397434,
    -.0000000000374838,
    .0000000000048990,
    -.0000000000007344,
    .0000000000001233,
    -.0000000000000228,
    .0000000000000045,
    -.0000000000000009,
    .0000000000000002,
    -.0000000000000000 
};

static cheb_series apsi_cs = {
    apsics_data,
    15,
    -1, 1,
    9
};

static double psics_data[23] = {
    -.038057080835217922,
    .491415393029387130, 
    -.056815747821244730,
    .008357821225914313,
    -.001333232857994342,
    .000220313287069308,
    -.000037040238178456,
    .000006283793654854,
    -.000001071263908506,
    .000000183128394654,
    -.000000031353509361,
    .000000005372808776,
    -.000000000921168141,
    .000000000157981265,
    -.000000000027098646,
    .000000000004648722,
    -.000000000000797527,
    .000000000000136827,
    -.000000000000023475,
    .000000000000004027,
    -.000000000000000691,
    .000000000000000118,
    -.000000000000000020
};

static cheb_series psi_cs = {
    psics_data,
    22,
    -1, 1,
    17
};

static double hzeta_c[15] = {
    1.00000000000000000000000000000,
    0.083333333333333333333333333333,
    -0.00138888888888888888888888888889,
    0.000033068783068783068783068783069,
    -8.2671957671957671957671957672e-07,
    2.0876756987868098979210090321e-08,
    -5.2841901386874931848476822022e-10,
    1.3382536530684678832826980975e-11,
    -3.3896802963225828668301953912e-13,
    8.5860620562778445641359054504e-15,
    -2.1748686985580618730415164239e-16,
    5.5090028283602295152026526089e-18,
    -1.3954464685812523340707686264e-19,
    3.5347070396294674716932299778e-21,
    -8.9535174270375468504026113181e-23
};

static double lopxmx_data[20] = {
    -1.12100231323744103373737274541,
    0.19553462773379386241549597019,
    -0.01467470453808083971825344956,
    0.00166678250474365477643629067,
    -0.00018543356147700369785746902,
    0.00002280154021771635036301071,
    -2.8031253116633521699214134172e-06,
    3.5936568872522162983669541401e-07,
    -4.6241857041062060284381167925e-08,
    6.0822637459403991012451054971e-09,
    -8.0339824424815790302621320732e-10,
    1.0751718277499375044851551587e-10,
    -1.4445310914224613448759230882e-11,
    1.9573912180610336168921438426e-12,
    -2.6614436796793061741564104510e-13,
    3.6402634315269586532158344584e-14,
    -4.9937495922755006545809120531e-15,
    6.8802890218846809524646902703e-16,
    -9.5034129794804273611403251480e-17,
    1.3170135013050997157326965813e-17
};

static cheb_series lopxmx_cs = {
    lopxmx_data,
    19,
    -1, 1,
    9
};

static double gstar_a_data[30] = {
    2.16786447866463034423060819465,
    -0.05533249018745584258035832802,
    0.01800392431460719960888319748,
    -0.00580919269468937714480019814,
    0.00186523689488400339978881560,
    -0.00059746524113955531852595159,
    0.00019125169907783353925426722,
    -0.00006124996546944685735909697,
    0.00001963889633130842586440945,
    -6.3067741254637180272515795142e-06,
    2.0288698405861392526872789863e-06,
    -6.5384896660838465981983750582e-07,
    2.1108698058908865476480734911e-07,
    -6.8260714912274941677892994580e-08,
    2.2108560875880560555583978510e-08,
    -7.1710331930255456643627187187e-09,
    2.3290892983985406754602564745e-09,
    -7.5740371598505586754890405359e-10,
    2.4658267222594334398525312084e-10,
    -8.0362243171659883803428749516e-11,
    2.6215616826341594653521346229e-11,
    -8.5596155025948750540420068109e-12,
    2.7970831499487963614315315444e-12,
    -9.1471771211886202805502562414e-13,
    2.9934720198063397094916415927e-13,
    -9.8026575909753445931073620469e-14,
    3.2116773667767153777571410671e-14,
    -1.0518035333878147029650507254e-14,
    3.4144405720185253938994854173e-15,
    -1.0115153943081187052322643819e-15
};

static cheb_series gstar_a_cs = {
    gstar_a_data,
    29,
    -1, 1,
    17
};

static double gstar_b_data[] = {
    0.0057502277273114339831606096782,
    0.0004496689534965685038254147807,
    -0.0001672763153188717308905047405,
    0.0000615137014913154794776670946,
    -0.0000223726551711525016380862195,
    8.0507405356647954540694800545e-06,
    -2.8671077107583395569766746448e-06,
    1.0106727053742747568362254106e-06,
    -3.5265558477595061262310873482e-07,
    1.2179216046419401193247254591e-07,
    -4.1619640180795366971160162267e-08,
    1.4066283500795206892487241294e-08,
    -4.6982570380537099016106141654e-09,
    1.5491248664620612686423108936e-09,
    -5.0340936319394885789686867772e-10,
    1.6084448673736032249959475006e-10,
    -5.0349733196835456497619787559e-11,
    1.5357154939762136997591808461e-11,
    -4.5233809655775649997667176224e-12,
    1.2664429179254447281068538964e-12,
    -3.2648287937449326771785041692e-13,
    7.1528272726086133795579071407e-14,
    -9.4831735252566034505739531258e-15,
    -2.3124001991413207293120906691e-15,
    2.8406613277170391482590129474e-15,
    -1.7245370321618816421281770927e-15,
    8.6507923128671112154695006592e-16,
    -3.9506563665427555895391869919e-16,
    1.6779342132074761078792361165e-16,
    -6.0483153034414765129837716260e-17
};

static cheb_series gstar_b_cs = {
    gstar_b_data,
    29,
    -1, 1,
    18
};

static double erfc_xlt1_data[20] = {
    1.06073416421769980345174155056,
    -0.42582445804381043569204735291,
    0.04955262679620434040357683080,
    0.00449293488768382749558001242,
    -0.00129194104658496953494224761,
    -0.00001836389292149396270416979,
    0.00002211114704099526291538556,
    -5.23337485234257134673693179020e-7,
    -2.78184788833537885382530989578e-7,
    1.41158092748813114560316684249e-8,
    2.72571296330561699984539141865e-9,
    -2.06343904872070629406401492476e-10,
    -2.14273991996785367924201401812e-11,
    2.22990255539358204580285098119e-12,
    1.36250074650698280575807934155e-13,
    -1.95144010922293091898995913038e-14,
    -6.85627169231704599442806370690e-16,
    1.44506492869699938239521607493e-16,
    2.45935306460536488037576200030e-18,
    -9.29599561220523396007359328540e-19
};

static cheb_series erfc_xlt1_cs = {
    erfc_xlt1_data,
    19,
    -1, 1,
    12
};

static double erfc_x15_data[25] = {
    0.44045832024338111077637466616,
    -0.143958836762168335790826895326,
    0.044786499817939267247056666937,
    -0.013343124200271211203618353102,
    0.003824682739750469767692372556,
    -0.001058699227195126547306482530,
    0.000283859419210073742736310108,
    -0.000073906170662206760483959432,
    0.000018725312521489179015872934,
    -4.62530981164919445131297264430e-6,
    1.11558657244432857487884006422e-6,
    -2.63098662650834130067808832725e-7,
    6.07462122724551777372119408710e-8,
    -1.37460865539865444777251011793e-8,
    3.05157051905475145520096717210e-9,
    -6.65174789720310713757307724790e-10,
    1.42483346273207784489792999706e-10,
    -3.00141127395323902092018744545e-11,
    6.22171792645348091472914001250e-12,
    -1.26994639225668496876152836555e-12,
    2.55385883033257575402681845385e-13,
    -5.06258237507038698392265499770e-14,
    9.89705409478327321641264227110e-15,
    -1.90685978789192181051961024995e-15,
    3.50826648032737849245113757340e-16
};

static cheb_series erfc_x15_cs = {
    erfc_x15_data,
    24,
    -1, 1,
    16
};

static double erfc_x510_data[20] = {
    1.11684990123545698684297865808,
    0.003736240359381998520654927536,
    -0.000916623948045470238763619870,
    0.000199094325044940833965078819,
    -0.000040276384918650072591781859,
    7.76515264697061049477127605790e-6,
    -1.44464794206689070402099225301e-6,
    2.61311930343463958393485241947e-7,
    -4.61833026634844152345304095560e-8,
    8.00253111512943601598732144340e-9,
    -1.36291114862793031395712122089e-9,
    2.28570483090160869607683087722e-10,
    -3.78022521563251805044056974560e-11,
    6.17253683874528285729910462130e-12,
    -9.96019290955316888445830597430e-13,
    1.58953143706980770269506726000e-13,
    -2.51045971047162509999527428316e-14,
    3.92607828989125810013581287560e-15,
    -6.07970619384160374392535453420e-16,
    9.12600607264794717315507477670e-17
};

static cheb_series erfc_x510_cs = {
    erfc_x510_data,
    19,
    -1, 1,
    12
};


static int lngamma_1_pade(const double p_eps, double* p_result)
{
    const double n1 = -1.0017419282349508699871138440 ;
    const double n2 =  1.7364839209922879823280541733 ;
    const double d1 =  1.2433006018858751556055436011 ;
    const double d2 =  5.0456274100274010152489597514 ;
    const double num = (p_eps + n1) * (p_eps + n2) ;
    const double den = (p_eps + d1) * (p_eps + d2) ;
    const double pade = 2.0816265188662692474880210318 * num / den ;
    const double c0 =  0.004785324257581753 ;
    const double c1 = -0.01192457083645441 ;
    const double c2 =  0.01931961413960498 ;
    const double c3 = -0.02594027398725020 ;
    const double c4 =  0.03141928755021455 ;
    const double eps5 = p_eps * p_eps * p_eps * p_eps * p_eps ;
    const double corr = eps5 * (c0 + p_eps * (c1 + p_eps * (c2 + p_eps * (c3 + c4 * p_eps)))) ;
    *p_result = p_eps * (pade + corr) ;
    return 0 ;
}

static int lngamma_2_pade(const double p_eps, double* p_result)
{
    const double n1 = 1.000895834786669227164446568 ;
    const double n2 = 4.209376735287755081642901277 ;
    const double d1 = 2.618851904903217274682578255 ;
    const double d2 = 10.85766559900983515322922936 ;
    const double num = (p_eps + n1) * (p_eps + n2) ;
    const double den = (p_eps + d1) * (p_eps + d2) ;
    const double pade = 2.85337998765781918463568869 * num / den ;
    const double c0 =  0.0001139406357036744 ;
    const double c1 = -0.0001365435269792533 ;
    const double c2 =  0.0001067287169183665 ;
    const double c3 = -0.0000693271800931282 ;
    const double c4 =  0.0000407220927867950 ;
    const double eps5 = p_eps * p_eps * p_eps * p_eps * p_eps ;
    const double corr = eps5 * (c0 + p_eps * (c1 + p_eps * (c2 + p_eps * (c3 + c4 * p_eps)))) ;
    *p_result = p_eps * (pade + corr) ;
    return 0 ;
}

static int lngamma_lanczos(double p_x, double* p_result)
{
    p_x -= 1.0 ;
    
    double Ag = lanczos_7_c[0] ;
    for(int k = 1; k <= 8; ++k)
    { 
        Ag += lanczos_7_c[k] / (p_x + k) ;
    }

    double term1 = (p_x + 0.5) * log((p_x + 7.5) / M_E) ;
    double term2 = LogRootTwoPi_ + log(Ag) ;
    *p_result  = term1 + (term2 - 7.0) ;
    return 0 ;
}

static int lngamma_sgn_0(double p_eps, double* p_lng, double* p_sgn)
{
    const double c1  = -0.07721566490153286061 ;
    const double c2  = -0.01094400467202744461 ;
    const double c3  =  0.09252092391911371098 ;
    const double c4  = -0.01827191316559981266 ;
    const double c5  =  0.01800493109685479790 ;
    const double c6  = -0.00685088537872380685 ;
    const double c7  =  0.00399823955756846603 ;
    const double c8  = -0.00189430621687107802 ;
    const double c9  =  0.00097473237804513221 ;
    const double c10 = -0.00048434392722255893 ;
    const double g6  = c6 + p_eps * (c7 + p_eps * (c8 + p_eps * (c9 + p_eps * c10))) ;
    const double g   = p_eps * (c1 + p_eps * (c2 + p_eps * (c3 + p_eps * (c4 + p_eps * (c5 + p_eps * g6))))) ;

    const double gee = g + 1.0 / (1.0 + p_eps) + 0.5 * p_eps ;

    *p_lng = log(gee / fabs(p_eps)) ;
    *p_sgn = PRBX_SIGN(p_eps) ;

    return 0 ;
}

static int gsl_sf_lnfact_e(const unsigned int p_n, double* p_result)
{
    if(p_n <= FACT_TABLE_MAX)
    {
        *p_result = log(fact_table[p_n].f) ;
        return 0 ;
    }

    gsl_sf_lngamma_e(p_n + 1.0, p_result) ;
    return 0 ;
}

static int gsl_sf_psi_int_e(const int p_n, double* p_result)
{
    if (p_n <= 0)
    {
        return 1 ;
    }

    if (p_n <= PSI_TABLE_NMAX)
    {
        *p_result = psi_table[p_n] ;
        return 0 ;
    }

    const double c2 = -1.0 / 12.0 ;
    const double c3 =  1.0 / 120.0 ;
    const double c4 = -1.0 / 252.0 ;
    const double c5 =  1.0 / 240.0 ;
    const double ni2 = (1.0 / p_n) * (1.0 / p_n) ;
    const double ser = ni2 * (c2 + ni2 * (c3 + ni2 * (c4 + ni2 * c5))) ;
    *p_result  = log(p_n) - 0.5 / p_n + ser ;
    return 0 ;
}

static int gsl_sf_psi_1_int_e(const int p_n, double* p_result)
{
    if (p_n <= 0)
    {
        return 1 ;
    }

    if (p_n <= PSI_1_TABLE_NMAX)
    {
        *p_result = psi_1_table[p_n] ;
        return 0 ;
    }

    const double c0 = -1.0 / 30.0 ;
    const double c1 =  1.0 / 42.0 ;
    const double c2 = -1.0 / 30.0 ;
    const double ni2 = (1.0 / p_n) * (1.0 / p_n) ;
    const double ser =  ni2 * ni2 * (c0 + ni2 * (c1 + c2 * ni2)) ;
    *p_result = (1.0 + 0.5 / p_n + 1.0 / (6.0 * p_n * p_n) + ser) / p_n ;
    return 0 ;
}

static int cheb_eval_e(const cheb_series* p_cs, const double p_x, double* p_result)
{
    double d  = 0.0 ;
    double dd = 0.0 ;

    double y  = (2.0 * p_x - p_cs->a - p_cs->b) / (p_cs->b - p_cs->a) ;
    double y2 = 2.0 * y ;

    double e = 0.0 ;

    for(int j = p_cs->order; j >= 1; --j)
    {
        double temp = d ;
        d = y2*d - dd + p_cs->c[j] ;
        e += fabs(y2 * temp) + fabs(dd) + fabs(p_cs->c[j]) ;
        dd = temp ;
    }

    double temp = d ;
    d = y * d - dd + 0.5 * p_cs->c[0] ;
    e += fabs(y * temp) + fabs(dd) + 0.5 * fabs(p_cs->c[0]) ;

    *p_result = d ;

    return 0 ;
}

static int psi_x(const double p_x, double* p_result)
{
    if (p_x == 0.0 || p_x == -1.0 || p_x == -2.0)
    {
        return 1 ;
    }

    const double y = fabs(p_x) ;
    if (y >= 2.0)
    {
        const double t = 8.0 / (y * y) - 1.0 ;
        double result_c ;
        cheb_eval_e(&apsi_cs, t, &result_c) ;
        if (p_x < 0.0)
        {
            const double s = sin(M_PI * p_x) ;
            const double c = cos(M_PI * p_x) ;
            if (fabs(s) < 2.0 * PRBX_SQRT_DBL_MIN)
            {
                return 1 ;
            }

            *p_result  = log(y) - 0.5 / p_x + result_c - M_PI * c / s ;
            return 0 ;
        }

        *p_result  = log(y) - 0.5 / p_x + result_c ;
        return 0 ;
    }

    double result_c ;
    if (p_x < -1.0)
    {
        const double v  = p_x + 2.0 ;
        const double t1 = 1.0 / p_x ;
        const double t2 = 1.0 / (p_x + 1.0) ;
        const double t3 = 1.0 / v ;
        cheb_eval_e(&psi_cs, 2.0 * v - 1.0, &result_c) ;

        *p_result = -(t1 + t2 + t3) + result_c ;
        return 0 ;
    }

    if (p_x < 0.0)
    {
        const double v  = p_x + 1.0 ;
        const double t1 = 1.0 / p_x;
        const double t2 = 1.0 /v ;
        cheb_eval_e(&psi_cs, 2.0 * v - 1.0, &result_c) ;

        *p_result = -(t1 + t2) + result_c ;
        return 0 ;
    }

    if (p_x < 1.0)
    {
        const double t1 = 1.0 / p_x ;
        cheb_eval_e(&psi_cs, 2.0 * p_x - 1.0, &result_c) ;

        *p_result = -t1 + result_c ;
        return 0 ;
    }

    const double v = p_x - 1.0 ;
    return cheb_eval_e(&psi_cs, 2.0 * v - 1.0, p_result) ;
}

static int gsl_sf_psi_e(const double p_x, double* p_result)
{
    return psi_x(p_x, p_result) ;
}

static int gsl_sf_hzeta_e(const double p_s, const double p_q, double* p_result)
{
    if (p_s <= 1.0 || p_q <= 0.0)
    {
        return 1 ;
    }

    const double max_bits = 54.0 ;
    const double ln_term0 = -p_s * log(p_q) ;
    if (ln_term0 < (PRBX_LOG_DBL_MIN + 1.0))
    {
        return 1 ;
    }

    if (ln_term0 > (PRBX_LOG_DBL_MAX - 1.0))
    {
        return 1 ;
    }

    if ((p_s > max_bits && p_q < 1.0) || (p_s > (0.5 * max_bits) && p_q < 0.25))
    {
        *p_result = pow(p_q, -p_s) ;
        return 0 ;
    }

    if (p_s > (0.5 * max_bits) && p_q < 1.0)
    {
        const double p1 = pow(p_q, -p_s) ;
        const double p2 = pow(p_q / (1.0 + p_q), p_s) ;
        const double p3 = pow(p_q / (2.0 + p_q), p_s) ;
        *p_result = p1 * (1.0 + p2 + p3) ;
        return 0 ;
    }

    const int jmax = 12 ;
    const int kmax = 10 ;
    const double pmax  = pow(kmax + p_q, -p_s) ;
    double scp = p_s ;
    double pcp = pmax / (kmax + p_q) ;
    double ans = pmax * ((kmax + p_q) / (p_s - 1.0) + 0.5) ;

    for(int k = 0; k < kmax; ++k)
    {
        ans += pow(k + p_q, -p_s) ;
    }

    for(int j = 0; j <= jmax; ++j)
    {
        double delta = hzeta_c[j + 1] * scp * pcp ;
        ans += delta ;
        if(fabs(delta / ans) < (0.5 * DBL_EPSILON) )
        {
            break ;
        }

        scp *= (p_s + 2 * j + 1) * (p_s + 2 * j + 2) ;
        pcp /= (kmax + p_q) * (kmax + p_q) ;
    }

    *p_result = ans ;
    return 0 ;
}

int gsl_sf_exp_mult_err_e(const double p_x, const double p_y, double* p_result)
{
    const double ay = fabs(p_y) ;

    if (p_y == 0.0)
    {
        *p_result = 0.0 ;
        return 0 ;
    }

    if ((p_x < (0.5 * PRBX_LOG_DBL_MAX) && p_x > (0.5 * PRBX_LOG_DBL_MIN)) &&
        (ay < (0.8 * PRBX_SQRT_DBL_MAX) && ay > (1.2 * PRBX_SQRT_DBL_MIN)))
    {
        double ex = exp(p_x) ;
        *p_result  = p_y * ex ;
        return 0 ;
    }

    const double ly  = log(ay) ;
    const double lnr = p_x + ly ;

    if (lnr > (PRBX_LOG_DBL_MAX - 0.01))
    {
        return 1 ;
    }

    if (lnr < (PRBX_LOG_DBL_MIN + 0.01))
    {
        return 1 ;
    }

    const double sy  = PRBX_SIGN(p_y) ;
    const double M   = floor(p_x) ;
    const double N   = floor(ly) ;
    const double a   = p_x - M ;
    const double b   = ly - N ;
    const double eMN = exp(M + N) ;
    const double eab = exp(a + b) ;
    *p_result = sy * eMN * eab ;
    return 0 ;
}

static int psi_n_xg0(const int p_n, const double p_x, double* p_result)
{
    if (p_n == 0)
    {
        return gsl_sf_psi_e(p_x, p_result) ;
    }

    double ln_nf ;
    double hzeta ;
    int nResult = gsl_sf_hzeta_e(p_n + 1.0, p_x, &hzeta) ;
    if (nResult != 0)
    {
        return 1 ;
    }

    nResult = gsl_sf_lnfact_e((unsigned int)p_n, &ln_nf) ;
    if (nResult != 0)
    {
        return 1 ;
    }

    nResult = gsl_sf_exp_mult_err_e(ln_nf, hzeta, p_result) ;
    if (nResult != 0)
    {
        return 1 ;
    }

    if(PRBX_IS_EVEN(p_n)) 
    {
        *p_result = -*p_result ;
    }

    return 0 ;
}

static int gsl_sf_psi_1_e(const double p_x, double* p_result)
{
    if (p_x == 0.0 || p_x == -1.0 || p_x == -2.0)
    {
        return 1 ;
    }

    if (p_x > 0.0)
    {
        return psi_n_xg0(1, p_x, p_result) ;
    }

    if (p_x > -5.0)
    {
        int M = (int)-floor(p_x) ;
        double fx = p_x + M ;
        if (fx == 0.0)
        {
            return 1 ;
        }
        
        double sum = 0.0 ;
        for(int m = 0; m < M; ++m)
        {
            sum += 1.0 / ((p_x + m) * (p_x + m)) ;
        }

        int nResult = psi_n_xg0(1, fx, p_result) ;
        if (nResult != 0)
        {
            return nResult ;
        }

        *p_result += sum ;
        return 0 ;
    }

    const double sin_px = sin(M_PI * p_x) ;
    const double d = M_PI * M_PI / (sin_px * sin_px) ;
    double r ;
    int nResult = psi_n_xg0(1, 1.0 - p_x, &r) ;
    if (nResult != 0)
    {
        return nResult ;
    }

    *p_result = d - r ;
    return 0 ;
}

static int gsl_sf_psi_n_e(const int p_n, const double p_x, double* p_result)
{
    if (p_n == 0)
    {
        return gsl_sf_psi_e(p_x, p_result) ;
    }

    if (p_n == 1)
    {
        return gsl_sf_psi_1_e(p_x, p_result) ;
    }

    if (p_n < 0 || p_x <= 0.0)
    {
        return 1 ;
    }

    double dbLn_nf = 0.0 ;
    double dbHzeta = 0.0 ;
    if (gsl_sf_hzeta_e(p_n + 1.0, p_x, &dbHzeta) != 0)
    {
        return 1 ;
    }

    if (gsl_sf_lnfact_e((unsigned int) p_n, &dbLn_nf) != 0)
    {
        return 1 ;
    }

    if (gsl_sf_exp_mult_err_e(dbLn_nf, dbHzeta, p_result) != 0)
    {
        return 1 ;
    }

    if (PRBX_IS_EVEN(p_n))
    {
        *p_result = -*p_result ;
    }

    return 0 ;
}

static int lngamma_sgn_sing(int p_N, double p_eps, double* p_lng, double* p_sgn)
{
    if (p_eps == 0.0)
    {
        *p_lng = 0.0 ;
        *p_sgn = 0.0 ;
        return 1 ;
    }

    if (p_N == 1)
    {
        const double c0 =  0.07721566490153286061 ;
        const double c1 =  0.08815966957356030521 ;
        const double c2 = -0.00436125434555340577 ;
        const double c3 =  0.01391065882004640689 ;
        const double c4 = -0.00409427227680839100 ;
        const double c5 =  0.00275661310191541584 ;
        const double c6 = -0.00124162645565305019 ;
        const double c7 =  0.00065267976121802783 ;
        const double c8 = -0.00032205261682710437 ;
        const double c9 =  0.00016229131039545456 ;
        const double g5 = c5 + p_eps * (c6 + p_eps * (c7 + p_eps * (c8 + p_eps * c9))) ;
        const double g  = p_eps * (c0 + p_eps * (c1 + p_eps * (c2 + p_eps * (c3 + p_eps * (c4 + p_eps * g5))))) ;

        const double gam_e = g - 1.0 - 0.5 * p_eps * (1.0+3.0 * p_eps) / (1.0 - p_eps * p_eps) ;

        *p_lng = log(fabs(gam_e)/fabs(p_eps)) ;
        *p_sgn = (p_eps > 0.0 ? -1.0 : 1.0) ;
        return 0 ;
    }

    const double cs1 = -1.6449340668482264365 ;
    const double cs2 =  0.8117424252833536436 ;
    const double cs3 = -0.1907518241220842137 ;
    const double cs4 =  0.0261478478176548005 ;
    const double cs5 = -0.0023460810354558236 ;
    const double e2  = p_eps * p_eps ;
    const double sin_ser = 1.0 + e2 * (cs1 + e2 * (cs2 + e2 * (cs3 + e2 * (cs4 + e2 * cs5)))) ;

    double aeps = fabs(p_eps) ;
    double c0 = 0.0 ;
    double psi_0 = 0.0 ;
    double psi_1 = 0.0 ;
    double psi_2 = 0.0 ;
    double psi_3 = 0.0 ;
    double psi_4 = 0.0 ;
    double psi_5 = 0.0 ;
    double psi_6 = 0.0 ;
    gsl_sf_lnfact_e(p_N, &c0) ;
    gsl_sf_psi_int_e(p_N + 1, &psi_0) ;
    gsl_sf_psi_1_int_e(p_N + 1, &psi_1) ;
    if(aeps > 0.00001) 
    {
        gsl_sf_psi_n_e(2, p_N + 1.0, &psi_2) ;
    }

    if(aeps > 0.0002)
    {
        gsl_sf_psi_n_e(3, p_N + 1.0, &psi_3) ;
    }

    if(aeps > 0.001)
    {
        gsl_sf_psi_n_e(4, p_N + 1.0, &psi_4) ;
    }

    if(aeps > 0.005)
    {
        gsl_sf_psi_n_e(5, p_N + 1.0, &psi_5) ;
    }

    if(aeps > 0.01)
    {
        gsl_sf_psi_n_e(6, p_N + 1.0, &psi_6) ;
    }

    double c1 = psi_0 ;
    double c2 = psi_1 / 2.0 ;
    double c3 = psi_2 / 6.0 ;
    double c4 = psi_3 / 24.0 ;
    double c5 = psi_4 / 120.0 ;
    double c6 = psi_5 / 720.0 ;
    double c7 = psi_6 / 5040.0 ;
    double lng_ser = c0 - p_eps * (c1 - p_eps * (c2 - p_eps * (c3 - p_eps * (c4 - p_eps * (c5 - 
                        p_eps * (c6 - p_eps * c7))))));

    double g = -lng_ser - log(sin_ser) ;
    *p_lng = g - log(fabs(p_eps)) ;
    *p_sgn = (PRBX_IS_ODD(p_N) ? -1.0 : 1.0) * (p_eps > 0.0 ? 1.0 : -1.0) ;

    return 0 ;
}

static int gsl_sf_lngamma_e(double p_x, double* p_result)
{
    if (fabs(p_x - 1.0) < 0.01)
    {
        return lngamma_1_pade(p_x - 1.0, p_result) ;
    }

    if (fabs(p_x - 2.0) < 0.01)
    {
        return lngamma_2_pade(p_x - 2.0, p_result) ;
    }

    if (p_x >= 0.5)
    {
        return lngamma_lanczos(p_x, p_result) ;
    }

    if (p_x == 0.0)
    {
        return 1 ;
    }

    if (fabs(p_x) < 0.02)
    {
        double dbSgn = 0.0 ;
        return lngamma_sgn_0(p_x, p_result, &dbSgn) ;
    }

    if (p_x > (-0.5 / (DBL_EPSILON * M_PI)))
    {
        double z  = 1.0 - p_x ;
        double s  = sin(M_PI * z) ;
        double as = fabs(s) ;
        if (s == 0.0)
        {
            return 1 ;
        }

        if (as < M_PI * 0.015)
        {
            if (p_x < INT_MIN + 2.0)
            {
                *p_result = 0.0 ;
                return 1 ;
            }

            int N = -(int)(p_x - 0.5) ;
            double eps = p_x + N ;
            double dbSgn = 0.0 ;
            return lngamma_sgn_sing(N, eps, p_result, &dbSgn) ;
        }

        double dbLg_z = 0.0 ;
        lngamma_lanczos(z, &dbLg_z) ;
        *p_result = M_LNPI - (log(as) + dbLg_z) ;
        return 0 ;
    }

    *p_result = 0.0 ;
    return 1 ;
}

static int gsl_sf_log_1plusx_mx_e(const double p_x, double* p_result)
{
    if (p_x <= -1.0)
    {
        return 1 ;
    }

    if (fabs(p_x) < PRBX_ROOT5_DBL_EPSILON)
    {
        const double c1 = -0.5 ;
        const double c2 =  1.0 / 3.0 ;
        const double c3 = -1.0 / 4.0 ;
        const double c4 =  1.0 / 5.0 ;
        const double c5 = -1.0 / 6.0 ;
        const double c6 =  1.0 / 7.0 ;
        const double c7 = -1.0 / 8.0 ;
        const double c8 =  1.0 / 9.0 ;
        const double c9 = -1.0 / 10.0 ;
        const double t  =  c5 + p_x * (c6 + p_x * (c7 + p_x * (c8 + p_x * c9))) ;
        *p_result = p_x * p_x * (c1 + p_x * (c2 + p_x * (c3 + p_x * (c4 + p_x * t)))) ;
        return 0 ;
    }

    if (fabs(p_x) < 0.5)
    {
        double t = 0.5 * (8.0 * p_x + 1.0) / (p_x + 2.0) ;
        double c ;
        cheb_eval_e(&lopxmx_cs, t, &c) ;
        *p_result = p_x * p_x * c ;
        return 0 ;
    }

    const double lterm = log(1.0 + p_x) ;
    *p_result = lterm - p_x ;
    return 0 ;
}

static int gsl_sf_exp_err_e(const double p_x, double* p_result)
{
    if (p_x > PRBX_LOG_DBL_MAX)
    {
        return 1 ;
    }

    if (p_x < PRBX_LOG_DBL_MIN)
    {
        return 1 ;
    }

    const double ex  = exp(p_x) ;
    *p_result = ex ;
    return 0 ;
}

static int gammastar_ser(const double p_x, double* p_result)
{
    const double y  =  1.0 / (p_x * p_x) ;
    const double c0 =  1.0 / 12.0 ;
    const double c1 = -1.0 / 360.0;
    const double c2 =  1.0 / 1260.0 ;
    const double c3 = -1.0 / 1680.0 ;
    const double c4 =  1.0 / 1188.0 ;
    const double c5 = -691.0 / 360360.0 ;
    const double c6 =  1.0 / 156.0 ;
    const double c7 = -3617.0 / 122400.0 ;
    const double ser = c0 + y * (c1 + y * (c2 + y * (c3 + y * (c4 + y * (c5 + y * (c6 + y * c7)))))) ;
    *p_result = exp(ser / p_x) ;
    return 0 ;
}

static int gsl_sf_gammastar_e(const double p_x, double* p_result)
{
    if (p_x <= 0.0)
    {
        return 1 ;
    }

    if (p_x < 0.5)
    {
        double lg ;
        int nResult = gsl_sf_lngamma_e(p_x, &lg) ;
        if (nResult != 0)
        {
            return nResult ;
        }

        const double lx = log(p_x) ;
        const double c  = 0.5 * (M_LN2 + M_LNPI) ;
        const double lnr_val = lg - (p_x - 0.5) * lx + p_x - c ;
        return gsl_sf_exp_err_e(lnr_val, p_result) ;
    }

    if (p_x < 2.0)
    {
        const double t = 4.0 / 3.0 * (p_x - 0.5) - 1.0 ;
        return cheb_eval_e(&gstar_a_cs, t, p_result) ;
    }

    if (p_x < 10.0)
    {
        const double t = 0.25 * (p_x - 2.0) - 1.0 ;
        double c ;
        cheb_eval_e(&gstar_b_cs, t, &c) ;
        *p_result = c / (p_x * p_x) + 1.0 + 1.0 / (12.0 * p_x) ;
        return 0 ;
    }

    if (p_x < (1.0 / PRBX_ROOT4_DBL_EPSILON))
    {
        return gammastar_ser(p_x, p_result) ;
    }

    if (p_x < (1.0/DBL_EPSILON))
    {
        const double xi = 1.0 / p_x ;
        *p_result = 1.0 + xi / 12.0 * (1.0 + xi / 24.0 * (1.0 - xi * (139.0 / 180.0 + 571.0 / 8640.0 * xi))) ;
        return 0 ;
    }

    *p_result = 1.0 ;
    return 0 ;
}

static int gamma_inc_D(const double p_a, const double p_x, double* p_result)
{
    if (p_a < 10.0)
    {
        double dbResult = 0.0 ;
        gsl_sf_lngamma_e(p_a + 1.0, &dbResult) ;
        dbResult = p_a * log(p_x) - p_x - dbResult ;
        *p_result = exp(dbResult) ;
        return 0 ;
    }

    double dbGstar   = 0.0 ;
    double dbLn_Term = 0.0 ;
    double dbTerm1   = 0.0 ;
    if (p_x < p_a)
    {
        double u = p_x / p_a ;
        dbLn_Term = log(u) - u + 1.0 ;
    }
    else
    {
        double mu = (p_x - p_a) / p_a ;
        gsl_sf_log_1plusx_mx_e(mu, &dbLn_Term) ;
    }

    gsl_sf_gammastar_e(p_a, &dbGstar) ;
    dbTerm1 = exp(p_a * dbLn_Term) / sqrt(2.0 * M_PI * p_a) ;
    *p_result  = dbTerm1 / dbGstar ;
    return 0 ;
}

static int gamma_inc_P_series(const double p_a, const double p_x, double* p_result)
{
    const int nmax = 5000 ;

    double dbResult = 0.0 ;
    int nResult = gamma_inc_D(p_a, p_x, &dbResult) ;
    if (nResult != 0)
    {
        return nResult ;
    }

    double sum  = 1.0 ;
    double term = 1.0 ;
    for(int n = 1; n < nmax; ++n)
    {
        term *= p_x / (p_a + n) ;
        sum  += term ;
        if (fabs(term/sum) < DBL_EPSILON)
        {
            break ;
        }
    }

    *p_result = dbResult * sum ;
    return nResult ;
}

static double erfc8_sum(double p_x)
{
    static double P[] = {
        2.97886562639399288862,
        7.409740605964741794425,
        6.1602098531096305440906,
        5.019049726784267463450058,
        1.275366644729965952479585264,
        0.5641895835477550741253201704
    };

    static double Q[] = {
        3.3690752069827527677,
        9.608965327192787870698,
        17.08144074746600431571095,
        12.0489519278551290360340491,
        9.396034016235054150430579648,
        2.260528520767326969591866945,
        1.0
    };

    double num = P[5] ;
    for (int i = 4; i >= 0; --i)
    {
        num = p_x * num + P[i] ;
    }

    double den = Q[6] ;
    for (i = 5; i >= 0; --i)
    {
        den = p_x * den + Q[i] ;
    }

    return (num / den) ;
}

static double erfc8(double p_x)
{
    double e ;
    e = erfc8_sum(p_x) ;
    e *= exp(-p_x * p_x) ;
    return e ;
}

static int gsl_sf_erfc_e(double p_x, double* p_result)
{
    const double ax = fabs(p_x) ;
    double e_val ;
    if (ax <= 1.0)
    {
        double t = 2.0 * ax - 1.0 ;
        double c ;
        cheb_eval_e(&erfc_xlt1_cs, t, &c) ;
        e_val = c ;
    }
    else if (ax <= 5.0)
    {
        double ex2 = exp(-p_x * p_x);
        double t = 0.5 * (ax - 3.0) ;
        double c ;
        cheb_eval_e(&erfc_x15_cs, t, &c) ;
        e_val = ex2 * c ;
    }
    else if (ax < 10.0)
    {
        double exterm = exp(-p_x * p_x) / ax ;
        double t = (2.0 * ax - 15.0) / 5.0 ;
        double c ;
        cheb_eval_e(&erfc_x510_cs, t, &c) ;
        e_val = exterm * c ;
    }
    else
    {
        e_val = erfc8(ax) ;
    }

    if (p_x < 0.0)
    {
        *p_result = 2.0 - e_val ;
    }
    else
    {
        *p_result = e_val ;
    }

    return 0 ;
}

static int gamma_inc_Q_asymp_unif(const double p_a, const double p_x, double* p_result)
{
    const double rta = sqrt(p_a) ;
    const double eps = (p_x - p_a) / p_a ;

    double ln_term ;
    int nResult = gsl_sf_log_1plusx_mx_e(eps, &ln_term);  /* log(1+eps) - eps */
    if (nResult != 0)
    {
        return nResult ;
    }

    const double eta = eps * sqrt(-2.0 * ln_term / (eps * eps)) ;

    double erfc ;
    gsl_sf_erfc_e(eta * M_SQRT2 * rta, &erfc) ;

    double c0, c1 ;
    if (fabs(eps) < PRBX_ROOT5_DBL_EPSILON)
    {
        c0 = -1.0 / 3.0 + eps * (1.0 / 12.0 - eps * (23.0 / 540.0 - eps * (353.0 / 12960.0 - eps * 589.0 / 30240.0))) ;
        c1 = 0.0 ;
    }
    else
    {
        double rt_term ;
        rt_term = sqrt(-2.0 * ln_term / (eps * eps)) ;
        c0 = (1.0 - 1.0 / rt_term) / eps ;
        c1 = 0.0 ;
    }

    double R = exp(-0.5 * p_a * eta * eta) / (M_SQRT2 * M_SQRTPI * rta) * (c0 + c1 / p_a) ;

    *p_result = 0.5 * erfc + R ;

    return 0 ;
}

static int gamma_inc_Q_series(const double p_a, const double p_x, double* p_result)
{
    const double pg21 = -2.404113806319188570799476;  /* PolyGamma[2,1] */
    const double lnx  = log(p_x) ;
    const double el   = M_EULER + lnx ;
    const double c1   = -el ;
    const double c2   = M_PI * M_PI / 12.0 - 0.5 * el * el ;
    const double c3   = el * (M_PI * M_PI / 12.0 - el * el / 6.0) + pg21 / 6.0 ;
    const double c4   = -0.04166666666666666667
                        * (-1.758243446661483480 + lnx)
                        * (-0.764428657272716373 + lnx)
                        * ( 0.723980571623507657 + lnx)
                        * ( 4.107554191916823640 + lnx) ;
    const double c5   = -0.0083333333333333333
                        * (-2.06563396085715900 + lnx)
                        * (-1.28459889470864700 + lnx)
                        * (-0.27583535756454143 + lnx)
                        * ( 1.33677371336239618 + lnx)
                        * ( 5.17537282427561550 + lnx) ;
    const double c6   = -0.0013888888888888889
                        * (-2.30814336454783200 + lnx)
                        * (-1.65846557706987300 + lnx)
                        * (-0.88768082560020400 + lnx)
                        * ( 0.17043847751371778 + lnx)
                        * ( 1.92135970115863890 + lnx)
                        * ( 6.22578557795474900 + lnx) ;
    const double c7   = -0.00019841269841269841
                        * (-2.5078657901291800 + lnx)
                        * (-1.9478900888958200 + lnx)
                        * (-1.3194837322612730 + lnx)
                        * (-0.5281322700249279 + lnx)
                        * ( 0.5913834939078759 + lnx)
                        * ( 2.4876819633378140 + lnx)
                        * ( 7.2648160783762400 + lnx) ;
    const double c8   = -0.00002480158730158730
                        * (-2.677341544966400 + lnx)
                        * (-2.182810448271700 + lnx)
                        * (-1.649350342277400 + lnx)
                        * (-1.014099048290790 + lnx)
                        * (-0.191366955370652 + lnx)
                        * ( 0.995403817918724 + lnx)
                        * ( 3.041323283529310 + lnx)
                        * ( 8.295966556941250 + lnx) ;
    const double c9   = -2.75573192239859e-6
                        * (-2.8243487670469080 + lnx)
                        * (-2.3798494322701120 + lnx)
                        * (-1.9143674728689960 + lnx)
                        * (-1.3814529102920370 + lnx)
                        * (-0.7294312810261694 + lnx)
                        * ( 0.1299079285269565 + lnx)
                        * ( 1.3873333251885240 + lnx)
                        * ( 3.5857258865210760 + lnx)
                        * ( 9.3214237073814600 + lnx) ;
    const double c10  = -2.75573192239859e-7
                        * (-2.9540329644556910 + lnx)
                        * (-2.5491366926991850 + lnx)
                        * (-2.1348279229279880 + lnx)
                        * (-1.6741881076349450 + lnx)
                        * (-1.1325949616098420 + lnx)
                        * (-0.4590034650618494 + lnx)
                        * ( 0.4399352987435699 + lnx)
                        * ( 1.7702236517651670 + lnx)
                        * ( 4.1231539047474080 + lnx)
                        * ( 10.342627908148680 + lnx) ;

    double term1 = p_a * (c1 + p_a * (c2 + p_a * (c3 + p_a * (c4 + p_a * (c5 + p_a * (c6 + 
                        p_a * (c7 + p_a * (c8 + p_a * (c9 + p_a * c10))))))))) ;

    const int nmax = 5000 ;
    double t = 1.0 ;
    double sum = 1.0 ;

    for (int n = 1; n < nmax; ++n)
    {
        t   *= -p_x / (n + 1.0) ;
        sum += (p_a + 1.0) / (p_a + n + 1.0) * t ;
        if(fabs(t / sum) < DBL_EPSILON)
        {
            break ;
        }
    }

    if(n == nmax)
    {
        return 1 ;
    }

    double term2 = (1.0 - term1) * p_a / (p_a + 1.0) * p_x * sum ;
    *p_result  = term1 + term2 ;
    return 0 ;
}

static double gsl_pow_3(const double p_x) 
{ 
    return p_x * p_x * p_x ; 
}

static int gamma_inc_F_CF(const double p_a, const double p_x, double* p_result)
{
    const int    nmax  = 5000 ;
    const double small = gsl_pow_3(DBL_EPSILON) ;

    double hn = 1.0 ;
    double Cn = 1.0 / small ;
    double Dn = 1.0 ;

    for (int n = 2 ; n < nmax ; ++n)
    {
        double an ;
        double delta ;

        if (PRBX_IS_ODD(n))
        {
            an = 0.5 * (n - 1) / p_x ;
        }
        else
        {
            an = (0.5 * n - p_a) / p_x ;
        }

        Dn = 1.0 + an * Dn ;
        if (fabs(Dn) < small)
        {
            Dn = small ;
        }

        Cn = 1.0 + an / Cn ;
        if (fabs(Cn) < small)
        {
            Cn = small ;
        }

        Dn = 1.0 / Dn ;
        delta = Cn * Dn ;
        hn *= delta ;
        if (fabs(delta - 1.0) < DBL_EPSILON)
        {
            break ;
        }
    }

    if (n == nmax)
    {
        return 1 ;
    }

    *p_result = hn ;

    return 0 ;
}

static int gamma_inc_Q_CF(const double p_a, const double p_x, double* p_result)
{
    double D ;
    double F ;
    int nResult = gamma_inc_D(p_a, p_x, &D) ;
    if (nResult != 0)
    {
        return nResult ;
    }

    nResult = gamma_inc_F_CF(p_a, p_x, &F) ;
    if (nResult != 0)
    {
        return nResult ;
    }

    *p_result = D * (p_a / p_x) * F ;

    return 0 ;
}

static int gamma_inc_Q_large_x(const double p_a, const double p_x, double* p_result)
{
    const int nmax = 5000 ;

    double D ;
    int nResult = gamma_inc_D(p_a, p_x, &D) ;
    if (nResult != 0)
    {
        return nResult ;
    }

    double sum  = 1.0 ;
    double term = 1.0 ;
    double last = 1.0 ;
    for(int n = 1; n < nmax; ++n)
    {
        term *= (p_a - n) / p_x ;
        if(fabs(term / last) > 1.0)
        {
            break ;
        }

        if(fabs(term / sum) < DBL_EPSILON)
        {
            break ;
        }

        sum  += term ;
        last  = term;
    }

    if (n == nmax)
    {
        return 1 ;
    }

    *p_result = D * (p_a / p_x) * sum ;

    return 0 ;
}

static int gsl_sf_gamma_inc_Q_e(const double p_a, const double p_x, double* p_result)
{
    if(p_a < 0.0 || p_x < 0.0)
    {
        return 1 ;
    }

    if (p_x == 0.0)
    {
        *p_result = 1.0 ;
        return 0 ;
    }

    if (p_a == 0.0)
    {
        *p_result = 0.0 ;
        return 0 ;
    }

    if (p_x <= (0.5 * p_a))
    {
        int nResult = gamma_inc_P_series(p_a, p_x, p_result) ;
        if (nResult == 0)
        {
            *p_result = 1.0 - *p_result ;
        }

        return  nResult ;
    }

    if (p_a >= 1.0e+06 && ((p_x - p_a) * (p_x - p_a)) < p_a)
    {
        return gamma_inc_Q_asymp_unif(p_a, p_x, p_result) ;
    }

    if (p_a < 0.2 && p_x < 5.0)
    {
        return gamma_inc_Q_series(p_a, p_x, p_result) ;
    }

    if (p_a <= p_x)
    {
        if (p_x <= 1.0e+06)
        {
            return gamma_inc_Q_CF(p_a, p_x, p_result) ;
        }
        else
        {
            return gamma_inc_Q_large_x(p_a, p_x, p_result);
        }
    }

    if (p_a < (0.8 * p_x))
    {
        return gamma_inc_Q_CF(p_a, p_x, p_result) ;
    }

    int nResult = gamma_inc_P_series(p_a, p_x, p_result) ;
    if (nResult == 0)
    {
        *p_result = 1.0 - *p_result ;
    }

    return  nResult ;
}

static double gsl_sf_gamma_inc_Q(const double p_a, const double p_x)
{
    double dbResult = 0.0 ;
    return gsl_sf_gamma_inc_Q_e(p_a, p_x, &dbResult) == 0 ? dbResult : 0.0 ;
}

static double gsl_cdf_gamma_Q(const double p_x, const double p_a, const double p_b)
{
    double P ;
    double y = p_x / p_b ;

    if (p_x <= 0.0)
    {
        return 1.0 ;
    }

    P = gsl_sf_gamma_inc_Q(p_a, y) ;

    return P ;
}

static double gsl_cdf_chisq_Q(const double p_x, const double p_nu)
{
    return gsl_cdf_gamma_Q(p_x, p_nu / 2, 2.0) ;
}

double prbx(double p_x, double p_df)
{
    double dbResult = gsl_cdf_chisq_Q(p_x, p_df) ;
    return (dbResult < DBL_EPSILON) ? 0.0 : dbResult ;
}