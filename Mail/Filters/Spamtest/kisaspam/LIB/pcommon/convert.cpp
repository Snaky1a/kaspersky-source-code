#include "StdPch.h"
#include <string.h>
#include <ctype.h>
#include <limits.h>

#ifndef UNICODE_SUPPORT
#define UNICODE_SUPPORT
#endif
#include <_include/CodePages.h>

static unsigned char DefTable[] = {
0x00, 0x01, 0x02, 0x03, 0x04, 0x05, 0x06, 0x07, 0x08, 0x09, 0x0a, 0x0b, 0x0c, 0x0d, 0x0e, 0x0f, 
0x10, 0x11, 0x12, 0x13, 0x14, 0x15, 0x16, 0x17, 0x18, 0x19, 0x1a, 0x1b, 0x1c, 0x1d, 0x1e, 0x1f, 
0x20, 0x21, 0x22, 0x23, 0x24, 0x25, 0x26, 0x27, 0x28, 0x29, 0x2a, 0x2b, 0x2c, 0x2d, 0x2e, 0x2f, 
0x30, 0x31, 0x32, 0x33, 0x34, 0x35, 0x36, 0x37, 0x38, 0x39, 0x3a, 0x3b, 0x3c, 0x3d, 0x3e, 0x3f, 
0x40, 0x41, 0x42, 0x43, 0x44, 0x45, 0x46, 0x47, 0x48, 0x49, 0x4a, 0x4b, 0x4c, 0x4d, 0x4e, 0x4f, 
0x50, 0x51, 0x52, 0x53, 0x54, 0x55, 0x56, 0x57, 0x58, 0x59, 0x5a, 0x5b, 0x5c, 0x5d, 0x5e, 0x5f, 
0x60, 0x61, 0x62, 0x63, 0x64, 0x65, 0x66, 0x67, 0x68, 0x69, 0x6a, 0x6b, 0x6c, 0x6d, 0x6e, 0x6f, 
0x70, 0x71, 0x72, 0x73, 0x74, 0x75, 0x76, 0x77, 0x78, 0x79, 0x7a, 0x7b, 0x7c, 0x7d, 0x7e, 0x7f, 
0x80, 0x81, 0x82, 0x83, 0x84, 0x85, 0x86, 0x87, 0x88, 0x89, 0x8a, 0x8b, 0x8c, 0x8d, 0x8e, 0x8f, 
0x90, 0x91, 0x92, 0x93, 0x94, 0x95, 0x96, 0x97, 0x98, 0x99, 0x9a, 0x9b, 0x9c, 0x9d, 0x9e, 0x9f, 
0xa0, 0xa1, 0xa2, 0xa3, 0xa4, 0xa5, 0xa6, 0xa7, 0xa8, 0xa9, 0xaa, 0xab, 0xac, 0xad, 0xae, 0xaf, 
0xb0, 0xb1, 0xb2, 0xb3, 0xb4, 0xb5, 0xb6, 0xb7, 0xb8, 0xb9, 0xba, 0xbb, 0xbc, 0xbd, 0xbe, 0xbf, 
0xc0, 0xc1, 0xc2, 0xc3, 0xc4, 0xc5, 0xc6, 0xc7, 0xc8, 0xc9, 0xca, 0xcb, 0xcc, 0xcd, 0xce, 0xcf, 
0xd0, 0xd1, 0xd2, 0xd3, 0xd4, 0xd5, 0xd6, 0xd7, 0xd8, 0xd9, 0xda, 0xdb, 0xdc, 0xdd, 0xde, 0xdf, 
0xe0, 0xe1, 0xe2, 0xe3, 0xe4, 0xe5, 0xe6, 0xe7, 0xe8, 0xe9, 0xea, 0xeb, 0xec, 0xed, 0xee, 0xef, 
0xf0, 0xf1, 0xf2, 0xf3, 0xf4, 0xf5, 0xf6, 0xf7, 0xf8, 0xf9, 0xfa, 0xfb, 0xfc, 0xfd, 0xfe, 0xff}; 

static unsigned char KOItoWIN[] = {
0x00, 0x01, 0x02, 0x03, 0x04, 0x05, 0x06, 0x07, 0x08, 0x09, 0x0a, 0x0b, 0x0c, 0x0d, 0x0e, 0x0f, 
0x10, 0x11, 0x12, 0x13, 0x14, 0x15, 0x16, 0x17, 0x18, 0x19, 0x1a, 0x1b, 0x1c, 0x1d, 0x1e, 0x1f, 
0x20, 0x21, 0x22, 0x23, 0x24, 0x25, 0x26, 0x27, 0x28, 0x29, 0x2a, 0x2b, 0x2c, 0x2d, 0x2e, 0x2f, 
0x30, 0x31, 0x32, 0x33, 0x34, 0x35, 0x36, 0x37, 0x38, 0x39, 0x3a, 0x3b, 0x3c, 0x3d, 0x3e, 0x3f, 
0x40, 0x41, 0x42, 0x43, 0x44, 0x45, 0x46, 0x47, 0x48, 0x49, 0x4a, 0x4b, 0x4c, 0x4d, 0x4e, 0x4f, 
0x50, 0x51, 0x52, 0x53, 0x54, 0x55, 0x56, 0x57, 0x58, 0x59, 0x5a, 0x5b, 0x5c, 0x5d, 0x5e, 0x5f, 
0x60, 0x61, 0x62, 0x63, 0x64, 0x65, 0x66, 0x67, 0x68, 0x69, 0x6a, 0x6b, 0x6c, 0x6d, 0x6e, 0x6f, 
0x70, 0x71, 0x72, 0x73, 0x74, 0x75, 0x76, 0x77, 0x78, 0x79, 0x7a, 0x7b, 0x7c, 0x7d, 0x7e, 0x7f, 
0x2d, 0xa6, 0x2d, 0xac, 0x4c, 0x2d, 0x2b, 0x2b, 0x54, 0x2b, 0x2b, 0x2d, 0x2d, 0x2d, 0xa6, 0xa6, 
0x2d, 0x2d, 0x2d, 0x3f, 0xa6, 0x95, 0x76, 0x3f, 0x3f, 0x3f, 0xa0, 0x3f, 0xb0, 0x3f, 0xb7, 0x3f, 
0x3d, 0xa6, 0x2d, 0xb8, 0xe3, 0xe3, 0xac, 0xac, 0xac, 0x4c, 0x4c, 0x4c, 0x2d, 0x2d, 0x2d, 0xa6, 
0xa6, 0xa6, 0xa6, 0xa8, 0xa6, 0xa6, 0x54, 0x54, 0x54, 0xa6, 0xa6, 0xa6, 0x2b, 0x2b, 0x2b, 0xa9, 
0xfe, 0xe0, 0xe1, 0xf6, 0xe4, 0xe5, 0xf4, 0xe3, 0xf5, 0xe8, 0xe9, 0xea, 0xeb, 0xec, 0xed, 0xee, 
0xef, 0xff, 0xf0, 0xf1, 0xf2, 0xf3, 0xe6, 0xe2, 0xfc, 0xfb, 0xe7, 0xf8, 0xfd, 0xf9, 0xf7, 0xfa, 
0xde, 0xc0, 0xc1, 0xd6, 0xc4, 0xc5, 0xd4, 0xc3, 0xd5, 0xc8, 0xc9, 0xca, 0xcb, 0xcc, 0xcd, 0xce, 
0xcf, 0xdf, 0xd0, 0xd1, 0xd2, 0xd3, 0xc6, 0xc2, 0xdc, 0xdb, 0xc7, 0xd8, 0xdd, 0xd9, 0xd7, 0xda}; 

static unsigned char WINtoKOI[] = {
0x00, 0x01, 0x02, 0x03, 0x04, 0x05, 0x06, 0x07, 0x08, 0x09, 0x0a, 0x0b, 0x0c, 0x0d, 0x0e, 0x0f, 
0x10, 0x11, 0x12, 0x13, 0x14, 0x15, 0x16, 0x17, 0x18, 0x19, 0x1a, 0x1b, 0x1c, 0x1d, 0x1e, 0x1f, 
0x20, 0x21, 0x22, 0x23, 0x24, 0x25, 0x26, 0x27, 0x28, 0x29, 0x2a, 0x2b, 0x2c, 0x2d, 0x2e, 0x2f, 
0x30, 0x31, 0x32, 0x33, 0x34, 0x35, 0x36, 0x37, 0x38, 0x39, 0x3a, 0x3b, 0x3c, 0x3d, 0x3e, 0x3f, 
0x40, 0x41, 0x42, 0x43, 0x44, 0x45, 0x46, 0x47, 0x48, 0x49, 0x4a, 0x4b, 0x4c, 0x4d, 0x4e, 0x4f, 
0x50, 0x51, 0x52, 0x53, 0x54, 0x55, 0x56, 0x57, 0x58, 0x59, 0x5a, 0x5b, 0x5c, 0x5d, 0x5e, 0x5f, 
0x60, 0x61, 0x62, 0x63, 0x64, 0x65, 0x66, 0x67, 0x68, 0x69, 0x6a, 0x6b, 0x6c, 0x6d, 0x6e, 0x6f, 
0x70, 0x71, 0x72, 0x73, 0x74, 0x75, 0x76, 0x77, 0x78, 0x79, 0x7a, 0x7b, 0x7c, 0x7d, 0x7e, 0x7f, 
0x3f, 0x3f, 0x27, 0x3f, 0x22, 0x3a, 0x8a, 0xbc, 0x3f, 0x25, 0x3f, 0x22, 0x3f, 0x3f, 0x3f, 0x3f, 
0x3f, 0x27, 0x27, 0x22, 0x22, 0x07, 0x2d, 0x2d, 0x3f, 0x54, 0x3f, 0x22, 0x3f, 0x3f, 0x3f, 0x3f, 
0x9a, 0x3f, 0x3f, 0x3f, 0x2a, 0x3f, 0x81, 0x15, 0xb3, 0xbf, 0x3f, 0x22, 0x83, 0x2d, 0x52, 0x3f, 
0x9c, 0x2b, 0x3f, 0x3f, 0x3f, 0xde, 0x14, 0x9e, 0xa3, 0x23, 0x3f, 0x22, 0x3f, 0x3f, 0x3f, 0x3f, 
0xe1, 0xe2, 0xf7, 0xe7, 0xe4, 0xe5, 0xf6, 0xfa, 0xe9, 0xea, 0xeb, 0xec, 0xed, 0xee, 0xef, 0xf0, 
0xf2, 0xf3, 0xf4, 0xf5, 0xe6, 0xe8, 0xe3, 0xfe, 0xfb, 0xfd, 0xff, 0xf9, 0xf8, 0xfc, 0xe0, 0xf1, 
0xc1, 0xc2, 0xd7, 0xc7, 0xc4, 0xc5, 0xd6, 0xda, 0xc9, 0xca, 0xcb, 0xcc, 0xcd, 0xce, 0xcf, 0xd0, 
0xd2, 0xd3, 0xd4, 0xd5, 0xc6, 0xc8, 0xc3, 0xde, 0xdb, 0xdd, 0xdf, 0xd9, 0xd8, 0xdc, 0xc0, 0xd1}; 

static unsigned char DOStoWIN[] = {
0x00, 0x01, 0x02, 0x03, 0x04, 0x05, 0x06, 0x07, 0x08, 0x09, 0x0a, 0x0b, 0x0c, 0x0d, 0x0e, 0x0f, 
0x10, 0x11, 0x12, 0x13, 0x14, 0x15, 0x16, 0x17, 0x18, 0x19, 0x1a, 0x1b, 0x1c, 0x1d, 0x1e, 0x1f, 
0x20, 0x21, 0x22, 0x23, 0x24, 0x25, 0x26, 0x27, 0x28, 0x29, 0x2a, 0x2b, 0x2c, 0x2d, 0x2e, 0x2f, 
0x30, 0x31, 0x32, 0x33, 0x34, 0x35, 0x36, 0x37, 0x38, 0x39, 0x3a, 0x3b, 0x3c, 0x3d, 0x3e, 0x3f, 
0x40, 0x41, 0x42, 0x43, 0x44, 0x45, 0x46, 0x47, 0x48, 0x49, 0x4a, 0x4b, 0x4c, 0x4d, 0x4e, 0x4f, 
0x50, 0x51, 0x52, 0x53, 0x54, 0x55, 0x56, 0x57, 0x58, 0x59, 0x5a, 0x5b, 0x5c, 0x5d, 0x5e, 0x5f, 
0x60, 0x61, 0x62, 0x63, 0x64, 0x65, 0x66, 0x67, 0x68, 0x69, 0x6a, 0x6b, 0x6c, 0x6d, 0x6e, 0x6f, 
0x70, 0x71, 0x72, 0x73, 0x74, 0x75, 0x76, 0x77, 0x78, 0x79, 0x7a, 0x7b, 0x7c, 0x7d, 0x7e, 0x7f, 
0xc0, 0xc1, 0xc2, 0xc3, 0xc4, 0xc5, 0xc6, 0xc7, 0xc8, 0xc9, 0xca, 0xcb, 0xcc, 0xcd, 0xce, 0xcf, 
0xd0, 0xd1, 0xd2, 0xd3, 0xd4, 0xd5, 0xd6, 0xd7, 0xd8, 0xd9, 0xda, 0xdb, 0xdc, 0xdd, 0xde, 0xdf, 
0xe0, 0xe1, 0xe2, 0xe3, 0xe4, 0xe5, 0xe6, 0xe7, 0xe8, 0xe9, 0xea, 0xeb, 0xec, 0xed, 0xee, 0xef, 
0x2d, 0x2d, 0x2d, 0xa6, 0x2b, 0xa6, 0xa6, 0xac, 0xac, 0xa6, 0xa6, 0xac, 0x2d, 0x2d, 0x2d, 0xac, 
0x4c, 0x2b, 0x54, 0x2b, 0x2d, 0x2b, 0xa6, 0xa6, 0x4c, 0xe3, 0xa6, 0x54, 0xa6, 0x3d, 0x2b, 0xa6, 
0xa6, 0x54, 0x54, 0x4c, 0x4c, 0x2d, 0xe3, 0x2b, 0x2b, 0x2d, 0x2d, 0x2d, 0x2d, 0xa6, 0xa6, 0x2d, 
0xf0, 0xf1, 0xf2, 0xf3, 0xf4, 0xf5, 0xf6, 0xf7, 0xf8, 0xf9, 0xfa, 0xfb, 0xfc, 0xfd, 0xfe, 0xff, 
0xa8, 0xb8, 0xaa, 0xba, 0xaf, 0xbf, 0xa1, 0xa2, 0xb0, 0x95, 0xb7, 0x76, 0xb9, 0xa4, 0xa6, 0xa0}; 

static unsigned char WINtoDOS[] = {
0x00, 0x01, 0x02, 0x03, 0x04, 0x05, 0x06, 0x07, 0x08, 0x09, 0x0a, 0x0b, 0x0c, 0x0d, 0x0e, 0x0f, 
0x10, 0x11, 0x12, 0x13, 0x14, 0x15, 0x16, 0x17, 0x18, 0x19, 0x1a, 0x1b, 0x1c, 0x1d, 0x1e, 0x1f, 
0x20, 0x21, 0x22, 0x23, 0x24, 0x25, 0x26, 0x27, 0x28, 0x29, 0x2a, 0x2b, 0x2c, 0x2d, 0x2e, 0x2f, 
0x30, 0x31, 0x32, 0x33, 0x34, 0x35, 0x36, 0x37, 0x38, 0x39, 0x3a, 0x3b, 0x3c, 0x3d, 0x3e, 0x3f, 
0x40, 0x41, 0x42, 0x43, 0x44, 0x45, 0x46, 0x47, 0x48, 0x49, 0x4a, 0x4b, 0x4c, 0x4d, 0x4e, 0x4f, 
0x50, 0x51, 0x52, 0x53, 0x54, 0x55, 0x56, 0x57, 0x58, 0x59, 0x5a, 0x5b, 0x5c, 0x5d, 0x5e, 0x5f, 
0x60, 0x61, 0x62, 0x63, 0x64, 0x65, 0x66, 0x67, 0x68, 0x69, 0x6a, 0x6b, 0x6c, 0x6d, 0x6e, 0x6f, 
0x70, 0x71, 0x72, 0x73, 0x74, 0x75, 0x76, 0x77, 0x78, 0x79, 0x7a, 0x7b, 0x7c, 0x7d, 0x7e, 0x7f, 
0x3f, 0x3f, 0x27, 0x3f, 0x22, 0x3a, 0xc5, 0xd8, 0x3f, 0x25, 0x3f, 0x22, 0x3f, 0x3f, 0x3f, 0x3f, 
0x3f, 0x27, 0x27, 0x22, 0x22, 0x07, 0x2d, 0x2d, 0x3f, 0x54, 0x3f, 0x22, 0x3f, 0x3f, 0x3f, 0x3f, 
0xff, 0xf6, 0xf7, 0x3f, 0xfd, 0x3f, 0xb3, 0x15, 0xf0, 0x63, 0xf2, 0x22, 0xbf, 0x2d, 0x52, 0xf4, 
0xf8, 0x2b, 0x3f, 0x3f, 0x3f, 0xe7, 0x14, 0xfa, 0xf1, 0xfc, 0xf3, 0x22, 0x3f, 0x3f, 0x3f, 0xf5, 
0x80, 0x81, 0x82, 0x83, 0x84, 0x85, 0x86, 0x87, 0x88, 0x89, 0x8a, 0x8b, 0x8c, 0x8d, 0x8e, 0x8f, 
0x90, 0x91, 0x92, 0x93, 0x94, 0x95, 0x96, 0x97, 0x98, 0x99, 0x9a, 0x9b, 0x9c, 0x9d, 0x9e, 0x9f, 
0xa0, 0xa1, 0xa2, 0xa3, 0xa4, 0xa5, 0xa6, 0xa7, 0xa8, 0xa9, 0xaa, 0xab, 0xac, 0xad, 0xae, 0xaf, 
0xe0, 0xe1, 0xe2, 0xe3, 0xe4, 0xe5, 0xe6, 0xe7, 0xe8, 0xe9, 0xea, 0xeb, 0xec, 0xed, 0xee, 0xef}; 

static unsigned char MACtoWIN[] = {
0x00, 0x01, 0x02, 0x03, 0x04, 0x05, 0x06, 0x07, 0x08, 0x09, 0x0a, 0x0b, 0x0c, 0x0d, 0x0e, 0x0f, 
0x10, 0x11, 0x12, 0x13, 0x14, 0x15, 0x16, 0x17, 0x18, 0x19, 0x1a, 0x1b, 0x1c, 0x1d, 0x1e, 0x1f, 
0x20, 0x21, 0x22, 0x23, 0x24, 0x25, 0x26, 0x27, 0x28, 0x29, 0x2a, 0x2b, 0x2c, 0x2d, 0x2e, 0x2f, 
0x30, 0x31, 0x32, 0x33, 0x34, 0x35, 0x36, 0x37, 0x38, 0x39, 0x3a, 0x3b, 0x3c, 0x3d, 0x3e, 0x3f, 
0x40, 0x41, 0x42, 0x43, 0x44, 0x45, 0x46, 0x47, 0x48, 0x49, 0x4a, 0x4b, 0x4c, 0x4d, 0x4e, 0x4f, 
0x50, 0x51, 0x52, 0x53, 0x54, 0x55, 0x56, 0x57, 0x58, 0x59, 0x5a, 0x5b, 0x5c, 0x5d, 0x5e, 0x5f, 
0x60, 0x61, 0x62, 0x63, 0x64, 0x65, 0x66, 0x67, 0x68, 0x69, 0x6a, 0x6b, 0x6c, 0x6d, 0x6e, 0x6f, 
0x70, 0x71, 0x72, 0x73, 0x74, 0x75, 0x76, 0x77, 0x78, 0x79, 0x7a, 0x7b, 0x7c, 0x7d, 0x7e, 0x7f, 
0xc0, 0xc1, 0xc2, 0xc3, 0xc4, 0xc5, 0xc6, 0xc7, 0xc8, 0xc9, 0xca, 0xcb, 0xcc, 0xcd, 0xce, 0xcf, 
0xd0, 0xd1, 0xd2, 0xd3, 0xd4, 0xd5, 0xd6, 0xd7, 0xd8, 0xd9, 0xda, 0xdb, 0xdc, 0xdd, 0xde, 0xdf, 
0x86, 0xb0, 0x3f, 0x4c, 0xa7, 0x95, 0xb6, 0xb2, 0xae, 0xa9, 0x99, 0x80, 0x90, 0x3f, 0x81, 0x83, 
0x3f, 0xb1, 0x3f, 0x3f, 0xb3, 0xb5, 0x3f, 0xa3, 0xaa, 0xba, 0xaf, 0xbf, 0x8a, 0x9a, 0x8c, 0x9c, 
0xbc, 0xbd, 0xac, 0x76, 0x3f, 0x3f, 0x3f, 0xab, 0xbb, 0x85, 0xa0, 0x8e, 0x9e, 0x8d, 0x9d, 0xbe, 
0x96, 0x97, 0x93, 0x94, 0x91, 0x92, 0x3f, 0x84, 0xa1, 0xa2, 0x8f, 0x9f, 0xb9, 0xa8, 0xb8, 0xff, 
0xe0, 0xe1, 0xe2, 0xe3, 0xe4, 0xe5, 0xe6, 0xe7, 0xe8, 0xe9, 0xea, 0xeb, 0xec, 0xed, 0xee, 0xef, 
0xf0, 0xf1, 0xf2, 0xf3, 0xf4, 0xf5, 0xf6, 0xf7, 0xf8, 0xf9, 0xfa, 0xfb, 0xfc, 0xfd, 0xfe, 0xa4}; 

static unsigned char WINtoMAC[] = {
0x00, 0x01, 0x02, 0x03, 0x04, 0x05, 0x06, 0x07, 0x08, 0x09, 0x0a, 0x0b, 0x0c, 0x0d, 0x0e, 0x0f, 
0x10, 0x11, 0x12, 0x13, 0x14, 0x15, 0x16, 0x17, 0x18, 0x19, 0x1a, 0x1b, 0x1c, 0x1d, 0x1e, 0x1f, 
0x20, 0x21, 0x22, 0x23, 0x24, 0x25, 0x26, 0x27, 0x28, 0x29, 0x2a, 0x2b, 0x2c, 0x2d, 0x2e, 0x2f, 
0x30, 0x31, 0x32, 0x33, 0x34, 0x35, 0x36, 0x37, 0x38, 0x39, 0x3a, 0x3b, 0x3c, 0x3d, 0x3e, 0x3f, 
0x40, 0x41, 0x42, 0x43, 0x44, 0x45, 0x46, 0x47, 0x48, 0x49, 0x4a, 0x4b, 0x4c, 0x4d, 0x4e, 0x4f, 
0x50, 0x51, 0x52, 0x53, 0x54, 0x55, 0x56, 0x57, 0x58, 0x59, 0x5a, 0x5b, 0x5c, 0x5d, 0x5e, 0x5f, 
0x60, 0x61, 0x62, 0x63, 0x64, 0x65, 0x66, 0x67, 0x68, 0x69, 0x6a, 0x6b, 0x6c, 0x6d, 0x6e, 0x6f, 
0x70, 0x71, 0x72, 0x73, 0x74, 0x75, 0x76, 0x77, 0x78, 0x79, 0x7a, 0x7b, 0x7c, 0x7d, 0x7e, 0x7f, 
0xab, 0xae, 0x2c, 0xaf, 0xd7, 0xc9, 0xa0, 0x3f, 0x3f, 0x25, 0xbc, 0x22, 0xbe, 0xcd, 0xcb, 0xda, 
0xac, 0xd4, 0xd5, 0xd2, 0xd3, 0xa5, 0xd0, 0xd1, 0x3f, 0xaa, 0xbd, 0x22, 0xbf, 0xce, 0xcc, 0xdb, 
0xca, 0xd8, 0xd9, 0xb7, 0xff, 0x3f, 0x7c, 0xa4, 0xdd, 0xa9, 0xb8, 0xc7, 0xc2, 0x2d, 0xa8, 0xba, 
0xa1, 0xb1, 0xa7, 0xb4, 0x3f, 0xb5, 0xa6, 0x2e, 0xde, 0xdc, 0xb9, 0xc8, 0xc0, 0xc1, 0xcf, 0xbb, 
0x80, 0x81, 0x82, 0x83, 0x84, 0x85, 0x86, 0x87, 0x88, 0x89, 0x8a, 0x8b, 0x8c, 0x8d, 0x8e, 0x8f, 
0x90, 0x91, 0x92, 0x93, 0x94, 0x95, 0x96, 0x97, 0x98, 0x99, 0x9a, 0x9b, 0x9c, 0x9d, 0x9e, 0x9f, 
0xe0, 0xe1, 0xe2, 0xe3, 0xe4, 0xe5, 0xe6, 0xe7, 0xe8, 0xe9, 0xea, 0xeb, 0xec, 0xed, 0xee, 0xef, 
0xf0, 0xf1, 0xf2, 0xf3, 0xf4, 0xf5, 0xf6, 0xf7, 0xf8, 0xf9, 0xfa, 0xfb, 0xfc, 0xfd, 0xfe, 0xdf}; 

static unsigned char ISOtoWIN[] = {
0x00, 0x01, 0x02, 0x03, 0x04, 0x05, 0x06, 0x07, 0x08, 0x09, 0x0a, 0x0b, 0x0c, 0x0d, 0x0e, 0x0f, 
0x10, 0x11, 0x12, 0x13, 0x14, 0x15, 0x16, 0x17, 0x18, 0x19, 0x1a, 0x1b, 0x1c, 0x1d, 0x1e, 0x1f, 
0x20, 0x21, 0x22, 0x23, 0x24, 0x25, 0x26, 0x27, 0x28, 0x29, 0x2a, 0x2b, 0x2c, 0x2d, 0x2e, 0x2f, 
0x30, 0x31, 0x32, 0x33, 0x34, 0x35, 0x36, 0x37, 0x38, 0x39, 0x3a, 0x3b, 0x3c, 0x3d, 0x3e, 0x3f, 
0x40, 0x41, 0x42, 0x43, 0x44, 0x45, 0x46, 0x47, 0x48, 0x49, 0x4a, 0x4b, 0x4c, 0x4d, 0x4e, 0x4f, 
0x50, 0x51, 0x52, 0x53, 0x54, 0x55, 0x56, 0x57, 0x58, 0x59, 0x5a, 0x5b, 0x5c, 0x5d, 0x5e, 0x5f, 
0x60, 0x61, 0x62, 0x63, 0x64, 0x65, 0x66, 0x67, 0x68, 0x69, 0x6a, 0x6b, 0x6c, 0x6d, 0x6e, 0x6f, 
0x70, 0x71, 0x72, 0x73, 0x74, 0x75, 0x76, 0x77, 0x78, 0x79, 0x7a, 0x7b, 0x7c, 0x7d, 0x7e, 0x7f, 
0x3f, 0x3f, 0x3f, 0x3f, 0x3f, 0x3f, 0x3f, 0x3f, 0x88, 0x3f, 0x3f, 0x3f, 0x3f, 0x3f, 0x3f, 0x3f, 
0x3f, 0x3f, 0x3f, 0x3f, 0x3f, 0x3f, 0x3f, 0x3f, 0x98, 0x3f, 0x3f, 0x3f, 0x3f, 0x3f, 0x3f, 0x3f, 
0xa0, 0xa8, 0x80, 0x81, 0xaa, 0xbd, 0xb2, 0xaf, 0xa3, 0x8a, 0x8c, 0x8e, 0x8d, 0xad, 0xa1, 0x8f, 
0xc0, 0xc1, 0xc2, 0xc3, 0xc4, 0xc5, 0xc6, 0xc7, 0xc8, 0xc9, 0xca, 0xcb, 0xcc, 0xcd, 0xce, 0xcf, 
0xd0, 0xd1, 0xd2, 0xd3, 0xd4, 0xd5, 0xd6, 0xd7, 0xd8, 0xd9, 0xda, 0xdb, 0xdc, 0xdd, 0xde, 0xdf, 
0xe0, 0xe1, 0xe2, 0xe3, 0xe4, 0xe5, 0xe6, 0xe7, 0xe8, 0xe9, 0xea, 0xeb, 0xec, 0xed, 0xee, 0xef, 
0xf0, 0xf1, 0xf2, 0xf3, 0xf4, 0xf5, 0xf6, 0xf7, 0xf8, 0xf9, 0xfa, 0xfb, 0xfc, 0xfd, 0xfe, 0xff, 
0xb9, 0xb8, 0x90, 0x83, 0xba, 0xbe, 0xb3, 0xbf, 0xbc, 0x9a, 0x9c, 0x9e, 0x9d, 0xa7, 0xa2, 0x9f}; 

static unsigned char WINtoISO[] = {
0x00, 0x01, 0x02, 0x03, 0x04, 0x05, 0x06, 0x07, 0x08, 0x09, 0x0a, 0x0b, 0x0c, 0x0d, 0x0e, 0x0f, 
0x10, 0x11, 0x12, 0x13, 0x14, 0x15, 0x16, 0x17, 0x18, 0x19, 0x1a, 0x1b, 0x1c, 0x1d, 0x1e, 0x1f, 
0x20, 0x21, 0x22, 0x23, 0x24, 0x25, 0x26, 0x27, 0x28, 0x29, 0x2a, 0x2b, 0x2c, 0x2d, 0x2e, 0x2f, 
0x30, 0x31, 0x32, 0x33, 0x34, 0x35, 0x36, 0x37, 0x38, 0x39, 0x3a, 0x3b, 0x3c, 0x3d, 0x3e, 0x3f, 
0x40, 0x41, 0x42, 0x43, 0x44, 0x45, 0x46, 0x47, 0x48, 0x49, 0x4a, 0x4b, 0x4c, 0x4d, 0x4e, 0x4f, 
0x50, 0x51, 0x52, 0x53, 0x54, 0x55, 0x56, 0x57, 0x58, 0x59, 0x5a, 0x5b, 0x5c, 0x5d, 0x5e, 0x5f, 
0x60, 0x61, 0x62, 0x63, 0x64, 0x65, 0x66, 0x67, 0x68, 0x69, 0x6a, 0x6b, 0x6c, 0x6d, 0x6e, 0x6f, 
0x70, 0x71, 0x72, 0x73, 0x74, 0x75, 0x76, 0x77, 0x78, 0x79, 0x7a, 0x7b, 0x7c, 0x7d, 0x7e, 0x7f, 
0xa2, 0xa3, 0x2c, 0xf3, 0x22, 0x2e, 0x3f, 0x3f, 0x88, 0x25, 0xa9, 0x22, 0xaa, 0xac, 0xab, 0xaf, 
0xf2, 0x27, 0x27, 0x22, 0x22, 0x2e, 0x2d, 0x2d, 0x98, 0x54, 0xf9, 0x22, 0xfa, 0xfc, 0xfb, 0xff, 
0xa0, 0xae, 0xfe, 0xa8, 0x24, 0x3f, 0x7c, 0xfd, 0xa1, 0x43, 0xa4, 0x22, 0x5e, 0xad, 0x52, 0xa7, 
0x3f, 0x3f, 0xa6, 0xf6, 0x3f, 0x3f, 0x3f, 0x2e, 0xf1, 0xf0, 0xf4, 0x22, 0xf8, 0xa5, 0xf5, 0xf7, 
0xb0, 0xb1, 0xb2, 0xb3, 0xb4, 0xb5, 0xb6, 0xb7, 0xb8, 0xb9, 0xba, 0xbb, 0xbc, 0xbd, 0xbe, 0xbf, 
0xc0, 0xc1, 0xc2, 0xc3, 0xc4, 0xc5, 0xc6, 0xc7, 0xc8, 0xc9, 0xca, 0xcb, 0xcc, 0xcd, 0xce, 0xcf, 
0xd0, 0xd1, 0xd2, 0xd3, 0xd4, 0xd5, 0xd6, 0xd7, 0xd8, 0xd9, 0xda, 0xdb, 0xdc, 0xdd, 0xde, 0xdf, 
0xe0, 0xe1, 0xe2, 0xe3, 0xe4, 0xe5, 0xe6, 0xe7, 0xe8, 0xe9, 0xea, 0xeb, 0xec, 0xed, 0xee, 0xef}; 

static unsigned char KOItoDOS[256] = { 0, 0 };
static unsigned char KOItoMAC[256] = { 0, 0 };
static unsigned char KOItoISO[256] = { 0, 0 };
static unsigned char DOStoKOI[256] = { 0, 0 };
static unsigned char DOStoMAC[256] = { 0, 0 };
static unsigned char DOStoISO[256] = { 0, 0 };
static unsigned char MACtoKOI[256] = { 0, 0 };
static unsigned char MACtoDOS[256] = { 0, 0 };
static unsigned char MACtoISO[256] = { 0, 0 };
static unsigned char ISOtoKOI[256] = { 0, 0 };
static unsigned char ISOtoDOS[256] = { 0, 0 };
static unsigned char ISOtoMAC[256] = { 0, 0 };


static const unsigned char* PrepareTable( unsigned char* pTab )
{
  if ( pTab && pTab[1] != 0 ) return pTab;
  const unsigned char* pSrc;
  const unsigned char* pDst;
  if ( pTab == KOItoDOS ) { pSrc = KOItoWIN; pDst = WINtoDOS; }
  else if ( pTab == KOItoMAC ) { pSrc = KOItoWIN; pDst = WINtoMAC; }
  else if ( pTab == KOItoISO ) { pSrc = KOItoWIN; pDst = WINtoISO; }
  else if ( pTab == DOStoKOI ) { pSrc = DOStoWIN; pDst = WINtoKOI; }
  else if ( pTab == DOStoMAC ) { pSrc = DOStoWIN; pDst = WINtoMAC; }
  else if ( pTab == DOStoISO ) { pSrc = DOStoWIN; pDst = WINtoISO; }
  else if ( pTab == MACtoKOI ) { pSrc = MACtoWIN; pDst = WINtoKOI; }
  else if ( pTab == MACtoDOS ) { pSrc = MACtoWIN; pDst = WINtoDOS; }
  else if ( pTab == MACtoISO ) { pSrc = MACtoWIN; pDst = WINtoISO; }
  else if ( pTab == ISOtoKOI ) { pSrc = ISOtoWIN; pDst = WINtoKOI; }
  else if ( pTab == ISOtoDOS ) { pSrc = ISOtoWIN; pDst = WINtoDOS; }
  else if ( pTab == ISOtoMAC ) { pSrc = ISOtoWIN; pDst = WINtoMAC; }
  else return DefTable;
  
  for ( unsigned short i = 0; i < 256; i++ ) {
      pTab[i] = pDst[pSrc[i]];
  }
  return pTab;
}

const unsigned char* CP2CP_Rus(int nSourceCodePage, int nDestCodePage)
{
  int idx = 0;

  switch ( nSourceCodePage )
  {
    case CP_CYRILLIC: 
      idx = 10;
      break;
    case CP_KOI8R:
      idx = 20;
      break;
    case CP_OEM_RUSSIAN:
      idx = 30;
      break;
    case CP_CYRILLIC_MAC:
      idx = 40;
      break;
    case CP_ISO8859_5:
      idx = 50;
      break;
    default:
      return DefTable;
  }
  switch ( nDestCodePage )
  {
    case CP_CYRILLIC: 
      idx += 1;
      break;
    case CP_KOI8R:
      idx += 2;
      break;
    case CP_OEM_RUSSIAN:
      idx += 3;
      break;
    case CP_CYRILLIC_MAC:
      idx += 4;
      break;
    case CP_ISO8859_5:
      idx += 5;
      break;
    default:
      return DefTable;
  }
  switch ( idx )
  {
    case 12: return WINtoKOI;
    case 13: return WINtoDOS;
    case 14: return WINtoMAC;
    case 15: return WINtoISO;

    case 21: return KOItoWIN;
    case 23: return PrepareTable(KOItoDOS);
    case 24: return PrepareTable(KOItoMAC);
    case 25: return PrepareTable(KOItoISO);

    case 31: return DOStoWIN;
    case 32: return PrepareTable(DOStoKOI);
    case 34: return PrepareTable(DOStoMAC);
    case 35: return PrepareTable(DOStoISO);

    case 41: return MACtoWIN;
    case 42: return PrepareTable(MACtoKOI);
    case 43: return PrepareTable(MACtoDOS);
    case 45: return PrepareTable(MACtoISO);

    case 51: return ISOtoWIN;
    case 52: return PrepareTable(ISOtoKOI);
    case 53: return PrepareTable(ISOtoDOS);
    case 54: return PrepareTable(ISOtoMAC);
  }
  return DefTable;
}


int ConvertData( unsigned char * pData, int nLen, int nSourceCodePage, int nDestCodePage )
{
#ifdef UNICODE_SUPPORT
  if ( nDestCodePage   == CP_UTF8 ) return 0;
  if ( nSourceCodePage == CP_UTF8 ) { 
    return ConvertUTF(pData,nLen,nDestCodePage);
  }
#endif
  const unsigned char* pTab = CP2CP_Rus(nSourceCodePage,nDestCodePage);
  int nLenStr = nLen<0 ? strlen((char *)pData) : nLen;
  unsigned char *pEnd = pData + nLenStr;
  while ( pData < pEnd ) {
    *pData = pTab[*pData]; 
    pData++;
  }
  return nLenStr;
}


int ConvertString( char* pSrc, int nLen, int nSourceCodePage, int nDestCodePage )
{
  unsigned char* pData = (unsigned char*)pSrc;
#ifdef UNICODE_SUPPORT
  if ( nDestCodePage   == CP_UTF8 ) return 0;
  if ( nSourceCodePage == CP_UTF8 ) { 
    return ConvertUTF(pData,nLen,nDestCodePage);
  }
#endif
  const unsigned char* pTab = CP2CP_Rus(nSourceCodePage,nDestCodePage);
  int nLenStr = nLen<0 ? strlen((char *)pData) : nLen;
  unsigned char *pEnd = pData + nLenStr;
  while ( pData < pEnd ) {
    *pData = pTab[*pData]; 
    pData++;
  }
  return nLenStr;
}

struct smap_entry {
    const char* str;
    int ID;
};

static const struct smap_entry g_NameMap[] = 
{
    {"windows-1251",   CP_CYRILLIC},
    {"cp1251",         CP_CYRILLIC},

    {"iso-8859-5",     CP_ISO8859_5},
    {"iso-8859_5",     CP_ISO8859_5},
    {"cyrillic",       CP_ISO8859_5},

    {"koi8-r",         CP_KOI8R},
    {"cskoi8r",        CP_KOI8R},
    {"koi8",           CP_KOI8R},

    {"x-mac-cyrillic", CP_CYRILLIC_MAC},

    {"ibm866",         CP_OEM_RUSSIAN},
    {"cp866",          CP_OEM_RUSSIAN},

    {"ibm819",         CP_LATIN1},
    {"cp819",          CP_LATIN1},
    {"windows-1252",   CP_LATIN1},
    {"iso_8859-1",     CP_LATIN1},
    {"iso-8859-1",     CP_LATIN1},
    {"cp367",          CP_LATIN1},
    {"ibm367",         CP_LATIN1},
    {"latin1",         CP_LATIN1},
    {"x-mac-roman",    CP_LATIN1},
    {"macintosh",      CP_LATIN1},

    {"iso-8859-2",     CP_LATIN2},
    {"latin2",         CP_LATIN2},
    {"x-mac-ce",       CP_LATIN2},
    {"windows-1250",   CP_LATIN2},

#ifdef UNICODE_SUPPORT
    {"utf-8",          CP_UTF8},
    {"utf-7",          CP_UTF7},
    {"unicodefffe",    CP_UNICODE},
    {"unicode",        CP_UNICODE},
    {"iso-10646-ucs-2",CP_UNICODE},
    {"csunicode",      CP_UNICODE},
    {"ucs-2",          CP_UNICODE},
#endif

    {"us-ascii",       CP_ASCII},
    {"ascii",          CP_ASCII},
    {"us",             CP_ASCII}
};

static const size_t g_NameMapSize = sizeof(g_NameMap)/sizeof(g_NameMap[0]);

static inline bool compare_lwr(const char* s1, const char* s2)
{
    while (*s2) {
	    if (tolower(*s1) != *s2)
	        return false;
        s1++; s2++;
    }
    unsigned char b = tolower(*s1);
    return !( b == (unsigned char)('-') || b == (unsigned char)('_') ||
              isdigit(b) ||
              ((unsigned char)('a') <= b && b <= (unsigned char)('z'))
            );
}

int CPname2i(const char* pszCP)
{
    if (!pszCP) return 0;

    for (size_t i = 0; i < g_NameMapSize; i++) {
	    if(compare_lwr(pszCP, g_NameMap[i].str))
	        return g_NameMap[i].ID;
    }
    return 0;
}

int CPstr2i(const char* pszCP)
{
	if(!strcmp(pszCP,"koi"))        return CP_KOI8R;
	else if(!strcmp(pszCP,"iso"))   return CP_ISO8859_5;
	else if(!strcmp(pszCP,"dos"))   return CP_OEM_RUSSIAN;
	else if(!strcmp(pszCP,"mac"))   return CP_CYRILLIC_MAC;
	else if(!strcmp(pszCP,"win"))   return CP_CYRILLIC;
#ifdef UNICODE_SUPPORT
	else if(!strcmp(pszCP,"utf-8")) return CP_UTF8;
	else if(!strcmp(pszCP,"utf8"))  return CP_UTF8;
#endif
	return 0;
}

const char* CPi2str(int n)
{
	switch(n) {
		case CP_KOI8R:	        return "koi";
		case CP_ISO8859_5:	    return "iso";
		case CP_OEM_RUSSIAN:	return "dos";
		case CP_CYRILLIC_MAC:	return "mac";
		case CP_CYRILLIC:	    return "win";
#ifdef UNICODE_SUPPORT
		case CP_UTF8:           return "utf-8";
#endif
	}
	return "";
}

const char* CPi2strRFC(int n)
{
	switch(n) {
		case CP_KOI8R:	        return "koi8-r";
		case CP_ISO8859_5:	    return "iso-8859-5";
		case CP_OEM_RUSSIAN:    return "ibm866";
		case CP_CYRILLIC_MAC:	return "x-mac-cyrillic";
		case CP_CYRILLIC:	    return "windows-1251";
        case CP_ASCII:          return "us-ascii";
        case CP_LATIN1:         return "iso-8859-1";
        case CP_LATIN2:         return "iso-8859-2";
#ifdef UNICODE_SUPPORT
        case CP_UNICODE:        return "iso-10646-ucs-2";
        case CP_UTF7:           return "utf-7";
		case CP_UTF8:           return "utf-8";
#endif
	}
	return "";
}

#ifdef UNICODE_SUPPORT

int ConvertUTF(unsigned char * pData, int nLen, int nDestCodePage)
{
	unsigned char *pSrc  = pData;
	unsigned char *pDest = pData;
	unsigned char csrc;
	unsigned wc;
    if ( nLen < 0 ) nLen = INT_MAX;

	if( !pData || *pData == 0 )
		return 0;

	while( (nLen-- > 0) && ((csrc = *pData) != 0) ) {
		if((csrc & 0x80) == 0) {
			wc = csrc;
			pData++;
		}
		else if ( (csrc & 0xE0) == 0xC0 ) {
			if((pData[1] & 0xC0) != 0x80) break;	// wrong sequence
			wc = (((unsigned)(csrc & 0x1F)) << 6) | (pData[1] & 0x3F);
			pData +=2;
		}
		else if ( (csrc & 0xF0) == 0xE0 ) {
			if((pData[1] & 0xC0) != 0x80) break;	// wrong sequence
			if((pData[2] & 0xC0) != 0x80) break;	// wrong sequence
			wc = (((unsigned)(csrc & 0xF)) << 12) | 
				 (((unsigned)pData[1] & 0x3F) << 6) |
				 pData[2] & 0x3F;
			pData +=3;
		}
		else {
			break;	// wrong sequence
		}
		*pDest++ = Unicode2cp(wc,nDestCodePage);
	}

	*pDest = 0;
    return pDest-pSrc;
}

#include <_include/Cp2Uni.h>

unsigned char Unicode2cp(unsigned wc, int nDestCodePage)
{
	typedef const LPCSTR TTable[256];
	TTable* pTab;
	switch(nDestCodePage) {
		case CP_KOI8R:
			pTab = &tabUsc2Koi;
			break;
		case CP_ISO8859_5:
			pTab = &tabUsc2Iso;
			break;
		case CP_OEM_RUSSIAN:
			pTab = &tabUsc2Dos;
			break;
		case CP_CYRILLIC_MAC:
			pTab = &tabUsc2Mac;
			break;
		case CP_CYRILLIC:
			pTab = &tabUsc2Win;
			break;
		case CP_LATIN1:
			pTab = &tabUsc2Lat1_cyr;
			break;
		default:
			return '?';
	}
	return (*pTab)[(wc>>8)&0xFF][wc&0xFF];
}

#endif
