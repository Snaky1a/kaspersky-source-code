
Для антиспам-модуля KIS создан новый одноименный проект (CVS: /projects/KIS) который представляет собой обвязку над некоторыми технологиями АиП-антиспам и переделку некоторых моментов.

 

*** Использованы следующие технологии АиП-антиспам:

1.    Распознавание спама по заголовкам письма

2.    Распознавание спама по контрольным суммам аттачментов (GSG)

 

*** Выходным файлом проекта /projects/KIS является kisaspam.dll

 

kis\kisaspam.dsp 

kis\kisaspam.dsw

 

к которому статически прилинкованы АиП библиотеки:

 

libmd5a.lib

gnu\md5a\md5a_kis.dsp 

 

libjpeg.lib

gnu\jpeg\libjpeg_kis.dsp 

 

regex.lib

gnu\regex\regex_kis.dsp 

 

ungif.lib

smtp-filter\ungif\ungif_kis.dsp 

 

libsigs.lib

smtp-filter\libsigs\libsigs_kis.dsp 

 

libgsg2.lib

smtp-filter\libgsg2\libgsg2_kis.dsp

 

pcommon.lib

lib\pcommon\pcommon.dsp

 

libmimeparser.lib

MIMEParser\libmimeparser_kis.dsp 

 

Librules.lib

Client-filter\librules\librules_kis.dsp

 

Release библиотеки и kiasaspam.dll собраны с runtime library = Multithreaded DLL.

Debug = Debug Multithreaded DLL.

 

**** Изменения в исходниках /projects/*

 

В проекте client-filter\librules изменялись:

 

client-filter/librules/MainInterpreter.cpp

client-filter/librules/actions.cpp

client-filter/librules/envelope.cpp

client-filter/librules/interpreter.cpp

client-filter/librules/profile.cpp

client-filter/librules/librules.dsp

 

После изменений в наложен таг KIS_USAGE

Изменения в основном заключались в выкусывании или заглушиванию обращений к ненужным для KIS функциональностям

при помощи

#ifndef KIS_USAGE

#endif

 

добавились:

 

client-filter/librules/profile_db_impl.h

 

В остальные проекты добавились только файлы проектов *_kis.dsp.

 

*** Функиональность проекта /projects/KIS

 

1.    Инициализация баз (.gsg, .pdb). Для их загрузки используется предоставляемая KIS функция SEEK_READ_PROC. При инициализации происходит сортировка массива gsg.

2.    Распознавание письма (класс MESSAGE_INFO) по заголовкам и GSG.

3.    Деинициализация баз

4.    Перезагрузка баз

 

*** Входные данные для проекта антиспам-модуля KIS

 

Kisaspam.dll на данный момент антиспам-модулем KIS уже не используется. Из исходников проекта /projects/KIS Виталием взялся (и был переработан) только некоторый код. Его состав известен Виталию. Переработка заключалась в добавлении к взятому коду других технологий ЛК (например, Прага), и, по утверждению Виталия, новая версия проекта уже не <соберется> на моей машине.

 

Т. е. /projects/KIS уже не актуален, но всё же пока оставлен в CVS.

Также используются исходники перечисленных выше АиП библиотек (с соответствующими файлами проектов *_kis.dsp): антиспам-модуль KIS самостоятельно собирает из них *.lib и статически линкует к себе.

Также для сборки используется STLPort 4.6 с некоторыми патчами Алексея Иванова - заголовочные файлы и lib-файлы.

Перечень файлов всех актуальных файлов приложен к письму и положен в VSS 

/projects/KIS/doc/as-20-for-kis-branch-1.tree.txt

 

*** В антиспам-модули KIS переиначен механизм использования интерпретатора профилей.

 

Для интерпретатора больше не подготавливаются и не предоставляются MD5-суммы аттачментов: проверка по GSG производится напрямую - подсчётом MD5-суммы аттачмента и поиском этой суммы в массиве, загруженном из базы .gsg. Интерпретатор же используется для распознавания заголовков (база .pdb).

 

*** Загрузка баз обновлений, использование баз обновлений в KIS

 

Данная операция производится на стороне KIS.

Общая информация (требуется впоследствии дополнить):

 

База .gsg - используется для распознавания по GSG - она являет собой перечень md5-сумм и сжатию не поддаётся. Она в исходном виде выкладывается на сервер 

ftp://partner.kaspersky.ru/kis/cfbase-s.gsg

и подписывается цифровой подписью. Специально для KIS содержимое базы на сервере не сортируется. Новые сигнатуры добавляются в конец файла (база .gsg работает как очередь) - что позволяет апдейтеру использовать механизм дифов для мнинизации объёма загружаемого обновления.

При загрузке в память база .gsg сортируется.

 

База .pdb - используется интерпретатором профилей для распознаванию по заголовкам пиьсма.

В заархивированном виде (zip) и подписанная - база выкладывается на сервер

ftp://partner.kaspersky.ru/kis/...

Перед загрузкой в память - база распаковыывется.

Вообще же для других продуктов путь получения базы .pdb такой: после загрузки с сервера upk-файл конвертируется из транспортного формата в .xml-файлы, которые затем компилируются в базы .pdb (заголовки) и .ldb (списки e-email и ip).

 

*** Механизм копирования из CVS в VSS

 

Решена задача переноса исходников, нужных для KIS, из CVS в VSS.

Все это подмножество исходников ответвлено в бранч 

as-20-for-kis-branch-1

Приложен скрипт, производит ве необходимые операции, он который сохранен в CVS:

/projects/KIS/doc/cvs_get_for_kis.cmd

 

В VSS исходники кладутся по пути:

$/ppp/mailcommon/filters/spamtest/kisaspam/

 

Исключение составляет STL, который в силу своей неизменности положен навсегда в VSS

$/ppp/mailcommon/filters/spamtest/kisaspam/STL

(некоторые заголовочные файлы и lib-файлы - с изменениями от Алексея Иванова)

В CVS данный вариант STL не клался.

 

*** Ограничения по памяти и размерам

 

Выходная kisaspam.dll, согласно договорённости, не превысила лимита 200 Кб и занимает 102 Кб.

Однако, по утверждению Виталия, после заимствования в пустой exe-проект кода из kisaspam.dll и обращении к фунциям этого кода - размер выходного exe-файла равен 204 Кб. Над эти казусом надо еще подумать

Ограничение для загруженной в память dll 2 Мб. Эти замеры пока еще не проводились.

 

*** Данный текст сохранён в CVS:

/projects/KIS/readme.txt

 

   С уважением,

   Евгений Смирнов,

   mailto:Evgeny.Smirnov@kaspersky.com

 
