From: <Сохранено Microsoft Internet Explorer 5>
Subject: Microsoft's HTML Help (.chm) format
Date: Wed, 6 Jul 2005 16:37:38 +0400
MIME-Version: 1.0
Content-Type: text/html;
	charset="windows-1251"
Content-Transfer-Encoding: quoted-printable
Content-Location: http://www.speakeasy.org/~russotto/chm/chmformat.html
X-MimeOLE: Produced By Microsoft MimeOLE V6.00.2900.2180

<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.0 Transitional//EN">
<HTML><HEAD><TITLE>Microsoft's HTML Help (.chm) format</TITLE>
<META http-equiv=3DContent-Type content=3D"text/html; =
charset=3Dwindows-1251">
<META content=3D"Matthew T. Russotto" name=3Dauthor>
<META content=3D"MSHTML 6.00.2900.2180" name=3DGENERATOR></HEAD>
<BODY>
<H1>Microsoft's HTML Help (.chm) format</H1>
<H2 id=3Dpreface>Preface</H2>
<P>This is documentation on the .chm format used by Microsoft HTML Help. =
This=20
format has been reverse engineered in the past, but as far as I know =
this is the=20
first freely available documentation on it. One Usenet message indicates =
that=20
these .chm files are actually IStorage files documented in the Microsoft =

Platform SDK. However, I have not been able to locate such =
documentation. </P>
<H3>Note</H3>
<P>The word "section" is badly overloaded in this document. Sorry about=20
that.</P>
<P>All numbers are in hexadecimal unless otherwise indicated in the =
text. Except=20
in tabular listings, this will be indicated by $ or 0x as appropriate. =
All=20
values within the file are Intel byte order (little endian) unless =
indicated=20
otherwise. </P>
<H2 id=3Doverview>The overall format of a .chm file</H2>
<P>The .chm file begins with a short ($38 byte) initial header. This is =
followed=20
by the header section table and the offset to the content. Collectively, =
this is=20
the "header". </P>
<P>The header is followed by the header sections. There are two header =
sections.=20
One header section is the file directory, the other contains the file =
length and=20
some unknown data. Immediately following the header sections is the =
content.=20
</P>
<H2 id=3Dheader>The Header</H2>
<P>The header starts with the initial header, which has the following =
format=20
</P><PRE>0000: char[4]  'ITSF'
0004: DWORD    3 (Version number)
0008: DWORD    Total header length, including header section table and
               following data.
000C: DWORD    1 (unknown)
0010: DWORD    a timestamp.
               Considered as a big-endian DWORD, it appears to contain
               seconds (MSB) and fractional seconds (second byte).
	       The third and fourth bytes may contain even more fractional
               bits.  The 4 least significant bits in the last byte are
               constant.
0014: DWORD    Windows Language ID.  The two I've seen
               $0409 =3D LANG_ENGLISH/SUBLANG_ENGLISH_US
               $0407 =3D LANG_GERMAN/SUBLANG_GERMAN
0018: GUID     {7C01FD10-7BAA-11D0-9E0C-00A0-C922-E6EC}
0028: GUID     {7C01FD11-7BAA-11D0-9E0C-00A0-C922-E6EC}
</PRE>
<P>Note: a GUID is $10 bytes, arranged as 1 DWORD, 2 WORDs, and 8 =
BYTEs.</P>
<P>It is followed by the header section table, which is 2 entries, where =
each=20
entry is $10 bytes long and has this format: </P><PRE>0000: QWORD    =
Offset of section from beginning of file
0008: QWORD    Length of section
</PRE>
<P>Following the header section table is 8 bytes of additional header =
data. In=20
Version 2 files, this data is not there and the content section starts=20
immediately after the directory. </P><PRE>0000: QWORD    Offset within =
file of content section 0
</PRE>
<H2 id=3Dheadersections>The Header Sections</H2>
<H3>Header Section 0</H3>
<P>This section contains the total size of the file, and not much else =
</P><PRE>0000: DWORD    $01FE (unknown)
0004: DWORD    0 (unknown)
0008: QWORD    File Size
0010: DWORD    0 (unknown)
0014: DWORD    0 (unknown)
</PRE>
<H3>Header Section 1: The Directory Listing</H3>
<P>The central part of the .chm file: A directory of the files and =
information=20
it contains. </P>
<H4>Directory header</H4>
<P>The directory starts with a header; its format is as follows: =
</P><PRE>0000: char[4]  'ITSP'
0004: DWORD    Version number 1
0008: DWORD    Length of the directory header
000C: DWORD    $0a (unknown)
0010: DWORD    $1000    Directory chunk size
0014: DWORD    "Density" of quickref section, usually 2.
0018: DWORD    Depth of the index tree
               1 there is no index, 2 if there is one level of PMGI
	       chunks.
001C: DWORD    Chunk number of root index chunk, -1 if there is none
               (though at least one file has 0 despite there being no
	       index chunk, probably a bug.)=20
0020: DWORD    Chunk number of first PMGL (listing) chunk
0024: DWORD    Chunk number of last PMGL (listing) chunk
0028: DWORD    -1 (unknown)
002C: DWORD    Number of directory chunks (total)
0030: DWORD    Windows language ID
0034: GUID     {5D02926A-212E-11D0-9DF9-00A0C922E6EC}
0044: DWORD    $54 (This is the length again)
0048: DWORD    -1 (unknown)
004C: DWORD    -1 (unknown)
0050: DWORD    -1 (unknown)
</PRE>
<H4>The Listing Chunks</H4>
<P>The header is directly followed by the directory chunks. There are =
two types=20
of directory chunks -- index chunks, and listing chunks. The index chunk =
will be=20
omitted if there is only one listing chunk. A listing chunk has the =
following=20
format: </P><PRE>0000: char[4]  'PMGL'
0004: DWORD    Length of free space and/or quickref area at end of
               directory chunk=20
0008: DWORD    Always 0.=20
000C: DWORD    Chunk number of previous listing chunk when reading
               directory in sequence (-1 if this is the first listing =
chunk)
0010: DWORD    Chunk number of next listing chunk when reading
               directory in sequence (-1 if this is the last listing =
chunk)
0014: Directory listing entries (to quickref area)  Sorted by
      filename; the sort is case-insensitive.
</PRE>
<P>The quickref area is written backwards from the end of the chunk. One =

quickref entry exists for every n entries in the file, where n is =
calculated as=20
1 + (1 &lt;&lt; quickref density). So for density =3D 2, n =3D 5. =
</P><PRE>Chunklen-0002: WORD     Number of entries in the chunk
Chunklen-0004: WORD     Offset of entry n from entry 0
Chunklen-0008: WORD     Offset of entry 2n from entry 0
Chunklen-000C: WORD     Offset of entry 3n from entry 0
...
</PRE>
<P>The format of a directory listing entry is as follows </P><PRE>      =
ENCINT: length of name
      BYTEs: name  (UTF-8 encoded)
      ENCINT: content section
      ENCINT: offset
      ENCINT: length
</PRE>
<P>The offset is from the beginning of the content section the file is =
in, after=20
the section has been decompressed (if appropriate). The length also =
refers to=20
length of the file in the section after decompression. </P>
<P>There are two kinds of file represented in the directory: user data =
and=20
format related files. The files which are format-related have names =
which begin=20
with '::', the user data files have names which begin with "/". </P>
<H4>The Index Chunk</H4>
<P>An index chunk has the following format </P><PRE>0000: char[4]  =
'PMGI'
0004: DWORD    Length of quickref/free area at end of directory chunk
0008: Directory index entries (to quickref/free area)
</PRE>
<P>The quickref area in an PMGI is the same as in an PMGL </P>
<P>The format of a directory index entry is as follows </P><PRE>      =
ENCINT: length of name
      BYTEs: name  (UTF-8 encoded)
      ENCINT: directory listing chunk which starts with name
</PRE>
<P>When higher-level indexes exist (when the depth of the index tree is =
3 or=20
higher), presumably the upper-level indexes will contain the numbers of=20
lower-level index chunks rather than listing chunks </P>
<H4>Encoded Integers</H4>
<P>An ENCINT is a variable-length integer. The high bit of each byte =
indicates=20
"continued to the next byte". Bytes are stored most significant to least =

significant. So, for example, $EA $15 is =
(((0xEA&amp;0x7F)&lt;&lt;7)|0x15) =3D=20
0x3515. </P>
<H2 id=3Dcontent>The Content</H2>
<P>In Version 3, the content typically immediately follows the header =
sections,=20
and is at the location indicated by the DWORD following the header =
section=20
table. In Version 2, the content immediately follows the header. All =
content=20
section 0 locations in the directory are relative to that point. The =
other=20
content sections are stored WITHIN content section 0. </P>
<H3>The Namelist file</H3>
<P>There exists in content section 0 and in the directory a file called=20
"::DataSpace/NameList". This file contains the names of all the content=20
sections. The format is as follows: </P><PRE>0000: WORD     Length of =
file, in words
0002: WORD     Number of entries in file

Each entry:
0000: WORD     Length of name in words, excluding terminating null
0002: WORD     Double-byte characters
xxxx: WORD     0
</PRE>
<P>Yes, the names have a length word AND are null terminated; sort of a=20
belt-and-suspenders approach. The coding system is likely UTF-16 (little =

endian). </P>
<P>The section names seen so far are </P>
<UL>
  <LI>Uncompressed=20
  <LI>MSCompressed </LI></UL>
<P>"Uncompressed" is self-explanatory. The section "MSCompressed" is =
compressed=20
with Microsoft's LZX algorithm. </P>
<H3>The Section Data</H3>
<P>For each section other than 0, there exists a file called=20
'::DataSpace/Storage/&lt;Section Name&gt;/Content'. This file contains =
the=20
compressed data for the section. So, conceptually, getting a file from a =
nonzero=20
section is a multi-step process. First you must get the content file =
from=20
section 0. Then you decompress (if appropriate) the section. Then you =
get the=20
desired file from your decompressed section. </P>
<H3>Other section format-related files</H3>
<P>There are several other files associated with the sections </P>
<UL>
  <LI>::DataSpace/Storage/&lt;SectionName&gt;/ControlData=20
  <P>This file contains $20 bytes of information on the compression. The =

  information is partially known: </P><PRE>0000: DWORD    Number of =
DWORDs following 'LZXC', must be 6 if version is 2
0004: ASCII    'LZXC'  Compression type identifier
0008: DWORD    Version (Must be &lt;=3D2)
000C: DWORD    The LZX reset interval
0010: DWORD    The window size
0014: DWORD    The cache size
0018: DWORD    0 (unknown)
</PRE>
  <P>Reset interval, window size, and cache size are in bytes if version =
is 1,=20
  $8000-byte blocks if version is 2. </P>
  <LI>::DataSpace/Storage/&lt;SectionName&gt;/SpanInfo=20
  <P>This file contains a quadword containing the uncompressed length of =
the=20
  section. </P>
  <LI>::DataSpace/Storage/&lt;SectionName&gt;/Transform/List=20
  <P>It appears this file was intended to contain a list of GUIDs =
belonging to=20
  methods of decompressing (or otherwise transforming) the section. =
However, it=20
  actually contains only half of the string representation of a GUID, =
apparently=20
  because it was sized for characters but contains wide characters. =
</P></LI></UL>
<H2 id=3Dcompression>Appendix: The Compression</H2>
<P>The compressed sections are compressed using LZX, a compression =
method=20
Microsoft also uses for its cabinet files. To ensure this, check the =
second=20
DWORD of compression info in the ControlData file for the section =97 it =
should be=20
'LZXC'. To decompress, first read the file=20
"::DataSpace/Storage/&lt;SectionName&gt;/Transform/{7FC28940-9D31-11D0-9B=
27-00A0C91E9C7C}/InstanceData/ResetTable".=20
This reset table has the following format </P><PRE>0000: DWORD    2     =
unknown (possibly a version number)
0004: DWORD    Number of entries in reset table
0008: DWORD    8     Size of table entry (bytes)
000C: DWORD    $28   Length of table header (area before table entries)
0010: QWORD    Uncompressed Length
0018: QWORD    Compressed Length
0020: QWORD    0x8000 block size for locations below
0028: QWORD    0 (zeroth entry of table)
0030: QWORD    location in compressed data of 1st block boundary in
               uncompressed data

Repeat to end of file
</PRE>
<P>Now you can finally obtain the section (from its Content file). The =
window=20
size for the LZX compression is 16 (decimal) on all the files seen so =
far. This=20
is specified by the DWORD at $10 in the ControlData file (but note that =
DWORD=20
gives the window size in 0x8000-byte blocks, not the LZX code for the =
window=20
size) </P>
<P>The rule that the input bit-stream is to be re-aligned to a 16-bit =
boundary=20
after $8000 output characters have been processed IS in effect, despite =
this LZX=20
not being part of a CAB file. The reset table tells you when this was =
done,=20
though there is no need for that during decompression; you can just keep =
track=20
of the number of output characters. Furthermore, while this does not =
appear to=20
be documented in the LZX format, the uncompressed stream is padded to an =
$8000=20
byte boundary. </P>
<P>There is one change from LZX as defined by Microsoft: After each LZX =
reset=20
interval (defined in the ControlData file, but in practice equal to the =
window=20
size) of compressed data is processed, the LZX state is fully reset, as =
if an=20
entirely new file was being encoded. This allows semi-random access to =
the=20
compressed data; you can start reading on any reset interval boundary =
using the=20
reset interval size and the reset table. </P>
<P><EM>Note:</EM><BR>Earlier versions of this document stated that the =
reset=20
interval only reset the Huffman tables and required outputting the 1-bit =
header=20
again. This was erroneous. The Lempel Ziv state is reset as well. In =
practice, a=20
decoder works just as well with the incorrect assumption, but encoding a =
file=20
with match positions which refer to a time before the most recent LZX =
reset=20
causes crashes on decoding. </P>
<HR>

<H2>Acknowledgements</H2>
<P>The following people in (no particular order) have submitted =
information=20
which has helped correct and close the gaps in this document.</P>
<UL>
  <LI>Peter Ferrie (peter_ferrie at hotmail.com) <A=20
  href=3D"http://pferrie.tripod.com/">Web Site</A>=20
  <LI>Pabs (pabs at zip.to) who also runs the <A=20
  href=3D"http://savannah.nongnu.org/projects/chmspec">CHM Spec =
page</A>. </LI></UL>
<P>And others I have not been able to reach.</P>
<HR>

<P>Copyright 2001-2003 Matthew T. Russotto <BR></P>
<P>You may freely copy and distribute unmodified copies of this file, or =
copies=20
where the only modification is a change in line endings, padding after =
the html=20
end tag, coding system, or any combination thereof. The original is in =
ASCII=20
with Unix line endings. </P></BODY></HTML>
