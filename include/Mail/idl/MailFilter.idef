#import "reg.idef"

forward interface MailFilter;
typedef MailFilter* hMAILFILTER;




[
  version(1)
  mnemonic(IID_MAILFILTER)
  id(40004)
  c_type_name(hMAILFILTER)
  comment_ex("Интерфейс используется в почтовых приложениях для обработки объектов типа \"Почтовое сообщение\" и \"Часть почтового сообщения (тело письма, вложение)\"")
]
interface MailFilter { // MailFilter interface

  // ------------------------------------
    [ id(4097) ]  prop hOBJECT pgPLUGIN_SETTINGS; // Настройки плагина

    [
      id(4096)
      comment_ex("Средства, предоставляемые объектом hBL:
        - Диалог в пользовательском интерфейсе
        
        ... и т.п.")
    ]
    prop hOBJECT pgBL; // Указатель на объект бизнесс-логики продукта


  // ------------------------------------

    [
      comment_ex("Результатом работы этой функции является значение типа tDWORD. В зависимости от этого значения MailCommon[Prague] примет решение о дальнейших действиях: переход к следующему фильтру, остановку процессирования, произведение основных и дополнительных заключительных действий (удаление вложения/письма, замена текстом. рассылка отчетов и т.д.).
        
        Эти действия регистрируются в настройках MailCommon[Prague] и зависят от требуемого функционала продукта (not hardcoded!).")
    ]
    method tERROR Process( // Основная функцуия процессирования
      tDWORD* result,
      hOBJECT pGetProp, // Интерфейс доступа к настройкам фильтра
      hOBJECT p_hInterceptedObjectWithCustomProperties, // Топовый перехваченный объект
      hOS p_hMailMessageOS, // Парсер + реализация типичных свойств почтового объекта
      hIO p_hMailMessagePartIO, // Объект MailPart, предназначенный для фильтрации
      tDWORD p_ulTimeOut // Процессинг должен закончиться в отведенное для него время
    );

}

