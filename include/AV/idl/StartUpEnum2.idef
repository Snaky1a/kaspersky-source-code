forward interface StartUpEnum2;
typedef StartUpEnum2* hSTARTUPENUM2;

forward interface DecodeIO;
typedef DecodeIO* hDECODEIO;




[
  mnemonic(IID_STARTUPENUM2)
  id(54001)
  c_type_name(hSTARTUPENUM2)
]
interface StartUpEnum2 {

  // ------------------------------------

    [
      comment_ex("Interface version")
      id(130)
    ]
    prop tVERSION pgINTERFACE_VERSION; // Interface version

    [
      comment_ex("Interface comment")
      id(131)
    ]
    prop tSTRING pgINTERFACE_COMMENT; // Interface comment
    prop pgOBJECT_NAME; // Object name
    prop pgOBJECT_PATH; // Object path
    prop pgOBJECT_FULL_NAME; // Object full name

    [
      comment_ex("Plugin codepage")
      id(197)
    ]
    prop tCODEPAGE pgPLUGIN_CODEPAGE; // Plugin codepage


  // ------------------------------------
    method tERROR StartEnum( hOBJECT pRetObject, tBOOL bAdvancedDisinfection );
    method tERROR CleanUp(
      hSTRING DelFName,
      hOBJECT pRetObject,
      tSTRING DetectedVirusName
    );


  // ------------------------------------
    [ id(4096) ]
    message_cls pmc_STARTUPENUM2 {
      [ id(4096) ]  message mc_FILE_FOUNDED;
      [ id(4097) ]  message mc_ERROR_OPERATION;
      [ id(4098) ]  message mc_FILE_TO_DELETE;
    }
    [ id(3072515984) ]
    message_cls pmc_ADVANCED_DISINFECTION {
      [ id(3072515985) ]  message pm_ADVANCED_DISINFECTION_START;
      [ id(3072515986) ]  message pm_ADVANCED_DISINFECTION_LOCK_REGKEY;
      [ id(3072515987) ]  message pm_ADVANCED_DISINFECTION_LOCK_FILE;
      [ id(3072515988) ]  message pm_ADVANCED_DISINFECTION_REBOOT;
    }

}


[
  mnemonic(IID_DECODEIO)
  id(54000)
  c_type_name(hDECODEIO)
  comment_ex("Defines behavior of input/output of an object
    Important -- It is supposed several clients can use single IO object simultaneously. It has no internal current position. ")
]
interface DecodeIO { // input/output interface

  // ------------------------------------
    typedef tDWORD IO_SIZE_TYPE;


  // ------------------------------------
    const IO_SIZE_TYPE IO_SIZE_TYPE_EXPLICIT = 0;
    const IO_SIZE_TYPE IO_SIZE_TYPE_APPROXIMATE = 1;
    const IO_SIZE_TYPE IO_SIZE_TYPE_ESTIMATE = 2;
    const tDWORD fACCESS_READ = 0x00000001L; // read access to the object
    const tDWORD fACCESS_WRITE = 0x00000002L; // write access to the object
    const tDWORD fACCESS_RW = 0x00000003L; // read/write access to the object. The same as (cOS_OMODE_READ | cOS_OMODE_WRITE)
    const tDWORD fACCESS_NO_EXTEND_RAND = 0x00000004L; // object must not be able to extend randomly
    const tDWORD fACCESS_NO_EXTEND = 0x00000008L; // object must not be able to extend
    const tDWORD fACCESS_NO_TRUNCATE = 0x00000010L; // object cannot be truncated
    const tDWORD fACCESS_NO_BUFFERING_READ = 0x00000020L; // client do not want (if possible) the object to be read buffered
    const tDWORD fACCESS_NO_BUFFERING_WRITE = 0x00000040L; // client do not want (if possible) the object to be write buffered
    const tDWORD fACCESS_NO_BUFFERING = 0x00000060L; // client do not want (if possible) the object to be read buffered
    const tDWORD fACCESS_NO_CHANGE_MODE = 0x00000080L; // creater do not want the object to be reopened by set new pgACCESS_MODE property value
    const tDWORD mACCESS = 0x000000ffL; // mask to extract access mode flags
    const tDWORD fOMODE_OPEN_IF_EXIST = 0x00000001L; // Creates a new object. Fails if the specified file already exists.
    const tDWORD fOMODE_CREATE_IF_NOT_EXIST = 0x00000002L; // Create new object. Old object will be deleted
    const tDWORD fOMODE_TRUNCATE = 0x00000004L; // Opens the existing object. Once opened, the object must be truncated to zero length. Access mode must be at least fACCESS_WRITE
    const tDWORD fOMODE_FOLDER_AS_IO = 0x00000008L; // open as folder. If object with this name exists and represents a file method must return error
    const tDWORD fOMODE_OPEN_ALWAYS = fOMODE_OPEN_IF_EXIST | fOMODE_CREATE_IF_NOT_EXIST; // open always behaviour
    const tDWORD fOMODE_CREATE_ALWAYS = fOMODE_OPEN_IF_EXIST | fOMODE_CREATE_IF_NOT_EXIST | fOMODE_TRUNCATE; // create always behaviour
    const tDWORD mOMODE_CREATION = 0x0000000fL; // open mode mask for creation/disposition flags

    [
      comment_ex("Subsequent open operations on the object will succeed only if read access is requested")
    ]
    const tDWORD fOMODE_SHARE_DENY_READ = 0x00000010L; // Subsequent open operations on the object will succeed only if read access is requested

    [
      comment_ex("Subsequent open operations on the object will succeed only if write access is requested")
    ]
    const tDWORD fOMODE_SHARE_DENY_WRITE = 0x00000020L; // Subsequent open operations on the object will succeed only if write access is requested

    [
      comment_ex("Subsequent open operations on the object will succeed only if read or write access is requested")
    ]
    const tDWORD fOMODE_SHARE_DENY_RW = 0x00000030L; // Subsequent open operations on the object will succeed only if read or write access is requested

    [
      comment_ex("Subsequent open operations on the object will succeed only if delete access is requested")
    ]
    const tDWORD fOMODE_SHARE_DENY_DELETE = 0x00000040L; // Subsequent open operations on the object will succeed only if delete access is requested
    const tDWORD mOMODE_SHARE = 0x000000f0L; // open mode share mask
    const tDWORD fOMODE_TEMPORARY = 0x00000100L; // object is temporary and must be deleted on close without any messages
    const tDWORD fAVAIL_READ = 0x00000001L; // read operation available
    const tDWORD fAVAIL_WRITE = 0x00000002L; // write operation available
    const tDWORD fAVAIL_EXTEND = 0x0000000cL; // both sequential and random extend operation available
    const tDWORD fAVAIL_EXTEND_SEQ = 0x00000004L; // sequential extend operation available
    const tDWORD fAVAIL_EXTEND_RAND = 0x00000008L; // random extend operation available
    const tDWORD fAVAIL_TRUNCATE = 0x00000010L; // truncate operation available
    const tDWORD fAVAIL_BUFFERING = 0x00000060L; // both read and write buffering available
    const tDWORD fAVAIL_BUFFERING_READ = 0x00000020L; // read buffering available
    const tDWORD fAVAIL_BUFFERING_WRITE = 0x00000040L; // write buffering available
    const tDWORD fAVAIL_CHANGE_MODE = 0x00000080L; // change mode (reopen) operation available
    const tDWORD fAVAIL_CREATE = 0x00000100L; // creation available
    const tDWORD fAVAIL_SHARE = 0x00000200L; // sharing available
    const tDWORD fAVAIL_DELETE_ON_CLOSE = 0x00000400L; // delete on close operation available


  // ------------------------------------
    error errIO_DELETE_ON_CLOSE_FAILED; // set if delete on close failed
    error errIO_FOLDER_NOT_FILE; // object opened is a folder, not a file 
    error errIO_BUFFERING; // buffering is not available for the object


  // ------------------------------------

    [
      id(130)
      comment_ex("Interface version")
    ]
    prop tVERSION pgINTERFACE_VERSION; // Interface version

    [
      id(131)
      comment_ex("Interface comment")
    ]
    prop tSTRING pgINTERFACE_COMMENT; // Interface comment
    prop pgOBJECT_ORIGIN; // Object origin
    prop pgOBJECT_NAME; // object's name
    prop pgOBJECT_PATH; // object's path in the parent OS
    prop pgOBJECT_FULL_NAME; // object's full name in the parent OS
    prop pgOBJECT_OPEN_MODE; // current open mode for the object
    prop pgOBJECT_ACCESS_MODE; // current access mode

    [
      id(4096)
      comment_ex("объект должен быть удален из соответсвующей объектной сстемы во время закрытия")
    ]
    prop tBOOL pgOBJECT_DELETE_ON_CLOSE; // eng:delete on close//rus:удалить во время закрытия
    prop pgOBJECT_AVAILABILITY; // Returns set of features availabe for the implementation. Must return set of ORed availability flags
    prop pgOBJECT_BASED_ON; // base for this object
    [ id(4100) ]  prop tBYTE pgOBJECT_FILL_CHAR; // fill character to extending object
    prop pgOBJECT_HASH; // Object hash
    prop pgOBJECT_REOPEN_DATA;
    prop pgOBJECT_ATTRIBUTES; // attributes of the object. Depends on OS
    [ id(4101) ]  prop tDATETIME pgOBJECT_CREATION_TIME;
    [ id(4102) ]  prop tDATETIME pgOBJECT_LAST_WRITE_TIME;
    [ id(4103) ]  prop tDATETIME pgOBJECT_LAST_ACCESS_TIME;

    [
      comment_ex("Plugin codepage")
      id(197)
    ]
    prop tCODEPAGE pgPLUGIN_CODEPAGE; // Plugin codepage


  // ------------------------------------

    [
      comment_ex("//eng:returns real count of bytes read")
    ]
    method tERROR SeekRead( // reads content of the object to the buffer
      tDWORD* result,
      tQWORD offset,
      tPTR buffer,
      tDWORD size
    );

    [
      comment_ex("writes buffer to the object. Returns real count of bytes written")
    ]
    method tERROR SeekWrite( // writes buffer to the object
      tDWORD* result,
      tQWORD offset,
      tPTR buffer,
      tDWORD size
    );

    [
      comment_ex("object returns size of requested type (see description of the \"type\" parameter. Some objects may return same value for all size types")
    ]
    method tERROR GetSize( // returns size of the requested type of the object
      tQWORD* result,
      IO_SIZE_TYPE type
    );
    method tERROR SetSize( // resizes the object
      tQWORD new_size
    );

    [
      comment_ex("Flush internal buffers.")
    ]
    method tERROR Flush(); // flush internal buffers


  // ------------------------------------

    [
      id(3657433089)
      comment_ex("параметр \"send_point\" в любом из этих сообщений может быть любого из трех типов: OS, ObjPtr или IO")
    ]
    message_cls pmc_IO { // класс сообщений связанных с деятельностью объектов OS, ObjPtr и IO

      [
        id(1)
        comment_ex("Сообщение посылается в случае успешного удаления объекта в контейнере при закрытии объекта IO (ObjPtr), помеченного для удаления с помощью установки свойства pgOBJECT_DELETE_ON_CLOSE.")
      ]
      message pm_IO_DELETE_ON_CLOSE_SUCCEED; // удаление при закрытии прошло успешно

      [
        id(2)
        comment_ex("Сообщение посылается в том случае, если удаление объекта в контейнере при закрытии объекта IO (ObjPtr), помеченного для удаления с помощью установки свойства pgOBJECT_DELETE_ON_CLOSE завершилось с ошибкой.")
      ]
      message pm_IO_DELETE_ON_CLOSE_FAILED; // удаление при закрытии завершилось с ошибкой

      [
        id(3)
        comment_ex("Может быть послано от имени любого из объектов типа IO, ObjPtr или OS
          Параметр \"context\" это объект типа hSTRING
          
          Обработчик сообщения может вернуть ошибку. Это означает, что обработку текущего объекта нужно прекратить с соответсвующим кодом ошибки (? errOBJECT_PASSWORD_PROTECTED ?)
          Cледует учитывать ситуацию, когда ни одного обработчика сообщения не было. В этом случае kernel вернет warning errOK_NO_DECIDERS")
      ]
      message pm_IO_PASSWORD_REQUEST; // запрос пароля для доступа к физическому объекту

      [
        id(4096)
        comment_ex("Сообщение посылается на закрытии объектов типа hIO и hOS, если случиться какая-либо ошибка
          
          Сообщение должно быть послано так, чтобы обрабатывающий его мог (через CALL_SYS_PorpertyGet) получить любую информацию, связанную с объектом. 
          
          Список ошибок, могущих быть вернутыми
          	errLOCKED
          	errACCESS_DENIED
          	errNOT_ENOUGH_MEMORY
          	errMEDIA_ERROR
          	errOBJECT_WRITE")
      ]
      message pm_IO_CLOSE_ERROR; // ошибка при закрытии объектов типов hIO и hOS
      [ id(4097) ]  message pm_IO_CREATE_FAILED; // ошибка при открытии объектов типов hIO и hOS

      [
        id(4098)
        comment_ex("ошибка при переоткрытии объектов типа hIO
          Переоткрытие может произойти при установке на объект свойства pgOBJECT_ACCESS_MODE")
      ]
      message pm_IO_REOPEN_FAILED; // ошибка при переоткрытии объектов типов hIO
      [ id(4099) ]  message pm_IO_SET_ATTRIBUTES_FAILED; // ошибка при установке аттрибутов на объект типа hIO
      [ id(4100) ]  message pm_IO_RESORE_ATTRIBUTES_FAILED; // ошибка возвращении аттрибутов в исходные на объект типа hIO
    }

}

