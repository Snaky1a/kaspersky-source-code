forward interface IChecker;
typedef IChecker* hICHECKER;




[
  version(1)
  mnemonic(IID_ICHECKER2)
  id(58007)
  c_type_name(hICHECKER)
]
interface IChecker {

  // ------------------------------------

    [
      comment_ex("Для получения ассоциированных данных, метод считает уникальный хеш для файла. Хеш считается по выборочным данным из файла (в зависимости от структуры файла), а также данным указанных в параметре pData. Затем, находит в базе данных значения, ассоциированные с этим хешем и возвращает их. Размер ассоциированных данных ограничен двумя  DWORD'ами.")
    ]
    method tERROR GetStatus( // Возвращает данные, ассоциированные с файлом.
      tDWORD* result,
      hIO io, // IO, предоставляющее доступ к файлу
      tBYTE* pData, // Указатель на дополнительные данные, используемые для подсчета хеша
      tDWORD dwDataSize, // Размер дополнительных данных для подсчета хеша
      tDWORD* pStatusBuffer, // Буффер, получающий ассоциированные данные
      tDWORD dwStatusBufferSize // Размер буфера для получения ассоциированных данных
    );
    method tERROR UpdateStatus( // Устанавливает данные, ассоциированные с файлом.
      tVOID* result,
      hIO io, // IO, предоставляющее доступ к файлу
      tDWORD* pStatusBuffer, // Буффер, содержащий данные, которые необходимо ассоциировать с IO
      tDWORD dwStatusBufferSize // Размер буфера ассоциированных данных
    );
    method tERROR DeleteStatus( // Удаляет данные, ассоциированные с файлом.
      tVOID* result,
      hIO io // IO, предоставляющее доступ к файлу
    );

    [
      comment_ex("Метод предназначен для предотвращения потери накопленных в течении длительной сессии данных в результате действия внешних факторов (например, неожиданное выключение питания).")
    ]
    method tERROR FlushStatusDB(); // Сохраняет БД ассоциированных данных
    method tERROR ClearStatusDB(); // Очищает БД ассоциированных данных.

}

