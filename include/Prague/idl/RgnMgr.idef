#import "os.idef"

forward interface RegionManager;
typedef RegionManager* hREGIONMANAGER;



[
  version(1)
  mnemonic(IID_REGIONMANAGER)
  id(58000)
  c_type_name(hREGIONMANAGER)
  comment_ex("Интрефейс RegionManager позволяет определить в IO точки и содержащие их регионы, после чего предоставляет доступ к ним непосредственно по указателям в памяти. Кроме того интерфейс позволяет объявить дополнительные области памяти как регионы не имеющие прямого отображения в IO и осуществлять доступ к ним через то же API что и к регионам IO.")
]
interface RegionManager : IO { // Предоставляет доступ к выбранным областям IO.

  // ------------------------------------
    typedef tDWORD hRPOINT; // Псевдохэндл опорной точки региона.
    typedef tDWORD hREGION; // Псевдохэнл региона в IO или памяти.


  // ------------------------------------

    [
      comment_ex("Используется как параметр dwType метода GetPoint. Указывает, что при выборке точек их тип не имеет значения.")
    ]
    const tDWORD cRPOINT_TYPE_ANY = -1; // Любой тип точки.

    [
      comment_ex("Используется как параметр dwID метода GetPoint. Указывает, что при выборке точек их идентификатор не имеет значения.")
    ]
    const tDWORD cRPOINT_ID_ANY = -1; // Любой идентификатор точки.

    [
      comment_ex("Используется как параметр hAssociatedPoint метода GetPoint. Указывает, что при выборке точек ассоциирование не имеет значения.")
    ]
    const hRPOINT cASSOCIATED_RPOINT_ANY = -1; // Любая точка.

    [
      comment_ex("Используется как параметр dwType метода GetRegion. Указывает, что при выборке регионов их тип не имеет значения.")
    ]
    const tDWORD cREGION_TYPE_ANY = -1; // Любой тип региона

    [
      comment_ex("Используется GetPointInfo. Возвращается  в случае если указанная точка не ассоциирована.")
    ]
    const tDWORD cNOT_ASSOCIATED = -1; // Точка не ассоциирована.

    [
      comment_ex("Используется GetRegionInfo для регионов определеных в памяти.")
    ]
    const tQWORD cNOT_IO_POS = -1; // Нет отображения в IO.

    [
      comment_ex("Флаг используется методами GetPointPtr и GetRegionPtr в параметре dwMode. Определяет доступ к запрашиваемым указателям на чтение.")
    ]
    const tDWORD cMEM_ACCESS_READ = 0; // Доступ на чтение.

    [
      comment_ex("Флаг используется методами GetPointPtr и GetRegionPtr в параметре dwMode. Определяет доступ к запрашиваемым указателям на запись.")
    ]
    const tDWORD cMEM_ACCESS_WRITE = 1; // Доступ на запись.

    [
      comment_ex("Используется при регистрации регионов в параметрах dwBytesBefore и dwBytesAfter через операцию ИЛИ (|)")
    ]
    const tDWORD cSIZE_NOT_LESS = 0x80000000; // Указывет, что размер должен быть не меньше указанного.

    [
      comment_ex("Используется в параметре dwMode в методах GetPointPtr и GetRegionPtr.")
    ]
    const tDWORD cEXACT_SIZE = 2; // Указывет, что данные нужно вернуть точно того размера, что был указан при регистрации точки.


  // ------------------------------------
    [ id(4096) ]  prop hOBJECT pgMANAGED_IO; // IO, на котором будет производиться работа (регистрироваться точки и выделяться регионы)

    [
      comment_ex("//rus:Указывает на совместимость данного интерфейса с интерфейсом \"IO\"//eng:Shows compatibility of the interface with \"IO\" interface")
      id(135)
    ]
    prop tIID pgINTERFACE_COMPATIBILITY; // rus:указание интерфейса, совместимого с данным//eng:Interface compatibility


  // ------------------------------------
    method tERROR RegisterPoint( // Регистрирует точку в IO а также границы содержащего ее региона
      hRPOINT* phRPoint, // Псевдохэндл зарегистрированной точки
      tDWORD dwType, // Тип точки 
      tDWORD dwID, // Идентификатор точки
      tQWORD qwPosInIO, // Позиция точки в IO
      tDWORD dwBytesBefore, // Количество байт предшествующих точке подлежит отнести в регион
      tDWORD dwBytesAfter, // Количество байт следующих за точкой подлежит отнести в регион
      tDWORD dwRegionType // Тип региона определяемого регистрируемой точкой
    );

    [
      comment_ex("Ассоциированные точки используются для построения иерархии связанных с IO дополнительных данных. Например, при обработке точки А в IO возникла необходимость сохранить контекст обработки этой точки для последующего использования, при этом аналогичные контексты требуется сохранить и для других точек. Ассоциируя данные контекста с точкой можно получить доступ к нужному контексту при дальнейшей работе.")
    ]
    method tERROR RegisterAssociatedPoint( // Регистрирует точку в буфере памяти и привязывает (ассоциирует) ее с другой уже зарегистрированной точкой
      hRPOINT* phRPoint, // Псевдохэндл зарегистрированной точки
      tDWORD dwType, // Тип точки 
      tDWORD dwID, // Идентификатор точки
      hRPOINT hAssociatedRPoint, // Точка с которой ассоциируется регистрируемая точка
      const tPTR* pRPointData, // Указатель на данные соответствующие регистрируемой точке
      const tPTR* pRegionStart, // Указатель на начало региона содержащего регистрируемую точку
      const tPTR* pRegionEnd, // Указатель на начало региона содержащего регистрируемую точку
      tDWORD dwRegionType // Тип региона определяемого регистрируемой точкой
    );
    method tERROR UnregisterPoint( // Удаляет точку из списка зарегистрированных
      hRPOINT hRPoint // Точка для разрегистрации.
    );

    [
      comment_ex("Используется как для единичного получения точек, так и для их перебора.")
    ]
    method tERROR GetPoint( // Возвращает точку, удовлетворяющую заданным параметрам.
      hRPOINT* phRPoint, // Получает найденную точку
      hRPOINT hPrevRPoint, // Предыдущая точка при переборе точек.
      tDWORD dwType, // Тип требуемой точки.
      tDWORD dwID, // Идентификатор требуемой точки.
      hRPOINT hAssociatedRPoint // Точка, с которой должна быть ассоциирована требуемая точка.
    );
    method tERROR GetPointInfo( // Возвращает информацию о точке.
      hRPOINT hRPoint, // Точка о которой требуется получить информацию
      tDWORD* pdwType, // Тип указанной точки.
      tDWORD* pdwID, // Идентификатор указанной точки
      hRPOINT* phAssociatedRPoint, // Получает точку, с которой ассоциирована указанная точка.
      hREGION* phRegion, // Идентификатор региона, содержащего указанную точку.
      tDWORD* pdwPosInRegion, // Смещение точки в регионе.
      tQWORD* pqwPosInIO // Смещение точки в регионе.
    );

    [
      comment_ex("Используется для перебора регионов.")
    ]
    method tERROR GetRegion( // Возвращает регион, удовлетворяющий заданным параметрам.
      hREGION* phRegion, // Получает псевдохэнл региона соответствующего заданным параметрам.
      hREGION hPrevRegion, // Предыдущий регион
      tDWORD dwType // Тип требуемого региона.
    );
    method tERROR GetRegionInfo( // Получает информацию о регионе
      hREGION hRegion, // Регион, о котором требуется получить информацию
      tDWORD* pdwType, // Тип региона
      tQWORD* pqwStartPos, // Начальная позиция региона в IO
      tQWORD* pqwEndPos, // Конечная позиция региона в IO
      tDWORD* pdwSize // Возвращает размер региона в байтах.
    );
    method tERROR ChangeRegionType( // Меняет тип региона.
      tDWORD* pOldType, // Получает тип, который регион имел до выполнения операции.
      hREGION hRegion, // Регион, тип которого нужно изменить.
      tDWORD dwNewType // Новый тип региона.
    );

    [
      comment_ex("Функция отображает регион из IO в физическую память, что дает возможность работать с данными непосредственно в памяти.")
    ]
    method tERROR GetPointPtr( // Получает указатели на отображенную в память точку и содержащий ее регион.
      hRPOINT hRPoint, // Точка, на данные которой требуется получить указатель.
      hREGION* phLockedRegion, // Получает регион, в данный момент содержащий точку.
      tPTR* ppPointPtr, // Указатель на данные точки.
      tPTR* ppRegionStartPtr, // Указатель на начало региона.
      tPTR* ppRegionEndPtr, // Указатель на конец региона.
      tDWORD dwMode // Режим работы с памятью
    );

    [
      comment_ex("Функция отображает регион из IO в физическую память, что дает возможность работать непосредственно с данными.")
    ]
    method tERROR GetRegionPtr( // Получает указатели на отображенные в память данные регион.
      hREGION hRegion, // Регион, на данные которого требуется получить указатель.
      hREGION* phLockedRegion, // Получает хэндл региона, который затем нужно будет освободить.
      tPTR* ppRegionStartPtr, // Указатель на начало региона.
      tPTR* ppRegionEndPtr, // Указатель на конец региона.
      tDWORD dwMode // Режим работы с памятью
    );

    [
      comment_ex("Эта функция должна вызываться после окончания работы с данными в памяти. На каждый вызов GetPointPtr или GetRegionPtr должен быть соответствующий вызов ReleaseRegion. ")
    ]
    method tERROR ReleaseRegion( // Снимает отображение региона из IO в физическую память.
      hREGION hRegion // Регион, работа с данными которого закончена.
    );

}

