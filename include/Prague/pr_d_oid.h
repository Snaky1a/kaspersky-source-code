// This file has been generated automatically on Âò.29.11.05 17:03:12

// FILE: O:\Prague\Include\pr_oid.h
DEF_IDENTIFIER( OID_ANY, -1 ) // 0xFFFFFFFF // ((tORIG_ID)(-1))
DEF_IDENTIFIER( OID_GENERIC_IO, 0 ) // 0x00000000 // ((tORIG_ID)(0))
DEF_IDENTIFIER( OID_COMMAND_RELOAD_BASE, 8192 ) // 0x00002000 // ((tORIG_ID)(0x2000))
DEF_IDENTIFIER( OID_LOGICAL_DRIVE, 8193 ) // 0x00002001 // ((tORIG_ID)(0x2001))
DEF_IDENTIFIER( OID_PHYSICAL_DISK, 8194 ) // 0x00002002 // ((tORIG_ID)(0x2002))
DEF_IDENTIFIER( OID_AVP3_DOS_MEMORY, 12289 ) // 0x00003001 // ((tORIG_ID)(0x3001))
DEF_IDENTIFIER( OID_AVP3_BOOT, 12290 ) // 0x00003002 // ((tORIG_ID)(0x3002))
DEF_IDENTIFIER( OID_AVP3_MBR, 12291 ) // 0x00003003 // ((tORIG_ID)(0x3003))
DEF_IDENTIFIER( OID_MEMORY_PROCESS, 20481 ) // 0x00005001 // ((tORIG_ID)(0x5001))
DEF_IDENTIFIER( OID_MEMORY_PROCESS_MODULE, 20482 ) // 0x00005002 // ((tORIG_ID)(0x5002))
DEF_IDENTIFIER( OID_SCRIPT_TEXT, 20484 ) // 0x00005004 // ((tORIG_ID)(0x5004))
DEF_IDENTIFIER( OID_SCRIPT_VBS, 20485 ) // 0x00005005 // ((tORIG_ID)(0x5005))
DEF_IDENTIFIER( OID_SCRIPT_VBSE, 20486 ) // 0x00005006 // ((tORIG_ID)(0x5006))
DEF_IDENTIFIER( OID_SCRIPT_VBSH, 20487 ) // 0x00005007 // ((tORIG_ID)(0x5007))
DEF_IDENTIFIER( OID_SCRIPT_JS, 20488 ) // 0x00005008 // ((tORIG_ID)(0x5008))
DEF_IDENTIFIER( OID_SCRIPT_PACKED_TEXT, 20489 ) // 0x00005009 // ((tORIG_ID)(0x5009))
DEF_IDENTIFIER( OID_SCRIPT_BAT, 20490 ) // 0x0000500A // ((tORIG_ID)(0x500A))
DEF_IDENTIFIER( OID_SCRIPT_MIRC, 20491 ) // 0x0000500B // ((tORIG_ID)(0x500B))
DEF_IDENTIFIER( OID_MAIL_MSG_REF, 24576 ) // 0x00006000 // ((tORIG_ID)(0x6000))
DEF_IDENTIFIER( OID_MAIL_MSG_MIME, 24577 ) // 0x00006001 // ((tORIG_ID)(0x6001))
DEF_IDENTIFIER( OID_MAIL_MSG_BODY, 24578 ) // 0x00006002 // ((tORIG_ID)(0x6002))
DEF_IDENTIFIER( OID_MAIL_MSG_ATTACH, 24579 ) // 0x00006003 // ((tORIG_ID)(0x6003))
DEF_IDENTIFIER( OID_MIRA_GENERIC, 28672 ) // 0x00007000 // ((tORIG_ID)(0x7000))
DEF_IDENTIFIER( OID_MIRA_EXE, 28673 ) // 0x00007001 // ((tORIG_ID)(0x7001))
DEF_IDENTIFIER( OID_MIRA_EXE_VB_NATIVE, 28674 ) // 0x00007002 // ((tORIG_ID)(0x7002))
DEF_IDENTIFIER( OID_MIRA_EXE_VB_PCODE, 28675 ) // 0x00007003 // ((tORIG_ID)(0x7003))
DEF_IDENTIFIER( OID_MIRA_EXE_DELPHI, 28676 ) // 0x00007004 // ((tORIG_ID)(0x7004))
DEF_IDENTIFIER( OID_MIRA_EXE_BORLANDC_1994, 28677 ) // 0x00007005 // ((tORIG_ID)(0x7005))
DEF_IDENTIFIER( OID_MIRA_EXE_MSVC, 28678 ) // 0x00007006 // ((tORIG_ID)(0x7006))
DEF_IDENTIFIER( OID_REOPEN_DATA, 32768 ) // 0x00008000 // ((tORIG_ID)(0x8000))
DEF_IDENTIFIER( OID_QUARANTINED_OBJECT, 36864 ) // 0x00009000 // ((tORIG_ID)(0x9000))

// FILE: O:\Prague\msoe\MSOEAPI\IMimeMessageW.h
// ???: DEF_IDENTIFIER( OID_ALLOW_8BIT_HEADER, TYPEDID(VT_BOOL, 0x0001) ) // ERR: Cannot resolve TYPEDID(VT_BOOL, 0x0001)
// ???: DEF_IDENTIFIER( OID_CBMAX_HEADER_LINE, TYPEDID(VT_UI4, 0x0002) ) // ERR: Cannot resolve TYPEDID(VT_UI4, 0x0002)
// ???: DEF_IDENTIFIER( OID_SAVE_FORMAT, TYPEDID(VT_UI4, 0x0003) ) // ERR: Cannot resolve TYPEDID(VT_UI4, 0x0003)
// ???: DEF_IDENTIFIER( OID_WRAP_BODY_TEXT, TYPEDID(VT_BOOL, 0x0004) ) // ERR: Cannot resolve TYPEDID(VT_BOOL, 0x0004)
// ???: DEF_IDENTIFIER( OID_CBMAX_BODY_LINE, TYPEDID(VT_UI4, 0x0005) ) // ERR: Cannot resolve TYPEDID(VT_UI4, 0x0005)
// ???: DEF_IDENTIFIER( OID_TRANSMIT_BODY_ENCODING, TYPEDID(VT_UI4, 0x0006) ) // ERR: Cannot resolve TYPEDID(VT_UI4, 0x0006)
// ???: DEF_IDENTIFIER( OID_TRANSMIT_TEXT_ENCODING, TYPEDID(VT_UI4, 0x0007) ) // ERR: Cannot resolve TYPEDID(VT_UI4, 0x0007)
// ???: DEF_IDENTIFIER( OID_GENERATE_MESSAGE_ID, TYPEDID(VT_BOOL, 0x0008) ) // ERR: Cannot resolve TYPEDID(VT_BOOL, 0x0008)
// ???: DEF_IDENTIFIER( OID_HIDE_TNEF_ATTACHMENTS, TYPEDID(VT_BOOL, 0X000E) ) // ERR: Cannot resolve TYPEDID(VT_BOOL, 0X000E)
// ???: DEF_IDENTIFIER( OID_CLEANUP_TREE_ON_SAVE, TYPEDID(VT_BOOL, 0X000F) ) // ERR: Cannot resolve TYPEDID(VT_BOOL, 0X000F)
// ???: DEF_IDENTIFIER( OID_BODY_REMOVE_NBSP, TYPEDID(VT_BOOL, 0x0014) ) // ERR: Cannot resolve TYPEDID(VT_BOOL, 0x0014)
// ???: DEF_IDENTIFIER( OID_DEFAULT_BODY_CHARSET, TYPEDID(VT_UI4, 0x0015) ) // ERR: Cannot resolve TYPEDID(VT_UI4, 0x0015)
// ???: DEF_IDENTIFIER( OID_DEFAULT_HEADER_CHARSET, TYPEDID(VT_UI4, 0x0016) ) // ERR: Cannot resolve TYPEDID(VT_UI4, 0x0016)
// ???: DEF_IDENTIFIER( OID_DBCS_ESCAPE_IS_8BIT, TYPEDID(VT_BOOL, 0x0017) ) // ERR: Cannot resolve TYPEDID(VT_BOOL, 0x0017)
// ???: DEF_IDENTIFIER( OID_SECURITY_TYPE, TYPEDID(VT_UI4, 0x0018) ) // ERR: Cannot resolve TYPEDID(VT_UI4, 0x0018)
// ???: DEF_IDENTIFIER( OID_SECURITY_ALG_HASH, TYPEDID(VT_BLOB, 0x0019) ) // ERR: Cannot resolve TYPEDID(VT_BLOB, 0x0019)
// ???: DEF_IDENTIFIER( OID_SECURITY_ALG_BULK, TYPEDID(VT_BLOB, 0x0020) ) // ERR: Cannot resolve TYPEDID(VT_BLOB, 0x0020)
// ???: DEF_IDENTIFIER( OID_SECURITY_CERT_SIGNING, TYPEDID(VT_UI4, 0x0021) ) // ERR: Cannot resolve TYPEDID(VT_UI4, 0x0021)
// ???: DEF_IDENTIFIER( OID_SECURITY_CERT_DECRYPTION, TYPEDID(VT_UI4, 0x0022) ) // ERR: Cannot resolve TYPEDID(VT_UI4, 0x0022)
// ???: DEF_IDENTIFIER( OID_SECURITY_RG_CERT_ENCRYPT, TYPEDID(VT_VECTOR | VT_UI4, 0x0023) ) // ERR: Cannot resolve TYPEDID(VT_VECTOR | VT_UI4, 0x0023)
// ???: DEF_IDENTIFIER( OID_SECURITY_HCERTSTORE, TYPEDID(VT_UI4, 0x0024) ) // ERR: Cannot resolve TYPEDID(VT_UI4, 0x0024)
// ???: DEF_IDENTIFIER( OID_SECURITY_RG_CERT_BAG, TYPEDID(VT_VECTOR | VT_UI4, 0x0025) ) // ERR: Cannot resolve TYPEDID(VT_VECTOR | VT_UI4, 0x0025)
// ???: DEF_IDENTIFIER( OID_SECURITY_CRL, TYPEDID(VT_BLOB, 0x0026) ) // ERR: Cannot resolve TYPEDID(VT_BLOB, 0x0026)
// ???: DEF_IDENTIFIER( OID_SECURITY_SEARCHSTORES, TYPEDID(VT_VECTOR | VT_UI4, 0x0027) ) // ERR: Cannot resolve TYPEDID(VT_VECTOR | VT_UI4, 0x0027)
// ???: DEF_IDENTIFIER( OID_SECURITY_RG_IASN, TYPEDID(VT_VECTOR | VT_UI4, 0x0028) ) // ERR: Cannot resolve TYPEDID(VT_VECTOR | VT_UI4, 0x0028)
// ???: DEF_IDENTIFIER( OID_SECURITY_SYMCAPS, TYPEDID(VT_BLOB, 0x0029) ) // ERR: Cannot resolve TYPEDID(VT_BLOB, 0x0029)
// ???: DEF_IDENTIFIER( OID_SECURITY_AUTHATTR, TYPEDID(VT_BLOB, 0x002A) ) // ERR: Cannot resolve TYPEDID(VT_BLOB, 0x002A)
// ???: DEF_IDENTIFIER( OID_SECURITY_UNAUTHATTR, TYPEDID(VT_BLOB, 0x002B) ) // ERR: Cannot resolve TYPEDID(VT_BLOB, 0x002B)
// ???: DEF_IDENTIFIER( OID_SECURITY_SIGNTIME, TYPEDID(VT_FILETIME,0x002C) ) // ERR: Cannot resolve TYPEDID(VT_FILETIME,0x002C)
// ???: DEF_IDENTIFIER( OID_SECURITY_USER_VALIDITY, TYPEDID(VT_UI4, 0x002D) ) // ERR: Cannot resolve TYPEDID(VT_UI4, 0x002D)
// ???: DEF_IDENTIFIER( OID_SECURITY_RO_MSG_VALIDITY, TYPEDID(VT_UI4, 0x002E) ) // ERR: Cannot resolve TYPEDID(VT_UI4, 0x002E)
// ???: DEF_IDENTIFIER( OID_SECURITY_HCRYPTPROV, TYPEDID(VT_UI4, 0x002F) ) // ERR: Cannot resolve TYPEDID(VT_UI4, 0x002F)
// ???: DEF_IDENTIFIER( OID_SECURITY_ENCODE_FLAGS, TYPEDID(VT_UI4, 0x0030) ) // ERR: Cannot resolve TYPEDID(VT_UI4, 0x0030)
// ???: DEF_IDENTIFIER( OID_SECURITY_CERT_INCLUDED, TYPEDID(VT_BOOL, 0x0031) ) // ERR: Cannot resolve TYPEDID(VT_BOOL, 0x0031)
// ???: DEF_IDENTIFIER( OID_SECURITY_HWND_OWNER, TYPEDID(VT_UI4, 0x0032) ) // ERR: Cannot resolve TYPEDID(VT_UI4, 0x0032)
// ???: DEF_IDENTIFIER( OID_SECURITY_REQUESTED_CTE, TYPEDID(VT_I4, 0x0033) ) // ERR: Cannot resolve TYPEDID(VT_I4, 0x0033)
// ???: DEF_IDENTIFIER( OID_NO_DEFAULT_CNTTYPE, TYPEDID(VT_BOOL, 0x0034) ) // ERR: Cannot resolve TYPEDID(VT_BOOL, 0x0034)
// ???: DEF_IDENTIFIER( OID_XMIT_PLAIN_TEXT_ENCODING, TYPEDID(VT_UI4, 0x0035) ) // ERR: Cannot resolve TYPEDID(VT_UI4, 0x0035)
// ???: DEF_IDENTIFIER( OID_XMIT_HTML_TEXT_ENCODING, TYPEDID(VT_UI4, 0x0036) ) // ERR: Cannot resolve TYPEDID(VT_UI4, 0x0036)
// ???: DEF_IDENTIFIER( OID_HEADER_RELOAD_TYPE, TYPEDID(VT_UI4, 0x0037) ) // ERR: Cannot resolve TYPEDID(VT_UI4, 0x0037)
// ???: DEF_IDENTIFIER( OID_CAN_INLINE_TEXT_BODIES, TYPEDID(VT_BOOL, 0x0038) ) // ERR: Cannot resolve TYPEDID(VT_BOOL, 0x0038)
// ???: DEF_IDENTIFIER( OID_SHOW_MACBINARY, TYPEDID(VT_BOOL, 0x0039) ) // ERR: Cannot resolve TYPEDID(VT_BOOL, 0x0039)

