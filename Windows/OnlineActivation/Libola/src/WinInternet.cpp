/* Generated by Together */

#include "stdafx.h"
#include "../include/ActivationErrors.h"
#include "WinInternet.h"

namespace OnlineActivation
{
///////////////////////////////////////////////////////////////////////////////
InternetHandle WinInternet::Open
(
	const char* szAgent,
	DWORD dwAccessType,
	const char* szProxy,
	const char* szProxyBypass,
	DWORD dwFlags
)
{
	HINTERNET hi = InternetOpenA(szAgent, dwAccessType, szProxy, szProxyBypass, dwFlags);
	// report error
	if (hi == NULL)
		throw SystemError(GetLastError());
	// compose root handle
	return InternetHandle(hi);
}
///////////////////////////////////////////////////////////////////////////////
InternetHandle WinInternet::Connect
(
	InternetHandle& hInternet,
	const char* szServerName,
	INTERNET_PORT nServerPort,
	const char* szUserName,
	const char* szPassword,
	DWORD dwService,
	DWORD dwFlags,
	DWORD_PTR dwContext
)
{
	HINTERNET hi = InternetConnectA
	(
		hInternet, 
		szServerName, 
		nServerPort, 
		szUserName, 
		szPassword, 
		dwService, 
		dwFlags, 
		dwContext
	);
	// report error
	if (hi == NULL)
		throw SystemError(GetLastError());
	// compose connection handle
	return InternetHandle(hInternet, hi);
}
///////////////////////////////////////////////////////////////////////////////
InternetHandle WinInternet::OpenRequest
(
	InternetHandle& hConnect,
	const char* szVerb,
	const char* szObjectName,
	const char* szVersion,
	const char* szReferrer,
	const char** pszAcceptTypes,
	DWORD dwFlags,
	DWORD_PTR dwContext
)
{
	HINTERNET hi = HttpOpenRequestA
	(
		hConnect,
		szVerb,
		szObjectName,
		szVersion,
		szReferrer,
		pszAcceptTypes,
		dwFlags,
		dwContext
	);
	// report error
	if (hi == NULL)
		throw SystemError(GetLastError());
	// compose request handle
	return InternetHandle(hConnect, hi);
}
///////////////////////////////////////////////////////////////////////////////
void WinInternet::AddRequestHeaders
(
	InternetHandle& hRequest,
	const char* szHeaders,
	DWORD dwHeadersLength,
	DWORD dwModifiers
)
{
	if (!HttpAddRequestHeadersA(hRequest, szHeaders, dwHeadersLength, dwModifiers))
		throw SystemError(GetLastError());
}
///////////////////////////////////////////////////////////////////////////////
void WinInternet::SendRequest
(
	InternetHandle& hRequest,
	const char* szHeaders,
	DWORD dwHeadersLength,
	LPVOID lpOptional,
	DWORD dwOptionalLength
)
{
	if (!HttpSendRequestA(hRequest, szHeaders, dwHeadersLength, lpOptional, dwOptionalLength))
	{
		// ignore certificate revocation problems TT#23975
		if (GetLastError() == ERROR_INTERNET_SEC_CERT_REV_FAILED)
		{
			DWORD dwSecflg;
			DWORD dwSecflgLen = sizeof(dwSecflg);
			if (!InternetQueryOptionA(hRequest, INTERNET_OPTION_SECURITY_FLAGS, &dwSecflg, &dwSecflgLen))
				throw SystemError(GetLastError());
			dwSecflg |= SECURITY_FLAG_IGNORE_REVOCATION;
			if (!InternetSetOptionA(hRequest, INTERNET_OPTION_SECURITY_FLAGS, &dwSecflg, sizeof(dwSecflg)))
				throw SystemError(GetLastError());
			// send the request again
			if (!HttpSendRequestA(hRequest, szHeaders, dwHeadersLength, lpOptional, dwOptionalLength))
				throw SystemError(GetLastError());
		}
		else
		{
			throw SystemError(GetLastError());
		}
	}
}
///////////////////////////////////////////////////////////////////////////////
void WinInternet::AbortRequest(InternetHandle& hRequest)
{
	DWORD dwHandleType = 0;
	DWORD dwHandleTypeLength = sizeof(dwHandleType);
	// query handle type
	InternetQueryOptionA(hRequest, INTERNET_OPTION_HANDLE_TYPE, &dwHandleType, &dwHandleTypeLength);
	// cancel only request handles
	if (dwHandleType != INTERNET_HANDLE_TYPE_HTTP_REQUEST)
		throw SystemError(ERROR_INVALID_HANDLE);
	// close internet handle
	hRequest.Close();
}
///////////////////////////////////////////////////////////////////////////////
void WinInternet::SetOption
(
	InternetHandle& hInternet,
	DWORD dwOption,
	LPCVOID lpBuffer,
	DWORD dwBufferLength
)
{
	if (!InternetSetOptionA(hInternet, dwOption, const_cast<LPVOID>(lpBuffer), dwBufferLength))
		throw SystemError(GetLastError());
}
///////////////////////////////////////////////////////////////////////////////
DWORD WinInternet::QueryStatusCode(InternetHandle& hRequest)
{
	DWORD dwStatusCode = 0;
	DWORD dwStatusCodeLength = sizeof(dwStatusCode);
	BOOL bResult = HttpQueryInfoA
	(
		hRequest, 
		HTTP_QUERY_STATUS_CODE | HTTP_QUERY_FLAG_NUMBER,
		&dwStatusCode, 
		&dwStatusCodeLength,
		NULL
	);
	if (!bResult)
		throw SystemError(GetLastError());
	return dwStatusCode;
}
///////////////////////////////////////////////////////////////////////////////
BOOL WinInternet::QueryContentType
(
	InternetHandle& hRequest, 
	char* szContentType,
	LPDWORD pdwContentTypeLength
)
{
	return HttpQueryInfoA
	(
		hRequest, 
		HTTP_QUERY_CONTENT_TYPE, 
		szContentType, 
		pdwContentTypeLength, 
		NULL
	);
}
///////////////////////////////////////////////////////////////////////////////
DWORD WinInternet::ReadData
(
	InternetHandle& hFile,
	LPVOID lpBuffer,
	DWORD dwNumberOfBytesToRead
)
{
	DWORD dwNumberOfBytesRead = 0;
	if (!InternetReadFile(hFile, lpBuffer, dwNumberOfBytesToRead, &dwNumberOfBytesRead))
		throw SystemError(GetLastError());
	return dwNumberOfBytesRead;
}
///////////////////////////////////////////////////////////////////////////////
INTERNET_STATUS_CALLBACK WinInternet::SetStatusCallback
(
	InternetHandle& hInternet,
	INTERNET_STATUS_CALLBACK lpfnInternetCallback
)
{
	INTERNET_STATUS_CALLBACK lpfnPreviousCallback = 
		InternetSetStatusCallbackA(hInternet, lpfnInternetCallback);
	if (lpfnPreviousCallback == INTERNET_INVALID_STATUS_CALLBACK)
		throw SystemError(GetLastError());
	return lpfnPreviousCallback;
}
///////////////////////////////////////////////////////////////////////////////
}
