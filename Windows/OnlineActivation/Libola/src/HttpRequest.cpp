/* Generated by Together */

#include "stdafx.h"
#include <sstream>
#include <memory>
#include "WinInternet.h"
#include "InternetObserver.h"
#include "HttpResponse.h"
#include "HttpRequest.h"
#include "../include/ActivationErrors.h"

namespace OnlineActivation
{
///////////////////////////////////////////////////////////////////////////////
HttpRequest::HttpRequest
(
	InternetHandle& hConnection,
	VerbType nVerb,
	const char* lpszResource,
	DWORD dwFlags
)
	: m_pObserver(NULL)
{
	static const char* acceptTypes[] = 
	{
		"text/*",
		"application/*",
		0
	};
	static const char* verbTypes[] =
	{
		0,
		"GET",
		"POST",
		"PUT"
	};
		
	// open request handle
	m_hRequest = WinInternet::OpenRequest
	(
		hConnection, 
		verbTypes[nVerb], 
		lpszResource, 
		NULL, 
		NULL, 
		acceptTypes, 
		dwFlags, 
		reinterpret_cast<DWORD_PTR>(this)
	);
	// set callback function
	WinInternet::SetStatusCallback(m_hRequest, StatusCallback);
}
///////////////////////////////////////////////////////////////////////////////
HttpRequest::~HttpRequest()
{
	try
	{
		// reset callback function
		WinInternet::SetStatusCallback(m_hRequest, NULL);
	}
	catch (const ActivationError&)
	{
		// ignore errors in destructor
	}
}
///////////////////////////////////////////////////////////////////////////////
boost::shared_ptr<HttpResponse> HttpRequest::Send
(
	const char* szHeaders, 
	size_t nHeadersLength, 
	const void* pData, 
	size_t nDataLength
)
{
	// prepare content length
	std::ostringstream os;
	os << TEXT("Content-Length: ") << nDataLength;
	const std::string& sContentLength = os.str();
	// set proper content length
	WinInternet::AddRequestHeaders
	(
		m_hRequest, 
		sContentLength.c_str(), 
		sContentLength.length(), 
		HTTP_ADDREQ_FLAG_ADD | HTTP_ADDREQ_FLAG_REPLACE
	);
	// send request
	WinInternet::SendRequest
	(
		m_hRequest, 
		szHeaders,
		nHeadersLength,
		const_cast<void*>(pData),
		nDataLength
	);
	return boost::shared_ptr<HttpResponse>(new HttpResponse(m_hRequest));
}
///////////////////////////////////////////////////////////////////////////////
void HttpRequest::SetProxyAuth(const char* szUserName, const char* szPassword)
{
	WinInternet::SetOption
	(
		m_hRequest, 
		INTERNET_OPTION_PROXY_USERNAME, 
		szUserName,
		strlen(szUserName)
	);
	WinInternet::SetOption
	(
		m_hRequest, 
		INTERNET_OPTION_PROXY_PASSWORD, 
		szPassword,
		strlen(szPassword)
	);
}
///////////////////////////////////////////////////////////////////////////////
void HttpRequest::SetServerAuth(const char* szUserName, const char* szPassword)
{
	WinInternet::SetOption
	(
		m_hRequest, 
		INTERNET_OPTION_USERNAME, 
		szUserName,
		strlen(szUserName) + 1
	);
	WinInternet::SetOption
	(
		m_hRequest, 
		INTERNET_OPTION_PASSWORD, 
		szPassword,
		strlen(szPassword) + 1
	);
}
///////////////////////////////////////////////////////////////////////////////
void HttpRequest::SetObserver(InternetObserver* pObserver)
{
	// store pointer to existing observer
	m_pObserver = pObserver;
}
///////////////////////////////////////////////////////////////////////////////
void HttpRequest::Abort()
{
	WinInternet::AbortRequest(m_hRequest);
}
///////////////////////////////////////////////////////////////////////////////
void HttpRequest::StatusCallback
(
	HINTERNET hInternet,
	DWORD_PTR dwContext,
	DWORD dwInternetStatus,
	LPVOID lpvStatusInformation,
	DWORD dwStatusInformationLength
)
{
	HttpRequest* pThis = reinterpret_cast<HttpRequest*>(dwContext);
	// check invariant
	_ASSERTE(pThis && "Context value must not be NULL");

	// notify observer when set
	if (InternetObserver* pObserver = pThis->m_pObserver)
	{
		// filter notification statuses
		switch(dwInternetStatus)
		{
		case INTERNET_STATUS_RESOLVING_NAME:
		case INTERNET_STATUS_NAME_RESOLVED:
		case INTERNET_STATUS_CONNECTING_TO_SERVER:
		case INTERNET_STATUS_CONNECTED_TO_SERVER:
		case INTERNET_STATUS_SENDING_REQUEST:
		case INTERNET_STATUS_REQUEST_SENT:
		case INTERNET_STATUS_RECEIVING_RESPONSE:
		case INTERNET_STATUS_RESPONSE_RECEIVED:
		case INTERNET_STATUS_CLOSING_CONNECTION:
		case INTERNET_STATUS_CONNECTION_CLOSED:
		case INTERNET_STATUS_DETECTING_PROXY:
		case INTERNET_STATUS_REDIRECT:
		case INTERNET_STATUS_INTERMEDIATE_RESPONSE:
		case INTERNET_STATUS_STATE_CHANGE:
		case INTERNET_STATUS_COOKIE_SENT:
		case INTERNET_STATUS_COOKIE_RECEIVED:
			pObserver->Update(dwInternetStatus, lpvStatusInformation, dwStatusInformationLength);
			break;
		}
	}
}
///////////////////////////////////////////////////////////////////////////////
} // namespace OnlineActivation
