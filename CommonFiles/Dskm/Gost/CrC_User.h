#ifndef DWORD
typedef unsigned char      BYTE;
typedef unsigned short     WORD;
#ifdef __arch64__
typedef unsigned int       DWORD;
typedef unsigned long      QWORD;
#else
#ifdef __x86_64__
typedef unsigned int       DWORD;
typedef unsigned long      QWORD;
#else
typedef unsigned long      DWORD;
//typedef unsigned long long QWORD;
#if defined (__unix__)
typedef unsigned long long int 		QWORD;
#elif (defined (__MC68K__))	//Palm OS Motarolla 68k Compiller
typedef unsigned long QWORD;
#else
typedef unsigned __int64	QWORD;
#endif
#endif
#endif
typedef          short int SINT;
typedef          long  int LINT;
#endif

//   WS - длина в байтах слова для параметров подписи.
//        Слово для секретного ключа шифрования всегда 4 байта.
//   NK - размер ключа шифрования БЕЗ МАСКИ в 4-байтовых словах.
//   NQ - размер поля Q подписи Р34.10-1994 в словах длины WS.
//   NP - МАКСИМАЛЬНыЙ размер поля P подписи Р34.10-1994 в словах длины WS.
// CuNQ - размер поля Q подписи Р34.10-2001 в словах длины WS.
// CuNP - МАКСИМАЛЬНыЙ размер поля P подписи Р34.10-2001 в словах длины WS.
//        Параметры, исчисляемые по модулям P и Q, размещаются в полях
//        размеров соответствующих модулей.

#define   LWS   4
#define   LNK   8
#define   LNQ   8
#define   LNP  64
#define LCuNQ   8
#define LCuNP   8

#include "CrC_Kernel.h"

#ifndef NULL
#define NULL 0
#endif

/*КОДы*ВОЗВРАТА************************************************************BEG*/
#define RET_OK                0
#define RET_CONTEXTNOTCLEAR   1
#define RET_CONTEXTNOTREADY   2
#define RET_KEYNOTPRESENT     3
#define RET_KEYALREADYPRESENT 4
#define RET_INCORRECTSIGN     5
#define RET_ZERO_R            6
#define RET_ZERO_S            7
#define RET_BAD_R             8
#define RET_BAD_S             9
#define RET_FILE_OPEN        10
#define RET_FILE_SEEK        11
#define RET_FILE_READ        12
#define RET_FILE_CLOSE       13
#define RET_INCORRECTCONTEXT 14
#define RET_INVALIDPARAMETER 15
#define RET_INCORRECTSIZE    16

#define GOST_XXXXX_Marker_Mask        0xFFFFFFF0
#define R34_11_1994_Marker            0x9ABCDEF4
#define R34_10_2001_Marker            0x9ABCDEF7

/*ФЛАГИ*КОНТЕКСТА*РЕЖИМОВ*ГОСТ*Р34-10**************************************BEG*/
#define R34_10_2001_CONTEXT    1
#define R34_10_2001_SECRETKEY  2
#define R34_10_2001_PUBLICKEY  4

/*КОНТЕКСТы*РЕЖИМОВ********************************************************BEG*/
/*ГОСТ*Р34-11******************************************************************/
/*Выработка хэш-вектора.......................................................*/
struct R34_11_1994
       {
       DWORD  Mark         ;                      /* Context Marker.          */
        BYTE  Feed  [LNQ*4];                      /* Неполный блок текста.    */
        BYTE  Digest[LNQ*4];                      /* Текущий хэш-вектор.      */
        BYTE  SumVec[LNQ*4];                      /* Текущая сумма блоков.    */
         int  MsgLength    ;                      /* Счетчик длины сообщения. */
         int  BlockOffs    ;                      /* Тек. смещение в блоке.   */
         int  IsReady      ;                      /* Индикатор ...Init().     */
       struct RND_State *RS;                      /* Состояние ГСЧ.           */
       struct COM_State *PE;                      /* Подстановки.             */
       };
/*ГОСТ*Р34-10******************************************************************/
/*Вычисление/проверка цифровой подписи ГОСТ Р34-10-2001.......................*/
/* - PG_ есть коэффициент перехода к Montgomery Domain по mod P для разряд-   */
/*   ности P_SIZE*8:            [X]P = MontMult(X,PG_)(mod P).                */
struct LR34_10_2001
       {
       DWORD  Mark              ;  		  /* Context Marker.          */
       DWORD  SecretKey[LCuNQ*2];                 /* Секр. маск. ключ подписи.*/
struct LPoint PublicKey         ;                 /* Откр.       ключ подписи.*/
       DWORD  a_       [LCuNP  ];                 /* Параметр a кривой. (HBO) */
       DWORD  b_       [LCuNP  ];                 /* Параметр b кривой. (HBO) */
       DWORD  P_       [LCuNP+1];                 /* Простое      P.    (HBO) */
       DWORD  PG_      [LCuNP  ];                 /* 2^(2nP)(mod P).    (HBO) */
       DWORD  Q_       [LCuNQ+1];                 /* Простое      Q.    (HBO) */
       DWORD  QG_      [LCuNQ  ];                 /* 2^(2nQ)(mod Q).    (HBO) */
       DWORD  QP_      [LCuNP+1];                 /* Простое Q длины CuNP.    */
       DWORD  OQ_      [LCuNQ  ];                 /* [1]Q длины CuNQ.   (HBO) */
       DWORD  OP_      [LCuNP  ];                 /* [1]P длины CuNP.   (HBO) */
       DWORD  OQP_     [LCuNP  ];                 /* [1]Q длины CuNP.   (HBO) */
struct LPoint A_                ;                 /* Точка A кривой.    (HBO) */
struct LPoint AP_               ;                 /* Приведённая [A_]P. (HBO) */
       DWORD  Half     [LCuNP  ];                 /* [1/2]P.            (HBO) */
         int  P_Size            ;                 /* Длина простого P (байт). */
         int  Q_Size            ;                 /* Длина простого Q (байт). */
         int  IsReady           ;                 /* Флаги инициализации.     */
       struct RND_State *RS     ;                 /* Состояние ГСЧ.           */
       };
/*КОНТЕКСТы*РЕЖИМОВ********************************************************END*/

/*ПРОТОТИПы*ПОЛЬЗОВАТЕЛЬСКИХ*ФУНКЦИЙ***************************************BEG*/

/******************************************************************************/
/*ГОСТ.Р34-11.................................................................*/
/******************************************************************************/
/******************************************************************************/
/*Выработка.хэш-вектора.......................................................*/
/******************************************************************************/

int CrypC_R34_11_1994_init(struct R34_11_1994 *Context, struct COM_State *PE, struct RND_State *State, void *Sync);
/******************************************************************************/
/*                        Инициализация контекста                             */
/*                         выработки хэш-вектора                              */
/******************************************************************************/
/* Входные параметры:                                                         */
/* - Указатель на буфер контекста: *Context (структура).                      */
/* - Указатель на буфер начального значения хэш-вектора *Sync (NQ*2 байта).   */
/*             Если указатель равен 0, то принимается нулевое заполнение.     */
/* Выход:                                                                     */
/* - Контекст, готовый к выработке хэш-вектора.                               */
/* Коды возврата:                                                             */
/* - RET_OK                                                                   */
/* - RET_INCORRECTCONTEXT  - передан инициализированный контекст др. режима.  */
/* - RET_CONTEXTNOTCLEAR                                                      */
/* - RET_INVALIDPARAMETER  - нулевой указатель на обязательный параметр.      */
/******************************************************************************/

int CrypC_R34_11_1994_update(struct R34_11_1994 *Context, void *Buff, LINT LenBuff);
/******************************************************************************/
/*           Модификация хэш-вектора сообщения фрагментом сообщения           */
/******************************************************************************/
/* Входные параметры:                                                         */
/* - Указатель на буфер контекста: *Context (структура).                      */
/* - Указатель на буфер текста для хэширования *Buff.                         */
/* - Длина данных в буфере *Buf в байтах LenBuff.                             */
/* Выход:                                                                     */
/* - Модифицированное состояние контекста.                                    */
/* Коды возврата:                                                             */
/* - RET_OK                                                                   */
/* - RET_CONTEXTNOTREADY                                                      */
/* - RET_INVALIDPARAMETER  - нулевой указатель на обязательный параметр.      */
/******************************************************************************/

int CrypC_R34_11_1994_final(struct R34_11_1994 *Context, void *Digest);
/******************************************************************************/
/*           Завершение выработки имитовектора сообщения и выдача его         */
/*                           вызывающей программе                             */
/******************************************************************************/
/* Входные параметры:                                                         */
/* - Указатель на буфер контекста: *Context (структура).                      */
/* - Указатель на буфер для передачи хэш-векотра *Digest.                     */
/* Выход:                                                                     */
/* - Буфер передачи хэш-вектора содержит хэш-вектор сообщения.                */
/* Коды возврата:                                                             */
/* - RET_OK                                                                   */
/* - RET_CONTEXTNOTREADY                                                      */
/* - RET_INVALIDPARAMETER  - нулевой указатель на обязательный параметр.      */
/******************************************************************************/

int CrypC_R34_11_1994_clear(struct R34_11_1994 *Context);
/******************************************************************************/
/*                           Очистка контекста                                */
/*                         выработки хэш-вектора                              */
/******************************************************************************/
/* Входные параметры:                                                         */
/* - Указатель на буфер контекста: *Context (структура).                      */
/* Выход:                                                                     */
/* - Очищенный буфер контекста.                                               */
/* Коды возврата:                                                             */
/* - RET_OK                                                                   */
/* - RET_INCORRECTCONTEXT  - передан инициализированный контекст др. режима.  */
/* - RET_INVALIDPARAMETER  - нулевой указатель на обязательный параметр.      */
/******************************************************************************/

/******************************************************************************/
/*ГОСТ.Р34-10.................................................................*/
/******************************************************************************/
/******************************************************************************/
/*Выработка/проверка цифровой подписи.........................................*/
/******************************************************************************/

int CrypC_LR34_10_2001_set_parms(struct   LR34_10_2001 *Context,
                                 struct   RND_State  *State,
                                 void   *_R34_10_2001_P, int P_Size,
                                 void   *_R34_10_2001_Q, int Q_Size,
                                 void   *_R34_10_2001_a,
                                 void   *_R34_10_2001_b,
                          struct LPoint * R34_10_2001_A
                                );
/******************************************************************************/
/*                 Установка параметров цифровой подписи                      */
/*             в контекст выработки/проверки цифровой подписи                 */
/*                     ("инициализация" контекста)                            */
/*                            ГОСТ Р3410-2001                                 */
/******************************************************************************/
/* Входные параметры:                                                         */
/* - Указатель на буфер контекста: *Context (структура).                      */
/* - Указатель на буфер длины P_Size   простого порядка P: *GOST_C3411_P.     */
/* - Указатель на буфер длины Q_Size   простого порядка Q: *R34_10_2001_Q.    */
/* - Указатель на буфер длины *P_Size  параметра a кривой: *R34_10_2001_a.    */
/* - Указатель на буфер длины *P_Size  параметра b кривой: *R34_10_2001_b.    */
/* - Указатель на буфер структуры          точки A кривой: *R34_10_2001_A.    */
/*   Если какой-либо указатель равен 0, то остаются параметры по умолчанию    */
/*   для длины P_Size и выставляется флаг готовности контекста. Остальные     */
/*   параметры игнорируются.                                                  */
/* Выход:                                                                     */
/* - Контекст, готовый к установке секретного и/или открытого ключа подписи.  */
/* Коды возврата:                                                             */
/* - RET_OK                - нормальное завершение.                           */
/* - RET_INCORRECTCONTEXT  - передан инициализированный контекст др. режима.  */
/* - RET_CONTEXTNOTCLEAR   - контекст инициализирован ранее.                  */
/* - RET_INVALIDPARAMETER  - нулевой указатель на обязательный параметр.      */
/******************************************************************************/

int CrypC_LR34_10_2001_gen_secret_key(struct LR34_10_2001 *Context);
/******************************************************************************/
/*            Выработка и установка случайного секретного ключа               */
/*                  в контекст обработки цифровой подписи                     */
/******************************************************************************/
/* Входные параметры:                                                         */
/* - Указатель на буфер контекста: *Context (структура).                      */
/* Выход:                                                                     */
/* - Контекст, готовый к вычислению цифровой подписи.                         */
/* Коды возврата:                                                             */
/* - RET_OK                - нормальное завершение.                           */
/* - RET_CONTEXTNOREADY    - не инициализированы параметры подписи.           */
/* - RET_KEYALREADYPRESENT - уже установлен секретный ключ.                   */
/* - RET_INVALIDPARAMETER  - нулевой указатель на обязательный параметр.      */
/******************************************************************************/

int CrypC_LR34_10_2001_gen_public_key(struct LR34_10_2001 *Context);
/******************************************************************************/
/*                  Вычисление и установка открытого ключа                    */
/*                  в контекст обработки цифровой подписи                     */
/*                    с установленным секретным ключом                        */
/******************************************************************************/
/* Входные параметры:                                                         */
/* - Указатель на буфер контекста: *Context (структура).                      */
/* Выход:                                                                     */
/* - Контекст, готовый к вычислению и проверке цифровой подписи.              */
/* Коды возврата:                                                             */
/* - RET_OK                - нормальное завершение.                           */
/* - RET_CONTEXTNOREADY    - не инициализированы параметры подписи.           */
/* - RET_KEYALREADYPRESENT - уже установлен открытый ключ.                    */
/* - RET_KEYNOTPRESENT     - не установлен секретный ключ.                    */
/* - RET_INVALIDPARAMETER  - нулевой указатель на обязательный параметр.      */
/******************************************************************************/

int CrypC_LR34_10_2001_get_secret_key(struct LR34_10_2001 *Context, void *SecretKey, int *KeySize);
/******************************************************************************/
/*       Чтение секретного ключа из контекста обработки цифровой подписи      */
/******************************************************************************/
/* Входные параметры:                                                         */
/* - Указатель на буфер контекста: *Context (структура).                      */
/* - Указатель на буфер немаскированного секретного ключа: *SecretKey.        */
/* - Указатель на буфер размера ключа: *KeySize.                              */
/* Выход:                                                                     */
/* - Немаскированный Секретный ключ в буфере SecretKey, размер ключа в байтах */
/*   - в буфере KeySize.                                                      */
/*   Если SecretKey == 0, то возвращается только длина ключа.                 */
/* Коды возврата:                                                             */
/* - RET_OK                - нормальное завершение.                           */
/* - RET_CONTEXTNOREADY    - не инициализированы параметры подписи.           */
/* - RET_KEYNOTPRESENT     - не установлен секретный ключ.                    */
/* - RET_INVALIDPARAMETER  - нулевой указатель на обязательный параметр.      */
/******************************************************************************/

int CrypC_LR34_10_2001_get_public_key(struct LR34_10_2001 *Context, struct LPoint *PublicKey, int *KeySize);
/******************************************************************************/
/*       Чтение открытого ключа из контекста обработки цифровой подписи       */
/******************************************************************************/
/* Входные параметры:                                                         */
/* - Указатель на буфер контекста: *Context (структура).                      */
/* - Указатель на буфер открытого ключа: *PublicKey.                          */
/* - Указатель на буфер размера ключа: *KeySize.                              */
/* Выход:                                                                     */
/* - Открытый ключ в буфере PublicKey, размер ключа в байтах - в буфере       */
/*   KeySize (размер координаты точки кривой в байтах - для C3410).           */
/*   Если PublicKey == 0, то возвращается только длина ключа.                 */
/* Коды возврата:                                                             */
/* - RET_OK                - нормальное завершение.                           */
/* - RET_CONTEXTNOREADY    - не инициализированы параметры подписи.           */
/* - RET_KEYNOTPRESENT     - не установлен открытый ключ.                     */
/* - RET_INVALIDPARAMETER  - нулевой указатель на обязательный параметр.      */
/******************************************************************************/

int CrypC_LR34_10_2001_set_secret_key(struct LR34_10_2001 *Context, void *SecretKey);
/******************************************************************************/
/*      Установка секретного ключа в контекст обработки цифровой подписи      */
/******************************************************************************/
/* Входные параметры:                                                         */
/* - Указатель на буфер контекста: *Context (структура).                      */
/* - Указатель на буфер немаскированного секретного ключа: *SecretKey.        */
/* Выход:                                                                     */
/* - Контекст, готовый к вычислению цифровой подписи.                         */
/* Коды возврата:                                                             */
/* - RET_OK                - нормальное завершение.                           */
/* - RET_CONTEXTNOREADY    - не инициализированы параметры подписи.           */
/* - RET_KEYALREADYPRESENT - уже установлен секретный ключ.                   */
/* - RET_INVALIDPARAMETER  - нулевой указатель на обязательный параметр.      */
/******************************************************************************/

int CrypC_LR34_10_2001_set_public_key(struct LR34_10_2001 *Context, void *PublicKey);
/******************************************************************************/
/*      Установка открытого ключа в контекст обработки цифровой подписи       */
/******************************************************************************/
/* Входные параметры:                                                         */
/* - Указатель на буфер контекста: *Context (структура).                      */
/* - Указатель на буфер открытого ключа: *PublicKey.                          */
/* Выход:                                                                     */
/* - Контекст, готовый к проверке цифровой подписи.                           */
/* Коды возврата:                                                             */
/* - RET_OK                - нормальное завершение.                           */
/* - RET_CONTEXTNOREADY    - не инициализированы параметры подписи.           */
/* - RET_KEYALREADYPRESENT - уже установлен открытый ключ.                    */
/* - RET_INVALIDPARAMETER  - нулевой указатель на обязательный параметр.      */
/******************************************************************************/

int CrypC_LR34_10_2001_sign(struct LR34_10_2001 *Context, void *Digest, void *Signature);
/******************************************************************************/
/*           Выработка цифровой подписи заданного хэш-вектора                 */
/******************************************************************************/
/* Входные параметры:                                                         */
/* - Указатель на буфер контекста: *Context (структура).                      */
/* - Указатель на буфер хэш-вектора: Digest (NQ*2 байт).                      */
/* - Указатель на буфер для цифровой подписи: Signature (4*NQ байт).          */
/* Выход:                                                                     */
/* - Буфер подписи содержит ЭЦП переданного хэш-вектора.                      */
/* Коды возврата:                                                             */
/* - RET_OK                - нормальное завершение.                           */
/* - RET_CONTEXTNOREADY    - не инициализированы параметры подписи.           */
/* - RET_KEYNOTPRESENT     - не установлен секретный ключ.                    */
/* - RET_INVALIDPARAMETER  - нулевой указатель на обязательный параметр.      */
/******************************************************************************/

int CrypC_LR34_10_2001_verify(struct LR34_10_2001 *Context, void *Digest, void *Signature);
/******************************************************************************/
/*            Проверка цифровой подписи заданного хэш-вектора                 */
/******************************************************************************/
/* Входные параметры:                                                         */
/* - Указатель на буфер контекста: *Context (структура).                      */
/* - Указатель на буфер хэш-вектора: Digest (NQ*2 байт).                      */
/* - Указатель на буфер цифровой подписи: Signature (4*NQ байт).              */
/* Выход:                                                                     */
/* - Код возврата.                                                            */
/* Коды возврата:                                                             */
/* - RET_OK             - подпись проверена, результат проверки положительный.*/
/* - RET_INCORRECTSIGN  - подпись проверена, результат проверки отрицательный.*/
/* - RET_ZERO_R         - нулевое значение компонента ЭЦП r'.                 */
/* - RET_ZERO_S         - нулевое значение компонента ЭЦП s .                 */
/* - RET_BAD_R          - некорректное значение компонента ЭЦП r'.            */
/* - RET_BAD_S          - некорректное значение компонента ЭЦП s .            */
/* - RET_CONTEXTNOTREADY   - не инициализированы параметры подписи.           */
/* - RET_KEYNOTPRESENT     - не установлен открытый ключ.                     */
/* - RET_INVALIDPARAMETER  - нулевой указатель на обязательный параметр.      */
/******************************************************************************/

int CrypC_LR34_10_2001_clear_secret_key(struct LR34_10_2001 *Context);
/******************************************************************************/
/*                  Очистка секретного ключа в контексте                      */
/*                  выработки/проверки цифровой подписи                       */
/******************************************************************************/
/* Входные параметры:                                                         */
/* - Указатель на буфер контекста: *Context (структура).                      */
/* Выход:                                                                     */
/* - Очищенный буфер секретного ключа в контексте.                            */
/* Коды возврата:                                                             */
/* - RET_OK                - нормальное завершение.                           */
/* - RET_INVALIDPARAMETER  - нулевой указатель на обязательный параметр.      */
/******************************************************************************/

int CrypC_LR34_10_2001_clear_public_key(struct LR34_10_2001 *Context);
/******************************************************************************/
/*                  Очистка открытого ключа в контексте                       */
/*                  выработки/проверки цифровой подписи                       */
/******************************************************************************/
/* Входные параметры:                                                         */
/* - Указатель на буфер контекста: *Context (структура).                      */
/* Выход:                                                                     */
/* - Очищенный буфер открытого ключа в контексте.                             */
/* Коды возврата:                                                             */
/* - RET_OK                - нормальное завершение.                           */
/* - RET_INVALIDPARAMETER  - нулевой указатель на обязательный параметр.      */
/******************************************************************************/

int CrypC_LR34_10_2001_clear(struct LR34_10_2001 *Context);
/******************************************************************************/
/*                           Очистка контекста                                */
/*                  выработки/проверки цифровой подписи                       */
/******************************************************************************/
/* Входные параметры:                                                         */
/* - Указатель на буфер контекста: *Context (структура).                      */
/* Выход:                                                                     */
/* - Очищенный буфер контекста.                                               */
/* Коды возврата:                                                             */
/* - RET_OK                - нормальное завершение.                           */
/* - RET_INCORRECTCONTEXT  - передан инициализированный контекст др. режима.  */
/* - RET_INVALIDPARAMETER  - нулевой указатель на обязательный параметр.      */
/******************************************************************************/

int CrypC_LR34_10_2001_gen_mutual_key(struct LR34_10_2001 *Context,
                                       struct LPoint *PublicKey,
				       struct LPoint *MutualKey);
/******************************************************************************/
/*               Вычисление совместного ключа двух абонентов                  */
/*      с использованием скалярного умножения на эллиптической кривой,        */
/*            описанной в контексте обработки цифровой подписи                */
/*                            ГОСТ Р3410-2001                                 */
/* Входные параметры:                                                         */
/* - Указатель на буфер контекста: *Context (структура).                      */
/* - Указатель на буфер открытого ключа PublicKey удалённого абонента.        */
/* - Указатель на буфер совместного ключа MutualKey.                          */
/* Выход:                                                                     */
/* - Совместный ключ в роле MutualKey.                                        */
/* Коды возврата:                                                             */
/* - RET_OK                - нормальное завершение.                           */
/* - RET_INCORRECTCONTEXT  - передан инициализированный контекст др. режима.  */
/* - RET_CONTEXTNOREADY    - не инициализированы параметры подписи.           */
/* - RET_KEYNOTPRESENT     - не установлен секретный ключ.                    */
/* - RET_INVALIDPARAMETER  - нулевой указатель на обязательный параметр.      */
/******************************************************************************/

/******************************************************************************/
/*Diffie/Hellman..............................................................*/
/******************************************************************************/
/******************************************************************************/
/*Вычисление совместных ключей абонентов......................................*/
/******************************************************************************/

/******************************************************************************/
/*Функция.генерации.случайных.последовательностей.............................*/
/******************************************************************************/

int CrypC_Random_Fill( struct RND_State *State, void  *Field, int Bytes );
/******************************************************************************/
/*                 Заполнение буфера псевдослучайными данными.                */
/******************************************************************************/
/* Входные параметры:                                                         */
/* - Адрес буфера памяти Field.                                               */
/* - Размер буфера в байтах Bytes.                                            */
/* Выход:                                                                     */
/* - Буфер заполнен псевдослучайной последовательностью байт длины Bytes.     */
/* Коды возврата:                                                             */
/* - RET_OK                - нормальное завершение.                           */
/* - RET_INVALIDPARAMETER  - нулевой указатель на обязательный параметр.      */
/******************************************************************************/

/******************************************************************************/
/*Функции.проверки.процедур.ядра..............................................*/
/******************************************************************************/
/******************************************************************************/
/*Проверка функций шифрования и обработки ЭЦП.................................*/
/******************************************************************************/

/*ПРОТОТИПы*ПОЛЬЗОВАТЕЛЬСКИХ*ФУНКЦИЙ***************************************END*/
